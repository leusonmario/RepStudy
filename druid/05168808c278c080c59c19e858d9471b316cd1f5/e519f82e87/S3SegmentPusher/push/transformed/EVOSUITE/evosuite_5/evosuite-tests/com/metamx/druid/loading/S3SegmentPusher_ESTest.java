/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 10:39:35 GMT 2021
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.NoneShardSpec;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Vector;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.apache.hadoop.fs.LocalFileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.RawLocalFileSystem;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.annotate.JsonTypeInfo;
import org.codehaus.jackson.io.InputDecorator;
import org.codehaus.jackson.map.DeserializationConfig;
import org.codehaus.jackson.map.DeserializerProvider;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.SerializationConfig;
import org.codehaus.jackson.map.SerializerProvider;
import org.codehaus.jackson.map.deser.BeanDeserializerFactory;
import org.codehaus.jackson.map.deser.StdDeserializerProvider;
import org.codehaus.jackson.map.introspect.VisibilityChecker;
import org.codehaus.jackson.map.ser.StdSerializerProvider;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jets3t.service.StorageService;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.security.GSCredentials;
import org.jets3t.service.security.ProviderCredentials;
import org.joda.time.DateTime;
import org.joda.time.Duration;
import org.joda.time.Interval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(restS3Service0);
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      
      String string0 = "/";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(s3SegmentPusher0);
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(string0, string0, string0, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(singleDimensionShardSpec0);
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("/", singleDimensionShardSpec0.getEnd());
      assertEquals(2, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("/", singleDimensionShardSpec0.getDimension());
      assertEquals("/", singleDimensionShardSpec0.getStart());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(singleDimensionShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string0).when(dataSegment0).getVersion();
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(restS3Service0);
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(s3SegmentPusher0);
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals(0, noneShardSpec0.getPartitionNum());
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(noneShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string0).when(dataSegment0).getVersion();
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000098\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(restS3Service0);
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(s3SegmentPusher0);
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      
      Map<String, Object> map0 = null;
      Vector<String> vector0 = new Vector<String>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertFalse(vector0.contains(string0));
      
      DataSegment dataSegment0 = new DataSegment(string0, interval0, string0, map0, vector0, vector0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED, restS3Service0.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(10, vector0.capacity());
      assertEquals(0, vector0.size());
      assertEquals("", dataSegment0.getDataSource());
      assertEquals(0L, dataSegment0.getSize());
      assertEquals("_2014-02-14T17:21:21.320-03:00_2014-02-14T17:21:21.320-03:00__-1", dataSegment0.getIdentifier());
      assertEquals(2, (int)dataSegment0.getBinaryVersion());
      assertEquals("", dataSegment0.getVersion());
      assertFalse(vector0.contains(string0));
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      String string0 = "!`";
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      DataSegment dataSegment0 = null;
      long long0 = 608L;
      boolean boolean0 = mockFile0.setLastModified(long0);
      assertFalse(boolean0);
      assertTrue(mockFile0.isFile());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertFalse(mockFile0.isAbsolute());
      assertFalse(mockFile0.canWrite());
      assertEquals(0L, mockFile0.lastModified());
      assertEquals("!`", mockFile0.toString());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertFalse(mockFile0.exists());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("!`", mockFile0.getName());
      assertFalse(mockFile0.canRead());
      assertFalse(mockFile0.canExecute());
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "X`ha&ptmZ=JDnYzxx";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertEquals("X`ha&ptmZ=JDnYzxx", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("X`ha&ptmZ=JDnYzxx", gSCredentials0.getAccessKey());
      
      CredentialsProvider credentialsProvider0 = null;
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0, string0, credentialsProvider0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(restS3Service0);
      assertEquals("X`ha&ptmZ=JDnYzxx", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("X`ha&ptmZ=JDnYzxx", gSCredentials0.getAccessKey());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("X`ha&ptmZ=JDnYzxx", restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.WRITE_ENUMS_USING_INDEX;
      boolean boolean0 = false;
      ObjectMapper objectMapper1 = objectMapper0.configure(serializationConfig_Feature0, boolean0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      DeserializationConfig.Feature[] deserializationConfig_FeatureArray0 = new DeserializationConfig.Feature[1];
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.USE_BIG_DECIMAL_FOR_FLOATS;
      deserializationConfig_FeatureArray0[0] = deserializationConfig_Feature0;
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationConfig_FeatureArray0);
      assertEquals(1, deserializationConfig_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertNotNull(objectMapper2);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.NON_FINAL;
      JsonTypeInfo.As jsonTypeInfo_As0 = JsonTypeInfo.As.PROPERTY;
      ObjectMapper objectMapper3 = objectMapper2.enableDefaultTyping(objectMapper_DefaultTyping0, jsonTypeInfo_As0);
      assertEquals(1, deserializationConfig_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper3);
      
      VisibilityChecker<?> visibilityChecker0 = objectMapper3.getVisibilityChecker();
      assertEquals(1, deserializationConfig_FeatureArray0.length);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(visibilityChecker0);
      
      DeserializerProvider deserializerProvider0 = null;
      ObjectMapper objectMapper4 = objectMapper3.setDeserializerProvider(deserializerProvider0);
      assertEquals(1, deserializationConfig_FeatureArray0.length);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertNotNull(objectMapper4);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper4);
      assertEquals(1, deserializationConfig_FeatureArray0.length);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(s3SegmentPusher0);
      assertEquals("X`ha&ptmZ=JDnYzxx", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("X`ha&ptmZ=JDnYzxx", gSCredentials0.getAccessKey());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("X`ha&ptmZ=JDnYzxx", restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher();
      assertNotNull(s3SegmentPusher0);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      
      LocalFileSystem localFileSystem0 = new LocalFileSystem(rawLocalFileSystem0);
      assertNotNull(localFileSystem0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      
      Path path0 = localFileSystem0.getHomeDirectory();
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertNotNull(path0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      
      File file0 = rawLocalFileSystem0.pathToFile(path0);
      assertEquals('/', Path.SEPARATOR_CHAR);
      assertNotNull(file0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      assertEquals("/home/CIN/lmps2", file0.toString());
      assertEquals("/home/CIN", file0.getParent());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals("lmps2", file0.getName());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.canExecute());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertTrue(file0.isDirectory());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      
      S3SegmentPusher s3SegmentPusher1 = new S3SegmentPusher();
      assertFalse(s3SegmentPusher1.equals((Object)s3SegmentPusher0));
      assertNotNull(s3SegmentPusher1);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher1.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      String string0 = null;
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0, string0, credentialsProvider0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(restS3Service0);
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping0 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping(objectMapper_DefaultTyping0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertNotNull(objectMapper1);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper2 = objectMapper1.setNodeFactory(jsonNodeFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertNotNull(objectMapper2);
      
      SerializerProvider serializerProvider0 = null;
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper3);
      
      SerializationConfig.Feature[] serializationConfig_FeatureArray0 = new SerializationConfig.Feature[2];
      SerializationConfig.Feature serializationConfig_Feature0 = SerializationConfig.Feature.CLOSE_CLOSEABLE;
      serializationConfig_FeatureArray0[0] = serializationConfig_Feature0;
      SerializationConfig.Feature serializationConfig_Feature1 = SerializationConfig.Feature.DEFAULT_VIEW_INCLUSION;
      serializationConfig_FeatureArray0[1] = serializationConfig_Feature1;
      ObjectMapper objectMapper4 = objectMapper3.disable(serializationConfig_FeatureArray0);
      assertEquals(2, serializationConfig_FeatureArray0.length);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertNotNull(objectMapper4);
      
      ObjectMapper.DefaultTyping objectMapper_DefaultTyping1 = ObjectMapper.DefaultTyping.JAVA_LANG_OBJECT;
      ObjectMapper objectMapper5 = objectMapper4.enableDefaultTyping();
      assertEquals(2, serializationConfig_FeatureArray0.length);
      assertSame(objectMapper4, objectMapper0);
      assertSame(objectMapper4, objectMapper3);
      assertSame(objectMapper4, objectMapper2);
      assertSame(objectMapper4, objectMapper1);
      assertSame(objectMapper4, objectMapper5);
      assertSame(objectMapper5, objectMapper3);
      assertSame(objectMapper5, objectMapper2);
      assertSame(objectMapper5, objectMapper1);
      assertSame(objectMapper5, objectMapper0);
      assertSame(objectMapper5, objectMapper4);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper5);
      assertSame(objectMapper0, objectMapper4);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper_DefaultTyping0, objectMapper_DefaultTyping1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper5);
      assertSame(objectMapper1, objectMapper4);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper5);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper4);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper4);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper5);
      assertNotNull(objectMapper5);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper4);
      assertEquals(2, serializationConfig_FeatureArray0.length);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(s3SegmentPusher0);
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      
      String string2 = "4El\\{J=~9a";
      String string3 = "";
      MockFile mockFile0 = new MockFile(string2, string3);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertNotNull(mockFile0);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      RestS3Service restS3Service0 = null;
      String string0 = "S]af6%mJd";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      InputDecorator inputDecorator0 = mock(InputDecorator.class, new ViolatedAssumptionAnswer());
      JsonFactory jsonFactory1 = jsonFactory0.setInputDecorator(inputDecorator0);
      assertSame(jsonFactory0, jsonFactory1);
      assertSame(jsonFactory1, jsonFactory0);
      assertNotNull(jsonFactory1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      StdSerializerProvider stdSerializerProvider0 = new StdSerializerProvider();
      assertNotNull(stdSerializerProvider0);
      
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider();
      assertNotNull(stdDeserializerProvider0);
      
      BeanDeserializerFactory beanDeserializerFactory0 = BeanDeserializerFactory.instance;
      assertNotNull(beanDeserializerFactory0);
      
      StdDeserializerProvider stdDeserializerProvider1 = stdDeserializerProvider0.withFactory(beanDeserializerFactory0);
      assertFalse(stdDeserializerProvider1.equals((Object)stdDeserializerProvider0));
      assertNotSame(stdDeserializerProvider0, stdDeserializerProvider1);
      assertNotSame(stdDeserializerProvider1, stdDeserializerProvider0);
      assertNotNull(stdDeserializerProvider1);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory1, stdSerializerProvider0, stdDeserializerProvider1);
      assertFalse(stdDeserializerProvider0.equals((Object)stdDeserializerProvider1));
      assertFalse(stdDeserializerProvider1.equals((Object)stdDeserializerProvider0));
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertFalse(stdDeserializerProvider0.equals((Object)stdDeserializerProvider1));
      assertFalse(stdDeserializerProvider1.equals((Object)stdDeserializerProvider0));
      assertNotNull(s3SegmentPusher0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("JSON", jsonFactory1.getFormatName());
      
      String string1 = "9G\"iEHlzZ|h";
      MockFile mockFile0 = new MockFile(string1);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(mockFile0);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(restS3Service0);
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(s3SegmentPusher0);
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      
      String string1 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotNull(interval1);
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(dataSegment0).getDataSource();
      doReturn((Interval) null).when(dataSegment0).getInterval();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(restS3Service0);
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(s3SegmentPusher0);
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      
      String string1 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotNull(interval1);
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
      assertEquals(1392409281320L, interval1.getStartMillis());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, (Interval) null).when(dataSegment0).getInterval();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(restS3Service0);
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(s3SegmentPusher0);
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      
      String string1 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotNull(interval1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      assertEquals(0, noneShardSpec0.getPartitionNum());
      
      String string2 = "hV#nJ%[n|&/L;-$";
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(noneShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string2).when(dataSegment0).getVersion();
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(restS3Service0);
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      String string0 = "#";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0, string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(s3SegmentPusher0);
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      String string1 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      Interval interval1 = interval0.toInterval();
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotNull(interval1);
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(string0, string0, string0, restS3Service0.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(singleDimensionShardSpec0);
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("#", singleDimensionShardSpec0.getStart());
      assertEquals(0, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("#", singleDimensionShardSpec0.getDimension());
      assertEquals("#", singleDimensionShardSpec0.getEnd());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(singleDimensionShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string1).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home");
      String string0 = "";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(restS3Service0);
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      String string1 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string1, string1);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(s3SegmentPusher0);
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      
      String string2 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotNull(interval1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval1.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals(0, noneShardSpec0.getPartitionNum());
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string1).when(dataSegment0).getDataSource();
      doReturn(interval0, interval1).when(dataSegment0).getInterval();
      doReturn(noneShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string1).when(dataSegment0).getVersion();
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(restS3Service0);
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertNotNull(s3SegmentPusher0);
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      String string1 = null;
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      Interval interval1 = interval0.withDurationAfterStart(duration0);
      assertSame(interval0, interval1);
      assertSame(interval1, interval0);
      assertNotNull(interval1);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getMillis());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval1.getEndMillis());
      assertEquals(1392409281320L, interval1.getStartMillis());
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      assertEquals(0, noneShardSpec0.getPartitionNum());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(noneShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string0).when(dataSegment0).getVersion();
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000098\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      ProviderCredentials providerCredentials0 = null;
      RestS3Service restS3Service0 = new RestS3Service(providerCredentials0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(restS3Service0);
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      String string0 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      MockFile mockFile0 = new MockFile(string0);
      assertNotNull(mockFile0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(s3SegmentPusher0);
      assertFalse(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      
      Duration duration0 = Duration.ZERO;
      assertNotNull(duration0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(duration0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      assertEquals(0, noneShardSpec0.getPartitionNum());
      
      DataSegment dataSegment0 = mock(DataSegment.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(dataSegment0).getDataSource();
      doReturn(interval0, interval0).when(dataSegment0).getInterval();
      doReturn(noneShardSpec0).when(dataSegment0).getShardSpec();
      doReturn(string0).when(dataSegment0).getVersion();
      String string1 = "3v5";
      File file0 = MockFile.createTempFile(string1, dataSegment0.delimiter, (File) mockFile0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(file0.equals((Object)mockFile0));
      assertNotSame(string0, string1);
      assertNotSame(mockFile0, file0);
      assertNotSame(string1, string0);
      assertNotSame(file0, mockFile0);
      assertNotNull(file0);
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertFalse(mockFile0.isFile());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("", mockFile0.toString());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals("", mockFile0.getName());
      assertFalse(mockFile0.isHidden());
      assertTrue(mockFile0.isDirectory());
      assertEquals(0L, mockFile0.length());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.exists());
      assertEquals(0L, duration0.getStandardDays());
      assertEquals(0L, duration0.getStandardSeconds());
      assertEquals(0L, duration0.getStandardHours());
      assertEquals(0L, duration0.getStandardMinutes());
      assertEquals(0L, duration0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      assertEquals(0, noneShardSpec0.getPartitionNum());
      assertTrue(file0.exists());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.length());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.isFile());
      assertTrue(file0.canExecute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_5/3v50_", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_5", file0.getParent());
      assertTrue(file0.isAbsolute());
      assertEquals("3v50_", file0.getName());
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000098\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
