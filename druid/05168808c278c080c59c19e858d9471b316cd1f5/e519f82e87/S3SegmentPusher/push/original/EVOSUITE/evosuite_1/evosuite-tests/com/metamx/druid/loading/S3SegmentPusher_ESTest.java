/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 09:52:41 GMT 2021
 */

package com.metamx.druid.loading;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.metamx.druid.client.DataSegment;
import com.metamx.druid.input.InputRow;
import com.metamx.druid.input.MapBasedInputRow;
import com.metamx.druid.loading.S3SegmentPusher;
import com.metamx.druid.loading.S3SegmentPusherConfig;
import com.metamx.druid.shard.NoneShardSpec;
import com.metamx.druid.shard.SingleDimensionShardSpec;
import java.io.BufferedInputStream;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.math.BigInteger;
import java.net.URI;
import java.util.HashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import org.apache.commons.httpclient.HostConfiguration;
import org.apache.commons.httpclient.HttpClient;
import org.apache.commons.httpclient.SimpleHttpConnectionManager;
import org.apache.commons.httpclient.auth.CredentialsProvider;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.LocalFileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.fs.RawLocalFileSystem;
import org.codehaus.jackson.JsonFactory;
import org.codehaus.jackson.JsonGenerator;
import org.codehaus.jackson.JsonParser;
import org.codehaus.jackson.JsonToken;
import org.codehaus.jackson.ObjectCodec;
import org.codehaus.jackson.map.AnnotationIntrospector;
import org.codehaus.jackson.map.DeserializationConfig;
import org.codehaus.jackson.map.InjectableValues;
import org.codehaus.jackson.map.ObjectMapper;
import org.codehaus.jackson.map.PropertyNamingStrategy;
import org.codehaus.jackson.map.SerializerProvider;
import org.codehaus.jackson.map.deser.StdDeserializerProvider;
import org.codehaus.jackson.node.BigIntegerNode;
import org.codehaus.jackson.node.JsonNodeFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jets3t.service.Jets3tProperties;
import org.jets3t.service.StorageService;
import org.jets3t.service.impl.rest.httpclient.RestS3Service;
import org.jets3t.service.model.S3Object;
import org.jets3t.service.model.StorageObject;
import org.jets3t.service.security.AWSCredentials;
import org.jets3t.service.security.AWSDevPayCredentials;
import org.jets3t.service.security.GSCredentials;
import org.joda.time.DateTime;
import org.joda.time.Instant;
import org.joda.time.Interval;
import org.joda.time.MutableInterval;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class S3SegmentPusher_ESTest extends S3SegmentPusher_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "4";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      S3Object s3Object0 = new S3Object(string0);
      assertNotNull(s3Object0);
      assertFalse(s3Object0.isMetadataComplete());
      assertNull(s3Object0.getContentType());
      assertEquals("4", s3Object0.getName());
      assertNull(s3Object0.getBucketName());
      assertNull(s3Object0.getMd5HashAsHex());
      assertNull(s3Object0.getContentEncoding());
      assertEquals("4", s3Object0.getKey());
      assertNull(s3Object0.getETag());
      assertNull(s3Object0.getStorageClass());
      assertFalse(s3Object0.isDirectoryPlaceholder());
      assertNull(s3Object0.getContentLanguage());
      assertNull(s3Object0.getContentDisposition());
      assertEquals(0L, s3Object0.getContentLength());
      assertNull(s3Object0.getVersionId());
      
      Map<String, Object> map0 = s3Object0.getModifiableMetadata();
      assertNotNull(map0);
      assertFalse(s3Object0.isMetadataComplete());
      assertNull(s3Object0.getContentType());
      assertEquals("4", s3Object0.getName());
      assertNull(s3Object0.getBucketName());
      assertNull(s3Object0.getMd5HashAsHex());
      assertNull(s3Object0.getContentEncoding());
      assertEquals("4", s3Object0.getKey());
      assertNull(s3Object0.getETag());
      assertNull(s3Object0.getStorageClass());
      assertFalse(s3Object0.isDirectoryPlaceholder());
      assertNull(s3Object0.getContentLanguage());
      assertNull(s3Object0.getContentDisposition());
      assertEquals(0L, s3Object0.getContentLength());
      assertNull(s3Object0.getVersionId());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, map0, linkedList0, linkedList0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertFalse(s3Object0.isMetadataComplete());
      assertNull(s3Object0.getContentType());
      assertEquals("4", s3Object0.getName());
      assertNull(s3Object0.getBucketName());
      assertNull(s3Object0.getMd5HashAsHex());
      assertNull(s3Object0.getContentEncoding());
      assertEquals("4", s3Object0.getKey());
      assertNull(s3Object0.getETag());
      assertNull(s3Object0.getStorageClass());
      assertFalse(s3Object0.isDirectoryPlaceholder());
      assertNull(s3Object0.getContentLanguage());
      assertNull(s3Object0.getContentDisposition());
      assertEquals(0L, s3Object0.getContentLength());
      assertNull(s3Object0.getVersionId());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("json_2014-02-14T20:21:21.320Z_2014-02-14T20:21:21.320Z_4_-1", dataSegment0.getIdentifier());
      assertEquals("4", dataSegment0.getVersion());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("json", dataSegment0.getDataSource());
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      
      URI uRI0 = rawLocalFileSystem0.getUri();
      assertNotNull(uRI0);
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawAuthority());
      assertNull(uRI0.getRawFragment());
      assertFalse(uRI0.isOpaque());
      assertTrue(uRI0.isAbsolute());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawQuery());
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getHost());
      assertEquals("file:///", uRI0.toString());
      assertNull(uRI0.getRawUserInfo());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      String string0 = "";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getSecretKey());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn(string0).when(s3SegmentPusherConfig0).getBucket();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, hashMap0, linkedList0, linkedList0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals("json_2014-02-14T20:21:21.320Z_2014-02-14T20:21:21.320Z__-1", dataSegment0.getIdentifier());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("", dataSegment0.getVersion());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("json", dataSegment0.getDataSource());
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      
      Path path0 = rawLocalFileSystem0.getWorkingDirectory();
      assertNotNull(path0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      LocalFileSystem localFileSystem0 = new LocalFileSystem();
      assertNotNull(localFileSystem0);
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      
      File file0 = localFileSystem0.pathToFile(path0);
      assertNotNull(file0);
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_1", file0.toString());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals("evosuite_1", file0.getName());
      assertFalse(file0.isHidden());
      assertEquals(0L, file0.getUsableSpace());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isFile());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      long long0 = 4L;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000119\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "4";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      StorageObject storageObject0 = new StorageObject(jsonFactory0.FORMAT_NAME_JSON, string0);
      assertNotNull(storageObject0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("a87ff679a2f3e71d9181a67b7542122c", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getBucketName());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getETag());
      
      Map<String, Object> map0 = storageObject0.getModifiableMetadata();
      assertNotNull(map0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("a87ff679a2f3e71d9181a67b7542122c", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getBucketName());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getETag());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, map0, linkedList0, linkedList0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("4", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("4", gSCredentials0.getAccessKey());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertEquals("a87ff679a2f3e71d9181a67b7542122c", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getBucketName());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getETag());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals(0, linkedList0.size());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals("4", dataSegment0.getVersion());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("json_2014-02-14T20:21:21.320Z_2014-02-14T20:21:21.320Z_4_-1", dataSegment0.getIdentifier());
      assertEquals("json", dataSegment0.getDataSource());
      assertEquals(2L, dataSegment0.getSize());
      assertFalse(linkedList0.contains(string0));
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      
      URI uRI0 = rawLocalFileSystem0.getUri();
      assertNotNull(uRI0);
      assertEquals("file", uRI0.getScheme());
      assertNull(uRI0.getRawQuery());
      assertEquals("file:///", uRI0.toString());
      assertNull(uRI0.getHost());
      assertEquals((-1), uRI0.getPort());
      assertTrue(uRI0.isAbsolute());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawAuthority());
      assertFalse(uRI0.isOpaque());
      assertNull(uRI0.getRawUserInfo());
      assertEquals("/", uRI0.getRawPath());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      RestS3Service restS3Service0 = null;
      S3SegmentPusherConfig s3SegmentPusherConfig0 = null;
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper1 = objectMapper0.enableDefaultTyping();
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      ObjectMapper objectMapper2 = objectMapper1.disableDefaultTyping();
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper2);
      assertNotNull(s3SegmentPusher0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      File file0 = null;
      String string0 = "N4!lFT<Ju~";
      long long0 = (-1L);
      Interval interval0 = new Interval(long0, long0);
      assertNotNull(interval0);
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), interval0.getEndMillis());
      
      Map<String, Object> map0 = null;
      byte[] byteArray0 = new byte[7];
      byte byte0 = (byte) (-72);
      byteArray0[2] = byte0;
      byte byte1 = (byte)46;
      byteArray0[3] = byte1;
      byte byte2 = (byte)0;
      byteArray0[4] = byte2;
      byte byte3 = (byte) (-63);
      byteArray0[5] = byte3;
      byte byte4 = (byte)1;
      byteArray0[6] = byte4;
      BigInteger bigInteger0 = new BigInteger(byteArray0);
      assertNotNull(bigInteger0);
      assertEquals((short) (-16127), bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-72), (byte)46, (byte)0, (byte) (-63), (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      BigIntegerNode bigIntegerNode0 = new BigIntegerNode(bigInteger0);
      assertNotNull(bigIntegerNode0);
      assertEquals((short) (-16127), bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-72), (byte)46, (byte)0, (byte) (-63), (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      List<String> list0 = null;
      List<String> list1 = bigIntegerNode0.findValuesAsText(string0, list0);
      assertNull(list1);
      assertEquals((short) (-16127), bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-72), (byte)46, (byte)0, (byte) (-63), (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      
      int int0 = 614;
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertTrue(integer0.equals((Object)int0));
      assertEquals(614, (int)integer0);
      
      long long1 = 255L;
      DataSegment dataSegment0 = new DataSegment(string0, interval0, string0, map0, list1, list0, singleDimensionShardSpec0, integer0, long1);
      assertNotNull(dataSegment0);
      assertFalse(long0 == long1);
      assertTrue(integer0.equals((Object)int0));
      assertFalse(long1 == long0);
      assertEquals((short) (-16127), bigInteger0.shortValue());
      assertEquals((byte)1, bigInteger0.byteValue());
      assertEquals(JsonToken.VALUE_NUMBER_INT, bigIntegerNode0.asToken());
      assertTrue(bigIntegerNode0.isValueNode());
      assertFalse(bigIntegerNode0.isPojo());
      assertTrue(bigIntegerNode0.isIntegralNumber());
      assertNull(bigIntegerNode0.getTextValue());
      assertFalse(bigIntegerNode0.isTextual());
      assertFalse(bigIntegerNode0.isLong());
      assertFalse(bigIntegerNode0.isObject());
      assertFalse(bigIntegerNode0.isDouble());
      assertFalse(bigIntegerNode0.isContainerNode());
      assertFalse(bigIntegerNode0.isBigDecimal());
      assertEquals(JsonParser.NumberType.BIG_INTEGER, bigIntegerNode0.getNumberType());
      assertFalse(bigIntegerNode0.isArray());
      assertFalse(bigIntegerNode0.getBooleanValue());
      assertTrue(bigIntegerNode0.isBigInteger());
      assertFalse(bigIntegerNode0.isInt());
      assertFalse(bigIntegerNode0.isBinary());
      assertFalse(bigIntegerNode0.isMissingNode());
      assertTrue(bigIntegerNode0.isNumber());
      assertFalse(bigIntegerNode0.isNull());
      assertFalse(bigIntegerNode0.isFloatingPointNumber());
      assertFalse(bigIntegerNode0.isBoolean());
      assertEquals((-1L), interval0.getStartMillis());
      assertEquals((-1L), interval0.getEndMillis());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals("N4!lFT<Ju~", dataSegment0.getVersion());
      assertEquals("n4!lft<ju~_1969-12-31T20:59:59.999-03:00_1969-12-31T20:59:59.999-03:00_N4!lFT<Ju~_-1", dataSegment0.getIdentifier());
      assertEquals("n4!lft<ju~", dataSegment0.getDataSource());
      assertEquals(614, (int)dataSegment0.getBinaryVersion());
      assertEquals(255L, dataSegment0.getSize());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte) (-72), (byte)46, (byte)0, (byte) (-63), (byte)1}, byteArray0);
      assertEquals(7, byteArray0.length);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "FeWqarPd9Ku@lh_a2R";
      String string1 = " outputs (";
      AWSCredentials aWSCredentials0 = new AWSCredentials(string0, string1);
      assertNotNull(aWSCredentials0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" outputs (", aWSCredentials0.getSecretKey());
      assertEquals("jets3t AWS Credentials, version: ", aWSCredentials0.getVersionPrefix());
      assertNull(aWSCredentials0.getFriendlyName());
      assertEquals("FeWqarPd9Ku@lh_a2R", aWSCredentials0.getAccessKey());
      
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertNotNull(jets3tProperties0);
      assertFalse(jets3tProperties0.isLoaded());
      
      boolean boolean0 = true;
      SimpleHttpConnectionManager simpleHttpConnectionManager0 = new SimpleHttpConnectionManager(boolean0);
      assertNotNull(simpleHttpConnectionManager0);
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      
      HttpClient httpClient0 = new HttpClient(simpleHttpConnectionManager0);
      assertNotNull(httpClient0);
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertFalse(httpClient0.isStrictMode());
      assertNull(httpClient0.getHost());
      assertEquals((-1), httpClient0.getPort());
      
      HostConfiguration hostConfiguration0 = httpClient0.getHostConfiguration();
      assertNotNull(hostConfiguration0);
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertFalse(httpClient0.isStrictMode());
      assertNull(httpClient0.getHost());
      assertEquals((-1), httpClient0.getPort());
      assertNull(hostConfiguration0.getHost());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertEquals((-1), hostConfiguration0.getPort());
      
      RestS3Service restS3Service0 = new RestS3Service(aWSCredentials0, string1, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertNotNull(restS3Service0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" outputs (", aWSCredentials0.getSecretKey());
      assertEquals("jets3t AWS Credentials, version: ", aWSCredentials0.getVersionPrefix());
      assertNull(aWSCredentials0.getFriendlyName());
      assertEquals("FeWqarPd9Ku@lh_a2R", aWSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertFalse(httpClient0.isStrictMode());
      assertNull(httpClient0.getHost());
      assertEquals((-1), httpClient0.getPort());
      assertNull(hostConfiguration0.getHost());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(" outputs (", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, boolean0);
      assertNotNull(objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(" outputs (", aWSCredentials0.getSecretKey());
      assertEquals("jets3t AWS Credentials, version: ", aWSCredentials0.getVersionPrefix());
      assertNull(aWSCredentials0.getFriendlyName());
      assertEquals("FeWqarPd9Ku@lh_a2R", aWSCredentials0.getAccessKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertFalse(httpClient0.isStrictMode());
      assertNull(httpClient0.getHost());
      assertEquals((-1), httpClient0.getPort());
      assertNull(hostConfiguration0.getHost());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getProxyHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertEquals((-1), hostConfiguration0.getPort());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(" outputs (", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      String string2 = "Z";
      MockFile mockFile0 = new MockFile(string1, string2);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      String string1 = " 0%R)P1dy,Cg0?~0]";
      String string2 = "T7.>EwPG8,|Mj5j00U\"";
      String string3 = "D@S_";
      AWSDevPayCredentials aWSDevPayCredentials0 = new AWSDevPayCredentials(string0, string1, string2, string3);
      assertNotNull(aWSDevPayCredentials0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("T7.>EwPG8,|Mj5j00U\"", aWSDevPayCredentials0.getUserToken());
      assertEquals("D@S_", aWSDevPayCredentials0.getProductToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals(" 0%R)P1dy,Cg0?~0]", aWSDevPayCredentials0.getSecretKey());
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      RestS3Service restS3Service0 = new RestS3Service(aWSDevPayCredentials0, string3, credentialsProvider0);
      assertNotNull(restS3Service0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string1));
      assertEquals("T7.>EwPG8,|Mj5j00U\"", aWSDevPayCredentials0.getUserToken());
      assertEquals("D@S_", aWSDevPayCredentials0.getProductToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals(" 0%R)P1dy,Cg0?~0]", aWSDevPayCredentials0.getSecretKey());
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("T7.>EwPG8,|Mj5j00U\"", restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("D@S_", restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("D@S_", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string4 = "log4j: ";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string4, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      SerializerProvider serializerProvider0 = null;
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider();
      assertNotNull(stdDeserializerProvider0);
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0, serializerProvider0, stdDeserializerProvider0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      DeserializationConfig.Feature[] deserializationConfig_FeatureArray0 = new DeserializationConfig.Feature[2];
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.USE_GETTERS_AS_SETTERS;
      deserializationConfig_FeatureArray0[0] = deserializationConfig_Feature0;
      DeserializationConfig.Feature deserializationConfig_Feature1 = DeserializationConfig.Feature.FAIL_ON_NUMBERS_FOR_ENUMS;
      deserializationConfig_FeatureArray0[1] = deserializationConfig_Feature1;
      ObjectMapper objectMapper1 = objectMapper0.disable(deserializationConfig_FeatureArray0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertEquals(2, deserializationConfig_FeatureArray0.length);
      
      ObjectMapper objectMapper2 = objectMapper1.enable(deserializationConfig_FeatureArray0);
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertEquals(2, deserializationConfig_FeatureArray0.length);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper3 = objectMapper2.setNodeFactory(jsonNodeFactory0);
      assertNotNull(objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertEquals(2, deserializationConfig_FeatureArray0.length);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertEquals("T7.>EwPG8,|Mj5j00U\"", aWSDevPayCredentials0.getUserToken());
      assertEquals("D@S_", aWSDevPayCredentials0.getProductToken());
      assertNull(aWSDevPayCredentials0.getFriendlyName());
      assertEquals(" 0%R)P1dy,Cg0?~0]", aWSDevPayCredentials0.getSecretKey());
      assertEquals("jets3t AWS Credentials, version: ", aWSDevPayCredentials0.getVersionPrefix());
      assertEquals("", aWSDevPayCredentials0.getAccessKey());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("T7.>EwPG8,|Mj5j00U\"", restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("D@S_", restS3Service0.getDevPayProductToken());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("D@S_", restS3Service0.getInvokingApplicationDescription());
      assertFalse(restS3Service0.isShutdown());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(2, deserializationConfig_FeatureArray0.length);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string5 = "org.joda.time.field.OffsetDateTimeField";
      String string6 = "com.metamx.druid.loading.S3SegmentPusher";
      File file0 = MockFile.createTempFile(string5, string6);
      assertNotNull(file0);
      assertFalse(string5.equals((Object)string6));
      assertFalse(string5.equals((Object)string0));
      assertFalse(string5.equals((Object)string4));
      assertFalse(string5.equals((Object)string1));
      assertFalse(string5.equals((Object)string2));
      assertFalse(string5.equals((Object)string3));
      assertFalse(string6.equals((Object)string0));
      assertFalse(string6.equals((Object)string4));
      assertFalse(string6.equals((Object)string5));
      assertFalse(string6.equals((Object)string1));
      assertFalse(string6.equals((Object)string2));
      assertFalse(string6.equals((Object)string3));
      assertTrue(file0.canRead());
      assertTrue(file0.canExecute());
      assertTrue(file0.isFile());
      assertEquals("/tmp", file0.getParent());
      assertEquals("/tmp/org.joda.time.field.OffsetDateTimeField0com.metamx.druid.loading.S3SegmentPusher", file0.toString());
      assertEquals("org.joda.time.field.OffsetDateTimeField0com.metamx.druid.loading.S3SegmentPusher", file0.getName());
      assertEquals(0L, file0.getUsableSpace());
      assertEquals(0L, file0.getFreeSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertTrue(file0.isAbsolute());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertNotSame(string5, string6);
      assertNotSame(string5, string0);
      assertNotSame(string5, string4);
      assertNotSame(string5, string1);
      assertNotSame(string5, string2);
      assertNotSame(string5, string3);
      assertNotSame(string6, string0);
      assertNotSame(string6, string4);
      assertNotSame(string6, string5);
      assertNotSame(string6, string1);
      assertNotSame(string6, string2);
      assertNotSame(string6, string3);
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "FeWqarPd9Ku@lh_a2R";
      String string1 = " outputs (";
      AWSCredentials aWSCredentials0 = new AWSCredentials(string0, string1);
      assertNotNull(aWSCredentials0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("jets3t AWS Credentials, version: ", aWSCredentials0.getVersionPrefix());
      assertNull(aWSCredentials0.getFriendlyName());
      assertEquals("FeWqarPd9Ku@lh_a2R", aWSCredentials0.getAccessKey());
      assertEquals(" outputs (", aWSCredentials0.getSecretKey());
      
      CredentialsProvider credentialsProvider0 = mock(CredentialsProvider.class, new ViolatedAssumptionAnswer());
      Jets3tProperties jets3tProperties0 = new Jets3tProperties();
      assertNotNull(jets3tProperties0);
      assertFalse(jets3tProperties0.isLoaded());
      
      boolean boolean0 = true;
      SimpleHttpConnectionManager simpleHttpConnectionManager0 = new SimpleHttpConnectionManager(boolean0);
      assertNotNull(simpleHttpConnectionManager0);
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      
      HttpClient httpClient0 = new HttpClient(simpleHttpConnectionManager0);
      assertNotNull(httpClient0);
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      
      HostConfiguration hostConfiguration0 = httpClient0.getHostConfiguration();
      assertNotNull(hostConfiguration0);
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getProxyHost());
      assertEquals((-1), hostConfiguration0.getPort());
      
      RestS3Service restS3Service0 = new RestS3Service(aWSCredentials0, string1, credentialsProvider0, jets3tProperties0, hostConfiguration0);
      assertNotNull(restS3Service0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("jets3t AWS Credentials, version: ", aWSCredentials0.getVersionPrefix());
      assertNull(aWSCredentials0.getFriendlyName());
      assertEquals("FeWqarPd9Ku@lh_a2R", aWSCredentials0.getAccessKey());
      assertEquals(" outputs (", aWSCredentials0.getSecretKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getProxyHost());
      assertEquals((-1), hostConfiguration0.getPort());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(" outputs (", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string2 = "";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string2).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      JsonNodeFactory jsonNodeFactory0 = JsonNodeFactory.instance;
      assertNotNull(jsonNodeFactory0);
      
      ObjectMapper objectMapper1 = objectMapper0.setNodeFactory(jsonNodeFactory0);
      assertNotNull(objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      AnnotationIntrospector annotationIntrospector0 = AnnotationIntrospector.nopInstance();
      assertNotNull(annotationIntrospector0);
      
      AnnotationIntrospector annotationIntrospector1 = AnnotationIntrospector.pair(annotationIntrospector0, annotationIntrospector0);
      assertNotNull(annotationIntrospector1);
      
      ObjectMapper objectMapper2 = objectMapper1.setAnnotationIntrospector(annotationIntrospector1);
      assertNotNull(objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.WRITE_NUMBERS_AS_STRINGS;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, boolean0);
      assertNotNull(objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("jets3t AWS Credentials, version: ", aWSCredentials0.getVersionPrefix());
      assertNull(aWSCredentials0.getFriendlyName());
      assertEquals("FeWqarPd9Ku@lh_a2R", aWSCredentials0.getAccessKey());
      assertEquals(" outputs (", aWSCredentials0.getSecretKey());
      assertFalse(jets3tProperties0.isLoaded());
      assertTrue(simpleHttpConnectionManager0.isConnectionStaleCheckingEnabled());
      assertEquals((-1), httpClient0.getPort());
      assertNull(httpClient0.getHost());
      assertFalse(httpClient0.isStrictMode());
      assertNull(hostConfiguration0.getVirtualHost());
      assertFalse(hostConfiguration0.isHostSet());
      assertEquals((-1), hostConfiguration0.getProxyPort());
      assertNull(hostConfiguration0.getHost());
      assertFalse(hostConfiguration0.isProxySet());
      assertNull(hostConfiguration0.getProxyHost());
      assertEquals((-1), hostConfiguration0.getPort());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertEquals(" outputs (", restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      String string3 = "Z";
      MockFile mockFile0 = new MockFile(string1, string3);
      assertNotNull(mockFile0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string0));
      
      DataSegment dataSegment0 = null;
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "9";
      BufferedInputStream bufferedInputStream0 = null;
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectCodec objectCodec0 = null;
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      boolean boolean0 = false;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, boolean0);
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider();
      assertNotNull(stdDeserializerProvider0);
      
      ObjectMapper objectMapper3 = objectMapper2.setDeserializerProvider(stdDeserializerProvider0);
      assertNotNull(objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      File file0 = null;
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      
      String string1 = "s'LoZ:a\"B:";
      StorageObject storageObject0 = new StorageObject(jsonFactory0.FORMAT_NAME_JSON, string1);
      assertNotNull(storageObject0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      Map<String, Object> map0 = storageObject0.getModifiableMetadata();
      assertNotNull(map0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotSame(string1, string0);
      
      long long1 = 0L;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long1, linkedList0, map0);
      assertNotNull(mapBasedInputRow0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertFalse(linkedList0.contains(string0));
      
      List<String> list0 = mapBasedInputRow0.getDimension(storageObject0.METADATA_HEADER_CONTENT_LANGUAGE);
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotSame(string1, string0);
      
      int int0 = 129;
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(storageObject0.METADATA_HEADER_CONTENT_LENGTH, storageObject0.METADATA_HEADER_CONTENT_DISPOSITION, storageObject0.METADATA_HEADER_ETAG, int0);
      assertNotNull(singleDimensionShardSpec0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("ETag", singleDimensionShardSpec0.getEnd());
      assertEquals(129, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("Content-Disposition", singleDimensionShardSpec0.getStart());
      assertEquals("Content-Length", singleDimensionShardSpec0.getDimension());
      
      Integer integer0 = new Integer(restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(integer0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(integer0.equals((Object)int0));
      assertEquals(1, (int)integer0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, map0, list0, linkedList0, singleDimensionShardSpec0, integer0, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(integer0.equals((Object)int0));
      assertEquals("json", dataSegment0.getDataSource());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("json_1970-01-01T00:00:00.000Z_1970-01-01T00:00:00.000Z_9_129", dataSegment0.getIdentifier());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("9", dataSegment0.getVersion());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("ETag", singleDimensionShardSpec0.getEnd());
      assertEquals(129, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("Content-Disposition", singleDimensionShardSpec0.getStart());
      assertEquals("Content-Length", singleDimensionShardSpec0.getDimension());
      assertFalse(linkedList0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "y>]m/j%Bc/$VmQ'DG6";
      String string1 = null;
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0, string1);
      assertNotNull(gSCredentials0);
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      String string2 = "cu>#";
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string2, (String) null).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      DeserializationConfig.Feature deserializationConfig_Feature0 = DeserializationConfig.Feature.READ_ENUMS_USING_TO_STRING;
      boolean boolean0 = false;
      ObjectMapper objectMapper1 = objectMapper0.configure(deserializationConfig_Feature0, boolean0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      InjectableValues injectableValues0 = null;
      ObjectMapper objectMapper2 = objectMapper1.setInjectableValues(injectableValues0);
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      ObjectMapper objectMapper3 = objectMapper2.configure(jsonGenerator_Feature0, boolean0);
      assertNotNull(objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      String string3 = "Unable to fake response on method as it is not derived from HttpMethodBase.";
      MockFile mockFile0 = new MockFile(string3);
      assertNotNull(mockFile0);
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      
      String string4 = "71SG<|";
      long long0 = 9223372036854775807L;
      MutableInterval mutableInterval0 = new MutableInterval(restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED, long0);
      assertNotNull(mutableInterval0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(2L, mutableInterval0.getStartMillis());
      assertEquals(9223372036854775807L, mutableInterval0.getEndMillis());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      Interval interval0 = mutableInterval0.toInterval();
      assertNotNull(interval0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(2L, mutableInterval0.getStartMillis());
      assertEquals(9223372036854775807L, mutableInterval0.getEndMillis());
      assertEquals(2L, interval0.getStartMillis());
      assertEquals(9223372036854775807L, interval0.getEndMillis());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      StorageObject storageObject0 = new StorageObject();
      assertNotNull(storageObject0);
      assertNull(storageObject0.getBucketName());
      assertEquals(0L, storageObject0.getContentLength());
      assertNull(storageObject0.getMd5HashAsHex());
      assertNull(storageObject0.getName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getContentEncoding());
      assertNull(storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentType());
      
      Map<String, Object> map0 = storageObject0.getModifiableMetadata();
      assertNotNull(map0);
      assertNull(storageObject0.getBucketName());
      assertEquals(0L, storageObject0.getContentLength());
      assertNull(storageObject0.getMd5HashAsHex());
      assertNull(storageObject0.getName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getContentEncoding());
      assertNull(storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      Map<String, Object> map1 = restS3Service0.renameMetadataKeys(map0);
      assertNotNull(map1);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertTrue(map1.equals((Object)map0));
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(storageObject0.getBucketName());
      assertEquals(0L, storageObject0.getContentLength());
      assertNull(storageObject0.getMd5HashAsHex());
      assertNull(storageObject0.getName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getContentEncoding());
      assertNull(storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentType());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertNotSame(string0, string2);
      assertNotSame(string0, string4);
      assertNotSame(string0, string3);
      assertNotSame(map0, map1);
      assertNotSame(map1, map0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string3));
      
      NoneShardSpec noneShardSpec0 = new NoneShardSpec();
      assertNotNull(noneShardSpec0);
      assertEquals(0, noneShardSpec0.getPartitionNum());
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      
      Integer integer0 = new Integer(restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(integer0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertEquals(2, (int)integer0);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      DataSegment dataSegment0 = new DataSegment(string4, interval0, jsonFactory0.FORMAT_NAME_JSON, map1, linkedList0, linkedList0, noneShardSpec0, integer0, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string4.equals((Object)string2));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string3));
      assertTrue(map0.equals((Object)map1));
      assertTrue(map1.equals((Object)map0));
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getAccessKey());
      assertEquals("y>]m/j%Bc/$VmQ'DG6", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals(2L, mutableInterval0.getStartMillis());
      assertEquals(9223372036854775807L, mutableInterval0.getEndMillis());
      assertEquals(2L, interval0.getStartMillis());
      assertEquals(9223372036854775807L, interval0.getEndMillis());
      assertNull(storageObject0.getBucketName());
      assertEquals(0L, storageObject0.getContentLength());
      assertNull(storageObject0.getMd5HashAsHex());
      assertNull(storageObject0.getName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getContentEncoding());
      assertNull(storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertNull(storageObject0.getContentType());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertEquals(0, map1.size());
      assertTrue(map1.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0, noneShardSpec0.getPartitionNum());
      assertEquals("NoneShardSpec", noneShardSpec0.toString());
      assertEquals("71sg<|_1969-12-31T21:00:00.002-03:00_292278994-08-17T04:12:55.807-03:00_JSON", dataSegment0.getIdentifier());
      assertEquals("JSON", dataSegment0.getVersion());
      assertEquals(2, (int)dataSegment0.getBinaryVersion());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("71sg<|", dataSegment0.getDataSource());
      assertFalse(linkedList0.contains(string3));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.metamx.druid.loading.S3SegmentPusher", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "9";
      BufferedInputStream bufferedInputStream0 = null;
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectCodec objectCodec0 = null;
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      boolean boolean0 = false;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, boolean0);
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider();
      assertNotNull(stdDeserializerProvider0);
      
      ObjectMapper objectMapper3 = objectMapper2.setDeserializerProvider(stdDeserializerProvider0);
      assertNotNull(objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper3, objectMapper0);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper2, objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      File file0 = null;
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      
      String string1 = "s'LoZ:a\"B:";
      StorageObject storageObject0 = new StorageObject(jsonFactory0.FORMAT_NAME_JSON, string1);
      assertNotNull(storageObject0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      Map<String, Object> map0 = storageObject0.getModifiableMetadata();
      assertNotNull(map0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getContentEncoding());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotSame(string1, string0);
      
      long long1 = 0L;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string1));
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long1, linkedList0, map0);
      assertNotNull(mapBasedInputRow0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getContentEncoding());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertFalse(linkedList0.contains(string1));
      
      List<String> list0 = mapBasedInputRow0.getDimension(storageObject0.METADATA_HEADER_CONTENT_LANGUAGE);
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getContentEncoding());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(linkedList0.contains(string1));
      assertFalse(list0.contains(string1));
      assertNotSame(string1, string0);
      
      int int0 = 129;
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(storageObject0.METADATA_HEADER_CONTENT_LENGTH, storageObject0.METADATA_HEADER_CONTENT_DISPOSITION, storageObject0.METADATA_HEADER_ETAG, int0);
      assertNotNull(singleDimensionShardSpec0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("Content-Length", singleDimensionShardSpec0.getDimension());
      assertEquals(129, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("ETag", singleDimensionShardSpec0.getEnd());
      assertEquals("Content-Disposition", singleDimensionShardSpec0.getStart());
      
      Integer integer0 = new Integer(restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, (int)integer0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, map0, list0, linkedList0, singleDimensionShardSpec0, integer0, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("json_1970-01-01T00:00:00.000Z_1970-01-01T00:00:00.000Z_9_129", dataSegment0.getIdentifier());
      assertEquals("9", dataSegment0.getVersion());
      assertEquals("json", dataSegment0.getDataSource());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getContentEncoding());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals("Content-Length", singleDimensionShardSpec0.getDimension());
      assertEquals(129, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("ETag", singleDimensionShardSpec0.getEnd());
      assertEquals("Content-Disposition", singleDimensionShardSpec0.getStart());
      assertFalse(linkedList0.contains(string1));
      assertFalse(list0.contains(string1));
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Simulated IOException
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "9";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      ObjectCodec objectCodec0 = null;
      JsonFactory jsonFactory0 = new JsonFactory(objectCodec0);
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0 = new PropertyNamingStrategy.LowerCaseWithUnderscoresStrategy();
      assertNotNull(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      
      ObjectMapper objectMapper1 = objectMapper0.setPropertyNamingStrategy(propertyNamingStrategy_LowerCaseWithUnderscoresStrategy0);
      assertNotNull(objectMapper1);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper0);
      
      JsonGenerator.Feature jsonGenerator_Feature0 = JsonGenerator.Feature.FLUSH_PASSED_TO_STREAM;
      boolean boolean0 = false;
      ObjectMapper objectMapper2 = objectMapper1.configure(jsonGenerator_Feature0, boolean0);
      assertNotNull(objectMapper2);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      
      StdDeserializerProvider stdDeserializerProvider0 = new StdDeserializerProvider();
      assertNotNull(stdDeserializerProvider0);
      
      ObjectMapper objectMapper3 = objectMapper2.setDeserializerProvider(stdDeserializerProvider0);
      assertNotNull(objectMapper3);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertSame(objectMapper0, objectMapper3);
      assertSame(objectMapper0, objectMapper2);
      assertSame(objectMapper0, objectMapper1);
      assertSame(objectMapper1, objectMapper2);
      assertSame(objectMapper1, objectMapper3);
      assertSame(objectMapper1, objectMapper0);
      assertSame(objectMapper2, objectMapper3);
      assertSame(objectMapper2, objectMapper0);
      assertSame(objectMapper2, objectMapper1);
      assertSame(objectMapper3, objectMapper2);
      assertSame(objectMapper3, objectMapper1);
      assertSame(objectMapper3, objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper3);
      assertNotNull(s3SegmentPusher0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      File file0 = null;
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(0L, instant0.getMillis());
      
      DateTime dateTime0 = DateTime.now();
      assertNotNull(dateTime0);
      assertEquals(0L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      
      String string1 = "s'LoZ:a\"B:";
      StorageObject storageObject0 = new StorageObject(jsonFactory0.FORMAT_NAME_JSON, string1);
      assertNotNull(storageObject0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getETag());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      Map<String, Object> map0 = storageObject0.getModifiableMetadata();
      assertNotNull(map0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getETag());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNotSame(string1, string0);
      
      long long1 = 0L;
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long1, linkedList0, map0);
      assertNotNull(mapBasedInputRow0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getETag());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertFalse(linkedList0.contains(string0));
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp/druid0index.zip");
      boolean boolean1 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      List<String> list0 = mapBasedInputRow0.getDimension(storageObject0.METADATA_HEADER_CONTENT_LANGUAGE);
      assertNotNull(list0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getETag());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(linkedList0.contains(string0));
      assertFalse(list0.contains(string0));
      assertNotSame(string1, string0);
      
      int int0 = 129;
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec(storageObject0.METADATA_HEADER_CONTENT_LENGTH, storageObject0.METADATA_HEADER_CONTENT_DISPOSITION, storageObject0.METADATA_HEADER_ETAG, int0);
      assertNotNull(singleDimensionShardSpec0);
      assertFalse(string1.equals((Object)string0));
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getETag());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(129, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("ETag", singleDimensionShardSpec0.getEnd());
      assertEquals("Content-Disposition", singleDimensionShardSpec0.getStart());
      assertEquals("Content-Length", singleDimensionShardSpec0.getDimension());
      
      Integer integer0 = new Integer(restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertNotNull(integer0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string0.equals((Object)string1));
      assertEquals(1, (int)integer0);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, map0, list0, linkedList0, singleDimensionShardSpec0, integer0, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertFalse(integer0.equals((Object)int0));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("json_1970-01-01T00:00:00.000Z_1970-01-01T00:00:00.000Z_9_129", dataSegment0.getIdentifier());
      assertEquals("9", dataSegment0.getVersion());
      assertEquals("json", dataSegment0.getDataSource());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertNull(restS3Service0.getDevPayProductToken());
      assertFalse(restS3Service0.isShutdown());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0L, instant0.getMillis());
      assertEquals(0L, dateTime0.getMillis());
      assertEquals(0L, interval0.getStartMillis());
      assertEquals(0L, interval0.getEndMillis());
      assertNull(storageObject0.getBucketName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getETag());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentDisposition());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("5dbc487426b88b857bb0258aa2204292", storageObject0.getMd5HashAsHex());
      assertEquals(3, map0.size());
      assertFalse(map0.isEmpty());
      assertEquals(0, linkedList0.size());
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(129, singleDimensionShardSpec0.getPartitionNum());
      assertEquals("ETag", singleDimensionShardSpec0.getEnd());
      assertEquals("Content-Disposition", singleDimensionShardSpec0.getStart());
      assertEquals("Content-Length", singleDimensionShardSpec0.getDimension());
      assertFalse(linkedList0.contains(string0));
      assertFalse(list0.contains(string0));
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "9";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0, string0).when(s3SegmentPusherConfig0).getBaseKey();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper(jsonFactory0);
      assertNotNull(objectMapper0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      StorageObject storageObject0 = new StorageObject(jsonFactory0.FORMAT_NAME_JSON, string0);
      assertNotNull(storageObject0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("45c48cce2e2d7fbdea1afc51c7c6ad26", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      
      Map<String, Object> map0 = storageObject0.getModifiableMetadata();
      assertNotNull(map0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("45c48cce2e2d7fbdea1afc51c7c6ad26", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, map0, linkedList0, linkedList0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentLanguage());
      assertEquals("45c48cce2e2d7fbdea1afc51c7c6ad26", storageObject0.getMd5HashAsHex());
      assertFalse(storageObject0.isMetadataComplete());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getKey());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getETag());
      assertNull(storageObject0.getContentDisposition());
      assertFalse(map0.isEmpty());
      assertEquals(3, map0.size());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getStart());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("json_2014-02-14T20:21:21.320Z_2014-02-14T20:21:21.320Z_9_-1", dataSegment0.getIdentifier());
      assertEquals("9", dataSegment0.getVersion());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("json", dataSegment0.getDataSource());
      assertFalse(linkedList0.contains(string0));
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      System.setCurrentTimeMillis(restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("9", gSCredentials0.getAccessKey());
      assertEquals("9", gSCredentials0.getSecretKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertNull(restS3Service0.getDevPayUserToken());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertNull(restS3Service0.getDevPayProductToken());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isShutdown());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      
      URI uRI0 = rawLocalFileSystem0.getUri();
      assertNotNull(uRI0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("file:///", uRI0.toString());
      assertEquals("file", uRI0.getScheme());
      assertEquals("/", uRI0.getRawPath());
      assertNull(uRI0.getRawFragment());
      assertNull(uRI0.getRawUserInfo());
      assertNull(uRI0.getRawQuery());
      assertNull(uRI0.getHost());
      assertFalse(uRI0.isOpaque());
      assertEquals((-1), uRI0.getPort());
      assertNull(uRI0.getRawAuthority());
      assertTrue(uRI0.isAbsolute());
      
      MockFile mockFile0 = new MockFile(uRI0);
      assertNotNull(mockFile0);
      
      try { 
        s3SegmentPusher0.push(mockFile0, dataSegment0);
        fail("Expecting exception: FileNotFoundException");
      
      } catch(FileNotFoundException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileInputStream", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      StorageObject storageObject0 = new StorageObject(jsonFactory0.FORMAT_NAME_JSON, string0);
      assertNotNull(storageObject0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertNull(storageObject0.getETag());
      assertEquals("d41d8cd98f00b204e9800998ecf8427e", storageObject0.getMd5HashAsHex());
      assertEquals("JSON", storageObject0.getKey());
      assertFalse(storageObject0.isMetadataComplete());
      assertNull(storageObject0.getStorageClass());
      assertNull(storageObject0.getContentEncoding());
      assertEquals("text/plain; charset=utf-8", storageObject0.getContentType());
      assertNull(storageObject0.getContentLanguage());
      assertNull(storageObject0.getBucketName());
      assertEquals("JSON", storageObject0.getName());
      assertNull(storageObject0.getContentDisposition());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, hashMap0, linkedList0, linkedList0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertTrue(restS3Service0.isHttpsOnly());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertNull(restS3Service0.getDevPayUserToken());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("", dataSegment0.getVersion());
      assertEquals("json", dataSegment0.getDataSource());
      assertEquals("json_2014-02-14T20:21:21.320Z_2014-02-14T20:21:21.320Z__-1", dataSegment0.getIdentifier());
      assertEquals(2L, dataSegment0.getSize());
      assertFalse(linkedList0.contains(string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      
      Path path0 = rawLocalFileSystem0.getWorkingDirectory();
      assertNotNull(path0);
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      LocalFileSystem localFileSystem0 = new LocalFileSystem();
      assertNotNull(localFileSystem0);
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      
      File file0 = localFileSystem0.pathToFile(path0);
      assertNotNull(file0);
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(512, localFileSystem0.getBytesPerSum());
      assertTrue(file0.canRead());
      assertTrue(file0.canWrite());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertEquals("evosuite_1", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_1", file0.toString());
      assertTrue(file0.isAbsolute());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5", file0.getParent());
      assertTrue(file0.canExecute());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.exists());
      assertEquals(1392409281320L, file0.lastModified());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertFalse(file0.isFile());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      long long0 = 0L;
      MapBasedInputRow mapBasedInputRow0 = new MapBasedInputRow(long0, linkedList0, hashMap0);
      assertNotNull(mapBasedInputRow0);
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      boolean boolean0 = singleDimensionShardSpec0.isInChunk((InputRow) mapBasedInputRow0);
      assertEquals(0L, mapBasedInputRow0.getTimestampFromEpoch());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertFalse(linkedList0.contains(string0));
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000124\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      String string0 = "";
      GSCredentials gSCredentials0 = new GSCredentials(string0, string0);
      assertNotNull(gSCredentials0);
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      
      RestS3Service restS3Service0 = new RestS3Service(gSCredentials0);
      assertNotNull(restS3Service0);
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      S3SegmentPusherConfig s3SegmentPusherConfig0 = mock(S3SegmentPusherConfig.class, new ViolatedAssumptionAnswer());
      doReturn(string0).when(s3SegmentPusherConfig0).getBaseKey();
      doReturn((String) null).when(s3SegmentPusherConfig0).getBucket();
      JsonFactory jsonFactory0 = new JsonFactory();
      assertNotNull(jsonFactory0);
      assertEquals("JSON", jsonFactory0.getFormatName());
      
      ObjectMapper objectMapper0 = new ObjectMapper();
      assertNotNull(objectMapper0);
      
      S3SegmentPusher s3SegmentPusher0 = new S3SegmentPusher(restS3Service0, s3SegmentPusherConfig0, objectMapper0);
      assertNotNull(s3SegmentPusher0);
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      Instant instant0 = new Instant();
      assertNotNull(instant0);
      assertEquals(1392409281320L, instant0.getMillis());
      
      DateTime dateTime0 = instant0.toDateTime();
      assertNotNull(dateTime0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      
      Interval interval0 = new Interval(instant0, dateTime0);
      assertNotNull(interval0);
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      LinkedList<String> linkedList0 = new LinkedList<String>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(linkedList0.contains(string0));
      
      SingleDimensionShardSpec singleDimensionShardSpec0 = new SingleDimensionShardSpec();
      assertNotNull(singleDimensionShardSpec0);
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      
      DataSegment dataSegment0 = new DataSegment(jsonFactory0.FORMAT_NAME_JSON, interval0, string0, hashMap0, linkedList0, linkedList0, singleDimensionShardSpec0, (Integer) restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST, restS3Service0.BUCKET_STATUS__ALREADY_CLAIMED);
      assertNotNull(dataSegment0);
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals(1392409281320L, instant0.getMillis());
      assertEquals(1392409281320L, dateTime0.getMillis());
      assertEquals(1392409281320L, interval0.getEndMillis());
      assertEquals(1392409281320L, interval0.getStartMillis());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(0, linkedList0.size());
      assertNull(singleDimensionShardSpec0.getStart());
      assertEquals((-1), singleDimensionShardSpec0.getPartitionNum());
      assertNull(singleDimensionShardSpec0.getEnd());
      assertNull(singleDimensionShardSpec0.getDimension());
      assertEquals(2L, dataSegment0.getSize());
      assertEquals("json", dataSegment0.getDataSource());
      assertEquals("json_2014-02-14T20:21:21.320Z_2014-02-14T20:21:21.320Z__-1", dataSegment0.getIdentifier());
      assertEquals(1, (int)dataSegment0.getBinaryVersion());
      assertEquals("", dataSegment0.getVersion());
      assertFalse(linkedList0.contains(string0));
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      RawLocalFileSystem rawLocalFileSystem0 = new RawLocalFileSystem();
      assertNotNull(rawLocalFileSystem0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      
      Path path0 = rawLocalFileSystem0.getWorkingDirectory();
      assertNotNull(path0);
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      LocalFileSystem localFileSystem0 = new LocalFileSystem();
      assertNotNull(localFileSystem0);
      assertEquals(512, localFileSystem0.getBytesPerSum());
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/tmp");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      File file0 = localFileSystem0.pathToFile(path0);
      assertNotNull(file0);
      assertEquals(512, localFileSystem0.getBytesPerSum());
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_1", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("evosuite_1", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5", file0.getParent());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      File file1 = MockFile.createTempFile(jsonFactory0.FORMAT_NAME_JSON, path0.SEPARATOR, file0);
      assertNotNull(file1);
      assertFalse(file1.equals((Object)file0));
      assertEquals(512, localFileSystem0.getBytesPerSum());
      assertEquals((short)1, localFileSystem0.getDefaultReplication());
      assertEquals(0L, file0.length());
      assertEquals(0L, file0.getFreeSpace());
      assertEquals(0L, file0.getTotalSpace());
      assertTrue(file0.isDirectory());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.exists());
      assertFalse(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canRead());
      assertTrue(file0.isAbsolute());
      assertTrue(file0.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_1", file0.toString());
      assertTrue(file0.canExecute());
      assertEquals("evosuite_1", file0.getName());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5", file0.getParent());
      assertEquals(0L, file1.length());
      assertTrue(file1.exists());
      assertEquals("JSON0", file1.getName());
      assertEquals(1392409281320L, file1.lastModified());
      assertEquals(0L, file1.getFreeSpace());
      assertFalse(file1.isDirectory());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_1", file1.getParent());
      assertTrue(file1.isAbsolute());
      assertEquals(0L, file1.getUsableSpace());
      assertFalse(file1.isHidden());
      assertTrue(file1.canWrite());
      assertEquals("/home/CIN/lmps2/semantic-conflict-study/SMAT/output-test-dest/druid/05168808c278c080c59c19e858d9471b316cd1f5/evosuite_1/JSON0", file1.toString());
      assertTrue(file1.canRead());
      assertTrue(file1.isFile());
      assertEquals(0L, file1.getTotalSpace());
      assertTrue(file1.canExecute());
      assertEquals("JSON", jsonFactory0.getFormatName());
      assertEquals("LocalFS", rawLocalFileSystem0.toString());
      assertEquals((short)1, rawLocalFileSystem0.getDefaultReplication());
      assertNotSame(file0, file1);
      assertNotSame(file1, file0);
      assertEquals('/', Path.SEPARATOR_CHAR);
      
      Random.setNextRandom(restS3Service0.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals("", gSCredentials0.getSecretKey());
      assertNull(gSCredentials0.getFriendlyName());
      assertEquals("", gSCredentials0.getAccessKey());
      assertEquals("jets3t GS Credentials, version: ", gSCredentials0.getVersionPrefix());
      assertEquals(5, restS3Service0.getInternalErrorRetryMax());
      assertEquals("x-amz-meta-", restS3Service0.getRestMetadataPrefix());
      assertFalse(restS3Service0.isRequesterPaysEnabled());
      assertTrue(restS3Service0.isAuthenticatedConnection());
      assertTrue(restS3Service0.isHttpsOnly());
      assertEquals("x-amz-", restS3Service0.getRestHeaderPrefix());
      assertNull(restS3Service0.getInvokingApplicationDescription());
      assertNull(restS3Service0.getDevPayUserToken());
      assertFalse(restS3Service0.isShutdown());
      assertNull(restS3Service0.getDevPayProductToken());
      assertEquals(1, StorageService.BUCKET_STATUS__DOES_NOT_EXIST);
      assertEquals(2, StorageService.BUCKET_STATUS__ALREADY_CLAIMED);
      assertEquals(0, StorageService.BUCKET_STATUS__MY_BUCKET);
      
      long long0 = (-21L);
      // Undeclared exception!
      try { 
        s3SegmentPusher0.push(file0, dataSegment0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.String@0000000119\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
