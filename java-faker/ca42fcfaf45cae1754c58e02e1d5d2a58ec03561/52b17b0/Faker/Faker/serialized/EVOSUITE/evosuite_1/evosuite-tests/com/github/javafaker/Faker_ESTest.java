/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 10 09:25:57 GMT 2021
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.App;
import com.github.javafaker.Business;
import com.github.javafaker.Faker;
import com.github.javafaker.Finance;
import com.github.javafaker.Lorem;
import com.github.javafaker.Name;
import com.github.javafaker.Options;
import com.github.javafaker.PhoneNumber;
import com.github.javafaker.SerializedObjectSupporter;
import com.github.javafaker.service.FakeValuesService;
import com.github.javafaker.service.FakeValuesServiceInterface;
import java.lang.reflect.Proxy;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Faker_ESTest extends Faker_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Faker faker0 = new Faker();
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      FakeValuesServiceInterface fakeValuesServiceInterface0 = null;
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesServiceInterface0, fakeValuesServiceInterface0);
      assertNotNull(proxy0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Random random0 = serializedObjectSupporter0.deserializeObjectRandom2();
      assertNotNull(random0);
      
      Faker faker0 = new Faker(random0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertNotNull(locale0);
      assertEquals("it", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("it", locale0.toString());
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Locale locale0 = serializedObjectSupporter0.deserializeObjectLocale33();
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("en", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      long long0 = 1L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Faker faker0 = new Faker(mockRandom0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Locale locale0 = serializedObjectSupporter0.deserializeObjectLocale128();
      assertNotNull(locale0);
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.toString());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      
      App app0 = serializedObjectSupporter0.deserializeObjectApp25();
      assertNull(app0);
      
      Options options0 = serializedObjectSupporter0.deserializeObjectOptions64();
      assertNotNull(options0);
      
      Random random0 = serializedObjectSupporter0.deserializeObjectRandom8();
      assertNotNull(random0);
      
      Faker faker0 = new Faker(locale0, random0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Faker faker0 = new Faker(locale0, mockRandom0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Name name0 = serializedObjectSupporter0.deserializeObjectName68();
      assertNull(name0);
      
      FakeValuesService fakeValuesService0 = serializedObjectSupporter0.deserializeObjectFakeValuesService64();
      assertNull(fakeValuesService0);
      
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesService0, fakeValuesService0);
      assertNotNull(proxy0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertNotNull(locale0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.toString());
      
      long long0 = 12L;
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  could not be found, does not have a corresponding yaml file
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertNotNull(locale0);
      assertEquals("", locale0.getCountry());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      
      long long0 = 37L;
      Locale locale1 = null;
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "";
      String string1 = "_";
      Locale locale0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Random random0 = serializedObjectSupporter0.deserializeObjectRandom10();
      assertNotNull(random0);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0, random0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }
}
