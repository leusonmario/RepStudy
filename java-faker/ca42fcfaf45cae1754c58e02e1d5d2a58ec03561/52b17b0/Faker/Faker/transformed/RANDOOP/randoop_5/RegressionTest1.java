import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest1 {

    public static boolean debug = false;

    @Test
    public void test0501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0501");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        java.util.Locale locale19 = new java.util.Locale("Italian", "", "English");
        java.lang.String str20 = locale4.getDisplayLanguage(locale19);
        java.lang.String str21 = locale4.getScript();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0502");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0503");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        com.github.javafaker.Company company9 = faker8.company;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(company9);
    }

    @Test
    public void test0504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0504");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        faker6.book = book14;
        com.github.javafaker.Options options16 = faker6.options();
        faker0.options = options16;
        com.github.javafaker.service.RandomService randomService18 = faker0.randomService;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.service.RandomService randomService23 = faker19.randomService;
        com.github.javafaker.Book book24 = faker19.book;
        com.github.javafaker.Lorem lorem25 = null;
        faker19.lorem = lorem25;
        com.github.javafaker.Address address27 = faker19.address;
        faker0.address = address27;
        com.github.javafaker.Internet internet29 = faker0.internet;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(address27);
        org.junit.Assert.assertNotNull(internet29);
    }

    @Test
    public void test0505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0505");
        java.util.Locale locale2 = new java.util.Locale("hi!", "Chinese (China)");
        java.lang.String str3 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "hi!_CHINESE (CHINA)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! (CHINESE (CHINA))" + "'", str3, "hi! (CHINESE (CHINA))");
    }

    @Test
    public void test0506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0506");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.Internet internet7 = faker0.internet;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.DateAndTime dateAndTime12 = faker8.dateAndTime;
        java.lang.String str14 = faker8.letterify("en-CA");
        com.github.javafaker.Code code15 = null;
        faker8.code = code15;
        com.github.javafaker.Code code17 = faker8.code;
        com.github.javafaker.Options options18 = faker8.options;
        com.github.javafaker.Internet internet19 = faker8.internet();
        faker0.internet = internet19;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(internet7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-CA" + "'", str14, "en-CA");
        org.junit.Assert.assertNull(code17);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(internet19);
    }

    @Test
    public void test0507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0507");
        java.util.Locale locale3 = new java.util.Locale("can", "en-CA", "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587");
    }

    @Test
    public void test0508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0508");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        com.github.javafaker.Finance finance2 = faker0.finance;
        java.lang.String str4 = faker0.bothify("zh");
        com.github.javafaker.Hacker hacker5 = faker0.hacker;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(finance2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(hacker5);
    }

    @Test
    public void test0509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0509");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder14 = builder0.setExtension('x', "deu");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.setLanguageTag("\u52a0\u62ff\u5927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0510");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setRegion("deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0511");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale4.toLanguageTag();
        java.lang.String str6 = locale4.getDisplayName();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder10 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder14 = builder10.setVariant("");
        java.util.Locale.Builder builder16 = builder14.setLanguageTag("english");
        java.util.Locale locale17 = builder16.build();
        java.lang.String str18 = locale4.getDisplayLanguage(locale17);
        java.util.Set<java.lang.Character> charSet19 = locale17.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-CA" + "'", str5, "en-CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English (Canada)" + "'", str6, "English (Canada)");
        org.junit.Assert.assertNotNull(locale8);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "english");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertNotNull(charSet19);
    }

    @Test
    public void test0512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0512");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Chinese" + "'", str2, "Chinese");
    }

    @Test
    public void test0513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0513");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Hacker hacker8 = null;
        faker0.hacker = hacker8;
        com.github.javafaker.Hacker hacker10 = null;
        faker0.hacker = hacker10;
        com.github.javafaker.service.FakeValuesService fakeValuesService12 = faker0.fakeValuesService;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        com.github.javafaker.Address address21 = faker13.address();
        com.github.javafaker.App app22 = faker13.app;
        com.github.javafaker.Hacker hacker23 = faker13.hacker;
        faker0.hacker = hacker23;
        com.github.javafaker.Lorem lorem25 = faker0.lorem;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(fakeValuesService12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertNotNull(address21);
        org.junit.Assert.assertNotNull(app22);
        org.junit.Assert.assertNotNull(hacker23);
        org.junit.Assert.assertNull(lorem25);
    }

    @Test
    public void test0514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0514");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Finance finance12 = faker0.finance();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        faker13.book = book21;
        com.github.javafaker.DateAndTime dateAndTime23 = faker13.dateAndTime;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.Book book28 = faker24.book();
        com.github.javafaker.Finance finance29 = faker24.finance();
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService31 = faker30.randomService;
        java.lang.String str33 = faker30.bothify("");
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.Book book38 = faker34.book();
        faker30.book = book38;
        com.github.javafaker.Options options40 = faker30.options();
        faker24.options = options40;
        com.github.javafaker.service.RandomService randomService42 = faker24.randomService;
        com.github.javafaker.Faker faker43 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService44 = faker43.randomService;
        com.github.javafaker.Book book45 = faker43.book();
        com.github.javafaker.Finance finance46 = faker43.finance();
        com.github.javafaker.Book book47 = faker43.book();
        com.github.javafaker.Options options48 = faker43.options();
        com.github.javafaker.PhoneNumber phoneNumber49 = faker43.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService50 = faker43.fakeValuesService;
        faker24.fakeValuesService = fakeValuesService50;
        faker13.fakeValuesService = fakeValuesService50;
        com.github.javafaker.Faker faker53 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService54 = faker53.randomService;
        java.lang.String str56 = faker53.bothify("");
        com.github.javafaker.DateAndTime dateAndTime57 = faker53.dateAndTime;
        java.lang.String str59 = faker53.letterify("en-CA");
        com.github.javafaker.Code code60 = null;
        faker53.code = code60;
        com.github.javafaker.Faker faker62 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService63 = faker62.randomService;
        java.lang.String str65 = faker62.bothify("");
        com.github.javafaker.DateAndTime dateAndTime66 = faker62.dateAndTime;
        com.github.javafaker.Faker faker67 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService68 = faker67.randomService;
        java.lang.String str70 = faker67.bothify("");
        com.github.javafaker.Faker faker71 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService72 = faker71.randomService;
        java.lang.String str74 = faker71.bothify("");
        com.github.javafaker.Book book75 = faker71.book();
        faker67.book = book75;
        faker62.book = book75;
        faker53.book = book75;
        com.github.javafaker.Faker faker79 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService80 = faker79.randomService;
        java.lang.String str82 = faker79.bothify("");
        com.github.javafaker.Book book83 = faker79.book();
        com.github.javafaker.Number number84 = faker79.number();
        faker53.number = number84;
        java.util.Locale locale86 = java.util.Locale.ITALIAN;
        java.util.Locale locale87 = java.util.Locale.CANADA;
        java.util.Locale locale88 = java.util.Locale.KOREAN;
        java.lang.String str89 = locale87.getDisplayName(locale88);
        java.lang.String str90 = locale87.getISO3Language();
        java.util.Locale locale91 = locale87.stripExtensions();
        java.lang.String str92 = locale91.toLanguageTag();
        java.lang.String str93 = locale86.getDisplayLanguage(locale91);
        com.github.javafaker.Faker faker94 = new com.github.javafaker.Faker(locale86);
        com.github.javafaker.Company company95 = faker94.company();
        faker53.company = company95;
        com.github.javafaker.Name name97 = faker53.name();
        faker13.name = name97;
        faker0.name = name97;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(book28);
        org.junit.Assert.assertNotNull(finance29);
        org.junit.Assert.assertNotNull(randomService31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(book38);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(randomService42);
        org.junit.Assert.assertNotNull(randomService44);
        org.junit.Assert.assertNotNull(book45);
        org.junit.Assert.assertNotNull(finance46);
        org.junit.Assert.assertNotNull(book47);
        org.junit.Assert.assertNotNull(options48);
        org.junit.Assert.assertNotNull(phoneNumber49);
        org.junit.Assert.assertNotNull(fakeValuesService50);
        org.junit.Assert.assertNotNull(randomService54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(dateAndTime57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-CA" + "'", str59, "en-CA");
        org.junit.Assert.assertNotNull(randomService63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateAndTime66);
        org.junit.Assert.assertNotNull(randomService68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(randomService72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(book75);
        org.junit.Assert.assertNotNull(randomService80);
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "" + "'", str82, "");
        org.junit.Assert.assertNotNull(book83);
        org.junit.Assert.assertNotNull(number84);
        org.junit.Assert.assertNotNull(locale86);
        org.junit.Assert.assertEquals(locale86.toString(), "it");
        org.junit.Assert.assertNotNull(locale87);
        org.junit.Assert.assertEquals(locale87.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str89 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str89, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "eng" + "'", str90, "eng");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "en-CA" + "'", str92, "en-CA");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "Italian" + "'", str93, "Italian");
        org.junit.Assert.assertNotNull(company95);
        org.junit.Assert.assertNotNull(name97);
    }

    @Test
    public void test0515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0515");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale22 = new java.util.Locale("Italian", "", "English");
        java.lang.String str23 = locale7.getDisplayLanguage(locale22);
        java.lang.String str24 = locale1.getDisplayLanguage(locale22);
        java.util.Locale.setDefault(category0, locale1);
        java.lang.String str26 = locale1.getDisplayName();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "inglese (Regno Unito)" + "'", str26, "inglese (Regno Unito)");
    }

    @Test
    public void test0516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0516");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str2 = locale0.getExtension('x');
        java.util.Random random4 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream5 = random4.longs();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random4);
        java.util.stream.DoubleStream doubleStream9 = random4.doubles((double) 0L, (double) ' ');
        boolean boolean10 = locale0.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0517");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        boolean boolean5 = locale0.hasExtensions();
        java.lang.String str7 = locale0.getExtension('x');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0518");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = locale18.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.lang.String str27 = locale23.getDisplayVariant();
        java.lang.String str29 = locale23.getExtension('a');
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.lang.String str39 = locale35.getDisplayVariant();
        java.lang.String str41 = locale35.getExtension('a');
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = locale42.getISO3Language();
        java.lang.String str46 = locale42.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale50.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.lang.String str56 = locale53.getISO3Language();
        java.util.Locale locale57 = locale53.stripExtensions();
        java.lang.String str58 = locale57.toLanguageTag();
        java.lang.String str59 = locale52.getDisplayLanguage(locale57);
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getCountry();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale64.getISO3Language();
        java.util.Locale locale68 = locale64.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getDisplayVariant();
        java.util.Locale.setDefault(locale70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale8, locale9, locale12, locale15, locale17, locale22, locale23, locale34, locale35, locale42, locale48, locale50, locale52, locale60, locale64, locale69, locale70 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        java.lang.String[] strArray83 = new java.lang.String[] { "en-CA", "eng", "en_US", "", "Korean" };
        java.util.ArrayList<java.lang.String> strList84 = new java.util.ArrayList<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList84, strArray83);
        java.util.List<java.lang.String> strList86 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList84);
        java.lang.String str87 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList86);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str16, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "eng" + "'", str45, "eng");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str49, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str55, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "en-CA" + "'", str58, "en-CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Italian" + "'", str59, "Italian");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str62, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CA" + "'", str63, "CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str66, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "eng" + "'", str67, "eng");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode76.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(strList86);
        org.junit.Assert.assertNull(str87);
    }

    @Test
    public void test0519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0519");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Code code7 = faker0.code();
        com.github.javafaker.Address address8 = faker0.address();
        com.github.javafaker.App app9 = faker0.app;
        com.github.javafaker.Hacker hacker10 = faker0.hacker;
        com.github.javafaker.Name name11 = faker0.name;
        com.github.javafaker.Code code12 = null;
        faker0.code = code12;
        com.github.javafaker.Business business14 = faker0.business();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(address8);
        org.junit.Assert.assertNotNull(app9);
        org.junit.Assert.assertNotNull(hacker10);
        org.junit.Assert.assertNotNull(name11);
        org.junit.Assert.assertNotNull(business14);
    }

    @Test
    public void test0520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0520");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.DateAndTime dateAndTime5 = faker0.dateAndTime;
        com.github.javafaker.DateAndTime dateAndTime6 = faker0.date();
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Internet internet8 = faker0.internet();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(internet8);
    }

    @Test
    public void test0521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0521");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale5.toLanguageTag();
        java.lang.String str8 = locale0.getDisplayScript(locale5);
        java.util.Set<java.lang.Character> charSet9 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en-CA" + "'", str7, "en-CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
    }

    @Test
    public void test0522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0522");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("eng");
        double double8 = languageRange7.getWeight();
        double double9 = languageRange7.getWeight();
        java.lang.String str10 = languageRange7.getRange();
        double double11 = languageRange7.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale19.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.util.Locale locale32 = locale28.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale33.getDisplayVariant();
        java.lang.String str39 = locale33.getExtension('a');
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.lang.String str49 = locale45.getDisplayVariant();
        java.lang.String str51 = locale45.getExtension('a');
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale52.getDisplayVariant();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale60.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = locale63.getISO3Language();
        java.util.Locale locale67 = locale63.stripExtensions();
        java.lang.String str68 = locale67.toLanguageTag();
        java.lang.String str69 = locale62.getDisplayLanguage(locale67);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayName(locale71);
        java.lang.String str73 = locale70.getCountry();
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.lang.String str77 = locale74.getISO3Language();
        java.util.Locale locale78 = locale74.stripExtensions();
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.lang.String str81 = locale80.getDisplayVariant();
        java.util.Locale.setDefault(locale80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale18, locale19, locale22, locale25, locale27, locale32, locale33, locale44, locale45, locale52, locale58, locale60, locale62, locale70, locale74, locale79, locale80 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList84, filteringMode86);
        java.util.Collection<java.util.Locale> localeCollection88 = null;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, localeCollection88);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.Locale locale91 = java.util.Locale.CANADA;
        java.util.Locale locale92 = java.util.Locale.KOREAN;
        java.lang.String str93 = locale91.getDisplayName(locale92);
        java.util.Set<java.lang.String> strSet94 = locale91.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet94, filteringMode95);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap97 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList98 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap97);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str23, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str30, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str65, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "eng" + "'", str66, "eng");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en-CA" + "'", str68, "en-CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Italian" + "'", str69, "Italian");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str72, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CA" + "'", str73, "CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str76, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "eng" + "'", str77, "eng");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode86.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str93 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str93, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode95.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(languageRangeList98);
    }

    @Test
    public void test0523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0523");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setExtension('4', "ko");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0524");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        com.github.javafaker.Book book20 = faker18.book();
        com.github.javafaker.Finance finance21 = faker18.finance();
        com.github.javafaker.Lorem lorem22 = faker18.lorem();
        com.github.javafaker.Finance finance23 = faker18.finance();
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        java.lang.String str29 = faker24.letterify("eng");
        com.github.javafaker.service.RandomService randomService30 = faker24.randomService;
        faker18.randomService = randomService30;
        faker16.randomService = randomService30;
        com.github.javafaker.Company company33 = faker16.company;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options35 = faker34.options;
        com.github.javafaker.Business business36 = faker34.business;
        faker16.business = business36;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(lorem22);
        org.junit.Assert.assertNotNull(finance23);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertNotNull(company33);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(business36);
    }

    @Test
    public void test0525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0525");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        double double14 = random1.nextDouble();
        java.util.stream.IntStream intStream16 = random1.ints((long) 0);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.41008081149220166d + "'", double14 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(intStream16);
    }

    @Test
    public void test0526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0526");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getLanguage();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getCountry();
        java.lang.String str13 = locale9.getScript();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        java.util.Locale locale18 = locale14.stripExtensions();
        java.lang.String str19 = locale9.getDisplayScript(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder21 = builder8.setLocale(locale18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getCountry();
        java.lang.String str31 = locale27.getScript();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = locale32.stripExtensions();
        java.lang.String str37 = locale27.getDisplayScript(locale36);
        java.lang.String str38 = locale26.getDisplayScript(locale27);
        java.lang.String str39 = locale22.getDisplayScript(locale27);
        java.lang.String str40 = locale18.getDisplayName(locale22);
        java.lang.String str41 = locale2.getDisplayLanguage(locale18);
        java.lang.String str42 = locale2.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CA" + "'", str12, "CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str16, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals(locale24.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CA" + "'", str30, "CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0527");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale0);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test0528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0528");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.util.Set<java.lang.String> strSet7 = locale4.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertNotNull(strSet7);
    }

    @Test
    public void test0529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0529");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setRegion("");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0530");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("CAN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("italiano", "english (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: italiano [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0531");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale locale12 = builder11.build();
        java.lang.String str13 = locale12.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0532");
        java.util.Locale locale2 = new java.util.Locale("fra", "Germany");
        org.junit.Assert.assertEquals(locale2.toString(), "fra_GERMANY");
    }

    @Test
    public void test0533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0533");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale7 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale8.getDisplayName();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale8.getDisplayName(locale10);
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream18 = random17.doubles();
        java.util.stream.LongStream longStream21 = random17.longs((long) 0, 10L);
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(locale10, random17);
        java.lang.String str23 = locale7.getDisplayName(locale10);
        java.lang.String str24 = locale0.getDisplayVariant(locale7);
        boolean boolean25 = locale7.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale7.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Korean" + "'", str15, "Korean");
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(longStream21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str23, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0534");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test0535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0535");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Address address5 = faker0.address;
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale locale7 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet8 = locale7.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder9 = builder6.setLocale(locale7);
        java.util.Locale locale10 = builder6.build();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random12.nextBytes(byteArray20);
        double double22 = random12.nextGaussian();
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker(locale10, random12);
        com.github.javafaker.DateAndTime dateAndTime24 = faker23.dateAndTime;
        faker0.dateAndTime = dateAndTime24;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(address5);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.4123569817688534d) + "'", double22 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(dateAndTime24);
    }

    @Test
    public void test0536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0536");
        java.util.Locale locale3 = new java.util.Locale("inglese", "CA", "ita");
        org.junit.Assert.assertEquals(locale3.toString(), "inglese_CA_ita");
    }

    @Test
    public void test0537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0537");
        java.util.Locale locale3 = new java.util.Locale("it", "it", "");
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test0538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0538");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test0539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0539");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale5);
        java.lang.String str7 = locale3.getDisplayName(locale5);
        java.lang.String str8 = locale1.getDisplayCountry(locale3);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "coreano" + "'", str7, "coreano");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0540");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("Korean");
        java.util.Locale locale11 = new java.util.Locale("eng");
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.Builder builder13 = builder9.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale11);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: eng could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0541");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.PhoneNumber phoneNumber7 = null;
        faker0.phoneNumber = phoneNumber7;
        com.github.javafaker.PhoneNumber phoneNumber9 = faker0.phoneNumber();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNull(phoneNumber9);
    }

    @Test
    public void test0542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0542");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name1 = faker0.name();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name3 = faker2.name();
        faker0.name = name3;
        com.github.javafaker.DateAndTime dateAndTime5 = faker0.dateAndTime;
        com.github.javafaker.Internet internet6 = faker0.internet();
        org.junit.Assert.assertNotNull(name1);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(internet6);
    }

    @Test
    public void test0543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0543");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.DateAndTime dateAndTime9 = null;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options12 = faker11.options;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.lang.String str14 = locale13.getDisplayVariant();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale13);
        com.github.javafaker.Finance finance16 = faker15.finance();
        com.github.javafaker.Code code17 = faker15.code;
        faker11.code = code17;
        faker0.code = code17;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(options12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(finance16);
        org.junit.Assert.assertNotNull(code17);
    }

    @Test
    public void test0544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0544");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Finance finance27 = faker0.finance();
        com.github.javafaker.Number number28 = faker0.number;
        java.util.Locale locale29 = java.util.Locale.ITALIAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.lang.String str35 = locale34.toLanguageTag();
        java.lang.String str36 = locale29.getDisplayLanguage(locale34);
        com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker(locale29);
        com.github.javafaker.Number number38 = faker37.number;
        com.github.javafaker.Lorem lorem39 = faker37.lorem;
        faker0.lorem = lorem39;
        java.lang.String str42 = faker0.regexify("Italien");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(number28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en-CA" + "'", str35, "en-CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Italian" + "'", str36, "Italian");
        org.junit.Assert.assertNotNull(number38);
        org.junit.Assert.assertNotNull(lorem39);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Italien" + "'", str42, "Italien");
    }

    @Test
    public void test0545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0545");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getCountry();
        java.lang.String str9 = locale5.getScript();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale5.getDisplayScript(locale14);
        java.lang.String str16 = locale4.getDisplayScript(locale5);
        java.lang.String str17 = locale0.getDisplayScript(locale5);
        java.util.Set<java.lang.Character> charSet18 = locale0.getExtensionKeys();
        java.lang.String str19 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CA" + "'", str8, "CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(charSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0546");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Business business9 = faker0.business;
        com.github.javafaker.Lorem lorem10 = faker0.lorem;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(lorem10);
    }

    @Test
    public void test0547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0547");
        java.util.Random random1 = new java.util.Random((long) 69);
    }

    @Test
    public void test0548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0548");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Business business4 = faker3.business();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(business4);
    }

    @Test
    public void test0549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0549");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        faker6.book = book14;
        com.github.javafaker.Options options16 = faker6.options();
        faker0.options = options16;
        com.github.javafaker.service.RandomService randomService18 = faker0.randomService;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.service.RandomService randomService23 = faker19.randomService;
        com.github.javafaker.Book book24 = faker19.book;
        com.github.javafaker.Lorem lorem25 = null;
        faker19.lorem = lorem25;
        com.github.javafaker.Address address27 = faker19.address;
        faker0.address = address27;
        com.github.javafaker.Finance finance29 = faker0.finance;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(address27);
        org.junit.Assert.assertNotNull(finance29);
    }

    @Test
    public void test0550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0550");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.String str10 = locale0.getDisplayVariant(locale8);
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random12.nextBytes(byteArray20);
        double double22 = random12.nextGaussian();
        java.util.stream.DoubleStream doubleStream24 = random12.doubles((long) '#');
        int int25 = random12.nextInt();
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker(locale8, random12);
        int int27 = random12.nextInt();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.4123569817688534d) + "'", double22 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1429008869 + "'", int25 == 1429008869);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1465154083) + "'", int27 == (-1465154083));
    }

    @Test
    public void test0551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0551");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles(1853403699951111791L);
        java.util.stream.IntStream intStream16 = random1.ints((-1155869325), 1429008869);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(intStream16);
    }

    @Test
    public void test0552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0552");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("eng");
        double double8 = languageRange7.getWeight();
        double double9 = languageRange7.getWeight();
        java.lang.String str10 = languageRange7.getRange();
        double double11 = languageRange7.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale locale18 = java.util.Locale.ENGLISH;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.lang.String str20 = locale19.getDisplayVariant();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.util.Locale locale32 = locale28.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale33.getDisplayVariant();
        java.lang.String str39 = locale33.getExtension('a');
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.lang.String str49 = locale45.getDisplayVariant();
        java.lang.String str51 = locale45.getExtension('a');
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.lang.String str56 = locale52.getDisplayVariant();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale60.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.ITALIAN;
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.util.Locale locale64 = java.util.Locale.KOREAN;
        java.lang.String str65 = locale63.getDisplayName(locale64);
        java.lang.String str66 = locale63.getISO3Language();
        java.util.Locale locale67 = locale63.stripExtensions();
        java.lang.String str68 = locale67.toLanguageTag();
        java.lang.String str69 = locale62.getDisplayLanguage(locale67);
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayName(locale71);
        java.lang.String str73 = locale70.getCountry();
        java.util.Locale locale74 = java.util.Locale.CANADA;
        java.util.Locale locale75 = java.util.Locale.KOREAN;
        java.lang.String str76 = locale74.getDisplayName(locale75);
        java.lang.String str77 = locale74.getISO3Language();
        java.util.Locale locale78 = locale74.stripExtensions();
        java.util.Locale locale79 = java.util.Locale.JAPAN;
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.lang.String str81 = locale80.getDisplayVariant();
        java.util.Locale.setDefault(locale80);
        java.util.Locale[] localeArray83 = new java.util.Locale[] { locale18, locale19, locale22, locale25, locale27, locale32, locale33, locale44, locale45, locale52, locale58, locale60, locale62, locale70, locale74, locale79, locale80 };
        java.util.ArrayList<java.util.Locale> localeList84 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList84, localeArray83);
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList84, filteringMode86);
        java.util.Collection<java.util.Locale> localeCollection88 = null;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, localeCollection88);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.util.Locale>) localeList89);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap91 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList92 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap91);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.0d + "'", double9 == 1.0d);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str23, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str30, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNull(str51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str65 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str65, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "eng" + "'", str66, "eng");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "en-CA" + "'", str68, "en-CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Italian" + "'", str69, "Italian");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str72, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "CA" + "'", str73, "CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str76 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str76, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "eng" + "'", str77, "eng");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str81 + "' != '" + "" + "'", str81, "");
        org.junit.Assert.assertNotNull(localeArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode86.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList87);
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(languageRangeList92);
    }

    @Test
    public void test0553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0553");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.PhoneNumber phoneNumber7 = null;
        faker0.phoneNumber = phoneNumber7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.service.RandomService randomService13 = faker9.randomService;
        com.github.javafaker.Book book14 = faker9.book;
        com.github.javafaker.Lorem lorem15 = null;
        faker9.lorem = lorem15;
        com.github.javafaker.Hacker hacker17 = null;
        faker9.hacker = hacker17;
        com.github.javafaker.Color color19 = faker9.color;
        com.github.javafaker.Book book20 = faker9.book();
        com.github.javafaker.Code code21 = faker9.code;
        faker0.code = code21;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(color19);
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(code21);
    }

    @Test
    public void test0554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0554");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker8.phoneNumber;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Number number16 = faker11.number();
        com.github.javafaker.Lorem lorem17 = null;
        faker11.lorem = lorem17;
        com.github.javafaker.Business business19 = faker11.business();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.DateAndTime dateAndTime24 = faker20.dateAndTime;
        com.github.javafaker.Lorem lorem25 = null;
        faker20.lorem = lorem25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Lorem lorem31 = faker27.lorem();
        faker20.lorem = lorem31;
        faker11.lorem = lorem31;
        faker8.lorem = lorem31;
        com.github.javafaker.Faker faker35 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService36 = faker35.randomService;
        java.lang.String str38 = faker35.bothify("");
        com.github.javafaker.DateAndTime dateAndTime39 = faker35.dateAndTime;
        java.lang.String str41 = faker35.letterify("en-CA");
        com.github.javafaker.Name name42 = faker35.name;
        faker8.name = name42;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(number16);
        org.junit.Assert.assertNotNull(business19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateAndTime24);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(lorem31);
        org.junit.Assert.assertNotNull(randomService36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(dateAndTime39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en-CA" + "'", str41, "en-CA");
        org.junit.Assert.assertNotNull(name42);
    }

    @Test
    public void test0555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0555");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        com.github.javafaker.Book book36 = faker34.book();
        faker29.book = book36;
        com.github.javafaker.Business business38 = faker29.business;
        faker16.business = business38;
        com.github.javafaker.Name name40 = faker16.name;
        com.github.javafaker.Address address41 = faker16.address();
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService43 = faker42.randomService;
        java.lang.String str45 = faker42.bothify("");
        com.github.javafaker.DateAndTime dateAndTime46 = faker42.dateAndTime;
        com.github.javafaker.Faker faker47 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService48 = faker47.randomService;
        java.lang.String str50 = faker47.bothify("");
        com.github.javafaker.DateAndTime dateAndTime51 = faker47.dateAndTime;
        faker42.dateAndTime = dateAndTime51;
        com.github.javafaker.Code code53 = null;
        faker42.code = code53;
        com.github.javafaker.Faker faker55 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService56 = faker55.randomService;
        java.lang.String str58 = faker55.bothify("");
        com.github.javafaker.Faker faker59 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService60 = faker59.randomService;
        com.github.javafaker.Book book61 = faker59.book();
        com.github.javafaker.Finance finance62 = faker59.finance();
        com.github.javafaker.Book book63 = faker59.book();
        com.github.javafaker.Options options64 = faker59.options();
        com.github.javafaker.PhoneNumber phoneNumber65 = faker59.phoneNumber();
        faker55.phoneNumber = phoneNumber65;
        com.github.javafaker.Name name67 = faker55.name();
        faker42.name = name67;
        com.github.javafaker.Finance finance69 = faker42.finance();
        com.github.javafaker.Number number70 = faker42.number;
        com.github.javafaker.DateAndTime dateAndTime71 = faker42.dateAndTime;
        faker16.dateAndTime = dateAndTime71;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(business38);
        org.junit.Assert.assertNotNull(name40);
        org.junit.Assert.assertNotNull(address41);
        org.junit.Assert.assertNotNull(randomService43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateAndTime46);
        org.junit.Assert.assertNotNull(randomService48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(dateAndTime51);
        org.junit.Assert.assertNotNull(randomService56);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(randomService60);
        org.junit.Assert.assertNotNull(book61);
        org.junit.Assert.assertNotNull(finance62);
        org.junit.Assert.assertNotNull(book63);
        org.junit.Assert.assertNotNull(options64);
        org.junit.Assert.assertNotNull(phoneNumber65);
        org.junit.Assert.assertNotNull(name67);
        org.junit.Assert.assertNotNull(finance69);
        org.junit.Assert.assertNotNull(number70);
        org.junit.Assert.assertNotNull(dateAndTime71);
    }

    @Test
    public void test0556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0556");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Address address7 = null;
        faker0.address = address7;
        com.github.javafaker.Name name9 = null;
        faker0.name = name9;
        com.github.javafaker.DateAndTime dateAndTime11 = faker0.dateAndTime;
        java.lang.String str13 = faker0.letterify("Chinese (China)");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Chinese (China)" + "'", str13, "Chinese (China)");
    }

    @Test
    public void test0557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0557");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        long long7 = random1.nextLong();
        float float8 = random1.nextFloat();
        java.util.stream.LongStream longStream9 = random1.longs();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 7564655870752979346L + "'", long7 == 7564655870752979346L);
        org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.2077148f + "'", float8 == 0.2077148f);
        org.junit.Assert.assertNotNull(longStream9);
    }

    @Test
    public void test0558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0558");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService3 = faker2.randomService;
        java.lang.String str5 = faker2.bothify("");
        com.github.javafaker.DateAndTime dateAndTime6 = faker2.dateAndTime;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        faker7.book = book15;
        faker2.book = book15;
        faker0.book = book15;
        com.github.javafaker.Internet internet19 = null;
        faker0.internet = internet19;
        com.github.javafaker.Name name21 = faker0.name;
        com.github.javafaker.Company company22 = faker0.company();
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(randomService3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(name21);
        org.junit.Assert.assertNotNull(company22);
    }

    @Test
    public void test0559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0559");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Internet internet27 = faker0.internet;
        com.github.javafaker.Finance finance28 = faker0.finance;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(internet27);
        org.junit.Assert.assertNotNull(finance28);
    }

    @Test
    public void test0560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0560");
        java.util.Locale locale3 = new java.util.Locale("CAN", "\uc601\uc5b4\uce90\ub098\ub2e4)", "en-CA");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale3.getISO3Country();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter country code for ????? (??????)");
        } catch (java.util.MissingResourceException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)_en-CA");
    }

    @Test
    public void test0561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0561");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        java.lang.String str7 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
    }

    @Test
    public void test0562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0562");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options7 = faker6.options;
        faker0.options = options7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        com.github.javafaker.Book book16 = faker14.book();
        faker9.book = book16;
        com.github.javafaker.Finance finance18 = faker9.finance();
        com.github.javafaker.Options options19 = faker9.options();
        faker0.options = options19;
        com.github.javafaker.Internet internet21 = faker0.internet;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(finance18);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(internet21);
    }

    @Test
    public void test0563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0563");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Lorem lorem5 = faker0.lorem;
        com.github.javafaker.Finance finance6 = faker0.finance();
        com.github.javafaker.Book book7 = faker0.book;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(book7);
    }

    @Test
    public void test0564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0564");
        java.util.Random random1 = new java.util.Random((long) 100);
        java.util.stream.DoubleStream doubleStream3 = random1.doubles((long) '#');
        java.util.stream.LongStream longStream6 = random1.longs((-4964420948893066024L), (long) (-1157793070));
        int int7 = random1.nextInt();
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1193959466) + "'", int7 == (-1193959466));
    }

    @Test
    public void test0565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0565");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.Internet internet7 = faker0.internet;
        com.github.javafaker.DateAndTime dateAndTime8 = faker0.date();
        com.github.javafaker.Color color9 = faker0.color;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        com.github.javafaker.Book book15 = faker10.book;
        faker0.book = book15;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(internet7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(book15);
    }

    @Test
    public void test0566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0566");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italiano" + "'", str4, "italiano");
    }

    @Test
    public void test0567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0567");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0568");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name1 = faker0.name();
        com.github.javafaker.Number number2 = faker0.number();
        org.junit.Assert.assertNotNull(name1);
        org.junit.Assert.assertNotNull(number2);
    }

    @Test
    public void test0569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0569");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        java.util.Locale locale27 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getCountry();
        java.lang.String str34 = locale30.getScript();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale30.getDisplayScript(locale39);
        java.lang.String str41 = locale29.getDisplayScript(locale30);
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker(locale30);
        com.github.javafaker.Color color43 = faker42.color;
        faker0.color = color43;
        com.github.javafaker.Number number45 = faker0.number;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertEquals(locale27.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CA" + "'", str33, "CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertNotNull(number45);
    }

    @Test
    public void test0570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0570");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        double double4 = random1.nextGaussian();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + (-0.8673886034754649d) + "'", double4 == (-0.8673886034754649d));
    }

    @Test
    public void test0571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0571");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("CAN", (double) 1.0f);
        java.lang.String str3 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "can" + "'", str3, "can");
    }

    @Test
    public void test0572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0572");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale locale6 = builder0.build();
        java.lang.String str7 = locale6.getVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0573");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        java.util.Locale locale19 = new java.util.Locale("Italian", "", "English");
        java.lang.String str20 = locale4.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0574");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = java.util.Locale.FRENCH;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.lang.String str8 = locale2.getDisplayCountry(locale3);
        java.lang.String str9 = locale0.getDisplayVariant(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0575");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        java.lang.String str10 = faker8.bothify("en-CA");
        com.github.javafaker.Company company11 = faker8.company;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "en-CA" + "'", str10, "en-CA");
        org.junit.Assert.assertNotNull(company11);
    }

    @Test
    public void test0576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0576");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        faker10.dateAndTime = dateAndTime19;
        com.github.javafaker.Code code21 = null;
        faker10.code = code21;
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.DateAndTime dateAndTime27 = faker23.dateAndTime;
        com.github.javafaker.Lorem lorem28 = null;
        faker23.lorem = lorem28;
        com.github.javafaker.Code code30 = faker23.code();
        faker10.code = code30;
        com.github.javafaker.Company company32 = faker10.company();
        faker9.company = company32;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService39 = faker38.randomService;
        java.lang.String str41 = faker38.bothify("");
        com.github.javafaker.Book book42 = faker38.book();
        faker34.book = book42;
        com.github.javafaker.Options options44 = faker34.options();
        com.github.javafaker.App app45 = faker34.app;
        com.github.javafaker.Finance finance46 = faker34.finance();
        com.github.javafaker.Faker faker47 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService48 = faker47.randomService;
        java.lang.String str50 = faker47.bothify("");
        com.github.javafaker.Book book51 = faker47.book();
        com.github.javafaker.Number number52 = faker47.number();
        com.github.javafaker.Finance finance53 = faker47.finance;
        com.github.javafaker.Options options54 = faker47.options;
        faker34.options = options54;
        faker9.options = options54;
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateAndTime27);
        org.junit.Assert.assertNotNull(code30);
        org.junit.Assert.assertNotNull(company32);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(randomService39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(book42);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(app45);
        org.junit.Assert.assertNotNull(finance46);
        org.junit.Assert.assertNotNull(randomService48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(book51);
        org.junit.Assert.assertNotNull(number52);
        org.junit.Assert.assertNotNull(finance53);
        org.junit.Assert.assertNotNull(options54);
    }

    @Test
    public void test0577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0577");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("english");
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setScript("en-CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en-CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "english");
    }

    @Test
    public void test0578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0578");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale locale7 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Set<java.lang.String> strSet13 = locale9.getUnicodeLocaleAttributes();
        java.lang.String str14 = locale3.getDisplayCountry(locale9);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Canada" + "'", str14, "Canada");
    }

    @Test
    public void test0579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0579");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        java.util.stream.DoubleStream doubleStream9 = random1.doubles((double) 0.73043025f, (double) (byte) 1);
        java.util.stream.IntStream intStream11 = random1.ints(0L);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(intStream11);
    }

    @Test
    public void test0580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0580");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles();
        java.util.stream.LongStream longStream5 = random1.longs((long) (byte) 1);
        double double6 = random1.nextGaussian();
        random1.setSeed(100L);
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream11 = random10.doubles();
        java.util.stream.IntStream intStream12 = random10.ints();
        java.util.stream.LongStream longStream16 = random10.longs((long) 100, 0L, (long) 'u');
        java.util.Random random18 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream19 = random18.doubles();
        java.util.Random random21 = new java.util.Random((long) 1);
        java.util.Random random23 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream24 = random23.longs();
        byte[] byteArray31 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random23.nextBytes(byteArray31);
        random21.nextBytes(byteArray31);
        random18.nextBytes(byteArray31);
        random10.nextBytes(byteArray31);
        random1.nextBytes(byteArray31);
        java.util.Random random38 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream39 = random38.longs();
        int int41 = random38.nextInt((int) 'u');
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker(random38);
        java.util.Random random44 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream45 = random44.longs();
        java.util.stream.DoubleStream doubleStream46 = random44.doubles();
        java.util.stream.LongStream longStream48 = random44.longs((long) (byte) 1);
        double double49 = random44.nextGaussian();
        random44.setSeed(100L);
        java.util.Random random53 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream54 = random53.doubles();
        java.util.stream.IntStream intStream55 = random53.ints();
        java.util.stream.LongStream longStream59 = random53.longs((long) 100, 0L, (long) 'u');
        java.util.Random random61 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream62 = random61.doubles();
        java.util.Random random64 = new java.util.Random((long) 1);
        java.util.Random random66 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream67 = random66.longs();
        byte[] byteArray74 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random66.nextBytes(byteArray74);
        random64.nextBytes(byteArray74);
        random61.nextBytes(byteArray74);
        random53.nextBytes(byteArray74);
        random44.nextBytes(byteArray74);
        random38.nextBytes(byteArray74);
        random1.nextBytes(byteArray74);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.561581040188955d + "'", double6 == 1.561581040188955d);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertNotNull(longStream24);
        org.junit.Assert.assertNotNull(byteArray31);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-42, -97, -43, -72, -76, -37]");
        org.junit.Assert.assertNotNull(longStream39);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 69 + "'", int41 == 69);
        org.junit.Assert.assertNotNull(longStream45);
        org.junit.Assert.assertNotNull(doubleStream46);
        org.junit.Assert.assertNotNull(longStream48);
        org.junit.Assert.assertTrue("'" + double49 + "' != '" + 1.561581040188955d + "'", double49 == 1.561581040188955d);
        org.junit.Assert.assertNotNull(doubleStream54);
        org.junit.Assert.assertNotNull(intStream55);
        org.junit.Assert.assertNotNull(longStream59);
        org.junit.Assert.assertNotNull(doubleStream62);
        org.junit.Assert.assertNotNull(longStream67);
        org.junit.Assert.assertNotNull(byteArray74);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray74), "[69, -13, -23, 49, 105, -29]");
    }

    @Test
    public void test0581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0581");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        java.util.stream.IntStream intStream15 = random1.ints();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertNotNull(intStream15);
    }

    @Test
    public void test0582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0582");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        int int16 = random1.nextInt(1429008869);
        java.util.stream.IntStream intStream18 = random1.ints((long) 1429008869);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1414906606 + "'", int16 == 1414906606);
        org.junit.Assert.assertNotNull(intStream18);
    }

    @Test
    public void test0583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0583");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("CAN");
        java.util.Locale locale4 = builder3.build();
        java.util.Locale.Builder builder6 = builder3.setRegion("");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "can");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0584");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random6.nextBytes(byteArray14);
        double double16 = random6.nextGaussian();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale4, random6);
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.PhoneNumber phoneNumber19 = faker17.phoneNumber;
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.4123569817688534d) + "'", double16 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(phoneNumber19);
    }

    @Test
    public void test0585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0585");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Color color8 = faker0.color();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance10 = faker9.finance;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.DateAndTime dateAndTime15 = faker11.dateAndTime;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.Book book24 = faker20.book();
        faker16.book = book24;
        faker11.book = book24;
        faker9.book = book24;
        com.github.javafaker.Internet internet28 = null;
        faker9.internet = internet28;
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService31 = faker30.randomService;
        java.lang.String str33 = faker30.bothify("");
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.Book book38 = faker34.book();
        faker30.book = book38;
        com.github.javafaker.DateAndTime dateAndTime40 = faker30.dateAndTime;
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService42 = faker41.randomService;
        java.lang.String str44 = faker41.bothify("");
        com.github.javafaker.Book book45 = faker41.book();
        com.github.javafaker.Finance finance46 = faker41.finance();
        com.github.javafaker.Faker faker47 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService48 = faker47.randomService;
        java.lang.String str50 = faker47.bothify("");
        com.github.javafaker.Faker faker51 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService52 = faker51.randomService;
        java.lang.String str54 = faker51.bothify("");
        com.github.javafaker.Book book55 = faker51.book();
        faker47.book = book55;
        com.github.javafaker.Options options57 = faker47.options();
        faker41.options = options57;
        com.github.javafaker.service.RandomService randomService59 = faker41.randomService;
        com.github.javafaker.Faker faker60 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService61 = faker60.randomService;
        com.github.javafaker.Book book62 = faker60.book();
        com.github.javafaker.Finance finance63 = faker60.finance();
        com.github.javafaker.Book book64 = faker60.book();
        com.github.javafaker.Options options65 = faker60.options();
        com.github.javafaker.PhoneNumber phoneNumber66 = faker60.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService67 = faker60.fakeValuesService;
        faker41.fakeValuesService = fakeValuesService67;
        faker30.fakeValuesService = fakeValuesService67;
        com.github.javafaker.Address address70 = faker30.address();
        faker9.address = address70;
        faker0.address = address70;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(finance10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(randomService31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(book38);
        org.junit.Assert.assertNotNull(dateAndTime40);
        org.junit.Assert.assertNotNull(randomService42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(book45);
        org.junit.Assert.assertNotNull(finance46);
        org.junit.Assert.assertNotNull(randomService48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(randomService52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(book55);
        org.junit.Assert.assertNotNull(options57);
        org.junit.Assert.assertNotNull(randomService59);
        org.junit.Assert.assertNotNull(randomService61);
        org.junit.Assert.assertNotNull(book62);
        org.junit.Assert.assertNotNull(finance63);
        org.junit.Assert.assertNotNull(book64);
        org.junit.Assert.assertNotNull(options65);
        org.junit.Assert.assertNotNull(phoneNumber66);
        org.junit.Assert.assertNotNull(fakeValuesService67);
        org.junit.Assert.assertNotNull(address70);
    }

    @Test
    public void test0586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0586");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale11.getISO3Country();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale11.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale18.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale18.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getLanguage();
        java.util.Random random35 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream36 = random35.longs();
        java.util.stream.DoubleStream doubleStream37 = random35.doubles();
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(locale30, random35);
        java.lang.String str39 = locale27.getDisplayVariant(locale30);
        java.lang.String str40 = locale11.getDisplayCountry(locale30);
        java.lang.String str41 = locale0.getDisplayVariant(locale30);
        java.util.Random random43 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream44 = random43.doubles();
        java.util.stream.IntStream intStream45 = random43.ints();
        java.util.stream.LongStream longStream49 = random43.longs((long) 100, 0L, (long) 'u');
        double double50 = random43.nextGaussian();
        long long51 = random43.nextLong();
        com.github.javafaker.Faker faker52 = new com.github.javafaker.Faker(locale0, random43);
        java.util.Locale locale54 = new java.util.Locale("en-CA");
        java.lang.String str55 = locale54.getDisplayScript();
        java.lang.String str56 = locale0.getDisplayScript(locale54);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en-CA" + "'", str12, "en-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CAN" + "'", str15, "CAN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CA" + "'", str21, "CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(longStream36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(doubleStream44);
        org.junit.Assert.assertNotNull(intStream45);
        org.junit.Assert.assertNotNull(longStream49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.561581040188955d + "'", double50 == 1.561581040188955d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3831662765844904176L + "'", long51 == 3831662765844904176L);
        org.junit.Assert.assertEquals(locale54.toString(), "en-ca");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test0587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0587");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.util.Locale.setDefault(locale0);
        java.lang.String str12 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0588");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random6.nextBytes(byteArray14);
        double double16 = random6.nextGaussian();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale4, random6);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale18.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale18.getDisplayScript(locale27);
        java.lang.String str29 = locale4.getDisplayCountry(locale27);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.4123569817688534d) + "'", double16 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CA" + "'", str21, "CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
    }

    @Test
    public void test0589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0589");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale6 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setUnicodeLocaleKeyword("Chinese (China)", "hi! (CHINESE (CHINA))");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
    }

    @Test
    public void test0590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0590");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        faker0.code = code20;
        java.lang.String str23 = faker0.numerify("cinese (Cina)");
        com.github.javafaker.Business business24 = faker0.business();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "cinese (Cina)" + "'", str23, "cinese (Cina)");
        org.junit.Assert.assertNotNull(business24);
    }

    @Test
    public void test0591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0591");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        int int6 = random1.nextInt();
        java.util.stream.LongStream longStream8 = random1.longs((long) 0);
        java.util.stream.DoubleStream doubleStream10 = random1.doubles((long) 69);
        java.util.stream.LongStream longStream12 = random1.longs((long) 1429008869);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1761283695 + "'", int6 == 1761283695);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream12);
    }

    @Test
    public void test0592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0592");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Options options5 = faker0.options();
        com.github.javafaker.Lorem lorem6 = faker0.lorem;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(lorem6);
    }

    @Test
    public void test0593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0593");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        faker0.code = code20;
        com.github.javafaker.Options options22 = faker0.options;
        java.lang.String str24 = faker0.letterify("Chinese");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Chinese" + "'", str24, "Chinese");
    }

    @Test
    public void test0594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0594");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        java.util.stream.IntStream intStream17 = random1.ints((-1155869325), 1761283695);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream21 = random1.ints((long) ' ', 1, (-1465154083));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertNotNull(intStream17);
    }

    @Test
    public void test0595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0595");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Business business3 = faker0.business();
        com.github.javafaker.Finance finance4 = faker0.finance;
        com.github.javafaker.App app5 = faker0.app();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(business3);
        org.junit.Assert.assertNotNull(finance4);
        org.junit.Assert.assertNotNull(app5);
    }

    @Test
    public void test0596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0596");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        double double4 = random1.nextGaussian();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        int int9 = random6.nextInt((int) 'u');
        random6.setSeed((long) (byte) 10);
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.Random random15 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream16 = random15.longs();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random15.nextBytes(byteArray23);
        random13.nextBytes(byteArray23);
        random6.nextBytes(byteArray23);
        random1.nextBytes(byteArray23);
        java.util.Random random29 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream30 = random29.doubles();
        java.util.stream.IntStream intStream31 = random29.ints();
        java.util.stream.LongStream longStream35 = random29.longs((long) 100, 0L, (long) 'u');
        java.util.Random random37 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream38 = random37.doubles();
        java.util.Random random40 = new java.util.Random((long) 1);
        java.util.Random random42 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream43 = random42.longs();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random42.nextBytes(byteArray50);
        random40.nextBytes(byteArray50);
        random37.nextBytes(byteArray50);
        random29.nextBytes(byteArray50);
        random1.nextBytes(byteArray50);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream58 = random1.longs((long) 4, (long) (-1193959466));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.7853314409882288d + "'", double4 == 1.7853314409882288d);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -101, 127, -45, -10, 56]");
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertNotNull(longStream35);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertNotNull(longStream43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 117, 88, -50, 65, -21]");
    }

    @Test
    public void test0597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0597");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random6.nextBytes(byteArray14);
        double double16 = random6.nextGaussian();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale4, random6);
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("\u82f1\u6587");
        com.github.javafaker.Finance finance21 = faker17.finance();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.4123569817688534d) + "'", double16 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u82f1\u6587" + "'", str20, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(finance21);
    }

    @Test
    public void test0598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0598");
        java.util.Random random1 = new java.util.Random(3831662765844904176L);
    }

    @Test
    public void test0599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0599");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        com.github.javafaker.Book book36 = faker34.book();
        faker29.book = book36;
        com.github.javafaker.Business business38 = faker29.business;
        faker16.business = business38;
        com.github.javafaker.Finance finance40 = faker16.finance;
        com.github.javafaker.Code code41 = faker16.code;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(business38);
        org.junit.Assert.assertNotNull(finance40);
        org.junit.Assert.assertNotNull(code41);
    }

    @Test
    public void test0600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0600");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("eng");
        double double7 = languageRange6.getWeight();
        double double8 = languageRange6.getWeight();
        java.lang.String str9 = languageRange6.getRange();
        double double10 = languageRange6.getWeight();
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("eng");
        double double13 = languageRange12.getWeight();
        double double14 = languageRange12.getWeight();
        java.lang.String str15 = languageRange12.getRange();
        double double16 = languageRange12.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] { languageRange6, languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale locale37 = locale33.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.getISO3Language();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.lang.String str44 = locale38.getExtension('a');
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = locale45.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.lang.String str54 = locale50.getDisplayVariant();
        java.lang.String str56 = locale50.getExtension('a');
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale57.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale locale72 = locale68.stripExtensions();
        java.lang.String str73 = locale72.toLanguageTag();
        java.lang.String str74 = locale67.getDisplayLanguage(locale72);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = locale75.getCountry();
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayName(locale80);
        java.lang.String str82 = locale79.getISO3Language();
        java.util.Locale locale83 = locale79.stripExtensions();
        java.util.Locale locale84 = java.util.Locale.JAPAN;
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale85.getDisplayVariant();
        java.util.Locale.setDefault(locale85);
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale23, locale24, locale27, locale30, locale32, locale37, locale38, locale49, locale50, locale57, locale63, locale65, locale67, locale75, locale79, locale84, locale85 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList89, filteringMode91);
        java.util.Collection<java.util.Locale> localeCollection93 = null;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, localeCollection93);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.Locale locale96 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList94);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str31, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str64, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str70, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "eng" + "'", str71, "eng");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "en-CA" + "'", str73, "en-CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italian" + "'", str74, "Italian");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str77, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CA" + "'", str78, "CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str81, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "eng" + "'", str82, "eng");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNull(locale96);
    }

    @Test
    public void test0601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0601");
        java.util.Locale locale2 = new java.util.Locale("en", "");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "en");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test0602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0602");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.App app5 = faker0.app;
        com.github.javafaker.Address address6 = faker0.address();
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Locale locale12 = locale8.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale7.getDisplayLanguage(locale12);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale7);
        com.github.javafaker.Address address16 = faker15.address();
        com.github.javafaker.Address address17 = faker15.address();
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        com.github.javafaker.Book book20 = faker18.book();
        com.github.javafaker.Finance finance21 = faker18.finance();
        com.github.javafaker.Book book22 = faker18.book();
        com.github.javafaker.Name name23 = faker18.name;
        faker15.name = name23;
        com.github.javafaker.Company company25 = faker15.company;
        faker0.company = company25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker0.fakeValuesService;
        org.junit.Assert.assertNotNull(app5);
        org.junit.Assert.assertNotNull(address6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertNotNull(address16);
        org.junit.Assert.assertNotNull(address17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(name23);
        org.junit.Assert.assertNotNull(company25);
        org.junit.Assert.assertNotNull(fakeValuesService27);
    }

    @Test
    public void test0603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0603");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.lang.String str5 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0604");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder3.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = locale11.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0605");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        double double9 = random1.nextGaussian();
        double double10 = random1.nextDouble();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8746788966462123d + "'", double9 == 0.8746788966462123d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 0.059201965811244595d + "'", double10 == 0.059201965811244595d);
    }

    @Test
    public void test0606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0606");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random6.nextBytes(byteArray14);
        double double16 = random6.nextGaussian();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale4, random6);
        com.github.javafaker.DateAndTime dateAndTime18 = faker17.dateAndTime;
        com.github.javafaker.Company company19 = faker17.company();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.4123569817688534d) + "'", double16 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(company19);
    }

    @Test
    public void test0607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0607");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguage("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
    }

    @Test
    public void test0608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0608");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("eng");
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.removeUnicodeLocaleAttribute("Italien");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0609");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream10 = random9.longs();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(locale7, random9);
        com.github.javafaker.Internet internet12 = faker11.internet();
        faker0.internet = internet12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Book book18 = faker14.book();
        com.github.javafaker.Number number19 = faker14.number();
        com.github.javafaker.Finance finance20 = faker14.finance;
        com.github.javafaker.Options options21 = faker14.options;
        faker0.options = options21;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(internet12);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(book18);
        org.junit.Assert.assertNotNull(number19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(options21);
    }

    @Test
    public void test0610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0610");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getISO3Country();
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale5.getDisplayVariant(locale10);
        java.lang.String str12 = locale5.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CAN" + "'", str9, "CAN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CAN" + "'", str12, "CAN");
    }

    @Test
    public void test0611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0611");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles((double) (-1L), (double) 0.73043025f);
        java.util.stream.IntStream intStream5 = random1.ints();
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test0612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0612");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale22 = new java.util.Locale("Italian", "", "English");
        java.lang.String str23 = locale7.getDisplayLanguage(locale22);
        java.lang.String str24 = locale1.getDisplayLanguage(locale22);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale26 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_GB");
    }

    @Test
    public void test0613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0613");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale3 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = locale6.getCountry();
        java.lang.String str10 = locale6.getScript();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.util.Locale locale15 = locale11.stripExtensions();
        java.lang.String str16 = locale6.getDisplayScript(locale15);
        java.lang.String str17 = locale5.getDisplayScript(locale6);
        java.util.Locale locale21 = new java.util.Locale("Italian", "", "English");
        java.lang.String str22 = locale6.getDisplayLanguage(locale21);
        java.lang.String str23 = locale0.getDisplayLanguage(locale21);
        java.lang.String str24 = locale21.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CA" + "'", str9, "CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale21.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "italian-English" + "'", str24, "italian-English");
    }

    @Test
    public void test0614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0614");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService3 = faker2.randomService;
        java.lang.String str5 = faker2.bothify("");
        com.github.javafaker.DateAndTime dateAndTime6 = faker2.dateAndTime;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        faker7.book = book15;
        faker2.book = book15;
        faker0.book = book15;
        com.github.javafaker.Business business19 = faker0.business();
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(randomService3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(business19);
    }

    @Test
    public void test0615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0615");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream17 = random10.ints((int) (byte) 100, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
    }

    @Test
    public void test0616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0616");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getCountry();
        java.lang.String str26 = locale22.getScript();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.lang.String str32 = locale22.getDisplayScript(locale31);
        java.lang.String str33 = locale21.getDisplayScript(locale22);
        java.lang.String str34 = locale17.getDisplayScript(locale22);
        java.lang.String str35 = locale13.getDisplayName(locale17);
        java.lang.String str36 = locale17.getVariant();
        java.lang.String str37 = locale17.getDisplayCountry();
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale38.getDisplayName();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = locale38.getDisplayName(locale40);
        java.util.Random random47 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream48 = random47.doubles();
        java.util.stream.LongStream longStream51 = random47.longs((long) 0, 10L);
        com.github.javafaker.Faker faker52 = new com.github.javafaker.Faker(locale40, random47);
        java.util.Locale locale53 = locale40.stripExtensions();
        java.lang.String str54 = locale53.getDisplayLanguage();
        java.lang.String str55 = locale17.getDisplayVariant(locale53);
        java.lang.String str56 = locale17.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale19.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Korean" + "'", str39, "Korean");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Korean" + "'", str45, "Korean");
        org.junit.Assert.assertNotNull(doubleStream48);
        org.junit.Assert.assertNotNull(longStream51);
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "English" + "'", str54, "English");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Korean" + "'", str56, "Korean");
    }

    @Test
    public void test0617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0617");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getLanguage();
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream8 = random7.longs();
        java.util.stream.DoubleStream doubleStream9 = random7.doubles();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale2, random7);
        java.util.stream.LongStream longStream12 = random7.longs((long) (short) 100);
        random7.setSeed(100L);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random7);
        com.github.javafaker.Name name16 = faker15.name();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(name16);
    }

    @Test
    public void test0618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0618");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("inglese", (double) 0.73043025f);
    }

    @Test
    public void test0619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0619");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        faker8.book = book16;
        com.github.javafaker.DateAndTime dateAndTime18 = faker8.dateAndTime;
        faker0.dateAndTime = dateAndTime18;
        com.github.javafaker.Lorem lorem20 = faker0.lorem();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNull(lorem20);
    }

    @Test
    public void test0620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0620");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getLanguage();
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream8 = random7.longs();
        java.util.stream.DoubleStream doubleStream9 = random7.doubles();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale2, random7);
        java.util.stream.LongStream longStream12 = random7.longs((long) (short) 100);
        random7.setSeed(100L);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random7);
        com.github.javafaker.Options options16 = faker15.options;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(options16);
    }

    @Test
    public void test0621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0621");
        java.util.Locale locale3 = new java.util.Locale("\u52a0\u62ff\u5927", "en_US", "anglais (Canada)");
        org.junit.Assert.assertEquals(locale3.toString(), "\u52a0\u62ff\u5927_EN_US_anglais (Canada)");
    }

    @Test
    public void test0622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0622");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        com.github.javafaker.Business business16 = faker0.business();
        java.lang.String str18 = null; // flaky: faker0.regexify("\u82f1\u6587)");
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.service.RandomService randomService23 = faker19.randomService;
        com.github.javafaker.Book book24 = faker19.book;
        com.github.javafaker.Internet internet25 = faker19.internet();
        com.github.javafaker.Internet internet26 = faker19.internet;
        com.github.javafaker.DateAndTime dateAndTime27 = faker19.date();
        faker0.dateAndTime = dateAndTime27;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(business16);
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u82f1\u6587" + "'", str18, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(internet25);
        org.junit.Assert.assertNotNull(internet26);
        org.junit.Assert.assertNotNull(dateAndTime27);
    }

    @Test
    public void test0623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0623");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.util.Locale.setDefault(locale9);
        java.lang.String str11 = locale9.getScript();
        java.lang.String str12 = locale9.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it" + "'", str12, "it");
    }

    @Test
    public void test0624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0624");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Lorem lorem10 = faker8.lorem;
        com.github.javafaker.Color color11 = faker8.color();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name13 = faker12.name();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name15 = faker14.name();
        faker12.name = name15;
        com.github.javafaker.Lorem lorem17 = faker12.lorem();
        com.github.javafaker.Code code18 = faker12.code();
        com.github.javafaker.Number number19 = faker12.number();
        faker8.number = number19;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(lorem10);
        org.junit.Assert.assertNotNull(color11);
        org.junit.Assert.assertNotNull(name13);
        org.junit.Assert.assertNotNull(name15);
        org.junit.Assert.assertNotNull(lorem17);
        org.junit.Assert.assertNotNull(code18);
        org.junit.Assert.assertNotNull(number19);
    }

    @Test
    public void test0625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0625");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        int int7 = random1.nextInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream11 = random1.longs(3596673253889729385L, (long) 100, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1155869325) + "'", int7 == (-1155869325));
    }

    @Test
    public void test0626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0626");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.IntStream intStream4 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) (byte) -1, 10L);
        double double8 = random1.nextDouble();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.7308781907032909d + "'", double8 == 0.7308781907032909d);
    }

    @Test
    public void test0627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0627");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("can", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
    }

    @Test
    public void test0628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0628");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Finance finance4 = faker3.finance();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        com.github.javafaker.Book book12 = faker10.book();
        faker5.book = book12;
        com.github.javafaker.Finance finance14 = faker5.finance();
        com.github.javafaker.Lorem lorem15 = faker5.lorem();
        com.github.javafaker.PhoneNumber phoneNumber16 = faker5.phoneNumber;
        com.github.javafaker.Business business17 = faker5.business;
        faker3.business = business17;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(finance4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(lorem15);
        org.junit.Assert.assertNotNull(phoneNumber16);
        org.junit.Assert.assertNotNull(business17);
    }

    @Test
    public void test0629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0629");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Address address4 = faker0.address();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(address4);
    }

    @Test
    public void test0630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0630");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Locale.Builder builder6 = builder0.setVariant("English");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0631");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.Book book20 = faker16.book();
        faker12.book = book20;
        com.github.javafaker.App app22 = faker12.app();
        faker8.app = app22;
        com.github.javafaker.Address address24 = faker8.address();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(app22);
        org.junit.Assert.assertNotNull(address24);
    }

    @Test
    public void test0632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0632");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setRegion("en_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: en_CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0633");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("it", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale locale20 = locale16.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String str27 = locale21.getExtension('a');
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.util.Locale locale32 = locale28.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale33.getDisplayVariant();
        java.lang.String str39 = locale33.getExtension('a');
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale40.getDisplayVariant();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale48.getDisplayVariant();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale51.getISO3Language();
        java.util.Locale locale55 = locale51.stripExtensions();
        java.lang.String str56 = locale55.toLanguageTag();
        java.lang.String str57 = locale50.getDisplayLanguage(locale55);
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayName(locale59);
        java.lang.String str61 = locale58.getCountry();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = locale62.getISO3Language();
        java.util.Locale locale66 = locale62.stripExtensions();
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale68.getDisplayVariant();
        java.util.Locale.setDefault(locale68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale6, locale7, locale10, locale13, locale15, locale20, locale21, locale32, locale33, locale40, locale46, locale48, locale50, locale58, locale62, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList72, filteringMode74);
        java.util.Collection<java.util.Locale> localeCollection76 = null;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, localeCollection76);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList77);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap79 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList80 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap79);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str18, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str23, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "eng" + "'", str24, "eng");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str30, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str53, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "eng" + "'", str54, "eng");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en-CA" + "'", str56, "en-CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italian" + "'", str57, "Italian");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str60, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CA" + "'", str61, "CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str64, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode74.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(languageRangeList80);
    }

    @Test
    public void test0634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0634");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str5 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano" + "'", str5, "italiano");
    }

    @Test
    public void test0635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0635");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options7 = faker6.options;
        faker0.options = options7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        com.github.javafaker.Book book16 = faker14.book();
        faker9.book = book16;
        com.github.javafaker.Finance finance18 = faker9.finance();
        com.github.javafaker.Options options19 = faker9.options();
        faker0.options = options19;
        com.github.javafaker.Name name21 = faker0.name;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(finance18);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(name21);
    }

    @Test
    public void test0636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0636");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService4 = faker3.randomService;
        java.lang.String str6 = faker3.bothify("");
        com.github.javafaker.Book book7 = faker3.book();
        com.github.javafaker.Number number8 = faker3.number();
        com.github.javafaker.Finance finance9 = faker3.finance;
        com.github.javafaker.Finance finance10 = faker3.finance;
        faker2.finance = finance10;
        com.github.javafaker.service.RandomService randomService12 = faker2.randomService;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(number8);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(finance10);
        org.junit.Assert.assertNotNull(randomService12);
    }

    @Test
    public void test0637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0637");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Finance finance7 = faker6.finance();
        com.github.javafaker.Options options8 = faker6.options();
        com.github.javafaker.DateAndTime dateAndTime9 = faker6.date();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(dateAndTime9);
    }

    @Test
    public void test0638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0638");
        java.util.Random random1 = new java.util.Random((long) 100);
        long long2 = random1.nextLong();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = random1.longs((-6047590478893910070L), (long) (-1465154083), 3596673253889729385L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-5128016860359238732L) + "'", long2 == (-5128016860359238732L));
    }

    @Test
    public void test0639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0639");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        boolean boolean4 = locale1.hasExtensions();
        java.lang.String str5 = locale1.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0640");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.Book book30 = faker26.book();
        com.github.javafaker.Number number31 = faker26.number();
        faker0.number = number31;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker(locale33);
        com.github.javafaker.Company company42 = faker41.company();
        faker0.company = company42;
        com.github.javafaker.Name name44 = faker0.name();
        com.github.javafaker.Code code45 = faker0.code();
        com.github.javafaker.Company company46 = faker0.company;
        com.github.javafaker.App app47 = faker0.app;
        com.github.javafaker.PhoneNumber phoneNumber48 = faker0.phoneNumber;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(number31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-CA" + "'", str39, "en-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(company42);
        org.junit.Assert.assertNotNull(name44);
        org.junit.Assert.assertNull(code45);
        org.junit.Assert.assertNotNull(company46);
        org.junit.Assert.assertNotNull(app47);
        org.junit.Assert.assertNotNull(phoneNumber48);
    }

    @Test
    public void test0641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0641");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.Book book30 = faker26.book();
        com.github.javafaker.Number number31 = faker26.number();
        faker0.number = number31;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker(locale33);
        com.github.javafaker.Company company42 = faker41.company();
        faker0.company = company42;
        com.github.javafaker.Name name44 = faker0.name();
        com.github.javafaker.Code code45 = faker0.code();
        com.github.javafaker.Company company46 = faker0.company;
        com.github.javafaker.App app47 = faker0.app;
        java.util.Locale locale49 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale50 = locale49.stripExtensions();
        java.util.Locale locale51 = locale50.stripExtensions();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.getCountry();
        java.lang.String str56 = locale52.getScript();
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.util.Locale locale61 = locale57.stripExtensions();
        java.lang.String str62 = locale52.getDisplayScript(locale61);
        java.lang.String str63 = locale51.getDisplayScript(locale52);
        com.github.javafaker.Faker faker64 = new com.github.javafaker.Faker(locale52);
        com.github.javafaker.Color color65 = faker64.color;
        com.github.javafaker.Hacker hacker66 = faker64.hacker;
        faker0.hacker = hacker66;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(number31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-CA" + "'", str39, "en-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(company42);
        org.junit.Assert.assertNotNull(name44);
        org.junit.Assert.assertNull(code45);
        org.junit.Assert.assertNotNull(company46);
        org.junit.Assert.assertNotNull(app47);
        org.junit.Assert.assertEquals(locale49.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "CA" + "'", str55, "CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(color65);
        org.junit.Assert.assertNotNull(hacker66);
    }

    @Test
    public void test0642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0642");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Code code7 = faker0.code();
        com.github.javafaker.Address address8 = faker0.address();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        com.github.javafaker.Finance finance14 = faker9.finance();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Book book23 = faker19.book();
        faker15.book = book23;
        com.github.javafaker.Options options25 = faker15.options();
        faker9.options = options25;
        faker0.options = options25;
        com.github.javafaker.Finance finance28 = faker0.finance;
        com.github.javafaker.Number number29 = faker0.number;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(address8);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(book23);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(finance28);
        org.junit.Assert.assertNotNull(number29);
    }

    @Test
    public void test0643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0643");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.DateAndTime dateAndTime10 = faker6.dateAndTime;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.DateAndTime dateAndTime15 = faker11.dateAndTime;
        faker6.dateAndTime = dateAndTime15;
        com.github.javafaker.Code code17 = null;
        faker6.code = code17;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        com.github.javafaker.Book book25 = faker23.book();
        com.github.javafaker.Finance finance26 = faker23.finance();
        com.github.javafaker.Book book27 = faker23.book();
        com.github.javafaker.Options options28 = faker23.options();
        com.github.javafaker.PhoneNumber phoneNumber29 = faker23.phoneNumber();
        faker19.phoneNumber = phoneNumber29;
        com.github.javafaker.Name name31 = faker19.name();
        faker6.name = name31;
        com.github.javafaker.Finance finance33 = faker6.finance();
        com.github.javafaker.Number number34 = faker6.number;
        faker0.number = number34;
        com.github.javafaker.Faker faker36 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService37 = faker36.randomService;
        com.github.javafaker.Book book38 = faker36.book();
        com.github.javafaker.Finance finance39 = faker36.finance();
        com.github.javafaker.Book book40 = faker36.book();
        com.github.javafaker.Options options41 = faker36.options();
        com.github.javafaker.PhoneNumber phoneNumber42 = faker36.phoneNumber();
        faker0.phoneNumber = phoneNumber42;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertNotNull(book25);
        org.junit.Assert.assertNotNull(finance26);
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(phoneNumber29);
        org.junit.Assert.assertNotNull(name31);
        org.junit.Assert.assertNotNull(finance33);
        org.junit.Assert.assertNotNull(number34);
        org.junit.Assert.assertNotNull(randomService37);
        org.junit.Assert.assertNotNull(book38);
        org.junit.Assert.assertNotNull(finance39);
        org.junit.Assert.assertNotNull(book40);
        org.junit.Assert.assertNotNull(options41);
        org.junit.Assert.assertNotNull(phoneNumber42);
    }

    @Test
    public void test0644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0644");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getISO3Language();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        java.util.stream.DoubleStream doubleStream14 = random12.doubles();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random12);
        java.util.Locale locale17 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale18 = locale17.stripExtensions();
        java.util.Locale locale19 = locale18.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getCountry();
        java.lang.String str24 = locale20.getScript();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.lang.String str30 = locale20.getDisplayScript(locale29);
        java.lang.String str31 = locale19.getDisplayScript(locale20);
        com.github.javafaker.Faker faker32 = new com.github.javafaker.Faker(locale20);
        com.github.javafaker.Color color33 = faker32.color;
        com.github.javafaker.PhoneNumber phoneNumber34 = faker32.phoneNumber;
        faker15.phoneNumber = phoneNumber34;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertEquals(locale17.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CA" + "'", str23, "CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str27, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(color33);
        org.junit.Assert.assertNotNull(phoneNumber34);
    }

    @Test
    public void test0645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0645");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale16.getDisplayLanguage(locale21);
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker(locale16);
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.service.RandomService randomService29 = faker25.randomService;
        faker24.randomService = randomService29;
        faker0.randomService = randomService29;
        com.github.javafaker.Hacker hacker32 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en-CA" + "'", str22, "en-CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian" + "'", str23, "Italian");
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertNotNull(hacker32);
    }

    @Test
    public void test0646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0646");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Address address10 = faker0.address();
        com.github.javafaker.Internet internet11 = faker0.internet;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertNotNull(internet11);
    }

    @Test
    public void test0647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0647");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.DateAndTime dateAndTime7 = faker6.date();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(dateAndTime7);
    }

    @Test
    public void test0648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0648");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        java.util.Locale locale4 = builder3.build();
        java.lang.String str5 = locale4.getDisplayName();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "italian");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italian" + "'", str5, "italian");
    }

    @Test
    public void test0649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0649");
        java.util.Random random1 = new java.util.Random((long) '#');
    }

    @Test
    public void test0650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0650");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en_CA" + "'", str11, "en_CA");
    }

    @Test
    public void test0651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0651");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.addUnicodeLocaleAttribute("italiano");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0652");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.Business business9 = faker8.business();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        com.github.javafaker.Book book17 = faker15.book();
        faker10.book = book17;
        com.github.javafaker.Finance finance19 = faker10.finance();
        com.github.javafaker.Options options20 = faker10.options();
        faker8.options = options20;
        com.github.javafaker.Color color22 = faker8.color();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(finance19);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(color22);
    }

    @Test
    public void test0653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0653");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        com.github.javafaker.Book book36 = faker34.book();
        faker29.book = book36;
        com.github.javafaker.Business business38 = faker29.business;
        faker16.business = business38;
        com.github.javafaker.Name name40 = faker16.name;
        com.github.javafaker.Address address41 = faker16.address();
        com.github.javafaker.Hacker hacker42 = faker16.hacker();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(business38);
        org.junit.Assert.assertNotNull(name40);
        org.junit.Assert.assertNotNull(address41);
        org.junit.Assert.assertNotNull(hacker42);
    }

    @Test
    public void test0654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0654");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        com.github.javafaker.Book book13 = faker11.book();
        com.github.javafaker.Finance finance14 = faker11.finance();
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Options options16 = faker11.options();
        com.github.javafaker.PhoneNumber phoneNumber17 = faker11.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService18 = faker11.fakeValuesService;
        faker0.fakeValuesService = fakeValuesService18;
        com.github.javafaker.PhoneNumber phoneNumber20 = faker0.phoneNumber;
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.DateAndTime dateAndTime25 = faker21.dateAndTime;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        com.github.javafaker.Book book28 = faker26.book();
        faker21.book = book28;
        com.github.javafaker.Business business30 = faker21.business;
        faker0.business = business30;
        com.github.javafaker.App app32 = faker0.app;
        java.util.Locale locale33 = java.util.Locale.CHINA;
        java.util.Random random35 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream36 = random35.longs();
        com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker(locale33, random35);
        com.github.javafaker.DateAndTime dateAndTime38 = faker37.date();
        com.github.javafaker.Faker faker39 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService40 = faker39.randomService;
        java.lang.String str42 = faker39.bothify("");
        com.github.javafaker.Book book43 = faker39.book();
        java.lang.String str45 = faker39.regexify("eng");
        com.github.javafaker.service.RandomService randomService46 = faker39.randomService;
        com.github.javafaker.Code code47 = faker39.code;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = locale53.toLanguageTag();
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        com.github.javafaker.Faker faker56 = new com.github.javafaker.Faker(locale48);
        com.github.javafaker.Company company57 = faker56.company();
        com.github.javafaker.App app58 = faker56.app;
        faker39.app = app58;
        faker37.app = app58;
        com.github.javafaker.Name name61 = faker37.name();
        com.github.javafaker.Code code62 = faker37.code;
        faker0.code = code62;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(phoneNumber17);
        org.junit.Assert.assertNotNull(fakeValuesService18);
        org.junit.Assert.assertNotNull(phoneNumber20);
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateAndTime25);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertNotNull(book28);
        org.junit.Assert.assertNotNull(business30);
        org.junit.Assert.assertNotNull(app32);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream36);
        org.junit.Assert.assertNotNull(dateAndTime38);
        org.junit.Assert.assertNotNull(randomService40);
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(book43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "eng" + "'", str45, "eng");
        org.junit.Assert.assertNotNull(randomService46);
        org.junit.Assert.assertNotNull(code47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str51, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "eng" + "'", str52, "eng");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-CA" + "'", str54, "en-CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian" + "'", str55, "Italian");
        org.junit.Assert.assertNotNull(company57);
        org.junit.Assert.assertNotNull(app58);
        org.junit.Assert.assertNotNull(name61);
        org.junit.Assert.assertNotNull(code62);
    }

    @Test
    public void test0655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0655");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Finance finance27 = faker0.finance();
        com.github.javafaker.Internet internet28 = faker0.internet;
        com.github.javafaker.Company company29 = faker0.company();
        com.github.javafaker.Hacker hacker30 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(internet28);
        org.junit.Assert.assertNotNull(company29);
        org.junit.Assert.assertNotNull(hacker30);
    }

    @Test
    public void test0656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0656");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.setLanguageTag("it");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder3.setScript("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0657");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
    }

    @Test
    public void test0658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0658");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder3.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder3.addUnicodeLocaleAttribute("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0659");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        java.util.stream.LongStream longStream8 = random1.longs((long) ' ');
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test0660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0660");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Chinese");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "chinese");
    }

    @Test
    public void test0661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0661");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale locale12 = builder11.build();
        java.lang.String str14 = locale12.getExtension('a');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test0662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0662");
        java.util.Locale locale2 = new java.util.Locale("en", "");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "en");
    }

    @Test
    public void test0663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0663");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setScript("\u52a0\u62ff\u5927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0664");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale2.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getISO3Language();
        java.util.Locale locale8 = locale4.stripExtensions();
        java.lang.String str9 = locale2.getDisplayName(locale4);
        java.util.Random random11 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream12 = random11.doubles();
        java.util.stream.LongStream longStream15 = random11.longs((long) 0, 10L);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4, random11);
        java.lang.String str17 = locale1.getDisplayName(locale4);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str23 = locale1.getDisplayName(locale18);
        java.lang.String str24 = locale18.getVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u671d\u9c9c\u6587" + "'", str3, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Korean" + "'", str9, "Korean");
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(longStream15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str23, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0665");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(random1);
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream8 = random7.longs();
        java.util.stream.DoubleStream doubleStream9 = random7.doubles();
        java.util.stream.LongStream longStream11 = random7.longs((long) (byte) 1);
        double double12 = random7.nextGaussian();
        random7.setSeed(100L);
        java.util.Random random16 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream17 = random16.doubles();
        java.util.stream.IntStream intStream18 = random16.ints();
        java.util.stream.LongStream longStream22 = random16.longs((long) 100, 0L, (long) 'u');
        java.util.Random random24 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream25 = random24.doubles();
        java.util.Random random27 = new java.util.Random((long) 1);
        java.util.Random random29 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream30 = random29.longs();
        byte[] byteArray37 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random29.nextBytes(byteArray37);
        random27.nextBytes(byteArray37);
        random24.nextBytes(byteArray37);
        random16.nextBytes(byteArray37);
        random7.nextBytes(byteArray37);
        random1.nextBytes(byteArray37);
        float float44 = random1.nextFloat();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.561581040188955d + "'", double12 == 1.561581040188955d);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(longStream22);
        org.junit.Assert.assertNotNull(doubleStream25);
        org.junit.Assert.assertNotNull(longStream30);
        org.junit.Assert.assertNotNull(byteArray37);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray37), "[-40, -100, -72, 25, 111, 14]");
        org.junit.Assert.assertTrue("'" + float44 + "' != '" + 0.40743977f + "'", float44 == 0.40743977f);
    }

    @Test
    public void test0666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0666");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setVariant("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0667");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        java.util.Locale locale10 = java.util.Locale.ITALIAN;
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.util.Locale locale15 = locale11.stripExtensions();
        java.lang.String str16 = locale15.toLanguageTag();
        java.lang.String str17 = locale10.getDisplayLanguage(locale15);
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker(locale10);
        com.github.javafaker.Address address19 = faker18.address();
        faker8.address = address19;
        com.github.javafaker.Finance finance21 = faker8.finance;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "en-CA" + "'", str16, "en-CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertNotNull(address19);
        org.junit.Assert.assertNotNull(finance21);
    }

    @Test
    public void test0668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0668");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        int int8 = random5.nextInt((int) 'u');
        random5.setSeed((long) (byte) 10);
        java.util.Random random12 = new java.util.Random((long) 1);
        random12.setSeed((long) (short) 100);
        java.util.stream.DoubleStream doubleStream15 = random12.doubles();
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream18 = random17.doubles();
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random17.nextBytes(byteArray30);
        random12.nextBytes(byteArray30);
        random5.nextBytes(byteArray30);
        random1.nextBytes(byteArray30);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 69 + "'", int8 == 69);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[115, -43, 26, -69, -40, -100]");
    }

    @Test
    public void test0669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0669");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("eng");
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("fra");
        java.util.Locale locale14 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale15.getDisplayName();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale15.getDisplayName(locale17);
        java.util.Random random24 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream25 = random24.doubles();
        java.util.stream.LongStream longStream28 = random24.longs((long) 0, 10L);
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker(locale17, random24);
        java.lang.String str30 = locale14.getDisplayName(locale17);
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.lang.String str35 = locale31.getDisplayVariant();
        java.lang.String str36 = locale14.getDisplayName(locale31);
        java.util.Locale.Builder builder37 = builder12.setLocale(locale31);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals(locale14.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\u671d\u9c9c\u6587" + "'", str16, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Korean" + "'", str22, "Korean");
        org.junit.Assert.assertNotNull(doubleStream25);
        org.junit.Assert.assertNotNull(longStream28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str30, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test0670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0670");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        com.github.javafaker.Finance finance2 = faker0.finance;
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService4 = faker3.randomService;
        java.lang.String str6 = faker3.bothify("");
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Book book11 = faker7.book();
        faker3.book = book11;
        com.github.javafaker.Options options13 = faker3.options();
        com.github.javafaker.App app14 = faker3.app;
        faker0.app = app14;
        com.github.javafaker.Code code16 = faker0.code;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        com.github.javafaker.Book book23 = faker21.book();
        com.github.javafaker.Finance finance24 = faker21.finance();
        com.github.javafaker.Book book25 = faker21.book();
        com.github.javafaker.Options options26 = faker21.options();
        com.github.javafaker.PhoneNumber phoneNumber27 = faker21.phoneNumber();
        faker17.phoneNumber = phoneNumber27;
        com.github.javafaker.Hacker hacker29 = faker17.hacker;
        faker0.hacker = hacker29;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(finance2);
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(app14);
        org.junit.Assert.assertNotNull(code16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertNotNull(book23);
        org.junit.Assert.assertNotNull(finance24);
        org.junit.Assert.assertNotNull(book25);
        org.junit.Assert.assertNotNull(options26);
        org.junit.Assert.assertNotNull(phoneNumber27);
        org.junit.Assert.assertNotNull(hacker29);
    }

    @Test
    public void test0671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0671");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        com.github.javafaker.Book book13 = faker11.book();
        com.github.javafaker.Finance finance14 = faker11.finance();
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Options options16 = faker11.options();
        com.github.javafaker.PhoneNumber phoneNumber17 = faker11.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService18 = faker11.fakeValuesService;
        faker0.fakeValuesService = fakeValuesService18;
        com.github.javafaker.PhoneNumber phoneNumber20 = faker0.phoneNumber;
        java.util.Locale locale21 = java.util.Locale.ITALIAN;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale26.toLanguageTag();
        java.lang.String str28 = locale21.getDisplayLanguage(locale26);
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker(locale21);
        com.github.javafaker.Company company30 = faker29.company();
        com.github.javafaker.App app31 = faker29.app;
        com.github.javafaker.Internet internet32 = faker29.internet();
        faker0.internet = internet32;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(phoneNumber17);
        org.junit.Assert.assertNotNull(fakeValuesService18);
        org.junit.Assert.assertNotNull(phoneNumber20);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eng" + "'", str25, "eng");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en-CA" + "'", str27, "en-CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italian" + "'", str28, "Italian");
        org.junit.Assert.assertNotNull(company30);
        org.junit.Assert.assertNotNull(app31);
        org.junit.Assert.assertNotNull(internet32);
    }

    @Test
    public void test0672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0672");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        java.util.stream.IntStream intStream10 = random2.ints((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream14 = random2.doubles((long) (-1901749300), (double) (-4964420948893066024L), (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(intStream10);
    }

    @Test
    public void test0673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0673");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        int int4 = random1.nextInt();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 431529176 + "'", int4 == 431529176);
    }

    @Test
    public void test0674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0674");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Finance finance12 = faker8.finance;
        java.lang.String str14 = faker8.letterify("eng");
        com.github.javafaker.Business business15 = faker8.business();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(business15);
    }

    @Test
    public void test0675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0675");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Book book29 = faker16.book();
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService31 = faker30.randomService;
        java.lang.String str33 = faker30.bothify("");
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.Book book38 = faker34.book();
        faker30.book = book38;
        com.github.javafaker.Options options40 = faker30.options();
        com.github.javafaker.App app41 = faker30.app;
        com.github.javafaker.Code code42 = faker30.code();
        faker16.code = code42;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(randomService31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(book38);
        org.junit.Assert.assertNotNull(options40);
        org.junit.Assert.assertNotNull(app41);
        org.junit.Assert.assertNotNull(code42);
    }

    @Test
    public void test0676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0676");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder3.setLocale(locale11);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder18 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder22 = builder18.setVariant("");
        java.util.Locale locale23 = builder18.build();
        java.util.Locale.Builder builder24 = builder14.setLocale(locale23);
        java.util.Locale.Builder builder26 = builder24.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder26.setScript("deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0677");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.lang.String str9 = locale0.getLanguage();
        java.lang.String str10 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it" + "'", str9, "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
    }

    @Test
    public void test0678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0678");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker8.phoneNumber;
        com.github.javafaker.Business business11 = faker8.business();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(business11);
    }

    @Test
    public void test0679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0679");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Name name7 = faker0.name;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(name7);
    }

    @Test
    public void test0680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0680");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.PhoneNumber phoneNumber2 = faker0.phoneNumber;
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getLanguage();
        java.util.Random random8 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream9 = random8.longs();
        java.util.stream.DoubleStream doubleStream10 = random8.doubles();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(locale3, random8);
        com.github.javafaker.PhoneNumber phoneNumber12 = faker11.phoneNumber;
        com.github.javafaker.Lorem lorem13 = faker11.lorem();
        faker0.lorem = lorem13;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(phoneNumber2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en" + "'", str6, "en");
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(phoneNumber12);
        org.junit.Assert.assertNotNull(lorem13);
    }

    @Test
    public void test0681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0681");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Finance finance6 = faker0.finance;
        com.github.javafaker.Finance finance7 = faker0.finance;
        java.lang.String str9 = faker0.numerify("Italian");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        com.github.javafaker.Number number15 = faker10.number();
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.DateAndTime dateAndTime20 = faker16.dateAndTime;
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.DateAndTime dateAndTime25 = faker21.dateAndTime;
        faker16.dateAndTime = dateAndTime25;
        com.github.javafaker.Code code27 = null;
        faker16.code = code27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService34 = faker33.randomService;
        com.github.javafaker.Book book35 = faker33.book();
        com.github.javafaker.Finance finance36 = faker33.finance();
        com.github.javafaker.Book book37 = faker33.book();
        com.github.javafaker.Options options38 = faker33.options();
        com.github.javafaker.PhoneNumber phoneNumber39 = faker33.phoneNumber();
        faker29.phoneNumber = phoneNumber39;
        com.github.javafaker.Name name41 = faker29.name();
        faker16.name = name41;
        com.github.javafaker.Finance finance43 = faker16.finance();
        com.github.javafaker.Number number44 = faker16.number;
        faker10.number = number44;
        faker0.number = number44;
        com.github.javafaker.Address address47 = faker0.address();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italian" + "'", str9, "Italian");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(number15);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateAndTime20);
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateAndTime25);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(randomService34);
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertNotNull(finance36);
        org.junit.Assert.assertNotNull(book37);
        org.junit.Assert.assertNotNull(options38);
        org.junit.Assert.assertNotNull(phoneNumber39);
        org.junit.Assert.assertNotNull(name41);
        org.junit.Assert.assertNotNull(finance43);
        org.junit.Assert.assertNotNull(number44);
        org.junit.Assert.assertNotNull(address47);
    }

    @Test
    public void test0682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0682");
        java.util.Random random1 = new java.util.Random(1853403699951111791L);
        java.util.stream.IntStream intStream2 = random1.ints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = random1.ints((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test0683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0683");
        java.util.Random random1 = new java.util.Random((long) (byte) 10);
        double double2 = random1.nextGaussian();
        long long3 = random1.nextLong();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.8746788966462123d + "'", double2 == 0.8746788966462123d);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1092083446069765248L + "'", long3 == 1092083446069765248L);
    }

    @Test
    public void test0684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0684");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Finance finance6 = faker0.finance();
        com.github.javafaker.Business business7 = faker0.business();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options9 = faker8.options;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale10.getDisplayVariant();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale10);
        com.github.javafaker.Finance finance13 = faker12.finance();
        com.github.javafaker.Code code14 = faker12.code;
        faker8.code = code14;
        com.github.javafaker.service.FakeValuesService fakeValuesService16 = faker8.fakeValuesService;
        faker0.fakeValuesService = fakeValuesService16;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(business7);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(finance13);
        org.junit.Assert.assertNotNull(code14);
        org.junit.Assert.assertNotNull(fakeValuesService16);
    }

    @Test
    public void test0685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0685");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.util.Locale locale17 = locale13.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str24 = locale18.getExtension('a');
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.lang.String str34 = locale30.getDisplayVariant();
        java.lang.String str36 = locale30.getExtension('a');
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale37.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale45.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.lang.String str54 = locale47.getDisplayLanguage(locale52);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getCountry();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getISO3Language();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale.setDefault(locale65);
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale3, locale4, locale7, locale10, locale12, locale17, locale18, locale29, locale30, locale37, locale43, locale45, locale47, locale55, locale59, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList69, filteringMode71);
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.lang.String str74 = locale73.getDisplayVariant();
        com.github.javafaker.Faker faker75 = new com.github.javafaker.Faker(locale73);
        java.util.Set<java.lang.String> strSet76 = locale73.getUnicodeLocaleKeys();
        java.lang.String str77 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet76);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str15, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str27, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str39, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en-CA" + "'", str53, "en-CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italian" + "'", str54, "Italian");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "eng" + "'", str62, "eng");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNull(str77);
    }

    @Test
    public void test0686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0686");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        com.github.javafaker.Book book9 = faker7.book();
        faker6.book = book9;
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertNotNull(book9);
    }

    @Test
    public void test0687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0687");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles();
        java.util.stream.LongStream longStream5 = random1.longs((long) (byte) 1);
        java.util.stream.LongStream longStream6 = random1.longs();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream10 = random1.longs((-6047590478893910070L), (long) (byte) 100, (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test0688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0688");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setVariant("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0689");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream8 = random7.longs();
        byte[] byteArray15 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random7.nextBytes(byteArray15);
        long long17 = random7.nextLong();
        java.util.stream.LongStream longStream19 = random7.longs((long) ' ');
        java.util.stream.DoubleStream doubleStream21 = random7.doubles((long) 0);
        boolean boolean22 = languageRange1.equals((java.lang.Object) 0);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(byteArray15);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 7564655870752979346L + "'", long17 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test0690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0690");
        java.util.Locale locale3 = new java.util.Locale("en", "Korean", "ko");
        boolean boolean4 = locale3.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "en_KOREAN_ko");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0691");
        java.util.Locale locale2 = new java.util.Locale("ita", "English (Canada)");
        java.util.Locale locale3 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.lang.Object obj5 = locale3.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "ita_ENGLISH (CANADA)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italien" + "'", str4, "Italien");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "fr_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "fr_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "fr_CA");
    }

    @Test
    public void test0692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0692");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        java.util.stream.LongStream longStream14 = random1.longs();
        int int15 = random1.nextInt();
        java.util.stream.LongStream longStream19 = random1.longs((long) 'u', (long) (-1901749300), 10L);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1761283695 + "'", int15 == 1761283695);
        org.junit.Assert.assertNotNull(longStream19);
    }

    @Test
    public void test0693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0693");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.IntStream intStream8 = random1.ints((long) '#');
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(intStream8);
    }

    @Test
    public void test0694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0694");
        java.util.Random random1 = new java.util.Random((-5128016860359238732L));
        java.util.stream.IntStream intStream2 = random1.ints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream5 = random1.doubles((double) 'a', (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream2);
    }

    @Test
    public void test0695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0695");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name1 = faker0.name();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name3 = faker2.name();
        faker0.name = name3;
        com.github.javafaker.Lorem lorem5 = faker0.lorem();
        com.github.javafaker.Code code6 = faker0.code();
        com.github.javafaker.Number number7 = faker0.number();
        com.github.javafaker.Internet internet8 = faker0.internet();
        org.junit.Assert.assertNotNull(name1);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertNotNull(number7);
        org.junit.Assert.assertNotNull(internet8);
    }

    @Test
    public void test0696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0696");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Options options10 = faker0.options();
        com.github.javafaker.Code code11 = faker0.code();
        com.github.javafaker.Finance finance12 = faker0.finance();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(code11);
        org.junit.Assert.assertNotNull(finance12);
    }

    @Test
    public void test0697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0697");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.lang.String str4 = locale1.getDisplayCountry();
        java.lang.String str5 = locale1.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "und" + "'", str5, "und");
    }

    @Test
    public void test0698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0698");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.DateAndTime dateAndTime2 = faker0.date();
        com.github.javafaker.Internet internet3 = faker0.internet();
        com.github.javafaker.Company company4 = faker0.company;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(dateAndTime2);
        org.junit.Assert.assertNotNull(internet3);
        org.junit.Assert.assertNotNull(company4);
    }

    @Test
    public void test0699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0699");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Internet internet5 = faker0.internet;
        com.github.javafaker.Number number6 = faker0.number;
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Hacker hacker8 = faker0.hacker;
        com.github.javafaker.Hacker hacker9 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(number6);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(hacker8);
        org.junit.Assert.assertNotNull(hacker9);
    }

    @Test
    public void test0700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0700");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        int int16 = random1.nextInt(1429008869);
        java.util.stream.LongStream longStream17 = random1.longs();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1414906606 + "'", int16 == 1414906606);
        org.junit.Assert.assertNotNull(longStream17);
    }

    @Test
    public void test0701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0701");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream18 = random9.doubles(0L, (double) '4', (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test0702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0702");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Color color29 = faker16.color();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(color29);
    }

    @Test
    public void test0703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0703");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setLanguage("Italian");
        java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("English");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0704");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.Business business9 = faker8.business();
        java.lang.String str11 = faker8.letterify("");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0705");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Name name12 = faker0.name();
        com.github.javafaker.Hacker hacker13 = faker0.hacker;
        com.github.javafaker.Finance finance14 = faker0.finance;
        com.github.javafaker.Address address15 = faker0.address;
        com.github.javafaker.Address address16 = faker0.address();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(name12);
        org.junit.Assert.assertNotNull(hacker13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(address16);
    }

    @Test
    public void test0706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0706");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale7.getDisplayName(locale9);
        java.lang.String str15 = locale4.getDisplayName(locale9);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("eng");
        java.util.Locale.setDefault(category0, locale18);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587" + "'", str8, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "eng");
    }

    @Test
    public void test0707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0707");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale4);
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(locale4);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: ????? (??????) could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0708");
        java.util.Random random1 = new java.util.Random((long) (byte) 10);
        float float2 = random1.nextFloat();
        boolean boolean3 = random1.nextBoolean();
        java.util.stream.LongStream longStream4 = random1.longs();
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.73043025f + "'", float2 == 0.73043025f);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0709");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.lang.String str3 = locale2.getDisplayVariant();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale2);
        com.github.javafaker.Finance finance5 = faker4.finance();
        com.github.javafaker.Code code6 = faker4.code;
        faker0.code = code6;
        java.lang.String str9 = faker0.regexify("deu");
        com.github.javafaker.App app10 = faker0.app;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
        org.junit.Assert.assertNotNull(app10);
    }

    @Test
    public void test0710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0710");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Hacker hacker8 = null;
        faker0.hacker = hacker8;
        com.github.javafaker.Internet internet10 = faker0.internet;
        com.github.javafaker.Book book11 = faker0.book();
        com.github.javafaker.Code code12 = faker0.code;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet10);
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNotNull(code12);
    }

    @Test
    public void test0711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0711");
        java.util.Random random1 = new java.util.Random(1853403699951111791L);
        java.util.stream.IntStream intStream2 = random1.ints();
        java.util.stream.LongStream longStream4 = random1.longs((long) 10);
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertNotNull(longStream4);
    }

    @Test
    public void test0712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0712");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        double double5 = languageRange1.getWeight();
        double double6 = languageRange1.getWeight();
        double double7 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
    }

    @Test
    public void test0713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0713");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        double double5 = random1.nextDouble();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.10047321632624884d + "'", double5 == 0.10047321632624884d);
    }

    @Test
    public void test0714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0714");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Finance finance27 = faker0.finance();
        com.github.javafaker.Number number28 = faker0.number;
        com.github.javafaker.service.FakeValuesService fakeValuesService29 = faker0.fakeValuesService;
        com.github.javafaker.Internet internet30 = null;
        faker0.internet = internet30;
        java.lang.String str33 = null; // flaky: faker0.regexify("\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(number28);
        org.junit.Assert.assertNotNull(fakeValuesService29);
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4");
    }

    @Test
    public void test0715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0715");
        java.util.Random random1 = new java.util.Random((long) 100);
        long long2 = random1.nextLong();
        java.util.stream.IntStream intStream6 = random1.ints((long) 'x', (-1155869325), (int) (short) 0);
        int int7 = random1.nextInt();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-5128016860359238732L) + "'", long2 == (-5128016860359238732L));
        org.junit.Assert.assertNotNull(intStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 837415749 + "'", int7 == 837415749);
    }

    @Test
    public void test0716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0716");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ko", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("English");
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("eng");
        double double7 = languageRange6.getWeight();
        double double8 = languageRange6.getWeight();
        java.lang.String str9 = languageRange6.getRange();
        double double10 = languageRange6.getWeight();
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("eng");
        double double13 = languageRange12.getWeight();
        double double14 = languageRange12.getWeight();
        java.lang.String str15 = languageRange12.getRange();
        double double16 = languageRange12.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] { languageRange6, languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale locale37 = locale33.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.getISO3Language();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.lang.String str44 = locale38.getExtension('a');
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = locale45.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.lang.String str54 = locale50.getDisplayVariant();
        java.lang.String str56 = locale50.getExtension('a');
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale57.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale locale72 = locale68.stripExtensions();
        java.lang.String str73 = locale72.toLanguageTag();
        java.lang.String str74 = locale67.getDisplayLanguage(locale72);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = locale75.getCountry();
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayName(locale80);
        java.lang.String str82 = locale79.getISO3Language();
        java.util.Locale locale83 = locale79.stripExtensions();
        java.util.Locale locale84 = java.util.Locale.JAPAN;
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale85.getDisplayVariant();
        java.util.Locale.setDefault(locale85);
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale23, locale24, locale27, locale30, locale32, locale37, locale38, locale49, locale50, locale57, locale63, locale65, locale67, locale75, locale79, locale84, locale85 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList89, filteringMode91);
        java.util.Collection<java.util.Locale> localeCollection93 = null;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, localeCollection93);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.EXTENDED_FILTERING;
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList94, filteringMode97);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str31, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str64, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str70, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "eng" + "'", str71, "eng");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "en-CA" + "'", str73, "en-CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italian" + "'", str74, "Italian");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str77, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CA" + "'", str78, "CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str81, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "eng" + "'", str82, "eng");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.EXTENDED_FILTERING + "'", filteringMode97.equals(java.util.Locale.FilteringMode.EXTENDED_FILTERING));
        org.junit.Assert.assertNotNull(localeList98);
    }

    @Test
    public void test0717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0717");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        com.github.javafaker.Book book9 = faker7.book();
        com.github.javafaker.Finance finance10 = faker7.finance();
        com.github.javafaker.Lorem lorem11 = faker7.lorem();
        faker0.lorem = lorem11;
        com.github.javafaker.Hacker hacker13 = faker0.hacker();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(finance10);
        org.junit.Assert.assertNotNull(lorem11);
        org.junit.Assert.assertNotNull(hacker13);
    }

    @Test
    public void test0718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0718");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.App app10 = faker9.app;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.DateAndTime dateAndTime15 = faker11.dateAndTime;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.Book book24 = faker20.book();
        faker16.book = book24;
        faker11.book = book24;
        java.lang.String str28 = faker11.numerify("zho");
        com.github.javafaker.Hacker hacker29 = faker11.hacker();
        faker9.hacker = hacker29;
        java.util.Locale locale32 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale33 = locale32.stripExtensions();
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getCountry();
        java.lang.String str39 = locale35.getScript();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = locale35.getDisplayScript(locale44);
        java.lang.String str46 = locale34.getDisplayScript(locale35);
        com.github.javafaker.Faker faker47 = new com.github.javafaker.Faker(locale35);
        com.github.javafaker.Color color48 = faker47.color;
        com.github.javafaker.Faker faker49 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService50 = faker49.randomService;
        java.lang.String str52 = faker49.bothify("");
        com.github.javafaker.DateAndTime dateAndTime53 = faker49.dateAndTime;
        java.lang.String str55 = faker49.letterify("en-CA");
        com.github.javafaker.Code code56 = null;
        faker49.code = code56;
        com.github.javafaker.service.FakeValuesService fakeValuesService58 = faker49.fakeValuesService;
        faker47.fakeValuesService = fakeValuesService58;
        com.github.javafaker.Faker faker60 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService61 = faker60.randomService;
        java.lang.String str63 = faker60.bothify("");
        com.github.javafaker.DateAndTime dateAndTime64 = faker60.dateAndTime;
        com.github.javafaker.Faker faker65 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService66 = faker65.randomService;
        com.github.javafaker.Book book67 = faker65.book();
        faker60.book = book67;
        com.github.javafaker.Business business69 = faker60.business;
        faker47.business = business69;
        com.github.javafaker.Name name71 = faker47.name;
        com.github.javafaker.Address address72 = faker47.address();
        com.github.javafaker.Internet internet73 = faker47.internet();
        faker9.internet = internet73;
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(app10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "zho" + "'", str28, "zho");
        org.junit.Assert.assertNotNull(hacker29);
        org.junit.Assert.assertEquals(locale32.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "CA" + "'", str38, "CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(color48);
        org.junit.Assert.assertNotNull(randomService50);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(dateAndTime53);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-CA" + "'", str55, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService58);
        org.junit.Assert.assertNotNull(randomService61);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(dateAndTime64);
        org.junit.Assert.assertNotNull(randomService66);
        org.junit.Assert.assertNotNull(book67);
        org.junit.Assert.assertNotNull(business69);
        org.junit.Assert.assertNotNull(name71);
        org.junit.Assert.assertNotNull(address72);
        org.junit.Assert.assertNotNull(internet73);
    }

    @Test
    public void test0719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0719");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        java.util.Locale.Builder builder17 = builder5.clearExtensions();
        java.util.Locale.Builder builder18 = builder5.clear();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test0720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0720");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles();
        java.util.stream.LongStream longStream5 = random1.longs((long) (byte) 1);
        double double6 = random1.nextGaussian();
        random1.setSeed(100L);
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker(random1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.561581040188955d + "'", double6 == 1.561581040188955d);
    }

    @Test
    public void test0721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0721");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        faker8.book = book16;
        com.github.javafaker.DateAndTime dateAndTime18 = faker8.dateAndTime;
        faker0.dateAndTime = dateAndTime18;
        com.github.javafaker.Lorem lorem20 = faker0.lorem;
        com.github.javafaker.Hacker hacker21 = faker0.hacker;
        com.github.javafaker.DateAndTime dateAndTime22 = faker0.dateAndTime;
        java.lang.String str24 = faker0.numerify("\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNull(lorem20);
        org.junit.Assert.assertNotNull(hacker21);
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\u671d\u9c9c\u6587" + "'", str24, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test0722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0722");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        int int4 = random1.nextInt();
        java.util.stream.IntStream intStream7 = random1.ints(52699159, 491102327);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream10 = random1.doubles((double) (-1L), (double) (-5128016860359238732L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1155869325) + "'", int4 == (-1155869325));
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test0723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0723");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("english");
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en-ca ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "english");
    }

    @Test
    public void test0724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0724");
        java.util.Locale locale0 = java.util.Locale.FRANCE;
        java.util.Locale locale4 = new java.util.Locale("en_CA", "", "en_CA");
        java.lang.String str5 = locale0.getDisplayVariant(locale4);
        java.lang.String str6 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_FR");
        org.junit.Assert.assertEquals(locale4.toString(), "en_ca__en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Francia" + "'", str6, "Francia");
    }

    @Test
    public void test0725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0725");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        double double12 = random1.nextDouble();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.20771484130971707d + "'", double12 == 0.20771484130971707d);
    }

    @Test
    public void test0726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0726");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Business business9 = faker0.business;
        com.github.javafaker.Options options10 = faker0.options();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(options10);
    }

    @Test
    public void test0727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0727");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("coreano");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "coreano" + "'", str2, "coreano");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "coreano" + "'", str4, "coreano");
    }

    @Test
    public void test0728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0728");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Locale.Builder builder20 = builder3.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder20.setLanguage("\u52a0\u62ff\u5927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0729");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("italian");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "italian" + "'", str2, "italian");
    }

    @Test
    public void test0730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0730");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        java.lang.String str5 = faker0.letterify("eng");
        com.github.javafaker.service.RandomService randomService6 = faker0.randomService;
        com.github.javafaker.Address address7 = faker0.address;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(address7);
    }

    @Test
    public void test0731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0731");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.service.RandomService randomService33 = faker29.randomService;
        java.lang.String str35 = faker29.numerify("en_US");
        com.github.javafaker.Faker faker36 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business37 = null;
        faker36.business = business37;
        com.github.javafaker.Color color39 = null;
        faker36.color = color39;
        java.lang.String str42 = faker36.letterify("English");
        com.github.javafaker.Name name43 = faker36.name;
        faker29.name = name43;
        faker16.name = name43;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(randomService33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en_US" + "'", str35, "en_US");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "English" + "'", str42, "English");
        org.junit.Assert.assertNotNull(name43);
    }

    @Test
    public void test0732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0732");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.Class<?> wildcardClass5 = book4.getClass();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0733");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0734");
        java.util.Locale locale1 = new java.util.Locale("inglese (Regno Unito)");
        org.junit.Assert.assertEquals(locale1.toString(), "inglese (regno unito)");
    }

    @Test
    public void test0735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0735");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        java.lang.String str4 = faker0.numerify("hi!");
        com.github.javafaker.Business business5 = faker0.business;
        com.github.javafaker.PhoneNumber phoneNumber6 = faker0.phoneNumber();
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(business5);
        org.junit.Assert.assertNotNull(phoneNumber6);
    }

    @Test
    public void test0736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0736");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService3 = faker2.randomService;
        java.lang.String str5 = faker2.bothify("");
        com.github.javafaker.DateAndTime dateAndTime6 = faker2.dateAndTime;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        faker7.book = book15;
        faker2.book = book15;
        faker0.book = book15;
        com.github.javafaker.Finance finance19 = faker0.finance;
        java.lang.String str21 = faker0.letterify("\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(randomService3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(finance19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u671d\u9c9c\u6587" + "'", str21, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test0737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0737");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Code code7 = faker0.code();
        com.github.javafaker.Address address8 = faker0.address();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        com.github.javafaker.Finance finance14 = faker9.finance();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Book book23 = faker19.book();
        faker15.book = book23;
        com.github.javafaker.Options options25 = faker15.options();
        faker9.options = options25;
        faker0.options = options25;
        com.github.javafaker.Finance finance28 = faker0.finance;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.DateAndTime dateAndTime38 = faker34.dateAndTime;
        faker29.dateAndTime = dateAndTime38;
        com.github.javafaker.Code code40 = null;
        faker29.code = code40;
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService43 = faker42.randomService;
        java.lang.String str45 = faker42.bothify("");
        com.github.javafaker.Faker faker46 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService47 = faker46.randomService;
        com.github.javafaker.Book book48 = faker46.book();
        com.github.javafaker.Finance finance49 = faker46.finance();
        com.github.javafaker.Book book50 = faker46.book();
        com.github.javafaker.Options options51 = faker46.options();
        com.github.javafaker.PhoneNumber phoneNumber52 = faker46.phoneNumber();
        faker42.phoneNumber = phoneNumber52;
        com.github.javafaker.Name name54 = faker42.name();
        faker29.name = name54;
        com.github.javafaker.Finance finance56 = faker29.finance();
        com.github.javafaker.Number number57 = faker29.number;
        com.github.javafaker.DateAndTime dateAndTime58 = faker29.dateAndTime;
        faker0.dateAndTime = dateAndTime58;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(address8);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(book23);
        org.junit.Assert.assertNotNull(options25);
        org.junit.Assert.assertNotNull(finance28);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateAndTime38);
        org.junit.Assert.assertNotNull(randomService43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(randomService47);
        org.junit.Assert.assertNotNull(book48);
        org.junit.Assert.assertNotNull(finance49);
        org.junit.Assert.assertNotNull(book50);
        org.junit.Assert.assertNotNull(options51);
        org.junit.Assert.assertNotNull(phoneNumber52);
        org.junit.Assert.assertNotNull(name54);
        org.junit.Assert.assertNotNull(finance56);
        org.junit.Assert.assertNotNull(number57);
        org.junit.Assert.assertNotNull(dateAndTime58);
    }

    @Test
    public void test0738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0738");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.DateAndTime dateAndTime10 = faker0.dateAndTime;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Finance finance16 = faker11.finance();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.Book book25 = faker21.book();
        faker17.book = book25;
        com.github.javafaker.Options options27 = faker17.options();
        faker11.options = options27;
        com.github.javafaker.service.RandomService randomService29 = faker11.randomService;
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService31 = faker30.randomService;
        com.github.javafaker.Book book32 = faker30.book();
        com.github.javafaker.Finance finance33 = faker30.finance();
        com.github.javafaker.Book book34 = faker30.book();
        com.github.javafaker.Options options35 = faker30.options();
        com.github.javafaker.PhoneNumber phoneNumber36 = faker30.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService37 = faker30.fakeValuesService;
        faker11.fakeValuesService = fakeValuesService37;
        faker0.fakeValuesService = fakeValuesService37;
        com.github.javafaker.Address address40 = faker0.address();
        com.github.javafaker.Hacker hacker41 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(finance16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(book25);
        org.junit.Assert.assertNotNull(options27);
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertNotNull(randomService31);
        org.junit.Assert.assertNotNull(book32);
        org.junit.Assert.assertNotNull(finance33);
        org.junit.Assert.assertNotNull(book34);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(phoneNumber36);
        org.junit.Assert.assertNotNull(fakeValuesService37);
        org.junit.Assert.assertNotNull(address40);
        org.junit.Assert.assertNotNull(hacker41);
    }

    @Test
    public void test0739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0739");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("italian-English");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test0740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0740");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str6 = locale0.getExtension('a');
        java.util.Locale locale8 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale9 = locale8.stripExtensions();
        java.util.Set<java.lang.Character> charSet10 = locale8.getExtensionKeys();
        boolean boolean11 = locale8.hasExtensions();
        java.lang.String str12 = locale0.getDisplayName(locale8);
        java.util.Set<java.lang.String> strSet13 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals(locale8.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English (Canada)" + "'", str12, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test0741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0741");
        java.util.Locale locale3 = new java.util.Locale("Italian", "", "English");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.lang.String str6 = locale3.getCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0742");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (short) 100);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles();
        int int5 = random1.nextInt();
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1193959466) + "'", int5 == (-1193959466));
    }

    @Test
    public void test0743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0743");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Finance finance6 = faker0.finance;
        com.github.javafaker.Code code7 = faker0.code;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Book book12 = faker8.book();
        com.github.javafaker.Number number13 = faker8.number();
        com.github.javafaker.Lorem lorem14 = null;
        faker8.lorem = lorem14;
        com.github.javafaker.Business business16 = faker8.business();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.DateAndTime dateAndTime21 = faker17.dateAndTime;
        com.github.javafaker.Lorem lorem22 = null;
        faker17.lorem = lorem22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        com.github.javafaker.Book book26 = faker24.book();
        com.github.javafaker.Finance finance27 = faker24.finance();
        com.github.javafaker.Lorem lorem28 = faker24.lorem();
        faker17.lorem = lorem28;
        faker8.lorem = lorem28;
        faker0.lorem = lorem28;
        java.lang.String str33 = faker0.regexify("Korean");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(number13);
        org.junit.Assert.assertNotNull(business16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateAndTime21);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertNotNull(book26);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(lorem28);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Korean" + "'", str33, "Korean");
    }

    @Test
    public void test0744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0744");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Locale locale12 = locale8.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale7.getDisplayLanguage(locale12);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale7);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.service.RandomService randomService20 = faker16.randomService;
        faker15.randomService = randomService20;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.service.RandomService randomService26 = faker22.randomService;
        com.github.javafaker.Book book27 = faker22.book;
        com.github.javafaker.Lorem lorem28 = null;
        faker22.lorem = lorem28;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.lang.String str31 = locale30.getDisplayVariant();
        com.github.javafaker.Faker faker32 = new com.github.javafaker.Faker(locale30);
        com.github.javafaker.Finance finance33 = faker32.finance();
        com.github.javafaker.Code code34 = faker32.code;
        faker22.code = code34;
        faker15.code = code34;
        faker0.code = code34;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(finance33);
        org.junit.Assert.assertNotNull(code34);
    }

    @Test
    public void test0745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0745");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test0746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0746");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.util.Locale locale15 = locale2.stripExtensions();
        java.lang.String str16 = locale15.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = locale15.getUnicodeLocaleType("zho");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: zho");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "inglese" + "'", str16, "inglese");
    }

    @Test
    public void test0747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0747");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        faker0.code = code20;
        com.github.javafaker.Options options22 = faker0.options;
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.DateAndTime dateAndTime27 = faker23.dateAndTime;
        com.github.javafaker.Faker faker28 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService29 = faker28.randomService;
        java.lang.String str31 = faker28.bothify("");
        com.github.javafaker.DateAndTime dateAndTime32 = faker28.dateAndTime;
        faker23.dateAndTime = dateAndTime32;
        com.github.javafaker.Code code34 = null;
        faker23.code = code34;
        com.github.javafaker.Faker faker36 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService37 = faker36.randomService;
        java.lang.String str39 = faker36.bothify("");
        com.github.javafaker.DateAndTime dateAndTime40 = faker36.dateAndTime;
        com.github.javafaker.Lorem lorem41 = null;
        faker36.lorem = lorem41;
        com.github.javafaker.Code code43 = faker36.code();
        faker23.code = code43;
        com.github.javafaker.Company company45 = faker23.company;
        faker0.company = company45;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateAndTime27);
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(dateAndTime32);
        org.junit.Assert.assertNotNull(randomService37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(dateAndTime40);
        org.junit.Assert.assertNotNull(code43);
        org.junit.Assert.assertNotNull(company45);
    }

    @Test
    public void test0748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0748");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Options options5 = faker0.options();
        com.github.javafaker.Internet internet6 = faker0.internet;
        com.github.javafaker.Address address7 = faker0.address;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(address7);
    }

    @Test
    public void test0749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0749");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.toLanguageTag();
        java.util.Set<java.lang.String> strSet6 = locale0.getUnicodeLocaleKeys();
        java.lang.String str7 = locale0.getScript();
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale8.getDisplayLanguage(locale13);
        java.lang.String str16 = locale13.getDisplayScript();
        java.lang.String str17 = locale13.getISO3Country();
        java.util.Locale locale18 = null;
        java.lang.String str19 = locale13.getDisplayVariant(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getCountry();
        java.lang.String str24 = locale20.getScript();
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.lang.String str30 = locale20.getDisplayScript(locale29);
        java.lang.String str31 = locale29.getDisplayCountry();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getLanguage();
        java.util.Random random37 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream38 = random37.longs();
        java.util.stream.DoubleStream doubleStream39 = random37.doubles();
        com.github.javafaker.Faker faker40 = new com.github.javafaker.Faker(locale32, random37);
        java.lang.String str41 = locale29.getDisplayVariant(locale32);
        java.lang.String str42 = locale13.getDisplayCountry(locale32);
        java.util.Locale locale43 = java.util.Locale.ITALIAN;
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = locale44.getISO3Language();
        java.util.Locale locale48 = locale44.stripExtensions();
        java.lang.String str49 = locale48.toLanguageTag();
        java.lang.String str50 = locale43.getDisplayLanguage(locale48);
        java.lang.String str51 = locale48.getDisplayScript();
        java.lang.String str52 = locale48.getISO3Country();
        java.util.Locale locale53 = null;
        java.lang.String str54 = locale48.getDisplayVariant(locale53);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getCountry();
        java.lang.String str59 = locale55.getScript();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.lang.String str65 = locale55.getDisplayScript(locale64);
        java.lang.String str66 = locale64.getDisplayCountry();
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.util.Locale locale68 = java.util.Locale.KOREAN;
        java.lang.String str69 = locale67.getDisplayName(locale68);
        java.lang.String str70 = locale67.getLanguage();
        java.util.Random random72 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream73 = random72.longs();
        java.util.stream.DoubleStream doubleStream74 = random72.doubles();
        com.github.javafaker.Faker faker75 = new com.github.javafaker.Faker(locale67, random72);
        java.lang.String str76 = locale64.getDisplayVariant(locale67);
        java.lang.String str77 = locale48.getDisplayCountry(locale67);
        java.lang.String str78 = locale32.getDisplayVariant(locale48);
        java.util.Locale locale79 = java.util.Locale.FRANCE;
        java.util.Locale locale80 = java.util.Locale.CANADA;
        java.util.Locale locale81 = java.util.Locale.KOREAN;
        java.lang.String str82 = locale80.getDisplayName(locale81);
        java.lang.String str83 = locale80.getISO3Language();
        java.util.Locale locale84 = locale80.stripExtensions();
        java.lang.String str85 = locale84.toLanguageTag();
        java.lang.String str86 = locale84.toLanguageTag();
        java.lang.String str87 = locale79.getDisplayScript(locale84);
        java.lang.String str88 = locale32.getDisplayCountry(locale79);
        java.lang.String str89 = locale0.getDisplayCountry(locale79);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-CA" + "'", str5, "en-CA");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-CA" + "'", str14, "en-CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CAN" + "'", str17, "CAN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "CA" + "'", str23, "CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str27, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Canada" + "'", str31, "Canada");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en" + "'", str35, "en");
        org.junit.Assert.assertNotNull(longStream38);
        org.junit.Assert.assertNotNull(doubleStream39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Canada" + "'", str42, "Canada");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str46, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "eng" + "'", str47, "eng");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "en-CA" + "'", str49, "en-CA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Italian" + "'", str50, "Italian");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CAN" + "'", str52, "CAN");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str62, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "eng" + "'", str63, "eng");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "Canada" + "'", str66, "Canada");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str69 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str69, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en" + "'", str70, "en");
        org.junit.Assert.assertNotNull(longStream73);
        org.junit.Assert.assertNotNull(doubleStream74);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Canada" + "'", str77, "Canada");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str82 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str82, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "eng" + "'", str83, "eng");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str85 + "' != '" + "en-CA" + "'", str85, "en-CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "en-CA" + "'", str86, "en-CA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertEquals("'" + str88 + "' != '" + "Canada" + "'", str88, "Canada");
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "Canada" + "'", str89, "Canada");
    }

    @Test
    public void test0750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0750");
        java.util.Locale locale2 = new java.util.Locale("English", "CA");
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(locale2);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: english_CA could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "english_CA");
    }

    @Test
    public void test0751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0751");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.lang.String str12 = locale8.getScript();
        java.lang.String str13 = locale8.getDisplayScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test0752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0752");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        int int13 = random1.nextInt((int) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream16 = random1.ints(10, (int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 4 + "'", int13 == 4);
    }

    @Test
    public void test0753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0753");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name1 = faker0.name();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name3 = faker2.name();
        faker0.name = name3;
        com.github.javafaker.Lorem lorem5 = faker0.lorem();
        com.github.javafaker.Code code6 = faker0.code();
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Finance finance8 = faker0.finance();
        org.junit.Assert.assertNotNull(name1);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(finance8);
    }

    @Test
    public void test0754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0754");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Random random14 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream15 = random14.longs();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random14.nextBytes(byteArray22);
        long long24 = random14.nextLong();
        java.util.stream.DoubleStream doubleStream26 = random14.doubles((long) (byte) 10);
        java.util.stream.LongStream longStream27 = random14.longs();
        java.util.stream.DoubleStream doubleStream28 = random14.doubles();
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker(locale9, random14);
        java.lang.String str30 = locale9.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertNotNull(longStream15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 7564655870752979346L + "'", long24 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertNotNull(longStream27);
        org.junit.Assert.assertNotNull(doubleStream28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "en_CA" + "'", str30, "en_CA");
    }

    @Test
    public void test0755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0755");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("zh");
        java.lang.String str2 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
    }

    @Test
    public void test0756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0756");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Chinese", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test0757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0757");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale22 = new java.util.Locale("Italian", "", "English");
        java.lang.String str23 = locale7.getDisplayLanguage(locale22);
        java.lang.String str24 = locale1.getDisplayLanguage(locale22);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.lang.String str35 = locale30.toLanguageTag();
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale37);
        java.util.Locale locale39 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = locale37.getDisplayName(locale39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en-CA" + "'", str35, "en-CA");
        org.junit.Assert.assertNotNull(locale37);
// flaky:         org.junit.Assert.assertEquals(locale37.toString(), "can");
    }

    @Test
    public void test0758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0758");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0759");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        com.github.javafaker.Address address15 = faker5.address();
        faker0.address = address15;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name18 = faker17.name();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name20 = faker19.name();
        faker17.name = name20;
        faker0.name = name20;
        com.github.javafaker.Number number23 = faker0.number;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.Book book28 = faker24.book();
        com.github.javafaker.Finance finance29 = faker24.finance();
        faker0.finance = finance29;
        com.github.javafaker.Color color31 = faker0.color;
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(name18);
        org.junit.Assert.assertNotNull(name20);
        org.junit.Assert.assertNotNull(number23);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(book28);
        org.junit.Assert.assertNotNull(finance29);
        org.junit.Assert.assertNull(color31);
    }

    @Test
    public void test0760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0760");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setRegion("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0761");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Name name7 = faker0.name();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Book book12 = faker8.book();
        com.github.javafaker.Book book13 = faker8.book;
        com.github.javafaker.Finance finance14 = faker8.finance();
        com.github.javafaker.Address address15 = faker8.address();
        com.github.javafaker.PhoneNumber phoneNumber16 = faker8.phoneNumber();
        faker0.phoneNumber = phoneNumber16;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(phoneNumber16);
    }

    @Test
    public void test0762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0762");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        faker8.book = book16;
        com.github.javafaker.DateAndTime dateAndTime18 = faker8.dateAndTime;
        faker0.dateAndTime = dateAndTime18;
        com.github.javafaker.Lorem lorem20 = faker0.lorem;
        com.github.javafaker.Hacker hacker21 = faker0.hacker;
        com.github.javafaker.Business business22 = faker0.business();
        java.lang.String str24 = faker0.numerify("fra");
        com.github.javafaker.Code code25 = faker0.code;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNull(lorem20);
        org.junit.Assert.assertNotNull(hacker21);
        org.junit.Assert.assertNotNull(business22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertNotNull(code25);
    }

    @Test
    public void test0763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0763");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Business business9 = faker0.business;
        com.github.javafaker.Name name10 = faker0.name;
        com.github.javafaker.Internet internet11 = faker0.internet;
        com.github.javafaker.Color color12 = faker0.color();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(name10);
        org.junit.Assert.assertNotNull(internet11);
        org.junit.Assert.assertNotNull(color12);
    }

    @Test
    public void test0764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0764");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        java.util.Locale.Builder builder12 = builder10.setVariant("Italien");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setVariant("fra");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: fra [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0765");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Book book8 = faker0.book();
        com.github.javafaker.Name name9 = faker0.name();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(name9);
    }

    @Test
    public void test0766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0766");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("deu", (double) (-6047590478893910070L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-6.04759047889391E18");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0767");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("Korean");
        java.util.Locale locale11 = new java.util.Locale("eng");
        boolean boolean12 = locale11.hasExtensions();
        java.util.Locale.Builder builder13 = builder9.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setScript("Corea del Sud");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Corea del Sud [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals(locale11.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0768");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getLanguage();
        java.lang.String str3 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko" + "'", str2, "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0769");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService2 = faker1.randomService;
        java.lang.String str4 = faker1.bothify("");
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Book book9 = faker5.book();
        faker1.book = book9;
        com.github.javafaker.Options options11 = faker1.options();
        com.github.javafaker.App app12 = faker1.app;
        faker0.app = app12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.DateAndTime dateAndTime18 = faker14.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Book book27 = faker23.book();
        faker19.book = book27;
        faker14.book = book27;
        java.lang.String str31 = faker14.numerify("zho");
        com.github.javafaker.Hacker hacker32 = faker14.hacker();
        faker0.hacker = hacker32;
        org.junit.Assert.assertNotNull(randomService2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(app12);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "zho" + "'", str31, "zho");
        org.junit.Assert.assertNotNull(hacker32);
    }

    @Test
    public void test0770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0770");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getVariant();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale6);
        java.lang.String str9 = locale6.toString();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "can");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "can" + "'", str9, "can");
    }

    @Test
    public void test0771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0771");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Company company6 = faker0.company();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(company6);
    }

    @Test
    public void test0772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0772");
        java.util.Locale locale1 = new java.util.Locale("ko");
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
    }

    @Test
    public void test0773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0773");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        com.github.javafaker.Name name26 = faker0.name;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(name26);
    }

    @Test
    public void test0774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0774");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        java.util.stream.IntStream intStream10 = random2.ints((long) 10);
        long long11 = random2.nextLong();
        java.util.stream.LongStream longStream14 = random2.longs(0L, (long) (short) 1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 3831662765844904176L + "'", long11 == 3831662765844904176L);
        org.junit.Assert.assertNotNull(longStream14);
    }

    @Test
    public void test0775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0775");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayCountry();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService4 = faker3.randomService;
        com.github.javafaker.Book book5 = faker3.book();
        com.github.javafaker.Finance finance6 = faker3.finance();
        com.github.javafaker.Lorem lorem7 = faker3.lorem();
        boolean boolean8 = locale0.equals((java.lang.Object) lorem7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(lorem7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0776");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("Germany");
        java.util.Locale locale9 = builder5.build();
        java.lang.String str10 = locale9.getISO3Country();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "germany");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test0777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0777");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setLanguage("Italian");
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0778");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        java.lang.String str8 = faker0.bothify("italian");
        com.github.javafaker.Book book9 = faker0.book;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "italian" + "'", str8, "italian");
        org.junit.Assert.assertNotNull(book9);
    }

    @Test
    public void test0779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0779");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        int int9 = random2.nextInt(69);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream12 = random2.doubles((double) 3831662765844904176L, (double) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 23 + "'", int9 == 23);
    }

    @Test
    public void test0780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0780");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.removeUnicodeLocaleAttribute("Germany");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0781");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.lang.String str4 = locale3.getDisplayVariant();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale3);
        java.util.Set<java.lang.String> strSet6 = locale3.getUnicodeLocaleKeys();
        java.lang.String str7 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet6);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test0782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0782");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        double double4 = random1.nextGaussian();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        int int9 = random6.nextInt((int) 'u');
        random6.setSeed((long) (byte) 10);
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.Random random15 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream16 = random15.longs();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random15.nextBytes(byteArray23);
        random13.nextBytes(byteArray23);
        random6.nextBytes(byteArray23);
        random1.nextBytes(byteArray23);
        java.util.stream.IntStream intStream31 = random1.ints((long) (byte) 10, 0, (int) (byte) 10);
        double double32 = random1.nextGaussian();
        java.util.stream.LongStream longStream35 = random1.longs(0L, (long) 431529176);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.7853314409882288d + "'", double4 == 1.7853314409882288d);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -101, 127, -45, -10, 56]");
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertTrue("'" + double32 + "' != '" + (-0.9204169061847902d) + "'", double32 == (-0.9204169061847902d));
        org.junit.Assert.assertNotNull(longStream35);
    }

    @Test
    public void test0783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0783");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.service.FakeValuesService fakeValuesService9 = faker0.fakeValuesService;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        com.github.javafaker.Book book17 = faker15.book();
        faker10.book = book17;
        com.github.javafaker.Business business19 = faker10.business;
        faker0.business = business19;
        com.github.javafaker.Hacker hacker21 = faker0.hacker;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.Book book26 = faker22.book();
        com.github.javafaker.Book book27 = faker22.book;
        com.github.javafaker.Finance finance28 = faker22.finance();
        com.github.javafaker.Address address29 = faker22.address();
        com.github.javafaker.PhoneNumber phoneNumber30 = faker22.phoneNumber();
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        com.github.javafaker.Number number36 = faker31.number();
        com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService38 = faker37.randomService;
        java.lang.String str40 = faker37.bothify("");
        com.github.javafaker.DateAndTime dateAndTime41 = faker37.dateAndTime;
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService43 = faker42.randomService;
        java.lang.String str45 = faker42.bothify("");
        com.github.javafaker.DateAndTime dateAndTime46 = faker42.dateAndTime;
        faker37.dateAndTime = dateAndTime46;
        com.github.javafaker.Code code48 = null;
        faker37.code = code48;
        com.github.javafaker.Faker faker50 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService51 = faker50.randomService;
        java.lang.String str53 = faker50.bothify("");
        com.github.javafaker.Faker faker54 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService55 = faker54.randomService;
        com.github.javafaker.Book book56 = faker54.book();
        com.github.javafaker.Finance finance57 = faker54.finance();
        com.github.javafaker.Book book58 = faker54.book();
        com.github.javafaker.Options options59 = faker54.options();
        com.github.javafaker.PhoneNumber phoneNumber60 = faker54.phoneNumber();
        faker50.phoneNumber = phoneNumber60;
        com.github.javafaker.Name name62 = faker50.name();
        faker37.name = name62;
        com.github.javafaker.Finance finance64 = faker37.finance();
        com.github.javafaker.Number number65 = faker37.number;
        faker31.number = number65;
        faker22.number = number65;
        com.github.javafaker.Finance finance68 = faker22.finance;
        faker0.finance = finance68;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(business19);
        org.junit.Assert.assertNotNull(hacker21);
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(book26);
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(finance28);
        org.junit.Assert.assertNotNull(address29);
        org.junit.Assert.assertNotNull(phoneNumber30);
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertNotNull(randomService38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(dateAndTime41);
        org.junit.Assert.assertNotNull(randomService43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateAndTime46);
        org.junit.Assert.assertNotNull(randomService51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(randomService55);
        org.junit.Assert.assertNotNull(book56);
        org.junit.Assert.assertNotNull(finance57);
        org.junit.Assert.assertNotNull(book58);
        org.junit.Assert.assertNotNull(options59);
        org.junit.Assert.assertNotNull(phoneNumber60);
        org.junit.Assert.assertNotNull(name62);
        org.junit.Assert.assertNotNull(finance64);
        org.junit.Assert.assertNotNull(number65);
        org.junit.Assert.assertNotNull(finance68);
    }

    @Test
    public void test0784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0784");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.PhoneNumber phoneNumber9 = faker8.phoneNumber;
        com.github.javafaker.Lorem lorem10 = faker8.lorem();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.service.RandomService randomService15 = faker11.randomService;
        faker8.randomService = randomService15;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(phoneNumber9);
        org.junit.Assert.assertNotNull(lorem10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(randomService15);
    }

    @Test
    public void test0785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0785");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.DateAndTime dateAndTime2 = faker0.date();
        com.github.javafaker.Code code3 = faker0.code;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(dateAndTime2);
        org.junit.Assert.assertNotNull(code3);
    }

    @Test
    public void test0786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0786");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        com.github.javafaker.DateAndTime dateAndTime15 = faker14.date();
        java.lang.String str17 = faker14.regexify("CAN");
        java.lang.String str19 = faker14.letterify("Canada");
        com.github.javafaker.Address address20 = faker14.address;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "CAN" + "'", str17, "CAN");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Canada" + "'", str19, "Canada");
        org.junit.Assert.assertNotNull(address20);
    }

    @Test
    public void test0787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0787");
        java.util.Locale locale2 = new java.util.Locale("", "Italian");
        java.lang.String str3 = locale2.getDisplayScript();
        org.junit.Assert.assertEquals(locale2.toString(), "_ITALIAN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0788");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        java.lang.String str6 = faker0.letterify("English");
        com.github.javafaker.Name name7 = faker0.name;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Book book12 = faker8.book();
        com.github.javafaker.Number number13 = faker8.number();
        com.github.javafaker.Finance finance14 = faker8.finance;
        faker0.finance = finance14;
        com.github.javafaker.Internet internet16 = faker0.internet();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(number13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(internet16);
    }

    @Test
    public void test0789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0789");
        java.util.Locale locale2 = new java.util.Locale("ita", "English (Canada)");
        java.lang.String str3 = locale2.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "ita_ENGLISH (CANADA)");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Italian" + "'", str3, "Italian");
    }

    @Test
    public void test0790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0790");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        java.lang.String str4 = faker0.numerify("hi!");
        com.github.javafaker.Business business5 = faker0.business;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance7 = faker6.finance;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.DateAndTime dateAndTime12 = faker8.dateAndTime;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        faker13.book = book21;
        faker8.book = book21;
        faker6.book = book21;
        com.github.javafaker.Internet internet25 = null;
        faker6.internet = internet25;
        com.github.javafaker.Name name27 = faker6.name;
        com.github.javafaker.PhoneNumber phoneNumber28 = faker6.phoneNumber;
        faker0.phoneNumber = phoneNumber28;
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
        org.junit.Assert.assertNull(business5);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(name27);
        org.junit.Assert.assertNotNull(phoneNumber28);
    }

    @Test
    public void test0791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0791");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        java.lang.String str9 = faker0.numerify("ITALIAN");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITALIAN" + "'", str9, "ITALIAN");
    }

    @Test
    public void test0792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0792");
        java.util.Locale locale2 = new java.util.Locale("english (Canada)", "\u52a0\u62ff\u5927");
        java.lang.String str3 = locale2.getScript();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u52a0\u62ff\u5927");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0793");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        float float4 = random1.nextFloat();
        float float5 = random1.nextFloat();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Book book12 = faker8.book();
        com.github.javafaker.Number number13 = faker8.number();
        com.github.javafaker.Finance finance14 = faker8.finance;
        com.github.javafaker.Finance finance15 = faker8.finance;
        faker7.finance = finance15;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.service.RandomService randomService21 = faker17.randomService;
        com.github.javafaker.Book book22 = faker17.book;
        com.github.javafaker.Internet internet23 = faker17.internet();
        com.github.javafaker.Internet internet24 = faker17.internet;
        com.github.javafaker.DateAndTime dateAndTime25 = faker17.date();
        com.github.javafaker.Business business26 = faker17.business;
        faker7.business = business26;
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.2689426f + "'", float4 == 0.2689426f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.43956196f + "'", float5 == 0.43956196f);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(number13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(finance15);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(internet23);
        org.junit.Assert.assertNotNull(internet24);
        org.junit.Assert.assertNotNull(dateAndTime25);
        org.junit.Assert.assertNotNull(business26);
    }

    @Test
    public void test0794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0794");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        faker6.book = book14;
        com.github.javafaker.Options options16 = faker6.options();
        faker0.options = options16;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker0.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.DateAndTime dateAndTime38 = faker34.dateAndTime;
        faker29.dateAndTime = dateAndTime38;
        com.github.javafaker.Code code40 = null;
        faker29.code = code40;
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService43 = faker42.randomService;
        java.lang.String str45 = faker42.bothify("");
        com.github.javafaker.DateAndTime dateAndTime46 = faker42.dateAndTime;
        com.github.javafaker.Lorem lorem47 = null;
        faker42.lorem = lorem47;
        com.github.javafaker.Code code49 = faker42.code();
        faker29.code = code49;
        com.github.javafaker.Company company51 = faker29.company();
        faker0.company = company51;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateAndTime38);
        org.junit.Assert.assertNotNull(randomService43);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNotNull(dateAndTime46);
        org.junit.Assert.assertNotNull(code49);
        org.junit.Assert.assertNotNull(company51);
    }

    @Test
    public void test0795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0795");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Business business3 = faker0.business();
        com.github.javafaker.Finance finance4 = faker0.finance;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Book book9 = faker5.book();
        com.github.javafaker.Finance finance10 = faker5.finance();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.Book book19 = faker15.book();
        faker11.book = book19;
        com.github.javafaker.Options options21 = faker11.options();
        faker5.options = options21;
        com.github.javafaker.service.RandomService randomService23 = faker5.randomService;
        com.github.javafaker.PhoneNumber phoneNumber24 = faker5.phoneNumber;
        faker0.phoneNumber = phoneNumber24;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(business3);
        org.junit.Assert.assertNotNull(finance4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(finance10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(options21);
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertNotNull(phoneNumber24);
    }

    @Test
    public void test0796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0796");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.util.stream.IntStream intStream17 = random9.ints((int) (short) -1, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream20 = random9.doubles((double) '#', (double) (-4972683369271453960L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(intStream17);
    }

    @Test
    public void test0797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0797");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.App app10 = faker8.app;
        com.github.javafaker.Options options11 = faker8.options();
        com.github.javafaker.DateAndTime dateAndTime12 = faker8.dateAndTime;
        com.github.javafaker.Internet internet13 = faker8.internet;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(app10);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertNotNull(internet13);
    }

    @Test
    public void test0798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0798");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.DateAndTime dateAndTime5 = faker0.dateAndTime;
        com.github.javafaker.DateAndTime dateAndTime6 = faker0.date();
        com.github.javafaker.Company company7 = faker0.company;
        com.github.javafaker.Address address8 = faker0.address();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(company7);
        org.junit.Assert.assertNotNull(address8);
    }

    @Test
    public void test0799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0799");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        float float5 = random2.nextFloat();
        int int6 = random2.nextInt();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.7308782f + "'", float5 == 0.7308782f);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 431529176 + "'", int6 == 431529176);
    }

    @Test
    public void test0800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0800");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Italien", (double) 'u');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=117.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0801");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italian", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test0802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0802");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0803");
        java.util.Random random1 = new java.util.Random((long) (-1157793070));
    }

    @Test
    public void test0804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0804");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Book book2 = faker0.book();
        java.lang.String str4 = faker0.regexify("ko");
        java.util.Locale locale5 = java.util.Locale.ITALIAN;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.lang.String str11 = locale10.toLanguageTag();
        java.lang.String str12 = locale5.getDisplayLanguage(locale10);
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(locale5);
        com.github.javafaker.Address address14 = faker13.address();
        faker0.address = address14;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.DateAndTime dateAndTime20 = faker16.dateAndTime;
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.DateAndTime dateAndTime25 = faker21.dateAndTime;
        faker16.dateAndTime = dateAndTime25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Book book31 = faker27.book();
        com.github.javafaker.Options options32 = faker27.options();
        com.github.javafaker.PhoneNumber phoneNumber33 = faker27.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService34 = faker27.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService34;
        com.github.javafaker.PhoneNumber phoneNumber36 = faker16.phoneNumber;
        faker0.phoneNumber = phoneNumber36;
        com.github.javafaker.Book book38 = faker0.book;
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko" + "'", str4, "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italian" + "'", str12, "Italian");
        org.junit.Assert.assertNotNull(address14);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateAndTime20);
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateAndTime25);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(book31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(phoneNumber33);
        org.junit.Assert.assertNotNull(fakeValuesService34);
        org.junit.Assert.assertNotNull(phoneNumber36);
        org.junit.Assert.assertNotNull(book38);
    }

    @Test
    public void test0805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0805");
        java.util.Locale locale1 = new java.util.Locale("eng");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getDisplayVariant();
        java.util.Locale locale4 = locale1.stripExtensions();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random6);
        java.util.stream.DoubleStream doubleStream11 = random6.doubles((double) 0L, (double) ' ');
        java.util.stream.IntStream intStream12 = random6.ints();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(locale1, random6);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: eng could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "eng");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(intStream12);
    }

    @Test
    public void test0806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0806");
        java.util.Locale locale3 = new java.util.Locale("English", "\u52a0\u62ff\u5927", "English");
        java.lang.Object obj4 = locale3.clone();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u52a0\u62ff\u5927_English");
        org.junit.Assert.assertNotNull(obj4);
// flaky:         org.junit.Assert.assertEquals(obj4.toString(), "\u52a0\u62ff\u5927_English");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj4), "\u52a0\u62ff\u5927_English");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj4), "\u52a0\u62ff\u5927_English");
    }

    @Test
    public void test0807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0807");
        java.util.Locale locale3 = new java.util.Locale("Italian", "", "English");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.lang.String str6 = locale5.getLanguage();
        java.util.Set<java.lang.Character> charSet7 = locale5.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italian" + "'", str6, "italian");
        org.junit.Assert.assertNotNull(charSet7);
    }

    @Test
    public void test0808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0808");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getDisplayVariant();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale8);
        com.github.javafaker.Finance finance11 = faker10.finance();
        com.github.javafaker.Code code12 = faker10.code;
        faker0.code = code12;
        com.github.javafaker.Options options14 = faker0.options;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = faker0.resolve("italian");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(finance11);
        org.junit.Assert.assertNotNull(code12);
        org.junit.Assert.assertNotNull(options14);
    }

    @Test
    public void test0809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0809");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.lang.String str12 = locale8.getDisplayScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0810");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0811");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        boolean boolean3 = random1.nextBoolean();
        boolean boolean4 = random1.nextBoolean();
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0812");
        java.util.Locale locale3 = new java.util.Locale("\u671d\u9c9c\u6587", "hi! (CHINESE (CHINA))", "Germany");
        org.junit.Assert.assertEquals(locale3.toString(), "\u671d\u9c9c\u6587_HI! (CHINESE (CHINA))_Germany");
    }

    @Test
    public void test0813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0813");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        java.util.Locale.Builder builder12 = builder8.addUnicodeLocaleAttribute("Italian");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "italian");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0814");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale7.getDisplayName(locale9);
        java.lang.String str15 = locale4.getDisplayName(locale9);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(category0, locale17);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587" + "'", str8, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
    }

    @Test
    public void test0815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0815");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        faker27.book = book35;
        com.github.javafaker.Options options37 = faker27.options();
        com.github.javafaker.App app38 = faker27.app;
        com.github.javafaker.Finance finance39 = faker27.finance();
        com.github.javafaker.Company company40 = faker27.company();
        faker0.company = company40;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(app38);
        org.junit.Assert.assertNotNull(finance39);
        org.junit.Assert.assertNotNull(company40);
    }

    @Test
    public void test0816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0816");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        faker0.code = code20;
        com.github.javafaker.Company company22 = faker0.company;
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business24 = null;
        faker23.business = business24;
        com.github.javafaker.Color color26 = null;
        faker23.color = color26;
        com.github.javafaker.Faker faker28 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService29 = faker28.randomService;
        java.lang.String str31 = faker28.bothify("");
        com.github.javafaker.Faker faker32 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService33 = faker32.randomService;
        java.lang.String str35 = faker32.bothify("");
        com.github.javafaker.Book book36 = faker32.book();
        faker28.book = book36;
        com.github.javafaker.Address address38 = faker28.address();
        faker23.address = address38;
        com.github.javafaker.Faker faker40 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name41 = faker40.name();
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name43 = faker42.name();
        faker40.name = name43;
        faker23.name = name43;
        com.github.javafaker.Faker faker46 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService47 = faker46.randomService;
        java.lang.String str49 = faker46.bothify("");
        com.github.javafaker.DateAndTime dateAndTime50 = faker46.dateAndTime;
        com.github.javafaker.Lorem lorem51 = null;
        faker46.lorem = lorem51;
        com.github.javafaker.Address address53 = null;
        faker46.address = address53;
        com.github.javafaker.Name name55 = null;
        faker46.name = name55;
        com.github.javafaker.Faker faker57 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name58 = faker57.name();
        com.github.javafaker.Faker faker59 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name60 = faker59.name();
        faker57.name = name60;
        com.github.javafaker.Lorem lorem62 = faker57.lorem();
        faker46.lorem = lorem62;
        faker23.lorem = lorem62;
        faker0.lorem = lorem62;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertNotNull(company22);
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(randomService33);
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(address38);
        org.junit.Assert.assertNotNull(name41);
        org.junit.Assert.assertNotNull(name43);
        org.junit.Assert.assertNotNull(randomService47);
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(dateAndTime50);
        org.junit.Assert.assertNotNull(name58);
        org.junit.Assert.assertNotNull(name60);
        org.junit.Assert.assertNotNull(lorem62);
    }

    @Test
    public void test0817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0817");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Book book8 = faker0.book();
        com.github.javafaker.DateAndTime dateAndTime9 = null;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Book book11 = faker0.book;
        com.github.javafaker.DateAndTime dateAndTime12 = faker0.date();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNull(dateAndTime12);
    }

    @Test
    public void test0818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0818");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.Book book30 = faker26.book();
        com.github.javafaker.Number number31 = faker26.number();
        faker0.number = number31;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker(locale33);
        com.github.javafaker.Company company42 = faker41.company();
        faker0.company = company42;
        com.github.javafaker.Faker faker44 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService45 = faker44.randomService;
        java.lang.String str47 = faker44.bothify("");
        com.github.javafaker.Book book48 = faker44.book();
        java.lang.String str50 = faker44.regexify("eng");
        com.github.javafaker.service.RandomService randomService51 = faker44.randomService;
        com.github.javafaker.Code code52 = faker44.code;
        com.github.javafaker.Hacker hacker53 = faker44.hacker;
        faker0.hacker = hacker53;
        com.github.javafaker.Internet internet55 = faker0.internet();
        com.github.javafaker.Book book56 = faker0.book;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(number31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-CA" + "'", str39, "en-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(company42);
        org.junit.Assert.assertNotNull(randomService45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(book48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertNotNull(randomService51);
        org.junit.Assert.assertNotNull(code52);
        org.junit.Assert.assertNotNull(hacker53);
        org.junit.Assert.assertNotNull(internet55);
        org.junit.Assert.assertNotNull(book56);
    }

    @Test
    public void test0819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0819");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "italian");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0820");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Name name12 = faker0.name();
        com.github.javafaker.Hacker hacker13 = faker0.hacker;
        com.github.javafaker.Finance finance14 = faker0.finance;
        com.github.javafaker.Code code15 = faker0.code();
        com.github.javafaker.service.RandomService randomService16 = faker0.randomService;
        com.github.javafaker.Internet internet17 = faker0.internet();
        java.lang.String str19 = faker0.regexify("zho");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(name12);
        org.junit.Assert.assertNotNull(hacker13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(code15);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(internet17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho" + "'", str19, "zho");
    }

    @Test
    public void test0821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0821");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder7 = builder0.setLanguageTag("Francia");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "italian");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0822");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.lang.String str9 = locale0.getLanguage();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        com.github.javafaker.DateAndTime dateAndTime12 = faker10.date();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        com.github.javafaker.Book book20 = faker18.book();
        faker13.book = book20;
        com.github.javafaker.Business business22 = faker13.business;
        faker10.business = business22;
        com.github.javafaker.Company company24 = faker10.company;
        boolean boolean25 = locale0.equals((java.lang.Object) company24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it" + "'", str9, "it");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(business22);
        org.junit.Assert.assertNotNull(company24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test0823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0823");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale22 = new java.util.Locale("Italian", "", "English");
        java.lang.String str23 = locale7.getDisplayLanguage(locale22);
        java.lang.String str24 = locale1.getDisplayLanguage(locale22);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale.Builder builder30 = new java.util.Locale.Builder();
        java.util.Locale locale31 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet32 = locale31.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder33 = builder30.setLocale(locale31);
        java.util.Locale.Builder builder35 = builder33.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale36 = builder33.build();
        boolean boolean37 = locale26.equals((java.lang.Object) builder33);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale31);
// flaky:         org.junit.Assert.assertEquals(locale31.toString(), "italian");
        org.junit.Assert.assertNotNull(strSet32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(locale36);
// flaky:         org.junit.Assert.assertEquals(locale36.toString(), "italian");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test0824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0824");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.util.Locale locale15 = locale2.stripExtensions();
        java.lang.String str16 = locale2.getCountry();
        java.util.Random random18 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream19 = random18.doubles();
        java.util.stream.LongStream longStream22 = random18.longs((long) 0, 10L);
        java.util.Random random24 = new java.util.Random((long) 1);
        java.util.Random random26 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream27 = random26.longs();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random26.nextBytes(byteArray34);
        random24.nextBytes(byteArray34);
        random18.nextBytes(byteArray34);
        java.util.stream.LongStream longStream38 = random18.longs();
        boolean boolean39 = locale2.equals((java.lang.Object) random18);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "CA" + "'", str16, "CA");
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertNotNull(longStream22);
        org.junit.Assert.assertNotNull(longStream27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertNotNull(longStream38);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0825");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Business business9 = faker0.business;
        com.github.javafaker.Name name10 = faker0.name;
        com.github.javafaker.Internet internet11 = faker0.internet;
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.Book book20 = faker16.book();
        faker12.book = book20;
        com.github.javafaker.DateAndTime dateAndTime22 = faker12.dateAndTime;
        faker0.dateAndTime = dateAndTime22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        com.github.javafaker.Book book26 = faker24.book();
        com.github.javafaker.Finance finance27 = faker24.finance();
        com.github.javafaker.Book book28 = faker24.book();
        com.github.javafaker.Options options29 = faker24.options();
        com.github.javafaker.PhoneNumber phoneNumber30 = faker24.phoneNumber();
        faker0.phoneNumber = phoneNumber30;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(name10);
        org.junit.Assert.assertNotNull(internet11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertNotNull(book26);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(book28);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(phoneNumber30);
    }

    @Test
    public void test0826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0826");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        java.lang.String str11 = faker5.letterify("en-CA");
        com.github.javafaker.Code code12 = null;
        faker5.code = code12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.DateAndTime dateAndTime18 = faker14.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Book book27 = faker23.book();
        faker19.book = book27;
        faker14.book = book27;
        faker5.book = book27;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        com.github.javafaker.Number number36 = faker31.number();
        faker5.number = number36;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.util.Locale locale43 = locale39.stripExtensions();
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = locale38.getDisplayLanguage(locale43);
        com.github.javafaker.Faker faker46 = new com.github.javafaker.Faker(locale38);
        com.github.javafaker.Company company47 = faker46.company();
        faker5.company = company47;
        faker0.company = company47;
        com.github.javafaker.Hacker hacker50 = faker0.hacker();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en-CA" + "'", str44, "en-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertNotNull(company47);
        org.junit.Assert.assertNotNull(hacker50);
    }

    @Test
    public void test0827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0827");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale0.getDisplayCountry(locale5);
        java.lang.String str8 = locale5.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Canada" + "'", str7, "Canada");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0828");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.Business business7 = faker0.business;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(business7);
    }

    @Test
    public void test0829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0829");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Internet internet27 = faker0.internet;
        com.github.javafaker.Name name28 = faker0.name;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.service.RandomService randomService33 = faker29.randomService;
        com.github.javafaker.Book book34 = faker29.book;
        com.github.javafaker.Lorem lorem35 = null;
        faker29.lorem = lorem35;
        com.github.javafaker.Hacker hacker37 = null;
        faker29.hacker = hacker37;
        com.github.javafaker.Color color39 = faker29.color;
        com.github.javafaker.Book book40 = faker29.book();
        com.github.javafaker.App app41 = faker29.app;
        faker0.app = app41;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(internet27);
        org.junit.Assert.assertNotNull(name28);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(randomService33);
        org.junit.Assert.assertNotNull(book34);
        org.junit.Assert.assertNotNull(color39);
        org.junit.Assert.assertNotNull(book40);
        org.junit.Assert.assertNotNull(app41);
    }

    @Test
    public void test0830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0830");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.lang.String str8 = locale2.getDisplayVariant();
        java.util.Locale locale9 = locale2.stripExtensions();
        java.lang.String str10 = locale2.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CAN" + "'", str10, "CAN");
    }

    @Test
    public void test0831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0831");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Name name5 = faker0.name;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(name5);
    }

    @Test
    public void test0832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0832");
        java.util.Locale locale1 = new java.util.Locale("\u82f1\u6587");
        org.junit.Assert.assertEquals(locale1.toString(), "\u82f1\u6587");
    }

    @Test
    public void test0833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0833");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream14 = random13.longs();
        int int16 = random13.nextInt((int) 'u');
        random13.setSeed((long) (byte) 10);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random13.nextBytes(byteArray30);
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale0, random13);
        java.lang.String str35 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, 122, -3, -70, -8, 22]");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
    }

    @Test
    public void test0834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0834");
        java.util.Locale locale1 = new java.util.Locale("eng");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.lang.String str7 = locale3.getDisplayVariant();
        java.lang.String str9 = locale3.getExtension('a');
        java.lang.String str10 = locale1.getDisplayScript(locale3);
        java.lang.String str11 = locale3.getCountry();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale3);
        java.lang.String str13 = locale3.toLanguageTag();
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "CA" + "'", str11, "CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
    }

    @Test
    public void test0835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0835");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Hacker hacker8 = null;
        faker0.hacker = hacker8;
        com.github.javafaker.Hacker hacker10 = null;
        faker0.hacker = hacker10;
        com.github.javafaker.service.FakeValuesService fakeValuesService12 = faker0.fakeValuesService;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        com.github.javafaker.Address address21 = faker13.address();
        com.github.javafaker.App app22 = faker13.app;
        com.github.javafaker.Hacker hacker23 = faker13.hacker;
        faker0.hacker = hacker23;
        com.github.javafaker.Company company25 = faker0.company;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(fakeValuesService12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertNotNull(address21);
        org.junit.Assert.assertNotNull(app22);
        org.junit.Assert.assertNotNull(hacker23);
        org.junit.Assert.assertNotNull(company25);
    }

    @Test
    public void test0836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0836");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Company company10 = faker8.company();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale11.getDisplayLanguage(locale16);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale11);
        com.github.javafaker.Company company20 = faker19.company();
        com.github.javafaker.Business business21 = faker19.business();
        java.util.Locale locale22 = java.util.Locale.ITALIAN;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale27.toLanguageTag();
        java.lang.String str29 = locale22.getDisplayLanguage(locale27);
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker(locale22);
        com.github.javafaker.Address address31 = faker30.address();
        faker19.address = address31;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker(locale33);
        com.github.javafaker.Company company42 = faker41.company();
        com.github.javafaker.App app43 = faker41.app;
        com.github.javafaker.Options options44 = faker41.options();
        com.github.javafaker.Color color45 = faker41.color();
        faker19.color = color45;
        faker8.color = color45;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(company10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-CA" + "'", str17, "en-CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertNotNull(company20);
        org.junit.Assert.assertNotNull(business21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "en-CA" + "'", str28, "en-CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italian" + "'", str29, "Italian");
        org.junit.Assert.assertNotNull(address31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-CA" + "'", str39, "en-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(company42);
        org.junit.Assert.assertNotNull(app43);
        org.junit.Assert.assertNotNull(options44);
        org.junit.Assert.assertNotNull(color45);
    }

    @Test
    public void test0837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0837");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Address address5 = faker0.address;
        com.github.javafaker.service.FakeValuesService fakeValuesService6 = faker0.fakeValuesService;
        com.github.javafaker.Name name7 = faker0.name;
        com.github.javafaker.Book book8 = faker0.book();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(address5);
        org.junit.Assert.assertNotNull(fakeValuesService6);
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(book8);
    }

    @Test
    public void test0838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0838");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        java.lang.String str6 = faker0.letterify("English");
        java.util.Locale locale7 = java.util.Locale.ITALIAN;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Locale locale12 = locale8.stripExtensions();
        java.lang.String str13 = locale12.toLanguageTag();
        java.lang.String str14 = locale7.getDisplayLanguage(locale12);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale7);
        com.github.javafaker.Company company16 = faker15.company();
        com.github.javafaker.Business business17 = faker15.business();
        faker0.business = business17;
        com.github.javafaker.Number number19 = faker0.number();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.Book book24 = faker20.book();
        com.github.javafaker.Book book25 = faker20.book;
        com.github.javafaker.Finance finance26 = faker20.finance();
        com.github.javafaker.Address address27 = faker20.address();
        com.github.javafaker.PhoneNumber phoneNumber28 = faker20.phoneNumber();
        faker0.phoneNumber = phoneNumber28;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "en-CA" + "'", str13, "en-CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertNotNull(company16);
        org.junit.Assert.assertNotNull(business17);
        org.junit.Assert.assertNotNull(number19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(book25);
        org.junit.Assert.assertNotNull(finance26);
        org.junit.Assert.assertNotNull(address27);
        org.junit.Assert.assertNotNull(phoneNumber28);
    }

    @Test
    public void test0839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0839");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        java.util.Locale locale27 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale28 = locale27.stripExtensions();
        java.util.Locale locale29 = locale28.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getCountry();
        java.lang.String str34 = locale30.getScript();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.util.Locale locale39 = locale35.stripExtensions();
        java.lang.String str40 = locale30.getDisplayScript(locale39);
        java.lang.String str41 = locale29.getDisplayScript(locale30);
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker(locale30);
        com.github.javafaker.Color color43 = faker42.color;
        faker0.color = color43;
        java.util.Locale locale46 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale47 = locale46.stripExtensions();
        java.util.Locale locale48 = locale47.stripExtensions();
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getCountry();
        java.lang.String str53 = locale49.getScript();
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayName(locale55);
        java.lang.String str57 = locale54.getISO3Language();
        java.util.Locale locale58 = locale54.stripExtensions();
        java.lang.String str59 = locale49.getDisplayScript(locale58);
        java.lang.String str60 = locale48.getDisplayScript(locale49);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale49);
        com.github.javafaker.Color color62 = faker61.color;
        com.github.javafaker.Faker faker63 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService64 = faker63.randomService;
        java.lang.String str66 = faker63.bothify("");
        com.github.javafaker.DateAndTime dateAndTime67 = faker63.dateAndTime;
        java.lang.String str69 = faker63.letterify("en-CA");
        com.github.javafaker.Code code70 = null;
        faker63.code = code70;
        com.github.javafaker.service.FakeValuesService fakeValuesService72 = faker63.fakeValuesService;
        faker61.fakeValuesService = fakeValuesService72;
        com.github.javafaker.Faker faker74 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService75 = faker74.randomService;
        java.lang.String str77 = faker74.bothify("");
        com.github.javafaker.DateAndTime dateAndTime78 = faker74.dateAndTime;
        com.github.javafaker.Faker faker79 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService80 = faker79.randomService;
        com.github.javafaker.Book book81 = faker79.book();
        faker74.book = book81;
        com.github.javafaker.Business business83 = faker74.business;
        faker61.business = business83;
        faker0.business = business83;
        com.github.javafaker.Company company86 = faker0.company();
        com.github.javafaker.Faker faker87 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name88 = faker87.name();
        com.github.javafaker.Faker faker89 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name90 = faker89.name();
        faker87.name = name90;
        com.github.javafaker.Address address92 = faker87.address;
        faker0.address = address92;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertEquals(locale27.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "CA" + "'", str33, "CA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(color43);
        org.junit.Assert.assertEquals(locale46.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str51, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "CA" + "'", str52, "CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str56, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "eng" + "'", str57, "eng");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(color62);
        org.junit.Assert.assertNotNull(randomService64);
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(dateAndTime67);
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "en-CA" + "'", str69, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService72);
        org.junit.Assert.assertNotNull(randomService75);
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(dateAndTime78);
        org.junit.Assert.assertNotNull(randomService80);
        org.junit.Assert.assertNotNull(book81);
        org.junit.Assert.assertNotNull(business83);
        org.junit.Assert.assertNotNull(company86);
        org.junit.Assert.assertNotNull(name88);
        org.junit.Assert.assertNotNull(name90);
        org.junit.Assert.assertNotNull(address92);
    }

    @Test
    public void test0840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0840");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.LongStream longStream5 = random1.longs((long) 0, 10L);
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream10 = random9.longs();
        byte[] byteArray17 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random9.nextBytes(byteArray17);
        random7.nextBytes(byteArray17);
        random1.nextBytes(byteArray17);
        java.util.stream.IntStream intStream24 = random1.ints(7564655870752979346L, (int) (byte) 0, (int) (byte) 100);
        java.util.stream.DoubleStream doubleStream25 = random1.doubles();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(byteArray17);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertNotNull(intStream24);
        org.junit.Assert.assertNotNull(doubleStream25);
    }

    @Test
    public void test0841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0841");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        boolean boolean9 = random1.nextBoolean();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test0842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0842");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        java.util.Locale locale19 = new java.util.Locale("Italian", "", "English");
        java.lang.String str20 = locale4.getDisplayLanguage(locale19);
        java.lang.Object obj21 = locale4.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertNotNull(obj21);
        org.junit.Assert.assertEquals(obj21.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj21), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj21), "en_CA");
    }

    @Test
    public void test0843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0843");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Finance finance27 = faker0.finance();
        com.github.javafaker.Number number28 = faker0.number;
        com.github.javafaker.Color color29 = faker0.color();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(number28);
        org.junit.Assert.assertNotNull(color29);
    }

    @Test
    public void test0844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0844");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0845");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getLanguage();
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream18 = random17.longs();
        java.util.stream.DoubleStream doubleStream19 = random17.doubles();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale12, random17);
        java.lang.String str21 = locale9.getDisplayVariant(locale12);
        java.lang.String str22 = locale9.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uce90\ub098\ub2e4" + "'", str11, "\uce90\ub098\ub2e4");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0846");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder13 = builder11.removeUnicodeLocaleAttribute("can");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test0847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0847");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u6587");
        java.util.Locale locale2 = locale1.stripExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
    }

    @Test
    public void test0848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0848");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder10 = builder7.setLocale(locale8);
        java.util.Locale.Builder builder12 = builder7.setVariant("");
        java.util.Locale.Builder builder13 = builder12.clear();
        java.util.Locale.Builder builder15 = builder12.setVariant("Korean");
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.util.Locale locale19 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale19);
        java.lang.String str21 = locale17.getDisplayName(locale19);
        java.util.Set<java.lang.Character> charSet22 = locale17.getExtensionKeys();
        java.util.Locale.Builder builder23 = builder12.setLocale(locale17);
        boolean boolean24 = languageRange1.equals((java.lang.Object) builder12);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str18, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "coreano" + "'", str21, "coreano");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test0849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0849");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        faker10.dateAndTime = dateAndTime19;
        com.github.javafaker.Code code21 = null;
        faker10.code = code21;
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.DateAndTime dateAndTime27 = faker23.dateAndTime;
        com.github.javafaker.Lorem lorem28 = null;
        faker23.lorem = lorem28;
        com.github.javafaker.Code code30 = faker23.code();
        faker10.code = code30;
        com.github.javafaker.Company company32 = faker10.company();
        faker9.company = company32;
        com.github.javafaker.PhoneNumber phoneNumber34 = faker9.phoneNumber;
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(dateAndTime27);
        org.junit.Assert.assertNotNull(code30);
        org.junit.Assert.assertNotNull(company32);
        org.junit.Assert.assertNotNull(phoneNumber34);
    }

    @Test
    public void test0850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0850");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("CA");
    }

    @Test
    public void test0851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0851");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Lorem lorem5 = faker0.lorem;
        com.github.javafaker.Finance finance6 = faker0.finance();
        com.github.javafaker.Company company7 = faker0.company;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(company7);
    }

    @Test
    public void test0852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0852");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test0853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0853");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale17 = java.util.Locale.CHINESE;
        boolean boolean18 = locale17.hasExtensions();
        java.lang.String str19 = locale17.toLanguageTag();
        java.util.Locale.Builder builder20 = builder3.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder3.setScript("United States");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: United States [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zh" + "'", str19, "zh");
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test0854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0854");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0855");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Lorem lorem5 = faker0.lorem;
        java.lang.String str7 = faker0.letterify("United States");
        java.util.Locale locale9 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getCountry();
        java.lang.String str16 = locale12.getScript();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale12.getDisplayScript(locale21);
        java.lang.String str23 = locale11.getDisplayScript(locale12);
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker(locale12);
        com.github.javafaker.Color color25 = faker24.color;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.DateAndTime dateAndTime30 = faker26.dateAndTime;
        java.lang.String str32 = faker26.letterify("en-CA");
        com.github.javafaker.Code code33 = null;
        faker26.code = code33;
        com.github.javafaker.service.FakeValuesService fakeValuesService35 = faker26.fakeValuesService;
        faker24.fakeValuesService = fakeValuesService35;
        com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService38 = faker37.randomService;
        java.lang.String str40 = faker37.bothify("");
        com.github.javafaker.DateAndTime dateAndTime41 = faker37.dateAndTime;
        com.github.javafaker.Faker faker42 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService43 = faker42.randomService;
        com.github.javafaker.Book book44 = faker42.book();
        faker37.book = book44;
        com.github.javafaker.Business business46 = faker37.business;
        faker24.business = business46;
        com.github.javafaker.Name name48 = faker24.name;
        com.github.javafaker.Address address49 = faker24.address();
        com.github.javafaker.Internet internet50 = faker24.internet();
        faker0.internet = internet50;
        com.github.javafaker.Color color52 = faker0.color();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "United States" + "'", str7, "United States");
        org.junit.Assert.assertEquals(locale9.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CA" + "'", str15, "CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateAndTime30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "en-CA" + "'", str32, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService35);
        org.junit.Assert.assertNotNull(randomService38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(dateAndTime41);
        org.junit.Assert.assertNotNull(randomService43);
        org.junit.Assert.assertNotNull(book44);
        org.junit.Assert.assertNotNull(business46);
        org.junit.Assert.assertNotNull(name48);
        org.junit.Assert.assertNotNull(address49);
        org.junit.Assert.assertNotNull(internet50);
        org.junit.Assert.assertNotNull(color52);
    }

    @Test
    public void test0856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0856");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        boolean boolean3 = random1.nextBoolean();
        java.util.stream.IntStream intStream7 = random1.ints((long) (byte) 0, (int) 'x', 431529176);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test0857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0857");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        java.util.stream.DoubleStream doubleStream6 = random1.doubles((double) 0L, (double) ' ');
        java.util.stream.IntStream intStream7 = random1.ints();
        java.util.stream.DoubleStream doubleStream9 = random1.doubles((long) 10);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(doubleStream9);
    }

    @Test
    public void test0858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0858");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale5 = new java.util.Locale("English", "CA");
        boolean boolean6 = locale5.hasExtensions();
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleKeys();
        java.util.Locale.setDefault(category0, locale5);
        java.lang.String str9 = locale5.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale5.getUnicodeLocaleType("Francia");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Francia");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertEquals(locale5.toString(), "english_CA");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0859");
        java.util.Random random1 = new java.util.Random((long) 1);
        double double2 = random1.nextDouble();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 0.7308781907032909d + "'", double2 == 0.7308781907032909d);
    }

    @Test
    public void test0860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0860");
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4", "coreano");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4_COREANO");
    }

    @Test
    public void test0861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0861");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream10 = random1.ints((int) '4', (int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test0862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0862");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguageTag("ita");
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("ITALIAN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setExtension(' ', "CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0863");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.lang.String str3 = locale2.getDisplayVariant();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale2);
        com.github.javafaker.Finance finance5 = faker4.finance();
        com.github.javafaker.Code code6 = faker4.code;
        faker0.code = code6;
        java.lang.String str9 = faker0.regexify("deu");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        com.github.javafaker.Book book15 = faker10.book;
        com.github.javafaker.Finance finance16 = faker10.finance();
        faker0.finance = finance16;
        com.github.javafaker.Lorem lorem18 = faker0.lorem;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(finance16);
        org.junit.Assert.assertNotNull(lorem18);
    }

    @Test
    public void test0864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0864");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Lorem lorem10 = faker8.lorem();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.DateAndTime dateAndTime15 = faker11.dateAndTime;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.DateAndTime dateAndTime20 = faker16.dateAndTime;
        faker11.dateAndTime = dateAndTime20;
        com.github.javafaker.Code code22 = null;
        faker11.code = code22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.DateAndTime dateAndTime28 = faker24.dateAndTime;
        com.github.javafaker.Lorem lorem29 = null;
        faker24.lorem = lorem29;
        com.github.javafaker.Code code31 = faker24.code();
        faker11.code = code31;
        com.github.javafaker.Company company33 = faker11.company();
        com.github.javafaker.Business business34 = faker11.business();
        faker8.business = business34;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(lorem10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateAndTime20);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateAndTime28);
        org.junit.Assert.assertNotNull(code31);
        org.junit.Assert.assertNotNull(company33);
        org.junit.Assert.assertNotNull(business34);
    }

    @Test
    public void test0865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0865");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.lang.String str3 = locale2.getDisplayVariant();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale2);
        com.github.javafaker.Finance finance5 = faker4.finance();
        com.github.javafaker.Code code6 = faker4.code;
        faker0.code = code6;
        java.lang.String str9 = faker0.regexify("deu");
        java.lang.String str11 = faker0.letterify("inglese (Regno Unito)");
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "deu" + "'", str9, "deu");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "inglese (Regno Unito)" + "'", str11, "inglese (Regno Unito)");
    }

    @Test
    public void test0866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0866");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Number number6 = faker0.number;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(number6);
    }

    @Test
    public void test0867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0867");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0868");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.lang.String str17 = locale13.getDisplayCountry();
        java.util.Set<java.lang.String> strSet18 = locale13.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Canada" + "'", str17, "Canada");
        org.junit.Assert.assertNotNull(strSet18);
    }

    @Test
    public void test0869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0869");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        java.util.stream.DoubleStream doubleStream11 = random5.doubles((double) (-1), 0.0d);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream11);
    }

    @Test
    public void test0870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0870");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles();
        java.util.stream.LongStream longStream5 = random1.longs((long) (byte) 1);
        double double6 = random1.nextGaussian();
        random1.setSeed(100L);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream10 = random1.doubles((long) (-1155869325));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.561581040188955d + "'", double6 == 1.561581040188955d);
    }

    @Test
    public void test0871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0871");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale locale7 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Locale.Category category10 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale11 = java.util.Locale.UK;
        java.lang.String str12 = locale11.getDisplayVariant();
        java.util.Locale locale14 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale15 = locale14.stripExtensions();
        java.util.Locale locale16 = locale15.stripExtensions();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getCountry();
        java.lang.String str21 = locale17.getScript();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getISO3Language();
        java.util.Locale locale26 = locale22.stripExtensions();
        java.lang.String str27 = locale17.getDisplayScript(locale26);
        java.lang.String str28 = locale16.getDisplayScript(locale17);
        java.util.Locale locale32 = new java.util.Locale("Italian", "", "English");
        java.lang.String str33 = locale17.getDisplayLanguage(locale32);
        java.lang.String str34 = locale11.getDisplayLanguage(locale32);
        java.util.Locale.setDefault(category10, locale11);
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.util.Locale.setDefault(category10, locale36);
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.util.Locale locale44 = locale40.stripExtensions();
        java.lang.String str45 = locale40.toLanguageTag();
        java.util.Locale.setDefault(category10, locale40);
        java.util.Locale.setDefault(category0, locale40);
        java.util.Locale locale49 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale50 = locale49.stripExtensions();
        java.util.Set<java.lang.Character> charSet51 = locale49.getExtensionKeys();
        boolean boolean52 = locale49.hasExtensions();
        java.util.Locale.setDefault(category0, locale49);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + category10 + "' != '" + java.util.Locale.Category.FORMAT + "'", category10.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals(locale14.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "CA" + "'", str20, "CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "eng" + "'", str25, "eng");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale32.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "English" + "'", str33, "English");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "English" + "'", str34, "English");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "en-CA" + "'", str45, "en-CA");
        org.junit.Assert.assertEquals(locale49.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
    }

    @Test
    public void test0872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0872");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        java.lang.String str17 = faker0.numerify("zho");
        com.github.javafaker.DateAndTime dateAndTime18 = faker0.dateAndTime;
        java.lang.String str20 = faker0.letterify("English");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zho" + "'", str17, "zho");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
    }

    @Test
    public void test0873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0873");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Corea del Sud");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=corea del sud");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0874");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale11.getISO3Country();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale11.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale18.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale18.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getLanguage();
        java.util.Random random35 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream36 = random35.longs();
        java.util.stream.DoubleStream doubleStream37 = random35.doubles();
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(locale30, random35);
        java.lang.String str39 = locale27.getDisplayVariant(locale30);
        java.lang.String str40 = locale11.getDisplayCountry(locale30);
        java.lang.String str41 = locale0.getDisplayVariant(locale30);
        java.util.Random random43 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream44 = random43.doubles();
        java.util.stream.IntStream intStream45 = random43.ints();
        java.util.stream.LongStream longStream49 = random43.longs((long) 100, 0L, (long) 'u');
        double double50 = random43.nextGaussian();
        long long51 = random43.nextLong();
        com.github.javafaker.Faker faker52 = new com.github.javafaker.Faker(locale0, random43);
        int int54 = random43.nextInt(1414906606);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en-CA" + "'", str12, "en-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CAN" + "'", str15, "CAN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CA" + "'", str21, "CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(longStream36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(doubleStream44);
        org.junit.Assert.assertNotNull(intStream45);
        org.junit.Assert.assertNotNull(longStream49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.561581040188955d + "'", double50 == 1.561581040188955d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3831662765844904176L + "'", long51 == 3831662765844904176L);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 714504434 + "'", int54 == 714504434);
    }

    @Test
    public void test0875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0875");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.PhoneNumber phoneNumber9 = faker8.phoneNumber;
        com.github.javafaker.Name name10 = faker8.name();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.DateAndTime dateAndTime15 = faker11.dateAndTime;
        java.lang.String str17 = faker11.letterify("en-CA");
        com.github.javafaker.Code code18 = null;
        faker11.code = code18;
        com.github.javafaker.Book book20 = faker11.book();
        com.github.javafaker.Number number21 = faker11.number();
        com.github.javafaker.Color color22 = faker11.color;
        com.github.javafaker.Book book23 = faker11.book();
        faker8.book = book23;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(phoneNumber9);
        org.junit.Assert.assertNotNull(name10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-CA" + "'", str17, "en-CA");
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(number21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(book23);
    }

    @Test
    public void test0876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0876");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder5.setLanguage("Korean");
        java.util.Locale.Builder builder9 = builder5.setLanguage("CA");
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0877");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.Lorem lorem7 = faker0.lorem;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale8.getDisplayLanguage(locale13);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale8);
        com.github.javafaker.Company company17 = faker16.company();
        com.github.javafaker.Business business18 = faker16.business();
        com.github.javafaker.Finance finance19 = faker16.finance();
        com.github.javafaker.Number number20 = faker16.number;
        com.github.javafaker.Lorem lorem21 = faker16.lorem();
        faker0.lorem = lorem21;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(lorem7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-CA" + "'", str14, "en-CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertNotNull(company17);
        org.junit.Assert.assertNotNull(business18);
        org.junit.Assert.assertNotNull(finance19);
        org.junit.Assert.assertNotNull(number20);
        org.junit.Assert.assertNotNull(lorem21);
    }

    @Test
    public void test0878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0878");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.IntStream intStream4 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) (byte) -1, 10L);
        boolean boolean8 = random1.nextBoolean();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
    }

    @Test
    public void test0879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0879");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Finance finance9 = faker0.finance();
        com.github.javafaker.Lorem lorem10 = faker0.lorem();
        com.github.javafaker.PhoneNumber phoneNumber11 = faker0.phoneNumber;
        com.github.javafaker.Business business12 = faker0.business;
        com.github.javafaker.Number number13 = faker0.number;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(lorem10);
        org.junit.Assert.assertNotNull(phoneNumber11);
        org.junit.Assert.assertNotNull(business12);
        org.junit.Assert.assertNotNull(number13);
    }

    @Test
    public void test0880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0880");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        java.util.Locale locale9 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale10 = locale9.stripExtensions();
        java.util.Locale locale11 = locale10.stripExtensions();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getCountry();
        java.lang.String str16 = locale12.getScript();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale12.getDisplayScript(locale21);
        java.lang.String str23 = locale11.getDisplayScript(locale12);
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker(locale12);
        com.github.javafaker.Color color25 = faker24.color;
        com.github.javafaker.Hacker hacker26 = faker24.hacker;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options28 = faker27.options;
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.lang.String str30 = locale29.getDisplayVariant();
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker(locale29);
        com.github.javafaker.Finance finance32 = faker31.finance();
        com.github.javafaker.Code code33 = faker31.code;
        faker27.code = code33;
        faker24.code = code33;
        faker0.code = code33;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals(locale9.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CA" + "'", str15, "CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(color25);
        org.junit.Assert.assertNotNull(hacker26);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(finance32);
        org.junit.Assert.assertNotNull(code33);
    }

    @Test
    public void test0881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0881");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("CAN");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.util.Locale locale19 = locale15.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.lang.String str24 = locale20.getDisplayVariant();
        java.lang.String str26 = locale20.getExtension('a');
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.lang.String str36 = locale32.getDisplayVariant();
        java.lang.String str38 = locale32.getExtension('a');
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.lang.String str43 = locale39.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale47.getDisplayVariant();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale49.getDisplayLanguage(locale54);
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = locale57.getCountry();
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.getISO3Language();
        java.util.Locale locale65 = locale61.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale67.getDisplayVariant();
        java.util.Locale.setDefault(locale67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale5, locale6, locale9, locale12, locale14, locale19, locale20, locale31, locale32, locale39, locale45, locale47, locale49, locale57, locale61, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        java.util.Collection<java.util.Locale> localeCollection75 = null;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection75);
        java.lang.String[] strArray88 = new java.lang.String[] { "IT", "ita", "cinese (Cina)", "English (Canada)", "Germany", "cinese (Cina)", "en", "English", "it", "IT", "Italian" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList89);
        java.lang.String str92 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList89);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap93 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList94 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap93);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap95 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList96 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str46, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-CA" + "'", str55, "en-CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italian" + "'", str56, "Italian");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CA" + "'", str60, "CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str63, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "eng" + "'", str64, "eng");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode73.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(languageRangeList94);
        org.junit.Assert.assertNotNull(languageRangeList96);
    }

    @Test
    public void test0882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0882");
        java.util.Locale locale2 = new java.util.Locale("ita", "coreano");
        java.util.Set<java.lang.Character> charSet3 = locale2.getExtensionKeys();
        java.util.Locale locale7 = new java.util.Locale("", "ko", "eng");
        java.lang.String str8 = locale2.getDisplayLanguage(locale7);
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business10 = null;
        faker9.business = business10;
        com.github.javafaker.Color color12 = null;
        faker9.color = color12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        com.github.javafaker.Address address24 = faker14.address();
        faker9.address = address24;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name27 = faker26.name();
        com.github.javafaker.Faker faker28 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name29 = faker28.name();
        faker26.name = name29;
        faker9.name = name29;
        com.github.javafaker.Business business32 = faker9.business;
        boolean boolean33 = locale2.equals((java.lang.Object) business32);
        org.junit.Assert.assertEquals(locale2.toString(), "ita_COREANO");
        org.junit.Assert.assertNotNull(charSet3);
        org.junit.Assert.assertEquals(locale7.toString(), "_KO_eng");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italian" + "'", str8, "Italian");
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(address24);
        org.junit.Assert.assertNotNull(name27);
        org.junit.Assert.assertNotNull(name29);
        org.junit.Assert.assertNull(business32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test0883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0883");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getCountry();
        java.lang.String str5 = locale1.getScript();
        java.lang.String str6 = locale0.getDisplayCountry(locale1);
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale.setDefault(category7, locale10);
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale16);
        boolean boolean18 = locale16.hasExtensions();
        java.util.Locale locale19 = locale16.stripExtensions();
        java.util.Locale.setDefault(category7, locale16);
        java.util.Locale locale21 = null;
        java.lang.String str22 = null; // flaky: locale16.getDisplayCountry(locale21);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = locale1.getDisplayCountry(locale21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }

    @Test
    public void test0884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0884");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        int int7 = random1.nextInt();
        long long8 = random1.nextLong();
        double double9 = random1.nextDouble();
        java.util.Random random11 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream12 = random11.longs();
        java.util.stream.DoubleStream doubleStream13 = random11.doubles();
        java.util.stream.LongStream longStream15 = random11.longs((long) (byte) 1);
        double double16 = random11.nextGaussian();
        random11.setSeed(100L);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream21 = random20.doubles();
        java.util.stream.IntStream intStream22 = random20.ints();
        java.util.stream.LongStream longStream26 = random20.longs((long) 100, 0L, (long) 'u');
        java.util.Random random28 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream29 = random28.doubles();
        java.util.Random random31 = new java.util.Random((long) 1);
        java.util.Random random33 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream34 = random33.longs();
        byte[] byteArray41 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random33.nextBytes(byteArray41);
        random31.nextBytes(byteArray41);
        random28.nextBytes(byteArray41);
        random20.nextBytes(byteArray41);
        random11.nextBytes(byteArray41);
        random1.nextBytes(byteArray41);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1155869325) + "'", int7 == (-1155869325));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1853403699951111791L + "'", long8 == 1853403699951111791L);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.4074398012118764d + "'", double9 == 0.4074398012118764d);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.561581040188955d + "'", double16 == 1.561581040188955d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(longStream26);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(longStream34);
        org.junit.Assert.assertNotNull(byteArray41);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-16, -72, 70, 9, -27, -15]");
    }

    @Test
    public void test0885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0885");
        java.util.Random random1 = new java.util.Random((long) (byte) 10);
        random1.setSeed(7564655870752979346L);
        java.util.stream.IntStream intStream5 = random1.ints((long) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream8 = random1.ints((int) 'x', (int) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test0886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0886");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.App app10 = faker0.app();
        java.lang.String str12 = faker0.letterify("ko");
        com.github.javafaker.Name name13 = faker0.name();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(app10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ko" + "'", str12, "ko");
        org.junit.Assert.assertNotNull(name13);
    }

    @Test
    public void test0887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0887");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.DateAndTime dateAndTime30 = faker26.dateAndTime;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Faker faker35 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService36 = faker35.randomService;
        java.lang.String str38 = faker35.bothify("");
        com.github.javafaker.Book book39 = faker35.book();
        faker31.book = book39;
        faker26.book = book39;
        com.github.javafaker.Name name42 = faker26.name();
        faker0.name = name42;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateAndTime30);
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(randomService36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(book39);
        org.junit.Assert.assertNotNull(name42);
    }

    @Test
    public void test0888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0888");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale7 = new java.util.Locale("", "Canada");
        java.lang.String str8 = locale0.getDisplayCountry(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale7.toString(), "_CANADA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Canada" + "'", str8, "Canada");
    }

    @Test
    public void test0889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0889");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Color color8 = faker0.color();
        com.github.javafaker.App app9 = faker0.app;
        com.github.javafaker.Finance finance10 = faker0.finance;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(app9);
        org.junit.Assert.assertNotNull(finance10);
    }

    @Test
    public void test0890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0890");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) (byte) 10);
        float float14 = random13.nextFloat();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random13);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = faker15.resolve("Korean");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.73043025f + "'", float14 == 0.73043025f);
    }

    @Test
    public void test0891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0891");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getVariant();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale6);
        java.util.Locale.Builder builder11 = builder3.setExtension('u', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setExtension(' ', "cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0892");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        java.util.stream.IntStream intStream9 = random2.ints();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test0893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0893");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        java.util.stream.DoubleStream doubleStream17 = random1.doubles((long) ' ', 0.0d, (double) 10);
        java.util.stream.IntStream intStream19 = random1.ints((long) 'x');
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(intStream19);
    }

    @Test
    public void test0894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0894");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Address address10 = faker8.address();
        java.lang.String str12 = faker8.letterify("Korean");
        com.github.javafaker.Options options13 = faker8.options;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(options13);
    }

    @Test
    public void test0895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0895");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        com.github.javafaker.Finance finance2 = faker0.finance;
        java.lang.String str4 = faker0.bothify("zh");
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.service.RandomService randomService9 = faker5.randomService;
        com.github.javafaker.Book book10 = faker5.book;
        com.github.javafaker.Internet internet11 = faker5.internet();
        faker0.internet = internet11;
        com.github.javafaker.Lorem lorem13 = faker0.lorem();
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(finance2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertNotNull(book10);
        org.junit.Assert.assertNotNull(internet11);
        org.junit.Assert.assertNotNull(lorem13);
    }

    @Test
    public void test0896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0896");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getDisplayVariant();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale8);
        com.github.javafaker.Finance finance11 = faker10.finance();
        com.github.javafaker.Code code12 = faker10.code;
        faker0.code = code12;
        com.github.javafaker.Options options14 = faker0.options;
        com.github.javafaker.DateAndTime dateAndTime15 = faker0.dateAndTime;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.DateAndTime dateAndTime20 = faker16.dateAndTime;
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.DateAndTime dateAndTime25 = faker21.dateAndTime;
        faker16.dateAndTime = dateAndTime25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Book book31 = faker27.book();
        com.github.javafaker.Options options32 = faker27.options();
        com.github.javafaker.PhoneNumber phoneNumber33 = faker27.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService34 = faker27.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService34;
        faker0.fakeValuesService = fakeValuesService34;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(finance11);
        org.junit.Assert.assertNotNull(code12);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateAndTime20);
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateAndTime25);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(book31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(phoneNumber33);
        org.junit.Assert.assertNotNull(fakeValuesService34);
    }

    @Test
    public void test0897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0897");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale0);
        java.lang.String str13 = locale0.getScript();
        java.lang.Object obj14 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(obj14);
        org.junit.Assert.assertEquals(obj14.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj14), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj14), "en_CA");
    }

    @Test
    public void test0898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0898");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker8.phoneNumber;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Number number16 = faker11.number();
        com.github.javafaker.Lorem lorem17 = null;
        faker11.lorem = lorem17;
        com.github.javafaker.Business business19 = faker11.business();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.DateAndTime dateAndTime24 = faker20.dateAndTime;
        com.github.javafaker.Lorem lorem25 = null;
        faker20.lorem = lorem25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Lorem lorem31 = faker27.lorem();
        faker20.lorem = lorem31;
        faker11.lorem = lorem31;
        faker8.lorem = lorem31;
        com.github.javafaker.Code code35 = faker8.code;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(number16);
        org.junit.Assert.assertNotNull(business19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateAndTime24);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(lorem31);
        org.junit.Assert.assertNotNull(code35);
    }

    @Test
    public void test0899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0899");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name18 = faker17.name();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name20 = faker19.name();
        faker17.name = name20;
        com.github.javafaker.Lorem lorem22 = faker17.lorem();
        faker16.lorem = lorem22;
        com.github.javafaker.Finance finance24 = faker16.finance;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(name18);
        org.junit.Assert.assertNotNull(name20);
        org.junit.Assert.assertNotNull(lorem22);
        org.junit.Assert.assertNotNull(finance24);
    }

    @Test
    public void test0900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0900");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Options options5 = faker0.options();
        com.github.javafaker.PhoneNumber phoneNumber6 = faker0.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService7 = faker0.fakeValuesService;
        java.util.Locale locale8 = java.util.Locale.ITALIAN;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale13.toLanguageTag();
        java.lang.String str15 = locale8.getDisplayLanguage(locale13);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale8);
        com.github.javafaker.Number number17 = faker16.number;
        com.github.javafaker.Business business18 = faker16.business;
        com.github.javafaker.App app19 = faker16.app();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.Book book28 = faker24.book();
        faker20.book = book28;
        com.github.javafaker.App app30 = faker20.app();
        faker16.app = app30;
        java.util.Locale locale33 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale34 = locale33.stripExtensions();
        java.util.Locale locale35 = locale34.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getCountry();
        java.lang.String str40 = locale36.getScript();
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getISO3Language();
        java.util.Locale locale45 = locale41.stripExtensions();
        java.lang.String str46 = locale36.getDisplayScript(locale45);
        java.lang.String str47 = locale35.getDisplayScript(locale36);
        com.github.javafaker.Faker faker48 = new com.github.javafaker.Faker(locale36);
        com.github.javafaker.Color color49 = faker48.color;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale50.getDisplayName();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.util.Locale locale56 = locale52.stripExtensions();
        java.lang.String str57 = locale50.getDisplayName(locale52);
        java.util.Random random59 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream60 = random59.doubles();
        java.util.stream.LongStream longStream63 = random59.longs((long) 0, 10L);
        com.github.javafaker.Faker faker64 = new com.github.javafaker.Faker(locale52, random59);
        com.github.javafaker.DateAndTime dateAndTime65 = faker64.date();
        faker48.dateAndTime = dateAndTime65;
        faker16.dateAndTime = dateAndTime65;
        faker0.dateAndTime = dateAndTime65;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(phoneNumber6);
        org.junit.Assert.assertNotNull(fakeValuesService7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "en-CA" + "'", str14, "en-CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italian" + "'", str15, "Italian");
        org.junit.Assert.assertNotNull(number17);
        org.junit.Assert.assertNotNull(business18);
        org.junit.Assert.assertNotNull(app19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(book28);
        org.junit.Assert.assertNotNull(app30);
        org.junit.Assert.assertEquals(locale33.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "CA" + "'", str39, "CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str43, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "eng" + "'", str44, "eng");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(color49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "coreano" + "'", str51, "coreano");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Korean" + "'", str57, "Korean");
        org.junit.Assert.assertNotNull(doubleStream60);
        org.junit.Assert.assertNotNull(longStream63);
        org.junit.Assert.assertNotNull(dateAndTime65);
    }

    @Test
    public void test0901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0901");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str2 = locale1.getCountry();
        java.util.Locale.setDefault(locale1);
        java.lang.String str4 = locale1.getISO3Language();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "can" + "'", str4, "can");
    }

    @Test
    public void test0902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0902");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        double double9 = random1.nextGaussian();
        double double10 = random1.nextGaussian();
        java.util.stream.IntStream intStream12 = random1.ints((long) (short) 10);
        java.util.stream.IntStream intStream16 = random1.ints((long) 837415749, (int) (byte) 10, 431529176);
        float float17 = random1.nextFloat();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8746788966462123d + "'", double9 == 0.8746788966462123d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.9193443348656242d) + "'", double10 == (-0.9193443348656242d));
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.059201956f + "'", float17 == 0.059201956f);
    }

    @Test
    public void test0903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0903");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        int int7 = random1.nextInt();
        int int9 = random1.nextInt(69);
        java.util.stream.IntStream intStream10 = random1.ints();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        java.util.stream.DoubleStream doubleStream14 = random12.doubles();
        java.util.stream.LongStream longStream16 = random12.longs((long) (byte) 1);
        double double17 = random12.nextGaussian();
        random12.setSeed(100L);
        java.util.Random random21 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream22 = random21.doubles();
        java.util.stream.IntStream intStream23 = random21.ints();
        java.util.stream.LongStream longStream27 = random21.longs((long) 100, 0L, (long) 'u');
        java.util.Random random29 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream30 = random29.doubles();
        java.util.Random random32 = new java.util.Random((long) 1);
        java.util.Random random34 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream35 = random34.longs();
        byte[] byteArray42 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random34.nextBytes(byteArray42);
        random32.nextBytes(byteArray42);
        random29.nextBytes(byteArray42);
        random21.nextBytes(byteArray42);
        random12.nextBytes(byteArray42);
        random1.nextBytes(byteArray42);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream50 = random1.doubles((long) (-1155869325));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1155869325) + "'", int7 == (-1155869325));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 1.561581040188955d + "'", double17 == 1.561581040188955d);
        org.junit.Assert.assertNotNull(doubleStream22);
        org.junit.Assert.assertNotNull(intStream23);
        org.junit.Assert.assertNotNull(longStream27);
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertNotNull(longStream35);
        org.junit.Assert.assertNotNull(byteArray42);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray42), "[111, 14, -5, 104, -110, -7]");
    }

    @Test
    public void test0904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0904");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        java.util.stream.LongStream longStream7 = random1.longs((long) 1761283695, (long) 'a', (long) 'x');
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test0905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0905");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream14 = random13.longs();
        int int16 = random13.nextInt((int) 'u');
        random13.setSeed((long) (byte) 10);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random13.nextBytes(byteArray30);
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale0, random13);
        com.github.javafaker.Address address35 = faker34.address();
        com.github.javafaker.service.FakeValuesService fakeValuesService36 = null;
        faker34.fakeValuesService = fakeValuesService36;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, 122, -3, -70, -8, 22]");
        org.junit.Assert.assertNotNull(address35);
    }

    @Test
    public void test0906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0906");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getVariant();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale6);
        java.util.Locale.Builder builder11 = builder3.setExtension('u', "");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setLanguage("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "can");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test0907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0907");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        com.github.javafaker.Code code9 = faker8.code();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(code9);
    }

    @Test
    public void test0908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0908");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) (byte) 10);
        java.util.stream.LongStream longStream14 = random1.longs();
        java.util.stream.DoubleStream doubleStream15 = random1.doubles();
        java.util.stream.LongStream longStream16 = random1.longs();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(longStream16);
    }

    @Test
    public void test0909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0909");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        java.util.stream.IntStream intStream16 = random1.ints((int) (short) 10, 1414906606);
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertNotNull(intStream16);
    }

    @Test
    public void test0910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0910");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale.Builder builder18 = builder16.setLanguage("ita");
        java.util.Locale.Builder builder19 = builder16.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test0911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0911");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        faker6.book = book14;
        com.github.javafaker.Options options16 = faker6.options();
        faker0.options = options16;
        com.github.javafaker.service.RandomService randomService18 = faker0.randomService;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.service.RandomService randomService23 = faker19.randomService;
        com.github.javafaker.Book book24 = faker19.book;
        com.github.javafaker.Lorem lorem25 = null;
        faker19.lorem = lorem25;
        com.github.javafaker.Address address27 = faker19.address;
        faker0.address = address27;
        com.github.javafaker.PhoneNumber phoneNumber29 = faker0.phoneNumber();
        com.github.javafaker.Name name30 = faker0.name();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(address27);
        org.junit.Assert.assertNotNull(phoneNumber29);
        org.junit.Assert.assertNotNull(name30);
    }

    @Test
    public void test0912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0912");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        java.util.stream.IntStream intStream9 = random1.ints(0L);
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) (byte) 1, (double) (-1155869325), (double) (byte) 0);
        boolean boolean14 = random1.nextBoolean();
        java.util.stream.IntStream intStream15 = random1.ints();
        java.util.stream.IntStream intStream16 = random1.ints();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertNotNull(intStream16);
    }

    @Test
    public void test0913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0913");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Address address7 = null;
        faker0.address = address7;
        com.github.javafaker.Name name9 = null;
        faker0.name = name9;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name12 = faker11.name();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name14 = faker13.name();
        faker11.name = name14;
        com.github.javafaker.Lorem lorem16 = faker11.lorem();
        faker0.lorem = lorem16;
        com.github.javafaker.Business business18 = faker0.business();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(name12);
        org.junit.Assert.assertNotNull(name14);
        org.junit.Assert.assertNotNull(lorem16);
        org.junit.Assert.assertNotNull(business18);
    }

    @Test
    public void test0914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0914");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Address address10 = faker8.address();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        com.github.javafaker.Book book17 = faker15.book();
        com.github.javafaker.Finance finance18 = faker15.finance();
        com.github.javafaker.Book book19 = faker15.book();
        com.github.javafaker.Options options20 = faker15.options();
        com.github.javafaker.PhoneNumber phoneNumber21 = faker15.phoneNumber();
        faker11.phoneNumber = phoneNumber21;
        faker8.phoneNumber = phoneNumber21;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(finance18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(phoneNumber21);
    }

    @Test
    public void test0915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0915");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale0.getDisplayCountry(locale5);
        java.lang.String str8 = locale5.getVariant();
        java.lang.String str9 = locale5.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Canada" + "'", str7, "Canada");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0916");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        java.lang.String str6 = faker0.numerify("en_US");
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business8 = null;
        faker7.business = business8;
        com.github.javafaker.Color color10 = null;
        faker7.color = color10;
        java.lang.String str13 = faker7.letterify("English");
        com.github.javafaker.Name name14 = faker7.name;
        faker0.name = name14;
        java.util.Locale locale16 = java.util.Locale.CHINA;
        java.util.Random random18 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream19 = random18.longs();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale16, random18);
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.service.RandomService randomService25 = faker21.randomService;
        com.github.javafaker.Book book26 = faker21.book;
        com.github.javafaker.Internet internet27 = faker21.internet();
        com.github.javafaker.Internet internet28 = faker21.internet;
        com.github.javafaker.DateAndTime dateAndTime29 = faker21.date();
        com.github.javafaker.Business business30 = faker21.business;
        faker20.business = business30;
        faker0.business = business30;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en_US" + "'", str6, "en_US");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "English" + "'", str13, "English");
        org.junit.Assert.assertNotNull(name14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertNotNull(book26);
        org.junit.Assert.assertNotNull(internet27);
        org.junit.Assert.assertNotNull(internet28);
        org.junit.Assert.assertNotNull(dateAndTime29);
        org.junit.Assert.assertNotNull(business30);
    }

    @Test
    public void test0917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0917");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.LongStream longStream13 = random1.longs((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream16 = random1.longs((long) (short) -1, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test0918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0918");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.Business business10 = faker8.business();
        com.github.javafaker.Finance finance11 = faker8.finance();
        com.github.javafaker.Number number12 = faker8.number;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        com.github.javafaker.Book book15 = faker13.book();
        com.github.javafaker.Finance finance16 = faker13.finance();
        faker8.finance = finance16;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(finance11);
        org.junit.Assert.assertNotNull(number12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(finance16);
    }

    @Test
    public void test0919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0919");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Business business8 = faker0.business();
        com.github.javafaker.Color color9 = faker0.color();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(business8);
        org.junit.Assert.assertNotNull(color9);
    }

    @Test
    public void test0920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0920");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) (byte) 10);
        java.util.stream.LongStream longStream14 = random1.longs();
        java.util.stream.DoubleStream doubleStream15 = random1.doubles();
        double double16 = random1.nextGaussian();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-1.0912278829447088d) + "'", double16 == (-1.0912278829447088d));
    }

    @Test
    public void test0921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0921");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder5.setLanguage("Korean");
        java.util.Locale.Builder builder9 = builder7.setLanguage("");
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale locale11 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder7.removeUnicodeLocaleAttribute("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
    }

    @Test
    public void test0922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0922");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        java.util.stream.IntStream intStream17 = random1.ints((-1155869325), 1761283695);
        java.util.stream.IntStream intStream18 = random1.ints();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(intStream18);
    }

    @Test
    public void test0923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0923");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale1);
        boolean boolean3 = locale1.hasExtensions();
        java.util.Locale locale4 = locale1.stripExtensions();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category5, locale6);
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Locale locale12 = locale8.stripExtensions();
        java.util.Locale.setDefault(category5, locale8);
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale14);
        boolean boolean16 = locale14.hasExtensions();
        java.util.Locale locale17 = locale14.stripExtensions();
        java.util.Locale.setDefault(category5, locale14);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("CA");
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getCountry();
        java.lang.String str26 = locale22.getScript();
        java.util.Locale locale27 = java.util.Locale.ROOT;
        java.lang.String str28 = locale27.getVariant();
        java.lang.String str29 = locale22.getDisplayCountry(locale27);
        java.util.Locale.Builder builder30 = builder19.setLocale(locale27);
        java.lang.String str31 = locale27.getScript();
        java.util.Locale.setDefault(category5, locale27);
        java.lang.String str33 = locale4.getDisplayVariant(locale27);
        java.lang.String str34 = locale0.getDisplayVariant(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test0924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0924");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale.Builder builder18 = builder3.setLanguageTag("english");
        java.util.Locale.Builder builder21 = builder18.setExtension('a', "eng");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test0925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0925");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Code code7 = faker0.code();
        com.github.javafaker.Business business8 = faker0.business();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(business8);
    }

    @Test
    public void test0926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0926");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.IntStream intStream13 = random1.ints((long) 0);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test0927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0927");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.DateAndTime dateAndTime10 = faker0.dateAndTime;
        com.github.javafaker.App app11 = faker0.app;
        com.github.javafaker.Book book12 = faker0.book();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(book12);
    }

    @Test
    public void test0928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0928");
        java.util.Locale locale1 = new java.util.Locale("en-CA");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale locale5 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.util.Locale locale11 = new java.util.Locale("Italian", "", "English");
        boolean boolean12 = locale11.hasExtensions();
        java.lang.String str13 = locale7.getDisplayName(locale11);
        java.lang.String str14 = locale1.getDisplayCountry(locale11);
        java.lang.String str15 = locale11.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "en-ca");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals(locale11.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English" + "'", str15, "English");
    }

    @Test
    public void test0929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0929");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getISO3Language();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        java.util.stream.DoubleStream doubleStream14 = random12.doubles();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random12);
        double double16 = random12.nextDouble();
        boolean boolean17 = random12.nextBoolean();
        int int19 = random12.nextInt(23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.7308781907032909d + "'", double16 == 0.7308781907032909d);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 12 + "'", int19 == 12);
    }

    @Test
    public void test0930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0930");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        faker8.book = book16;
        com.github.javafaker.DateAndTime dateAndTime18 = faker8.dateAndTime;
        faker0.dateAndTime = dateAndTime18;
        com.github.javafaker.Lorem lorem20 = faker0.lorem;
        com.github.javafaker.Hacker hacker21 = faker0.hacker;
        com.github.javafaker.Business business22 = faker0.business();
        com.github.javafaker.service.FakeValuesService fakeValuesService23 = faker0.fakeValuesService;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.Book book33 = faker29.book();
        faker25.book = book33;
        com.github.javafaker.Options options35 = faker25.options();
        com.github.javafaker.App app36 = faker25.app;
        faker24.app = app36;
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService39 = faker38.randomService;
        java.lang.String str41 = faker38.bothify("");
        com.github.javafaker.DateAndTime dateAndTime42 = faker38.dateAndTime;
        com.github.javafaker.Faker faker43 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService44 = faker43.randomService;
        java.lang.String str46 = faker43.bothify("");
        com.github.javafaker.DateAndTime dateAndTime47 = faker43.dateAndTime;
        faker38.dateAndTime = dateAndTime47;
        com.github.javafaker.Code code49 = null;
        faker38.code = code49;
        com.github.javafaker.Faker faker51 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService52 = faker51.randomService;
        java.lang.String str54 = faker51.bothify("");
        com.github.javafaker.DateAndTime dateAndTime55 = faker51.dateAndTime;
        com.github.javafaker.Lorem lorem56 = null;
        faker51.lorem = lorem56;
        com.github.javafaker.Code code58 = faker51.code();
        faker38.code = code58;
        com.github.javafaker.Company company60 = faker38.company();
        com.github.javafaker.Business business61 = faker38.business();
        faker24.business = business61;
        com.github.javafaker.Name name63 = faker24.name;
        faker0.name = name63;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNull(lorem20);
        org.junit.Assert.assertNotNull(hacker21);
        org.junit.Assert.assertNotNull(business22);
        org.junit.Assert.assertNotNull(fakeValuesService23);
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(book33);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(app36);
        org.junit.Assert.assertNotNull(randomService39);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(dateAndTime42);
        org.junit.Assert.assertNotNull(randomService44);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(dateAndTime47);
        org.junit.Assert.assertNotNull(randomService52);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(dateAndTime55);
        org.junit.Assert.assertNotNull(code58);
        org.junit.Assert.assertNotNull(company60);
        org.junit.Assert.assertNotNull(business61);
        org.junit.Assert.assertNotNull(name63);
    }

    @Test
    public void test0931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0931");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        java.lang.String str21 = faker15.letterify("en-CA");
        com.github.javafaker.Code code22 = null;
        faker15.code = code22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.DateAndTime dateAndTime28 = faker24.dateAndTime;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService34 = faker33.randomService;
        java.lang.String str36 = faker33.bothify("");
        com.github.javafaker.Book book37 = faker33.book();
        faker29.book = book37;
        faker24.book = book37;
        faker15.book = book37;
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService42 = faker41.randomService;
        java.lang.String str44 = faker41.bothify("");
        com.github.javafaker.Book book45 = faker41.book();
        com.github.javafaker.Number number46 = faker41.number();
        faker15.number = number46;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = locale53.toLanguageTag();
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        com.github.javafaker.Faker faker56 = new com.github.javafaker.Faker(locale48);
        com.github.javafaker.Company company57 = faker56.company();
        faker15.company = company57;
        faker14.company = company57;
        com.github.javafaker.PhoneNumber phoneNumber60 = faker14.phoneNumber();
        com.github.javafaker.Number number61 = faker14.number;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en-CA" + "'", str21, "en-CA");
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateAndTime28);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(randomService34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(book37);
        org.junit.Assert.assertNotNull(randomService42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(book45);
        org.junit.Assert.assertNotNull(number46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str51, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "eng" + "'", str52, "eng");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-CA" + "'", str54, "en-CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian" + "'", str55, "Italian");
        org.junit.Assert.assertNotNull(company57);
        org.junit.Assert.assertNotNull(phoneNumber60);
        org.junit.Assert.assertNotNull(number61);
    }

    @Test
    public void test0932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0932");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.App app5 = faker0.app;
        com.github.javafaker.Address address6 = faker0.address();
        com.github.javafaker.Options options7 = faker0.options();
        java.lang.String str9 = faker0.numerify("\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(app5);
        org.junit.Assert.assertNotNull(address6);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u671d\u9c9c\u6587" + "'", str9, "\u671d\u9c9c\u6587");
    }

    @Test
    public void test0933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0933");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("coreano");
        java.util.Locale locale9 = builder6.build();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
    }

    @Test
    public void test0934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0934");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        double double8 = random1.nextGaussian();
        boolean boolean9 = random1.nextBoolean();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.561581040188955d + "'", double8 == 1.561581040188955d);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0935");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setRegion("und");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: und [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0936");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        java.lang.String str24 = faker18.letterify("en-CA");
        com.github.javafaker.Code code25 = null;
        faker18.code = code25;
        com.github.javafaker.service.FakeValuesService fakeValuesService27 = faker18.fakeValuesService;
        faker16.fakeValuesService = fakeValuesService27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        com.github.javafaker.Book book36 = faker34.book();
        faker29.book = book36;
        com.github.javafaker.Business business38 = faker29.business;
        faker16.business = business38;
        com.github.javafaker.Name name40 = faker16.name;
        com.github.javafaker.Address address41 = faker16.address();
        com.github.javafaker.App app42 = faker16.app();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "en-CA" + "'", str24, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(business38);
        org.junit.Assert.assertNotNull(name40);
        org.junit.Assert.assertNotNull(address41);
        org.junit.Assert.assertNotNull(app42);
    }

    @Test
    public void test0937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0937");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Address address10 = faker8.address();
        java.lang.String str12 = faker8.letterify("Korean");
        com.github.javafaker.Code code13 = faker8.code();
        com.github.javafaker.Options options14 = faker8.options;
        com.github.javafaker.App app15 = faker8.app;
        com.github.javafaker.Finance finance16 = faker8.finance;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertNotNull(code13);
        org.junit.Assert.assertNotNull(options14);
        org.junit.Assert.assertNotNull(app15);
        org.junit.Assert.assertNotNull(finance16);
    }

    @Test
    public void test0938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0938");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.String str5 = languageRange1.getRange();
        java.lang.String str6 = languageRange1.getRange();
        java.util.Random random8 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream9 = random8.longs();
        java.util.stream.DoubleStream doubleStream10 = random8.doubles();
        java.util.stream.DoubleStream doubleStream14 = random8.doubles((long) 100, (double) (byte) 0, (double) 1429008869);
        boolean boolean15 = languageRange1.equals((java.lang.Object) random8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0939");
        java.util.Locale locale1 = new java.util.Locale("cinese (Cina)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale1.toString(), "cinese (cina)");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test0940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0940");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("deu");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test0941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0941");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        com.github.javafaker.Address address15 = faker14.address;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(address15);
    }

    @Test
    public void test0942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0942");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Italian", (double) 1429008869);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.429008869E9");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0943");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream14 = random13.longs();
        int int16 = random13.nextInt((int) 'u');
        random13.setSeed((long) (byte) 10);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random13.nextBytes(byteArray30);
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale0, random13);
        java.util.stream.LongStream longStream37 = random13.longs((long) (short) 10, (long) 1761283695);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream41 = random13.doubles((-4964420948893066024L), (double) 4, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, 122, -3, -70, -8, 22]");
        org.junit.Assert.assertNotNull(longStream37);
    }

    @Test
    public void test0944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0944");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        boolean boolean3 = random1.nextBoolean();
        java.util.Locale locale4 = java.util.Locale.CHINA;
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale4, random6);
        float float9 = random6.nextFloat();
        long long10 = random6.nextLong();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream13 = random12.doubles();
        java.util.stream.LongStream longStream16 = random12.longs((long) 0, 10L);
        java.util.Random random18 = new java.util.Random((long) 1);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream21 = random20.longs();
        byte[] byteArray28 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random20.nextBytes(byteArray28);
        random18.nextBytes(byteArray28);
        random12.nextBytes(byteArray28);
        random6.nextBytes(byteArray28);
        random1.nextBytes(byteArray28);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + float9 + "' != '" + 0.7308782f + "'", float9 == 0.7308782f);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1853403699951111791L + "'", long10 == 1853403699951111791L);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(longStream21);
        org.junit.Assert.assertNotNull(byteArray28);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[111, 14, -5, 104, -110, -7]");
    }

    @Test
    public void test0945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0945");
        java.util.Locale locale3 = new java.util.Locale("Italian", "", "English");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale3.getDisplayLanguage(locale6);
        java.lang.String str11 = locale6.toLanguageTag();
        org.junit.Assert.assertEquals(locale3.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "italian__English");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italian" + "'", str10, "italian");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
    }

    @Test
    public void test0946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0946");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.Internet internet7 = faker0.internet;
        com.github.javafaker.DateAndTime dateAndTime8 = faker0.date();
        com.github.javafaker.Code code9 = faker0.code;
        com.github.javafaker.Hacker hacker10 = faker0.hacker();
        com.github.javafaker.Finance finance11 = faker0.finance;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(internet7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertNotNull(code9);
        org.junit.Assert.assertNotNull(hacker10);
        org.junit.Assert.assertNotNull(finance11);
    }

    @Test
    public void test0947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0947");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Finance finance6 = faker0.finance;
        com.github.javafaker.Address address7 = faker0.address;
        com.github.javafaker.Color color8 = faker0.color();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(address7);
        org.junit.Assert.assertNotNull(color8);
    }

    @Test
    public void test0948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0948");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\uce90\ub098\ub2e4", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??????");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0949");
        java.util.Random random1 = new java.util.Random((-5128016860359238732L));
        java.util.stream.IntStream intStream2 = random1.ints();
        int int3 = random1.nextInt();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 904578013 + "'", int3 == 904578013);
    }

    @Test
    public void test0950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0950");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("it", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("it", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.util.Locale locale23 = locale19.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.lang.String str28 = locale24.getDisplayVariant();
        java.lang.String str30 = locale24.getExtension('a');
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.util.Locale locale35 = locale31.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.lang.String str42 = locale36.getExtension('a');
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.lang.String str47 = locale43.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale51.getDisplayVariant();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayName(locale55);
        java.lang.String str57 = locale54.getISO3Language();
        java.util.Locale locale58 = locale54.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = locale53.getDisplayLanguage(locale58);
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.getCountry();
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.util.Locale locale69 = locale65.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale71.getDisplayVariant();
        java.util.Locale.setDefault(locale71);
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale9, locale10, locale13, locale16, locale18, locale23, locale24, locale35, locale36, locale43, locale49, locale51, locale53, locale61, locale65, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList75, filteringMode77);
        java.util.Collection<java.util.Locale> localeCollection79 = null;
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, localeCollection79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.util.Locale locale83 = java.util.Locale.KOREAN;
        java.lang.String str84 = locale82.getDisplayName(locale83);
        java.util.Set<java.lang.String> strSet85 = locale82.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strSet85, filteringMode86);
        java.util.List<java.lang.String> strList88 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet85);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str21, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str56, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "eng" + "'", str57, "eng");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-CA" + "'", str59, "en-CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Italian" + "'", str60, "Italian");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str63, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CA" + "'", str64, "CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str67, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "eng" + "'", str68, "eng");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode77.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str84 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str84, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(strSet85);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode86.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(strList88);
    }

    @Test
    public void test0951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0951");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.PhoneNumber phoneNumber7 = null;
        faker0.phoneNumber = phoneNumber7;
        com.github.javafaker.Company company9 = faker0.company();
        java.lang.Class<?> wildcardClass10 = faker0.getClass();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test0952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0952");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder8 = builder3.setLanguage("zho");
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder3.setUnicodeLocaleKeyword("IT", "English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0953");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.Book book20 = faker16.book();
        com.github.javafaker.Number number21 = faker16.number();
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options23 = faker22.options;
        faker16.options = options23;
        faker0.options = options23;
        com.github.javafaker.Company company26 = faker0.company();
        com.github.javafaker.Hacker hacker27 = faker0.hacker;
        java.util.Locale locale29 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale30 = locale29.stripExtensions();
        java.util.Locale locale31 = locale30.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getCountry();
        java.lang.String str36 = locale32.getScript();
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.util.Locale locale41 = locale37.stripExtensions();
        java.lang.String str42 = locale32.getDisplayScript(locale41);
        java.lang.String str43 = locale31.getDisplayScript(locale32);
        com.github.javafaker.Faker faker44 = new com.github.javafaker.Faker(locale32);
        com.github.javafaker.Color color45 = faker44.color;
        java.lang.String str47 = faker44.regexify("en-CA");
        com.github.javafaker.Faker faker48 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService49 = faker48.randomService;
        java.lang.String str51 = faker48.bothify("");
        com.github.javafaker.DateAndTime dateAndTime52 = faker48.dateAndTime;
        com.github.javafaker.Lorem lorem53 = null;
        faker48.lorem = lorem53;
        com.github.javafaker.Address address55 = null;
        faker48.address = address55;
        com.github.javafaker.Name name57 = null;
        faker48.name = name57;
        com.github.javafaker.Faker faker59 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name60 = faker59.name();
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name62 = faker61.name();
        faker59.name = name62;
        com.github.javafaker.Lorem lorem64 = faker59.lorem();
        faker48.lorem = lorem64;
        faker44.lorem = lorem64;
        faker0.lorem = lorem64;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(number21);
        org.junit.Assert.assertNotNull(options23);
        org.junit.Assert.assertNotNull(company26);
        org.junit.Assert.assertNotNull(hacker27);
        org.junit.Assert.assertEquals(locale29.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "CA" + "'", str35, "CA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str39, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(color45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "en-CA" + "'", str47, "en-CA");
        org.junit.Assert.assertNotNull(randomService49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(dateAndTime52);
        org.junit.Assert.assertNotNull(name60);
        org.junit.Assert.assertNotNull(name62);
        org.junit.Assert.assertNotNull(lorem64);
    }

    @Test
    public void test0954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0954");
        java.util.Locale locale2 = new java.util.Locale("English", "CA");
        boolean boolean3 = locale2.hasExtensions();
        java.lang.String str4 = locale2.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "english_CA");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0955");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.lang.String str7 = locale6.getVariant();
        java.util.Locale.Builder builder8 = builder3.setLocale(locale6);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder3.setExtension('#', "Francia");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0956");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.getDisplayName();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test0957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0957");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale4.toLanguageTag();
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-CA" + "'", str5, "en-CA");
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test0958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0958");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.DateAndTime dateAndTime7 = faker0.date();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        faker8.book = book16;
        com.github.javafaker.DateAndTime dateAndTime18 = faker8.dateAndTime;
        faker0.dateAndTime = dateAndTime18;
        com.github.javafaker.Lorem lorem20 = faker0.lorem;
        com.github.javafaker.Hacker hacker21 = faker0.hacker;
        com.github.javafaker.Business business22 = faker0.business();
        java.lang.String str24 = faker0.numerify("fra");
        com.github.javafaker.PhoneNumber phoneNumber25 = faker0.phoneNumber;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNull(lorem20);
        org.junit.Assert.assertNotNull(hacker21);
        org.junit.Assert.assertNotNull(business22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fra" + "'", str24, "fra");
        org.junit.Assert.assertNotNull(phoneNumber25);
    }

    @Test
    public void test0959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0959");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Lorem lorem18 = null;
        faker13.lorem = lorem18;
        com.github.javafaker.Code code20 = faker13.code();
        faker0.code = code20;
        com.github.javafaker.Address address22 = faker0.address;
        java.util.Locale locale23 = java.util.Locale.ITALIAN;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.util.Locale locale28 = locale24.stripExtensions();
        java.lang.String str29 = locale28.toLanguageTag();
        java.lang.String str30 = locale23.getDisplayLanguage(locale28);
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker(locale23);
        com.github.javafaker.Company company32 = faker31.company();
        com.github.javafaker.Business business33 = faker31.business();
        faker0.business = business33;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(code20);
        org.junit.Assert.assertNotNull(address22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "en-CA" + "'", str29, "en-CA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "Italian" + "'", str30, "Italian");
        org.junit.Assert.assertNotNull(company32);
        org.junit.Assert.assertNotNull(business33);
    }

    @Test
    public void test0960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0960");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(charSet1);
    }

    @Test
    public void test0961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0961");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.PhoneNumber phoneNumber5 = faker0.phoneNumber();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        com.github.javafaker.Finance finance9 = faker8.finance();
        faker0.finance = finance9;
        com.github.javafaker.Name name11 = faker0.name();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(phoneNumber5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(name11);
    }

    @Test
    public void test0962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0962");
        java.util.Random random1 = new java.util.Random(0L);
    }

    @Test
    public void test0963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0963");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale.setDefault(locale0);
        java.lang.String str10 = locale0.getDisplayScript();
        java.util.Locale locale12 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale13 = locale12.stripExtensions();
        java.util.Locale locale14 = locale13.stripExtensions();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = locale15.getCountry();
        java.lang.String str19 = locale15.getScript();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.util.Locale locale24 = locale20.stripExtensions();
        java.lang.String str25 = locale15.getDisplayScript(locale24);
        java.lang.String str26 = locale14.getDisplayScript(locale15);
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker(locale15);
        java.lang.String str28 = locale0.getDisplayScript(locale15);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale12.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "CA" + "'", str18, "CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test0964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0964");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale11.getISO3Country();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale11.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale18.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale18.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getLanguage();
        java.util.Random random35 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream36 = random35.longs();
        java.util.stream.DoubleStream doubleStream37 = random35.doubles();
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(locale30, random35);
        java.lang.String str39 = locale27.getDisplayVariant(locale30);
        java.lang.String str40 = locale11.getDisplayCountry(locale30);
        java.lang.String str41 = locale0.getDisplayVariant(locale30);
        java.util.Random random43 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream44 = random43.doubles();
        java.util.stream.IntStream intStream45 = random43.ints();
        java.util.stream.LongStream longStream49 = random43.longs((long) 100, 0L, (long) 'u');
        double double50 = random43.nextGaussian();
        long long51 = random43.nextLong();
        com.github.javafaker.Faker faker52 = new com.github.javafaker.Faker(locale0, random43);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream56 = random43.longs((long) (-1465154083), (long) 491102327, (long) (-1155869325));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en-CA" + "'", str12, "en-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CAN" + "'", str15, "CAN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CA" + "'", str21, "CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(longStream36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(doubleStream44);
        org.junit.Assert.assertNotNull(intStream45);
        org.junit.Assert.assertNotNull(longStream49);
        org.junit.Assert.assertTrue("'" + double50 + "' != '" + 1.561581040188955d + "'", double50 == 1.561581040188955d);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 3831662765844904176L + "'", long51 == 3831662765844904176L);
    }

    @Test
    public void test0965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0965");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Name name12 = faker0.name();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        java.lang.String str19 = faker13.letterify("en-CA");
        com.github.javafaker.Code code20 = null;
        faker13.code = code20;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.DateAndTime dateAndTime26 = faker22.dateAndTime;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        faker27.book = book35;
        faker22.book = book35;
        faker13.book = book35;
        java.util.Locale locale40 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale41 = locale40.stripExtensions();
        java.util.Locale locale42 = locale41.stripExtensions();
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getCountry();
        java.lang.String str47 = locale43.getScript();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale43.getDisplayScript(locale52);
        java.lang.String str54 = locale42.getDisplayScript(locale43);
        com.github.javafaker.Faker faker55 = new com.github.javafaker.Faker(locale43);
        com.github.javafaker.Color color56 = faker55.color;
        faker13.color = color56;
        faker0.color = color56;
        com.github.javafaker.Book book59 = faker0.book();
        com.github.javafaker.Faker faker60 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance61 = faker60.finance;
        com.github.javafaker.Faker faker62 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService63 = faker62.randomService;
        java.lang.String str65 = faker62.bothify("");
        com.github.javafaker.DateAndTime dateAndTime66 = faker62.dateAndTime;
        com.github.javafaker.Faker faker67 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService68 = faker67.randomService;
        java.lang.String str70 = faker67.bothify("");
        com.github.javafaker.Faker faker71 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService72 = faker71.randomService;
        java.lang.String str74 = faker71.bothify("");
        com.github.javafaker.Book book75 = faker71.book();
        faker67.book = book75;
        faker62.book = book75;
        faker60.book = book75;
        com.github.javafaker.Finance finance79 = faker60.finance;
        com.github.javafaker.Faker faker80 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService81 = faker80.randomService;
        com.github.javafaker.Book book82 = faker80.book();
        com.github.javafaker.Finance finance83 = faker80.finance();
        com.github.javafaker.Book book84 = faker80.book();
        com.github.javafaker.Options options85 = faker80.options();
        com.github.javafaker.PhoneNumber phoneNumber86 = faker80.phoneNumber();
        faker60.phoneNumber = phoneNumber86;
        faker0.phoneNumber = phoneNumber86;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(name12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en-CA" + "'", str19, "en-CA");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(dateAndTime26);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertEquals(locale40.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "CA" + "'", str46, "CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(color56);
        org.junit.Assert.assertNotNull(book59);
        org.junit.Assert.assertNotNull(finance61);
        org.junit.Assert.assertNotNull(randomService63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateAndTime66);
        org.junit.Assert.assertNotNull(randomService68);
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(randomService72);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "" + "'", str74, "");
        org.junit.Assert.assertNotNull(book75);
        org.junit.Assert.assertNotNull(finance79);
        org.junit.Assert.assertNotNull(randomService81);
        org.junit.Assert.assertNotNull(book82);
        org.junit.Assert.assertNotNull(finance83);
        org.junit.Assert.assertNotNull(book84);
        org.junit.Assert.assertNotNull(options85);
        org.junit.Assert.assertNotNull(phoneNumber86);
    }

    @Test
    public void test0966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0966");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder6 = builder3.clear();
        java.util.Locale.Builder builder8 = builder3.setLanguageTag("it");
        java.util.Locale locale9 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLocale(locale9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0967");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Finance finance6 = faker0.finance;
        com.github.javafaker.Finance finance7 = faker0.finance;
        java.lang.String str9 = faker0.numerify("Italian");
        com.github.javafaker.Internet internet10 = faker0.internet();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Italian" + "'", str9, "Italian");
        org.junit.Assert.assertNotNull(internet10);
    }

    @Test
    public void test0968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0968");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.Business business9 = faker8.business();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        com.github.javafaker.Book book17 = faker15.book();
        faker10.book = book17;
        com.github.javafaker.Finance finance19 = faker10.finance();
        com.github.javafaker.Options options20 = faker10.options();
        faker8.options = options20;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getLanguage();
        java.util.Random random27 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream28 = random27.longs();
        java.util.stream.DoubleStream doubleStream29 = random27.doubles();
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker(locale22, random27);
        com.github.javafaker.Business business31 = faker30.business();
        faker8.business = business31;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(finance19);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "en" + "'", str25, "en");
        org.junit.Assert.assertNotNull(longStream28);
        org.junit.Assert.assertNotNull(doubleStream29);
        org.junit.Assert.assertNotNull(business31);
    }

    @Test
    public void test0969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0969");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale5 = new java.util.Locale("Korean", "cinese (Cina)", "\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.lang.String str7 = locale5.getUnicodeLocaleType("en");
        java.lang.String str8 = locale0.getDisplayLanguage(locale5);
        java.lang.String str9 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "ko-KR" + "'", str1, "ko-KR");
// flaky:         org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Korean" + "'", str8, "Korean");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0970");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Book book9 = faker0.book;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Book book18 = faker14.book();
        faker10.book = book18;
        com.github.javafaker.Options options20 = faker10.options();
        faker0.options = options20;
        com.github.javafaker.Color color22 = faker0.color;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(book18);
        org.junit.Assert.assertNotNull(options20);
        org.junit.Assert.assertNotNull(color22);
    }

    @Test
    public void test0971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0971");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.PhoneNumber phoneNumber7 = null;
        faker0.phoneNumber = phoneNumber7;
        com.github.javafaker.Company company9 = faker0.company();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker0.phoneNumber;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNull(phoneNumber10);
    }

    @Test
    public void test0972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0972");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Options options10 = faker0.options();
        com.github.javafaker.App app11 = faker0.app;
        com.github.javafaker.Finance finance12 = faker0.finance();
        com.github.javafaker.Number number13 = faker0.number();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(number13);
    }

    @Test
    public void test0973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0973");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        java.util.stream.DoubleStream doubleStream11 = random1.doubles(3596673253889729385L, (double) 4, (double) 1853403699951111791L);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(doubleStream11);
    }

    @Test
    public void test0974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0974");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getCountry();
        java.lang.String str9 = locale5.getScript();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale5.getDisplayScript(locale14);
        java.lang.String str16 = locale4.getDisplayScript(locale5);
        java.lang.String str17 = locale0.getDisplayScript(locale5);
        java.lang.Object obj18 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CA" + "'", str8, "CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(obj18);
        org.junit.Assert.assertEquals(obj18.toString(), "ko");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj18), "ko");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj18), "ko");
    }

    @Test
    public void test0975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0975");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str6 = locale0.getExtension('u');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str6);
    }

    @Test
    public void test0976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0976");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.lang.String str5 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-CA" + "'", str5, "en-CA");
    }

    @Test
    public void test0977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0977");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("English");
        java.util.Locale.LanguageRange languageRange6 = new java.util.Locale.LanguageRange("eng");
        double double7 = languageRange6.getWeight();
        double double8 = languageRange6.getWeight();
        java.lang.String str9 = languageRange6.getRange();
        double double10 = languageRange6.getWeight();
        java.util.Locale.LanguageRange languageRange12 = new java.util.Locale.LanguageRange("eng");
        double double13 = languageRange12.getWeight();
        double double14 = languageRange12.getWeight();
        java.lang.String str15 = languageRange12.getRange();
        double double16 = languageRange12.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] { languageRange6, languageRange12 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.util.Locale locale23 = java.util.Locale.ENGLISH;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale24.getDisplayVariant();
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.util.Locale locale37 = locale33.stripExtensions();
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.getISO3Language();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.lang.String str44 = locale38.getExtension('a');
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale45.getISO3Language();
        java.util.Locale locale49 = locale45.stripExtensions();
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.lang.String str54 = locale50.getDisplayVariant();
        java.lang.String str56 = locale50.getExtension('a');
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = locale57.getISO3Language();
        java.lang.String str61 = locale57.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale locale67 = java.util.Locale.ITALIAN;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale68.getISO3Language();
        java.util.Locale locale72 = locale68.stripExtensions();
        java.lang.String str73 = locale72.toLanguageTag();
        java.lang.String str74 = locale67.getDisplayLanguage(locale72);
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.lang.String str77 = locale75.getDisplayName(locale76);
        java.lang.String str78 = locale75.getCountry();
        java.util.Locale locale79 = java.util.Locale.CANADA;
        java.util.Locale locale80 = java.util.Locale.KOREAN;
        java.lang.String str81 = locale79.getDisplayName(locale80);
        java.lang.String str82 = locale79.getISO3Language();
        java.util.Locale locale83 = locale79.stripExtensions();
        java.util.Locale locale84 = java.util.Locale.JAPAN;
        java.util.Locale locale85 = java.util.Locale.CANADA;
        java.lang.String str86 = locale85.getDisplayVariant();
        java.util.Locale.setDefault(locale85);
        java.util.Locale[] localeArray88 = new java.util.Locale[] { locale23, locale24, locale27, locale30, locale32, locale37, locale38, locale49, locale50, locale57, locale63, locale65, locale67, locale75, locale79, locale84, locale85 };
        java.util.ArrayList<java.util.Locale> localeList89 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList89, localeArray88);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.util.Locale>) localeList89, filteringMode91);
        java.util.Collection<java.util.Locale> localeCollection93 = null;
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, localeCollection93);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.List<java.util.Locale> localeList96 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.Locale locale97 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList96);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 1.0d + "'", double16 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str31, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "eng" + "'", str48, "eng");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNull(str56);
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "eng" + "'", str60, "eng");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str64, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "it");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str70, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "eng" + "'", str71, "eng");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "en-CA" + "'", str73, "en-CA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "Italian" + "'", str74, "Italian");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str77 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str77, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "CA" + "'", str78, "CA");
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str81 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str81, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str82 + "' != '" + "eng" + "'", str82, "eng");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertNotNull(localeArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode91.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList95);
        org.junit.Assert.assertNotNull(localeList96);
        org.junit.Assert.assertNull(locale97);
    }

    @Test
    public void test0978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0978");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder3.setLocale(locale11);
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale locale16 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet17 = locale16.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder18 = builder15.setLocale(locale16);
        java.util.Locale.Builder builder20 = builder18.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder22 = builder18.setVariant("");
        java.util.Locale locale23 = builder18.build();
        java.util.Locale.Builder builder24 = builder14.setLocale(locale23);
        java.util.Locale.Builder builder26 = builder24.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder26.addUnicodeLocaleAttribute("\uc601\uc5b4\uce90\ub098\ub2e4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test0979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0979");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("fr", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("Canada", strMap4);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList5, strMap6);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap9 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList10 = java.util.Locale.LanguageRange.parse("Canada", strMap9);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList12 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList10, strMap11);
        java.util.Locale.LanguageRange[] languageRangeArray13 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList14 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean15 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList14, languageRangeArray13);
        java.util.Locale locale16 = java.util.Locale.ENGLISH;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.lang.String str18 = locale17.getDisplayVariant();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.lang.String str35 = locale31.getDisplayVariant();
        java.lang.String str37 = locale31.getExtension('a');
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.getISO3Language();
        java.util.Locale locale42 = locale38.stripExtensions();
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.lang.String str47 = locale43.getDisplayVariant();
        java.lang.String str49 = locale43.getExtension('a');
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.lang.String str54 = locale50.getDisplayVariant();
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.lang.String str59 = locale58.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.ITALIAN;
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.getISO3Language();
        java.util.Locale locale65 = locale61.stripExtensions();
        java.lang.String str66 = locale65.toLanguageTag();
        java.lang.String str67 = locale60.getDisplayLanguage(locale65);
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.lang.String str71 = locale68.getCountry();
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = locale72.getISO3Language();
        java.util.Locale locale76 = locale72.stripExtensions();
        java.util.Locale locale77 = java.util.Locale.JAPAN;
        java.util.Locale locale78 = java.util.Locale.CANADA;
        java.lang.String str79 = locale78.getDisplayVariant();
        java.util.Locale.setDefault(locale78);
        java.util.Locale[] localeArray81 = new java.util.Locale[] { locale16, locale17, locale20, locale23, locale25, locale30, locale31, locale42, locale43, locale50, locale56, locale58, locale60, locale68, locale72, locale77, locale78 };
        java.util.ArrayList<java.util.Locale> localeList82 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList82, localeArray81);
        java.util.Locale.FilteringMode filteringMode84 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.util.Locale>) localeList82, filteringMode84);
        java.lang.String[] strArray91 = new java.lang.String[] { "en-CA", "eng", "en_US", "", "Korean" };
        java.util.ArrayList<java.lang.String> strList92 = new java.util.ArrayList<java.lang.String>();
        boolean boolean93 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList92, strArray91);
        java.util.List<java.lang.String> strList94 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList14, (java.util.Collection<java.lang.String>) strList92);
        java.util.List<java.lang.String> strList95 = java.util.Locale.filterTags(languageRangeList10, (java.util.Collection<java.lang.String>) strList92);
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList5, (java.util.Collection<java.lang.String>) strList95);
        java.util.List<java.lang.String> strList97 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList95);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(languageRangeList10);
        org.junit.Assert.assertNotNull(languageRangeList12);
        org.junit.Assert.assertNotNull(languageRangeArray13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str21, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNull(str49);
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "it");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str63, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "eng" + "'", str64, "eng");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "en-CA" + "'", str66, "en-CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "Italian" + "'", str67, "Italian");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str70 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str70, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "CA" + "'", str71, "CA");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str74, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "eng" + "'", str75, "eng");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertNotNull(localeArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertTrue("'" + filteringMode84 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode84.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertNotNull(strArray91);
        org.junit.Assert.assertTrue("'" + boolean93 + "' != '" + true + "'", boolean93 == true);
        org.junit.Assert.assertNotNull(strList94);
        org.junit.Assert.assertNotNull(strList95);
        org.junit.Assert.assertNotNull(strList96);
        org.junit.Assert.assertNotNull(strList97);
    }

    @Test
    public void test0980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0980");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Lorem lorem7 = faker6.lorem;
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(lorem7);
    }

    @Test
    public void test0981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0981");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(random1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = faker5.resolve("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
    }

    @Test
    public void test0982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0982");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random6.nextBytes(byteArray14);
        double double16 = random6.nextGaussian();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale4, random6);
        double double18 = random6.nextDouble();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.4123569817688534d) + "'", double16 == (-0.4123569817688534d));
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.3327170559595112d + "'", double18 == 0.3327170559595112d);
    }

    @Test
    public void test0983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0983");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.Book book20 = faker16.book();
        faker12.book = book20;
        com.github.javafaker.App app22 = faker12.app();
        faker8.app = app22;
        com.github.javafaker.Color color24 = faker8.color;
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.service.RandomService randomService29 = faker25.randomService;
        com.github.javafaker.Book book30 = faker25.book;
        com.github.javafaker.Lorem lorem31 = null;
        faker25.lorem = lorem31;
        com.github.javafaker.Address address33 = faker25.address;
        com.github.javafaker.Color color34 = faker25.color();
        java.util.Locale locale35 = java.util.Locale.CHINA;
        java.util.Random random37 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream38 = random37.longs();
        com.github.javafaker.Faker faker39 = new com.github.javafaker.Faker(locale35, random37);
        com.github.javafaker.Internet internet40 = faker39.internet();
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService42 = faker41.randomService;
        java.lang.String str44 = faker41.bothify("");
        com.github.javafaker.Faker faker45 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService46 = faker45.randomService;
        java.lang.String str48 = faker45.bothify("");
        com.github.javafaker.Book book49 = faker45.book();
        faker41.book = book49;
        com.github.javafaker.Address address51 = faker41.address();
        com.github.javafaker.Hacker hacker52 = faker41.hacker();
        com.github.javafaker.Color color53 = faker41.color();
        faker39.color = color53;
        faker25.color = color53;
        faker8.color = color53;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(app22);
        org.junit.Assert.assertNotNull(color24);
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(address33);
        org.junit.Assert.assertNotNull(color34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream38);
        org.junit.Assert.assertNotNull(internet40);
        org.junit.Assert.assertNotNull(randomService42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(randomService46);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(book49);
        org.junit.Assert.assertNotNull(address51);
        org.junit.Assert.assertNotNull(hacker52);
        org.junit.Assert.assertNotNull(color53);
    }

    @Test
    public void test0984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0984");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        java.lang.String str23 = faker17.regexify("eng");
        com.github.javafaker.service.RandomService randomService24 = faker17.randomService;
        com.github.javafaker.Code code25 = faker17.code;
        com.github.javafaker.Name name26 = faker17.name;
        faker16.name = name26;
        java.lang.String str29 = faker16.numerify("");
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertNotNull(code25);
        org.junit.Assert.assertNotNull(name26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
    }

    @Test
    public void test0985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0985");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.lang.String str10 = locale0.getDisplayVariant(locale8);
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        byte[] byteArray20 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random12.nextBytes(byteArray20);
        double double22 = random12.nextGaussian();
        java.util.stream.DoubleStream doubleStream24 = random12.doubles((long) '#');
        int int25 = random12.nextInt();
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker(locale8, random12);
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(byteArray20);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + (-0.4123569817688534d) + "'", double22 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1429008869 + "'", int25 == 1429008869);
        org.junit.Assert.assertNotNull(randomService27);
    }

    @Test
    public void test0986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0986");
        java.util.Random random1 = new java.util.Random((long) 1429008869);
    }

    @Test
    public void test0987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0987");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        java.lang.String str7 = faker0.bothify("\uc601\uc5b4\uce90\ub098\ub2e4)");
        com.github.javafaker.Lorem lorem8 = faker0.lorem;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(lorem8);
    }

    @Test
    public void test0988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0988");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("inglese", strMap1);
        java.util.Collection<java.util.Locale> localeCollection3 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList4 = java.util.Locale.filter(languageRangeList2, localeCollection3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test0989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0989");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Hacker hacker8 = null;
        faker0.hacker = hacker8;
        com.github.javafaker.Hacker hacker10 = null;
        faker0.hacker = hacker10;
        com.github.javafaker.Company company12 = faker0.company;
        com.github.javafaker.Hacker hacker13 = faker0.hacker();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(company12);
        org.junit.Assert.assertNull(hacker13);
    }

    @Test
    public void test0990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0990");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Finance finance7 = faker6.finance();
        com.github.javafaker.Options options8 = faker6.options();
        com.github.javafaker.Lorem lorem9 = faker6.lorem;
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertNotNull(lorem9);
    }

    @Test
    public void test0991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0991");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("CAN");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.util.Locale locale5 = java.util.Locale.ENGLISH;
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.util.Locale locale19 = locale15.stripExtensions();
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.lang.String str23 = locale20.getISO3Language();
        java.lang.String str24 = locale20.getDisplayVariant();
        java.lang.String str26 = locale20.getExtension('a');
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.lang.String str36 = locale32.getDisplayVariant();
        java.lang.String str38 = locale32.getExtension('a');
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.lang.String str43 = locale39.getDisplayVariant();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.lang.String str48 = locale47.getDisplayVariant();
        java.util.Locale locale49 = java.util.Locale.ITALIAN;
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = locale54.toLanguageTag();
        java.lang.String str56 = locale49.getDisplayLanguage(locale54);
        java.util.Locale locale57 = java.util.Locale.CANADA;
        java.util.Locale locale58 = java.util.Locale.KOREAN;
        java.lang.String str59 = locale57.getDisplayName(locale58);
        java.lang.String str60 = locale57.getCountry();
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.getISO3Language();
        java.util.Locale locale65 = locale61.stripExtensions();
        java.util.Locale locale66 = java.util.Locale.JAPAN;
        java.util.Locale locale67 = java.util.Locale.CANADA;
        java.lang.String str68 = locale67.getDisplayVariant();
        java.util.Locale.setDefault(locale67);
        java.util.Locale[] localeArray70 = new java.util.Locale[] { locale5, locale6, locale9, locale12, locale14, locale19, locale20, locale31, locale32, locale39, locale45, locale47, locale49, locale57, locale61, locale66, locale67 };
        java.util.ArrayList<java.util.Locale> localeList71 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList71, localeArray70);
        java.util.Locale.FilteringMode filteringMode73 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.util.Locale>) localeList71, filteringMode73);
        java.util.Collection<java.util.Locale> localeCollection75 = null;
        java.util.List<java.util.Locale> localeList76 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, localeCollection75);
        java.lang.String[] strArray88 = new java.lang.String[] { "IT", "ita", "cinese (Cina)", "English (Canada)", "Germany", "cinese (Cina)", "en", "English", "it", "IT", "Italian" };
        java.util.ArrayList<java.lang.String> strList89 = new java.util.ArrayList<java.lang.String>();
        boolean boolean90 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList89, strArray88);
        java.util.List<java.lang.String> strList91 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList89);
        java.lang.String str92 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strList89);
        java.util.Locale locale93 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet94 = locale93.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode95 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList96 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet94, filteringMode95);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str46, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-CA" + "'", str55, "en-CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "Italian" + "'", str56, "Italian");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str59 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str59, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "CA" + "'", str60, "CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str63, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "eng" + "'", str64, "eng");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertNotNull(localeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertTrue("'" + filteringMode73 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode73.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList74);
        org.junit.Assert.assertNotNull(localeList76);
        org.junit.Assert.assertNotNull(strArray88);
        org.junit.Assert.assertTrue("'" + boolean90 + "' != '" + true + "'", boolean90 == true);
        org.junit.Assert.assertNotNull(strList91);
        org.junit.Assert.assertNull(str92);
        org.junit.Assert.assertNotNull(locale93);
        org.junit.Assert.assertEquals(locale93.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertTrue("'" + filteringMode95 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode95.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList96);
    }

    @Test
    public void test0992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0992");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.util.Locale locale15 = locale2.stripExtensions();
        java.lang.String str16 = locale15.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet17 = locale15.getUnicodeLocaleKeys();
        java.lang.String str18 = locale15.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "English" + "'", str16, "English");
        org.junit.Assert.assertNotNull(strSet17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "en_CA" + "'", str18, "en_CA");
    }

    @Test
    public void test0993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0993");
        java.util.Random random1 = new java.util.Random((long) 1);
        boolean boolean2 = random1.nextBoolean();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        java.util.stream.LongStream longStream7 = random1.longs(100L, (long) 0, (long) 4);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        com.github.javafaker.Book book15 = faker13.book();
        com.github.javafaker.Finance finance16 = faker13.finance();
        com.github.javafaker.Book book17 = faker13.book();
        com.github.javafaker.Options options18 = faker13.options();
        com.github.javafaker.PhoneNumber phoneNumber19 = faker13.phoneNumber();
        faker9.phoneNumber = phoneNumber19;
        com.github.javafaker.Name name21 = faker9.name();
        com.github.javafaker.Hacker hacker22 = faker9.hacker;
        com.github.javafaker.Finance finance23 = faker9.finance;
        com.github.javafaker.Code code24 = faker9.code();
        com.github.javafaker.service.RandomService randomService25 = faker9.randomService;
        com.github.javafaker.Internet internet26 = faker9.internet();
        faker8.internet = internet26;
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(finance16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(options18);
        org.junit.Assert.assertNotNull(phoneNumber19);
        org.junit.Assert.assertNotNull(name21);
        org.junit.Assert.assertNotNull(hacker22);
        org.junit.Assert.assertNotNull(finance23);
        org.junit.Assert.assertNotNull(code24);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertNotNull(internet26);
    }

    @Test
    public void test0994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0994");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getISO3Language();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        java.util.stream.DoubleStream doubleStream14 = random12.doubles();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random12);
        java.util.stream.DoubleStream doubleStream18 = random12.doubles(0.0d, (double) 1.0f);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(doubleStream18);
    }

    @Test
    public void test0995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0995");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getCountry();
        java.lang.String str26 = locale22.getScript();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.lang.String str32 = locale22.getDisplayScript(locale31);
        java.lang.String str33 = locale21.getDisplayScript(locale22);
        java.lang.String str34 = locale17.getDisplayScript(locale22);
        java.lang.String str35 = locale13.getDisplayName(locale17);
        java.lang.String str36 = locale17.getVariant();
        java.util.Locale locale37 = java.util.Locale.GERMAN;
        java.lang.String str38 = locale37.getISO3Language();
        boolean boolean39 = locale17.equals((java.lang.Object) locale37);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale19.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "de");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "deu" + "'", str38, "deu");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
    }

    @Test
    public void test0996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0996");
        java.util.Locale locale1 = new java.util.Locale("italian");
        java.util.Locale.setDefault(locale1);
        java.lang.String str3 = locale1.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0997");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        java.lang.String str5 = faker0.letterify("eng");
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.service.RandomService randomService10 = faker6.randomService;
        com.github.javafaker.Book book11 = faker6.book;
        com.github.javafaker.Lorem lorem12 = null;
        faker6.lorem = lorem12;
        com.github.javafaker.Hacker hacker14 = null;
        faker6.hacker = hacker14;
        com.github.javafaker.Color color16 = faker6.color;
        com.github.javafaker.Book book17 = faker6.book();
        com.github.javafaker.Code code18 = faker6.code;
        faker0.code = code18;
        java.lang.String str21 = faker0.bothify("can");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNotNull(color16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(code18);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "can" + "'", str21, "can");
    }

    @Test
    public void test0998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0998");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("Korean");
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setLanguage("");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "italian");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test0999");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        java.util.stream.IntStream intStream17 = random1.ints((-1155869325), 1761283695);
        java.util.stream.DoubleStream doubleStream20 = random1.doubles((double) (-4964420948893066024L), (double) 0.2077148f);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(doubleStream20);
    }

    @Test
    public void test1000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest1.test1000");
        java.util.Random random1 = new java.util.Random(3596673253889729385L);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        org.junit.Assert.assertNotNull(doubleStream2);
    }
}
