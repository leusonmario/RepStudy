import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

    public static boolean debug = false;

    @Test
    public void test0001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0001");
        java.util.Locale.Category category0 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale1 = java.util.Locale.getDefault(category0);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0002");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", 10.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0003");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0004");
        double double0 = java.util.Locale.LanguageRange.MIN_WEIGHT;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 0.0d + "'", double0 == 0.0d);
    }

    @Test
    public void test0005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0005");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "zh_CN");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "zh_CN");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "zh_CN");
    }

    @Test
    public void test0006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0006");
        java.lang.String[] strArray0 = java.util.Locale.getISOLanguages();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test0007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0007");
        char char0 = java.util.Locale.UNICODE_LOCALE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'u' + "'", char0 == 'u');
    }

    @Test
    public void test0008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0008");
        java.lang.String[] strArray0 = java.util.Locale.getISOCountries();
        org.junit.Assert.assertNotNull(strArray0);
    }

    @Test
    public void test0009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0009");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
    }

    @Test
    public void test0010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0010");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "en_US" + "'", str1, "en_US");
    }

    @Test
    public void test0011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0011");
        double double0 = java.util.Locale.LanguageRange.MAX_WEIGHT;
        org.junit.Assert.assertTrue("'" + double0 + "' != '" + 1.0d + "'", double0 == 1.0d);
    }

    @Test
    public void test0012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0012");
        java.util.Locale locale3 = new java.util.Locale("", "English", "");
        org.junit.Assert.assertEquals(locale3.toString(), "_ENGLISH");
    }

    @Test
    public void test0013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0013");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            int int5 = random1.nextInt(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0014");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream7 = random1.doubles((double) 1L, (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
    }

    @Test
    public void test0015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0015");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("English");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: English");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
    }

    @Test
    public void test0016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0016");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = random1.longs((long) 'u', (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
    }

    @Test
    public void test0017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0017");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.util.Locale locale17 = locale13.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str24 = locale18.getExtension('a');
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.lang.String str34 = locale30.getDisplayVariant();
        java.lang.String str36 = locale30.getExtension('a');
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale37.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale45.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.lang.String str54 = locale47.getDisplayLanguage(locale52);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getCountry();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getISO3Language();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale.setDefault(locale65);
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale3, locale4, locale7, locale10, locale12, locale17, locale18, locale29, locale30, locale37, locale43, locale45, locale47, locale55, locale59, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList69, filteringMode71);
        java.lang.Class<?> wildcardClass73 = filteringMode71.getClass();
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str15, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str27, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str39, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en-CA" + "'", str53, "en-CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italian" + "'", str54, "Italian");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "eng" + "'", str62, "eng");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(wildcardClass73);
    }

    @Test
    public void test0018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0018");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("", (double) 1.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0019");
        java.util.Locale.FilteringMode filteringMode0 = java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES;
        org.junit.Assert.assertTrue("'" + filteringMode0 + "' != '" + java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES + "'", filteringMode0.equals(java.util.Locale.FilteringMode.IGNORE_EXTENDED_RANGES));
    }

    @Test
    public void test0020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0020");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0021");
        char char0 = java.util.Locale.PRIVATE_USE_EXTENSION;
        org.junit.Assert.assertTrue("'" + char0 + "' != '" + 'x' + "'", char0 == 'x');
    }

    @Test
    public void test0022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0022");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.lang.String str2 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko" + "'", str2, "ko");
    }

    @Test
    public void test0023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0023");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale5.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
    }

    @Test
    public void test0024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0024");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream7 = random1.ints((int) '4', (int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
    }

    @Test
    public void test0025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0025");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("en_US", 1.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=en_us");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0026");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream9 = random1.longs(1L, (long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test0027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0027");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale6 = new java.util.Locale("Italian", "", "English");
        boolean boolean7 = locale6.hasExtensions();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getDisplayVariant();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale8);
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.util.Locale locale15 = new java.util.Locale("Italian", "", "English");
        boolean boolean16 = locale15.hasExtensions();
        java.util.Locale locale17 = java.util.Locale.ITALIAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = locale18.stripExtensions();
        java.lang.String str23 = locale22.toLanguageTag();
        java.lang.String str24 = locale17.getDisplayLanguage(locale22);
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker(locale17);
        java.util.Locale locale26 = java.util.Locale.ENGLISH;
        java.util.Locale locale28 = new java.util.Locale("en-CA");
        java.lang.String str29 = locale28.getDisplayScript();
        java.util.Locale locale31 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale32 = locale31.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        java.util.Locale locale41 = java.util.Locale.UK;
        java.util.Locale locale42 = java.util.Locale.ITALIAN;
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = locale43.stripExtensions();
        java.lang.String str48 = locale47.toLanguageTag();
        java.lang.String str49 = locale42.getDisplayLanguage(locale47);
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.util.Locale locale51 = java.util.Locale.KOREAN;
        java.lang.String str52 = locale50.getDisplayName(locale51);
        java.lang.String str53 = locale50.getISO3Language();
        java.util.Locale locale54 = locale50.stripExtensions();
        java.lang.String str55 = locale50.toLanguageTag();
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.lang.String str57 = locale56.getDisplayVariant();
        com.github.javafaker.Faker faker58 = new com.github.javafaker.Faker(locale56);
        java.util.Locale locale59 = java.util.Locale.JAPAN;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.lang.String str61 = locale60.getDisplayVariant();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = locale62.getISO3Language();
        java.util.Locale locale66 = locale62.stripExtensions();
        java.lang.String str67 = locale60.getDisplayLanguage(locale66);
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.util.Locale locale70 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale71 = locale70.stripExtensions();
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = locale72.getCountry();
        java.util.Locale locale76 = java.util.Locale.KOREAN;
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayName(locale78);
        java.lang.String str80 = locale77.getISO3Language();
        java.util.Locale locale81 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale81);
        java.util.Locale locale83 = java.util.Locale.CANADA;
        java.util.Locale locale84 = java.util.Locale.KOREAN;
        java.lang.String str85 = locale83.getDisplayName(locale84);
        java.util.Locale locale89 = new java.util.Locale("Italian", "", "English");
        java.util.Locale locale90 = java.util.Locale.ITALIAN;
        java.util.Locale locale91 = java.util.Locale.CANADA;
        java.lang.String str92 = locale91.getDisplayVariant();
        java.util.Locale.setDefault(locale91);
        java.util.Locale[] localeArray94 = new java.util.Locale[] { locale6, locale8, locale11, locale15, locale17, locale26, locale28, locale32, locale33, locale41, locale47, locale50, locale56, locale59, locale60, locale68, locale71, locale72, locale76, locale77, locale81, locale84, locale89, locale90, locale91 };
        java.util.ArrayList<java.util.Locale> localeList95 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean96 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList95, localeArray94);
        java.util.Locale.FilteringMode filteringMode97 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList98 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList95, filteringMode97);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale6.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals(locale15.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "en-CA" + "'", str23, "en-CA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Italian" + "'", str24, "Italian");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en");
        org.junit.Assert.assertEquals(locale28.toString(), "en-ca");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale31.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-CA" + "'", str39, "en-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "en-CA" + "'", str48, "en-CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Italian" + "'", str49, "Italian");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str52 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str52, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "eng" + "'", str53, "eng");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "en-CA" + "'", str55, "en-CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str64, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "English" + "'", str67, "English");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale70.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str74, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CA" + "'", str75, "CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "ko");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str79, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "eng" + "'", str80, "eng");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str85 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str85, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals(locale89.toString(), "italian__English");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "it");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str92 + "' != '" + "" + "'", str92, "");
        org.junit.Assert.assertNotNull(localeArray94);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + true + "'", boolean96 == true);
        org.junit.Assert.assertTrue("'" + filteringMode97 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode97.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList98);
    }

    @Test
    public void test0028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0028");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getVariant();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService4 = faker3.randomService;
        com.github.javafaker.DateAndTime dateAndTime5 = faker3.date();
        boolean boolean6 = locale1.equals((java.lang.Object) faker3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0029");
        java.util.Random random1 = new java.util.Random((long) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = random1.longs((long) 69, (long) (short) 100, (long) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0030");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0031");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Korean", (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=10.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0032");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.util.Locale locale6 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        boolean boolean7 = locale0.equals((java.lang.Object) locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0033");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "en_CA");
    }

    @Test
    public void test0034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0034");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0035");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.Object obj1 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(obj1);
        org.junit.Assert.assertEquals(obj1.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj1), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj1), "zh_TW");
    }

    @Test
    public void test0036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0036");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        boolean boolean1 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
    }

    @Test
    public void test0037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0037");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale0.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
    }

    @Test
    public void test0038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0038");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.lang.Class<?> wildcardClass15 = locale2.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test0039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0039");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.removeUnicodeLocaleAttribute("en");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0040");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        int int6 = random1.nextInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = random1.ints((int) ' ', 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1761283695 + "'", int6 == 1761283695);
    }

    @Test
    public void test0041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0041");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setVariant("CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0042");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.setScript("Korean");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Korean [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0043");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.lang.String str1 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0044");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.Class<?> wildcardClass5 = faker0.getClass();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test0045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0045");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.service.FakeValuesService fakeValuesService9 = null;
        faker8.fakeValuesService = fakeValuesService9;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
    }

    @Test
    public void test0046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0046");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setScript("en-CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en-CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0047");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
    }

    @Test
    public void test0048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0048");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale2.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0049");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService3 = faker2.randomService;
        java.lang.String str5 = faker2.bothify("");
        com.github.javafaker.DateAndTime dateAndTime6 = faker2.dateAndTime;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        com.github.javafaker.Book book9 = faker7.book();
        faker2.book = book9;
        com.github.javafaker.Book book11 = faker2.book;
        boolean boolean12 = languageRange1.equals((java.lang.Object) faker2);
        org.junit.Assert.assertNotNull(randomService3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test0050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0050");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("coreano", "\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: coreano [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0051");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = random1.ints(1L, (int) (short) 10, (int) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test0052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0052");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream8 = random1.longs(100L, (long) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0053");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.PhoneNumber phoneNumber7 = null;
        faker0.phoneNumber = phoneNumber7;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str10 = faker0.resolve("ko");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
    }

    @Test
    public void test0054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0054");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setScript("ko");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ko [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "italian__English");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0055");
        java.util.Locale locale1 = new java.util.Locale("coreano");
        org.junit.Assert.assertEquals(locale1.toString(), "coreano");
    }

    @Test
    public void test0056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0056");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService4 = faker3.randomService;
        java.lang.String str6 = faker3.bothify("");
        com.github.javafaker.Book book7 = faker3.book();
        boolean boolean8 = languageRange1.equals((java.lang.Object) book7);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test0057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0057");
        java.util.Locale locale0 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
// flaky:         org.junit.Assert.assertEquals(locale0.toString(), "it");
    }

    @Test
    public void test0058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0058");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Canada", (double) 69);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=69.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0059");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream16 = random9.doubles((-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test0060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0060");
        java.util.Locale locale2 = new java.util.Locale("", "Italian");
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "_ITALIAN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test0061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0061");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("eng");
        double double4 = languageRange3.getWeight();
        double double5 = languageRange3.getWeight();
        java.util.Locale.LanguageRange languageRange7 = new java.util.Locale.LanguageRange("eng");
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] { languageRange1, languageRange3, languageRange7 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.util.Locale locale14 = java.util.Locale.ENGLISH;
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.lang.String str16 = locale15.getDisplayVariant();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.CANADA;
        java.util.Locale locale21 = java.util.Locale.KOREAN;
        java.lang.String str22 = locale20.getDisplayName(locale21);
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.util.Locale locale28 = locale24.stripExtensions();
        java.util.Locale locale29 = java.util.Locale.CANADA;
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale29.getISO3Language();
        java.lang.String str33 = locale29.getDisplayVariant();
        java.lang.String str35 = locale29.getExtension('a');
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.util.Locale locale41 = java.util.Locale.CANADA;
        java.util.Locale locale42 = java.util.Locale.KOREAN;
        java.lang.String str43 = locale41.getDisplayName(locale42);
        java.lang.String str44 = locale41.getISO3Language();
        java.lang.String str45 = locale41.getDisplayVariant();
        java.lang.String str47 = locale41.getExtension('a');
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getDisplayVariant();
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.lang.String str57 = locale56.getDisplayVariant();
        java.util.Locale locale58 = java.util.Locale.ITALIAN;
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getISO3Language();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.lang.String str64 = locale63.toLanguageTag();
        java.lang.String str65 = locale58.getDisplayLanguage(locale63);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        java.lang.String str69 = locale66.getCountry();
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayName(locale71);
        java.lang.String str73 = locale70.getISO3Language();
        java.util.Locale locale74 = locale70.stripExtensions();
        java.util.Locale locale75 = java.util.Locale.JAPAN;
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.lang.String str77 = locale76.getDisplayVariant();
        java.util.Locale.setDefault(locale76);
        java.util.Locale[] localeArray79 = new java.util.Locale[] { locale14, locale15, locale18, locale21, locale23, locale28, locale29, locale40, locale41, locale48, locale54, locale56, locale58, locale66, locale70, locale75, locale76 };
        java.util.ArrayList<java.util.Locale> localeList80 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList80, localeArray79);
        java.util.Locale.FilteringMode filteringMode82 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList83 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.util.Locale>) localeList80, filteringMode82);
        java.util.Collection<java.util.Locale> localeCollection84 = null;
        java.util.List<java.util.Locale> localeList85 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, localeCollection84);
        java.util.Locale.FilteringMode filteringMode86 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList87 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, localeCollection84, filteringMode86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str22 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str22, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str31, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "eng" + "'", str32, "eng");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str43, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "eng" + "'", str44, "eng");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str55, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "eng" + "'", str62, "eng");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "en-CA" + "'", str64, "en-CA");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "Italian" + "'", str65, "Italian");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str68, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "CA" + "'", str69, "CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str72 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str72, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "eng" + "'", str73, "eng");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertNotNull(localeArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertTrue("'" + filteringMode82 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode82.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList83);
        org.junit.Assert.assertNotNull(localeList85);
        org.junit.Assert.assertTrue("'" + filteringMode86 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode86.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
    }

    @Test
    public void test0062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0062");
        java.util.Locale locale2 = new java.util.Locale("", "en");
        org.junit.Assert.assertEquals(locale2.toString(), "_EN");
    }

    @Test
    public void test0063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0063");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.util.Locale locale4 = java.util.Locale.ROOT;
        boolean boolean5 = languageRange1.equals((java.lang.Object) locale4);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0064");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.lang.String str4 = locale1.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en_CA" + "'", str4, "en_CA");
    }

    @Test
    public void test0065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0065");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.lang.String str8 = locale2.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en_CA" + "'", str8, "en_CA");
    }

    @Test
    public void test0066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0066");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        java.lang.Object obj5 = null;
        boolean boolean6 = languageRange1.equals(obj5);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0067");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getScript();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.lang.String str8 = locale0.getDisplayName(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "English (Canada)" + "'", str8, "English (Canada)");
    }

    @Test
    public void test0068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0068");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getUnicodeLocaleType("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: hi!");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0069");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getExtension('a');
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNull(str2);
    }

    @Test
    public void test0070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0070");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0071");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream18 = random9.longs((long) 'a', (long) 'a', (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test0072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0072");
        java.util.Locale locale1 = new java.util.Locale("en-CA");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "en-ca");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test0073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0073");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.removeUnicodeLocaleAttribute("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0074");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Options options10 = faker0.options();
        java.lang.String str12 = faker0.numerify("CA");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CA" + "'", str12, "CA");
    }

    @Test
    public void test0075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0075");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0076");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Finance finance12 = faker8.finance;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        java.lang.String str19 = faker13.letterify("en-CA");
        com.github.javafaker.Code code20 = null;
        faker13.code = code20;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.DateAndTime dateAndTime26 = faker22.dateAndTime;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        faker27.book = book35;
        faker22.book = book35;
        faker13.book = book35;
        faker8.book = book35;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en-CA" + "'", str19, "en-CA");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(dateAndTime26);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
    }

    @Test
    public void test0077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0077");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream8 = random7.doubles();
        java.util.stream.LongStream longStream11 = random7.longs((long) 0, 10L);
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale4, random7);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: ????? (??????) could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertNotNull(longStream11);
    }

    @Test
    public void test0078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0078");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.lang.String str8 = locale2.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en-CA" + "'", str8, "en-CA");
    }

    @Test
    public void test0079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0079");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Finance finance9 = faker0.finance();
        com.github.javafaker.Lorem lorem10 = faker0.lorem();
        com.github.javafaker.PhoneNumber phoneNumber11 = faker0.phoneNumber;
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.DateAndTime dateAndTime16 = faker12.dateAndTime;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.Book book25 = faker21.book();
        faker17.book = book25;
        faker12.book = book25;
        com.github.javafaker.Faker faker28 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService29 = faker28.randomService;
        java.lang.String str31 = faker28.bothify("");
        com.github.javafaker.Book book32 = faker28.book();
        com.github.javafaker.Number number33 = faker28.number();
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options35 = faker34.options;
        faker28.options = options35;
        faker12.options = options35;
        faker0.options = options35;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(lorem10);
        org.junit.Assert.assertNotNull(phoneNumber11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateAndTime16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(book25);
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(book32);
        org.junit.Assert.assertNotNull(number33);
        org.junit.Assert.assertNotNull(options35);
    }

    @Test
    public void test0080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0080");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        java.lang.String str8 = faker0.regexify("hi!");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "hi!" + "'", str8, "hi!");
    }

    @Test
    public void test0081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0081");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.DateAndTime dateAndTime2 = faker0.date();
        com.github.javafaker.Number number3 = faker0.number;
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Book book12 = faker8.book();
        faker4.book = book12;
        com.github.javafaker.App app14 = faker4.app();
        faker0.app = app14;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(dateAndTime2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(app14);
    }

    @Test
    public void test0082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0082");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Finance finance6 = faker0.finance();
        com.github.javafaker.Hacker hacker7 = null;
        faker0.hacker = hacker7;
        com.github.javafaker.Hacker hacker9 = faker0.hacker();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = faker0.resolve("en");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNull(hacker9);
    }

    @Test
    public void test0083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0083");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        java.lang.Class<?> wildcardClass17 = faker16.getClass();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0084");
        java.util.Locale locale3 = new java.util.Locale("Italian", "en-CA", "Korean");
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getDisplayLanguage(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "italian_EN-CA_Korean");
    }

    @Test
    public void test0085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0085");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0086");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.util.Locale locale17 = locale13.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str24 = locale18.getExtension('a');
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.lang.String str34 = locale30.getDisplayVariant();
        java.lang.String str36 = locale30.getExtension('a');
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale37.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale45.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.lang.String str54 = locale47.getDisplayLanguage(locale52);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getCountry();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getISO3Language();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale.setDefault(locale65);
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale3, locale4, locale7, locale10, locale12, locale17, locale18, locale29, locale30, locale37, locale43, locale45, locale47, locale55, locale59, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList69, filteringMode71);
        java.lang.String[] strArray78 = new java.lang.String[] { "en-CA", "eng", "en_US", "", "Korean" };
        java.util.ArrayList<java.lang.String> strList79 = new java.util.ArrayList<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList79, strArray78);
        java.util.List<java.lang.String> strList81 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList79);
        java.util.Locale locale83 = new java.util.Locale("en-CA");
        java.util.Set<java.lang.String> strSet84 = locale83.getUnicodeLocaleKeys();
        java.lang.String str85 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet84);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str15, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str27, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str39, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en-CA" + "'", str53, "en-CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italian" + "'", str54, "Italian");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "eng" + "'", str62, "eng");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(strList81);
        org.junit.Assert.assertEquals(locale83.toString(), "en-ca");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test0087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0087");
        java.util.Locale locale1 = new java.util.Locale("en");
        org.junit.Assert.assertEquals(locale1.toString(), "en");
    }

    @Test
    public void test0088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0088");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        faker6.book = book14;
        com.github.javafaker.Options options16 = faker6.options();
        faker0.options = options16;
        com.github.javafaker.service.RandomService randomService18 = faker0.randomService;
        java.lang.Class<?> wildcardClass19 = faker0.getClass();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test0089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0089");
        java.util.Locale locale1 = new java.util.Locale("italian");
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale1);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: italian could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "italian");
    }

    @Test
    public void test0090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0090");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService3 = faker2.randomService;
        java.lang.String str5 = faker2.bothify("");
        com.github.javafaker.DateAndTime dateAndTime6 = faker2.dateAndTime;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        faker7.book = book15;
        faker2.book = book15;
        faker0.book = book15;
        com.github.javafaker.Internet internet19 = null;
        faker0.internet = internet19;
        com.github.javafaker.Code code21 = faker0.code();
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(randomService3);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(code21);
    }

    @Test
    public void test0091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0091");
        java.util.Locale locale0 = null;
        java.util.Random random2 = new java.util.Random((long) 1);
        random2.setSeed((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale0, random2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0092");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.LongStream longStream6 = random1.longs((long) 1, (long) (byte) 1, (long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream8 = random1.doubles((long) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test0093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0093");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream18 = random9.doubles(0L, (double) ' ', (-0.4123569817688534d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test0094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0094");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.lang.String str6 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0095");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Canada");
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getLanguage();
        java.util.Random random7 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream8 = random7.longs();
        java.util.stream.DoubleStream doubleStream9 = random7.doubles();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale2, random7);
        boolean boolean11 = languageRange1.equals((java.lang.Object) faker10);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en" + "'", str5, "en");
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test0096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0096");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str6 = locale4.getUnicodeLocaleType("en");
        java.lang.String str7 = locale4.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en_CA" + "'", str7, "en_CA");
    }

    @Test
    public void test0097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0097");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setScript("Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Italian [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
    }

    @Test
    public void test0098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0098");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguage("en-CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: en-CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0099");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream14 = random1.doubles((double) '#', (double) 0.0f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
    }

    @Test
    public void test0100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0100");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.Object obj5 = locale4.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "en_CA");
    }

    @Test
    public void test0101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0101");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet1);
    }

    @Test
    public void test0102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0102");
        java.util.Locale locale3 = new java.util.Locale("", "eng", "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587");
    }

    @Test
    public void test0103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0103");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder3.setExtension('4', "en_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\u52a0\u62ff\u5927" + "'", str15, "\u52a0\u62ff\u5927");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0104");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        double double7 = random1.nextGaussian();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.8746788966462123d + "'", double7 == 0.8746788966462123d);
    }

    @Test
    public void test0105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0105");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale.setDefault(locale9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u52a0\u62ff\u5927" + "'", str11, "\u52a0\u62ff\u5927");
    }

    @Test
    public void test0106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0106");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles();
        java.util.stream.LongStream longStream5 = random1.longs((long) (byte) 1);
        double double6 = random1.nextGaussian();
        double double7 = random1.nextDouble();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.561581040188955d + "'", double6 == 1.561581040188955d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.20771484130971707d + "'", double7 == 0.20771484130971707d);
    }

    @Test
    public void test0107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0107");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.lang.String str5 = locale1.getDisplayName(locale3);
        java.lang.String str6 = locale1.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "coreano" + "'", str5, "coreano");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0108");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Code code8 = faker0.code;
        com.github.javafaker.Hacker hacker9 = faker0.hacker;
        java.lang.String str11 = faker0.numerify("");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(hacker9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0109");
        java.util.Locale locale2 = new java.util.Locale("en-CA", "\u82f1\u6587");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale2.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587");
    }

    @Test
    public void test0110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0110");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        // The following exception was thrown during execution in test generation
        try {
            int int15 = random1.nextInt((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
    }

    @Test
    public void test0111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0111");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.util.Locale locale4 = null;
        java.lang.String str5 = null; // flaky: locale0.getDisplayScript(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0112");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        java.util.Locale locale19 = new java.util.Locale("Italian", "", "English");
        java.lang.String str20 = locale4.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getDisplayVariant();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "English" + "'", str21, "English");
    }

    @Test
    public void test0113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0113");
        java.util.Locale locale2 = new java.util.Locale("English", "");
        org.junit.Assert.assertEquals(locale2.toString(), "english");
    }

    @Test
    public void test0114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0114");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Hacker hacker8 = null;
        faker0.hacker = hacker8;
        com.github.javafaker.Lorem lorem10 = faker0.lorem;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNull(lorem10);
    }

    @Test
    public void test0115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0115");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Business business9 = faker0.business;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        com.github.javafaker.Book book16 = faker14.book();
        com.github.javafaker.Finance finance17 = faker14.finance();
        com.github.javafaker.Book book18 = faker14.book();
        com.github.javafaker.Options options19 = faker14.options();
        com.github.javafaker.PhoneNumber phoneNumber20 = faker14.phoneNumber();
        faker10.phoneNumber = phoneNumber20;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        java.lang.String str27 = faker22.letterify("eng");
        com.github.javafaker.service.RandomService randomService28 = faker22.randomService;
        faker10.randomService = randomService28;
        faker0.randomService = randomService28;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(finance17);
        org.junit.Assert.assertNotNull(book18);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(phoneNumber20);
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertNotNull(randomService28);
    }

    @Test
    public void test0116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0116");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        java.util.Random random5 = new java.util.Random((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(locale1, random5);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: ????? (??????) could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test0117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0117");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        java.lang.String str6 = locale0.getExtension('a');
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Book book11 = faker7.book();
        com.github.javafaker.Number number12 = faker7.number();
        com.github.javafaker.Finance finance13 = faker7.finance;
        com.github.javafaker.Color color14 = faker7.color();
        boolean boolean15 = locale0.equals((java.lang.Object) color14);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNotNull(number12);
        org.junit.Assert.assertNotNull(finance13);
        org.junit.Assert.assertNotNull(color14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test0118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0118");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Options options10 = faker0.options();
        com.github.javafaker.App app11 = faker0.app;
        com.github.javafaker.Finance finance12 = faker0.finance();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.DateAndTime dateAndTime17 = faker13.dateAndTime;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.DateAndTime dateAndTime22 = faker18.dateAndTime;
        faker13.dateAndTime = dateAndTime22;
        com.github.javafaker.Code code24 = null;
        faker13.code = code24;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.DateAndTime dateAndTime30 = faker26.dateAndTime;
        com.github.javafaker.Lorem lorem31 = null;
        faker26.lorem = lorem31;
        com.github.javafaker.Code code33 = faker26.code();
        faker13.code = code33;
        faker0.code = code33;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(dateAndTime17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(dateAndTime22);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(dateAndTime30);
        org.junit.Assert.assertNotNull(code33);
    }

    @Test
    public void test0119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0119");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        java.util.Locale locale5 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Set<java.lang.Character> charSet6 = locale5.getExtensionKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setLocale(locale5);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet6);
    }

    @Test
    public void test0120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0120");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("Korean");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setScript("ita");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ita [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0121");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = locale0.getUnicodeLocaleType("Canada");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: Canada");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "en-CA" + "'", str5, "en-CA");
    }

    @Test
    public void test0122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0122");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream15 = random1.ints((long) (byte) 1, (int) (short) 10, (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
    }

    @Test
    public void test0123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0123");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        double double2 = languageRange1.getWeight();
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder6 = builder3.setLocale(locale4);
        java.util.Locale.Builder builder8 = builder6.removeUnicodeLocaleAttribute("Canada");
        boolean boolean9 = languageRange1.equals((java.lang.Object) builder8);
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test0124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0124");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale0.getUnicodeLocaleType("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ??");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0125");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.service.RandomService randomService18 = faker16.randomService;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService18);
    }

    @Test
    public void test0126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0126");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "IT" + "'", str1, "IT");
    }

    @Test
    public void test0127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0127");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0128");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Canada" + "'", str4, "Canada");
    }

    @Test
    public void test0129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0129");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder0.setExtension('4', "Canada");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0130");
        java.util.Locale locale2 = new java.util.Locale("ita", "English (Canada)");
        boolean boolean3 = locale2.hasExtensions();
        org.junit.Assert.assertEquals(locale2.toString(), "ita_ENGLISH (CANADA)");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0131");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        long long8 = random1.nextLong();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-4972683369271453960L) + "'", long8 == (-4972683369271453960L));
    }

    @Test
    public void test0132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0132");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker8.phoneNumber;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Number number16 = faker11.number();
        com.github.javafaker.Lorem lorem17 = null;
        faker11.lorem = lorem17;
        com.github.javafaker.Business business19 = faker11.business();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.DateAndTime dateAndTime24 = faker20.dateAndTime;
        com.github.javafaker.Lorem lorem25 = null;
        faker20.lorem = lorem25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Lorem lorem31 = faker27.lorem();
        faker20.lorem = lorem31;
        faker11.lorem = lorem31;
        faker8.lorem = lorem31;
        com.github.javafaker.Name name35 = faker8.name;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(number16);
        org.junit.Assert.assertNotNull(business19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateAndTime24);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(lorem31);
        org.junit.Assert.assertNotNull(name35);
    }

    @Test
    public void test0133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0133");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setRegion("Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Italian [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0134");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder3.setScript("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0135");
        java.util.Locale locale1 = new java.util.Locale("CAN");
        org.junit.Assert.assertEquals(locale1.toString(), "can");
    }

    @Test
    public void test0136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0136");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setRegion("\u52a0\u62ff\u5927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0137");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        com.github.javafaker.DateAndTime dateAndTime15 = faker14.date();
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService17 = faker16.randomService;
        java.lang.String str19 = faker16.bothify("");
        com.github.javafaker.DateAndTime dateAndTime20 = faker16.dateAndTime;
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService22 = faker21.randomService;
        java.lang.String str24 = faker21.bothify("");
        com.github.javafaker.DateAndTime dateAndTime25 = faker21.dateAndTime;
        faker16.dateAndTime = dateAndTime25;
        com.github.javafaker.Code code27 = null;
        faker16.code = code27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.DateAndTime dateAndTime33 = faker29.dateAndTime;
        com.github.javafaker.Lorem lorem34 = null;
        faker29.lorem = lorem34;
        com.github.javafaker.Code code36 = faker29.code();
        faker16.code = code36;
        com.github.javafaker.Company company38 = faker16.company();
        faker14.company = company38;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(dateAndTime20);
        org.junit.Assert.assertNotNull(randomService22);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(dateAndTime25);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(code36);
        org.junit.Assert.assertNotNull(company38);
    }

    @Test
    public void test0138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0138");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0139");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale.Category category3 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category3, locale4);
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.util.Locale.setDefault(category3, locale6);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        boolean boolean14 = locale12.hasExtensions();
        java.util.Locale locale15 = locale12.stripExtensions();
        java.util.Locale.setDefault(category3, locale12);
        java.lang.String str17 = locale1.getDisplayCountry(locale12);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertTrue("'" + category3 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category3.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0140");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale6 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.removeUnicodeLocaleAttribute("en_US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en_US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
    }

    @Test
    public void test0141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0141");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        com.github.javafaker.Company company16 = faker0.company();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(company16);
    }

    @Test
    public void test0142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0142");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        int int6 = random1.nextInt();
        java.util.stream.IntStream intStream9 = random1.ints((int) (byte) 1, (int) (short) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream13 = random1.ints((long) (byte) 1, (int) (byte) 10, 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1761283695 + "'", int6 == 1761283695);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test0143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0143");
        java.util.Locale locale3 = new java.util.Locale("Canada", "can", "Italian");
        org.junit.Assert.assertEquals(locale3.toString(), "canada_CAN_Italian");
    }

    @Test
    public void test0144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0144");
        java.util.Locale locale1 = new java.util.Locale("eng");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.lang.String str7 = locale3.getDisplayVariant();
        java.lang.String str9 = locale3.getExtension('a');
        java.lang.String str10 = locale1.getDisplayScript(locale3);
        java.lang.String str12 = locale1.getExtension('u');
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test0145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0145");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Canada");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test0146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0146");
        java.util.Locale locale0 = java.util.Locale.US;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str2 = locale0.getUnicodeLocaleType("CAN");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: CAN");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
    }

    @Test
    public void test0147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0147");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.util.Locale locale8 = java.util.Locale.ENGLISH;
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getDisplayVariant();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.util.Locale locale22 = locale18.stripExtensions();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.lang.String str27 = locale23.getDisplayVariant();
        java.lang.String str29 = locale23.getExtension('a');
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.lang.String str39 = locale35.getDisplayVariant();
        java.lang.String str41 = locale35.getExtension('a');
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = locale42.getISO3Language();
        java.lang.String str46 = locale42.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.util.Locale locale50 = java.util.Locale.CANADA;
        java.lang.String str51 = locale50.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.ITALIAN;
        java.util.Locale locale53 = java.util.Locale.CANADA;
        java.util.Locale locale54 = java.util.Locale.KOREAN;
        java.lang.String str55 = locale53.getDisplayName(locale54);
        java.lang.String str56 = locale53.getISO3Language();
        java.util.Locale locale57 = locale53.stripExtensions();
        java.lang.String str58 = locale57.toLanguageTag();
        java.lang.String str59 = locale52.getDisplayLanguage(locale57);
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getCountry();
        java.util.Locale locale64 = java.util.Locale.CANADA;
        java.util.Locale locale65 = java.util.Locale.KOREAN;
        java.lang.String str66 = locale64.getDisplayName(locale65);
        java.lang.String str67 = locale64.getISO3Language();
        java.util.Locale locale68 = locale64.stripExtensions();
        java.util.Locale locale69 = java.util.Locale.JAPAN;
        java.util.Locale locale70 = java.util.Locale.CANADA;
        java.lang.String str71 = locale70.getDisplayVariant();
        java.util.Locale.setDefault(locale70);
        java.util.Locale[] localeArray73 = new java.util.Locale[] { locale8, locale9, locale12, locale15, locale17, locale22, locale23, locale34, locale35, locale42, locale48, locale50, locale52, locale60, locale64, locale69, locale70 };
        java.util.ArrayList<java.util.Locale> localeList74 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean75 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList74, localeArray73);
        java.util.Locale.FilteringMode filteringMode76 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList77 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.util.Locale>) localeList74, filteringMode76);
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList77);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str16, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNull(str29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "eng" + "'", str45, "eng");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str49, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str55 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str55, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "eng" + "'", str56, "eng");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "en-CA" + "'", str58, "en-CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Italian" + "'", str59, "Italian");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str62, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "CA" + "'", str63, "CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str66, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "eng" + "'", str67, "eng");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertNotNull(localeArray73);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + true + "'", boolean75 == true);
        org.junit.Assert.assertTrue("'" + filteringMode76 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode76.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList77);
        org.junit.Assert.assertNotNull(localeList78);
    }

    @Test
    public void test0148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0148");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale2 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale4);
        java.util.Set<java.lang.Character> charSet6 = locale4.getExtensionKeys();
        java.lang.String str7 = locale4.toString();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0149");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder3.removeUnicodeLocaleAttribute("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0150");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Random random8 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream9 = random8.longs();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale6, random8);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: english could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(longStream9);
    }

    @Test
    public void test0151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0151");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.util.stream.IntStream intStream17 = random9.ints((int) (short) -1, 0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream20 = random9.ints(0, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(intStream17);
    }

    @Test
    public void test0152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0152");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0153");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("cinese (Cina)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0154");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        boolean boolean5 = locale0.hasExtensions();
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale6.getDisplayCountry();
        java.lang.String str9 = locale0.getDisplayVariant(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
    }

    @Test
    public void test0155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0155");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder7.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.setLanguageTag("hi!");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
    }

    @Test
    public void test0156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0156");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder3.setLanguageTag("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0157");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setLocale(locale7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0158");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getLanguage();
        java.lang.Object obj3 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertNotNull(obj3);
        org.junit.Assert.assertEquals(obj3.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj3), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj3), "en_CA");
    }

    @Test
    public void test0159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0159");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder2 = builder0.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0160");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = faker8.resolve("Italian");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
    }

    @Test
    public void test0161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0161");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=?????(??????)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0162");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setExtension('u', "English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0163");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        boolean boolean2 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
    }

    @Test
    public void test0164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0164");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        java.util.stream.LongStream longStream16 = random9.longs((long) (byte) 0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Korean" + "'", str1, "Korean");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(longStream16);
    }

    @Test
    public void test0165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0165");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=cinese (cina)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0166");
        java.util.Locale locale1 = new java.util.Locale("hi!");
        org.junit.Assert.assertEquals(locale1.toString(), "hi!");
    }

    @Test
    public void test0167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0167");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Book book22 = faker18.book();
        faker14.book = book22;
        faker9.book = book22;
        faker0.book = book22;
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.Book book30 = faker26.book();
        com.github.javafaker.Number number31 = faker26.number();
        faker0.number = number31;
        java.util.Locale locale33 = java.util.Locale.ITALIAN;
        java.util.Locale locale34 = java.util.Locale.CANADA;
        java.util.Locale locale35 = java.util.Locale.KOREAN;
        java.lang.String str36 = locale34.getDisplayName(locale35);
        java.lang.String str37 = locale34.getISO3Language();
        java.util.Locale locale38 = locale34.stripExtensions();
        java.lang.String str39 = locale38.toLanguageTag();
        java.lang.String str40 = locale33.getDisplayLanguage(locale38);
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker(locale33);
        com.github.javafaker.Company company42 = faker41.company();
        faker0.company = company42;
        com.github.javafaker.Faker faker44 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService45 = faker44.randomService;
        java.lang.String str47 = faker44.bothify("");
        com.github.javafaker.Book book48 = faker44.book();
        java.lang.String str50 = faker44.regexify("eng");
        com.github.javafaker.service.RandomService randomService51 = faker44.randomService;
        com.github.javafaker.Code code52 = faker44.code;
        com.github.javafaker.Hacker hacker53 = faker44.hacker;
        faker0.hacker = hacker53;
        com.github.javafaker.Code code55 = faker0.code;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(number31);
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str36 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str36, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "eng" + "'", str37, "eng");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "en-CA" + "'", str39, "en-CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertNotNull(company42);
        org.junit.Assert.assertNotNull(randomService45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(book48);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertNotNull(randomService51);
        org.junit.Assert.assertNotNull(code52);
        org.junit.Assert.assertNotNull(hacker53);
        org.junit.Assert.assertNull(code55);
    }

    @Test
    public void test0168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0168");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str4 = locale0.getCountry();
        java.lang.String str5 = locale0.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test0169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0169");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale8 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category7, locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.util.Locale.setDefault(category7, locale10);
        java.lang.String str16 = locale6.getDisplayCountry(locale10);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
    }

    @Test
    public void test0170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0170");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.lang.String str7 = locale6.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "english" + "'", str7, "english");
    }

    @Test
    public void test0171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0171");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("cinese (Cina)", "it");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0172");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Address address5 = faker0.address;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.DateAndTime dateAndTime10 = faker6.dateAndTime;
        com.github.javafaker.Lorem lorem11 = null;
        faker6.lorem = lorem11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        com.github.javafaker.Book book15 = faker13.book();
        com.github.javafaker.Finance finance16 = faker13.finance();
        com.github.javafaker.Lorem lorem17 = faker13.lorem();
        faker6.lorem = lorem17;
        faker0.lorem = lorem17;
        com.github.javafaker.Name name20 = faker0.name;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(address5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(finance16);
        org.junit.Assert.assertNotNull(lorem17);
        org.junit.Assert.assertNotNull(name20);
    }

    @Test
    public void test0173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0173");
        java.util.Locale locale2 = new java.util.Locale("CAN", "CAN");
        org.junit.Assert.assertEquals(locale2.toString(), "can_CAN");
    }

    @Test
    public void test0174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0174");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("can", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ENGLISH;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.lang.String str8 = locale7.getDisplayVariant();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale locale20 = locale16.stripExtensions();
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = locale21.getISO3Language();
        java.lang.String str25 = locale21.getDisplayVariant();
        java.lang.String str27 = locale21.getExtension('a');
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.util.Locale locale32 = locale28.stripExtensions();
        java.util.Locale locale33 = java.util.Locale.CANADA;
        java.util.Locale locale34 = java.util.Locale.KOREAN;
        java.lang.String str35 = locale33.getDisplayName(locale34);
        java.lang.String str36 = locale33.getISO3Language();
        java.lang.String str37 = locale33.getDisplayVariant();
        java.lang.String str39 = locale33.getExtension('a');
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale40.getDisplayVariant();
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.lang.String str49 = locale48.getDisplayVariant();
        java.util.Locale locale50 = java.util.Locale.ITALIAN;
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.util.Locale locale52 = java.util.Locale.KOREAN;
        java.lang.String str53 = locale51.getDisplayName(locale52);
        java.lang.String str54 = locale51.getISO3Language();
        java.util.Locale locale55 = locale51.stripExtensions();
        java.lang.String str56 = locale55.toLanguageTag();
        java.lang.String str57 = locale50.getDisplayLanguage(locale55);
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayName(locale59);
        java.lang.String str61 = locale58.getCountry();
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayName(locale63);
        java.lang.String str65 = locale62.getISO3Language();
        java.util.Locale locale66 = locale62.stripExtensions();
        java.util.Locale locale67 = java.util.Locale.JAPAN;
        java.util.Locale locale68 = java.util.Locale.CANADA;
        java.lang.String str69 = locale68.getDisplayVariant();
        java.util.Locale.setDefault(locale68);
        java.util.Locale[] localeArray71 = new java.util.Locale[] { locale6, locale7, locale10, locale13, locale15, locale20, locale21, locale32, locale33, locale40, locale46, locale48, locale50, locale58, locale62, locale67, locale68 };
        java.util.ArrayList<java.util.Locale> localeList72 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean73 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList72, localeArray71);
        java.util.Locale.FilteringMode filteringMode74 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList75 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList72, filteringMode74);
        java.lang.String[] strArray81 = new java.lang.String[] { "en-CA", "eng", "en_US", "", "Korean" };
        java.util.ArrayList<java.lang.String> strList82 = new java.util.ArrayList<java.lang.String>();
        boolean boolean83 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList82, strArray81);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList82);
        java.lang.String str85 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList84);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str18, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str23 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str23, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "eng" + "'", str24, "eng");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str30, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "eng" + "'", str36, "eng");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str47 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str47, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "it");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str53, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "eng" + "'", str54, "eng");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "en-CA" + "'", str56, "en-CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italian" + "'", str57, "Italian");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str60, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "CA" + "'", str61, "CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str64 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str64, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "eng" + "'", str65, "eng");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(localeArray71);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + true + "'", boolean73 == true);
        org.junit.Assert.assertTrue("'" + filteringMode74 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode74.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList75);
        org.junit.Assert.assertNotNull(strArray81);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + true + "'", boolean83 == true);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNull(str85);
    }

    @Test
    public void test0175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0175");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Finance finance12 = faker0.finance();
        com.github.javafaker.Lorem lorem13 = faker0.lorem;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(lorem13);
    }

    @Test
    public void test0176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0176");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale2.getLanguage();
        java.util.Locale.Builder builder5 = new java.util.Locale.Builder();
        java.util.Locale locale6 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getCountry();
        java.lang.String str13 = locale9.getScript();
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        java.util.Locale locale18 = locale14.stripExtensions();
        java.lang.String str19 = locale9.getDisplayScript(locale18);
        java.lang.String str20 = locale18.getDisplayCountry();
        java.util.Locale.Builder builder21 = builder8.setLocale(locale18);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale24 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getCountry();
        java.lang.String str31 = locale27.getScript();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = locale32.stripExtensions();
        java.lang.String str37 = locale27.getDisplayScript(locale36);
        java.lang.String str38 = locale26.getDisplayScript(locale27);
        java.lang.String str39 = locale22.getDisplayScript(locale27);
        java.lang.String str40 = locale18.getDisplayName(locale22);
        java.lang.String str41 = locale2.getDisplayLanguage(locale18);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = locale18.getUnicodeLocaleType("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: English (Canada)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "CA" + "'", str12, "CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str16, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Canada" + "'", str20, "Canada");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals(locale24.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CA" + "'", str30, "CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0177");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder6 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("ko");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ko [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0178");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test0179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0179");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "it" + "'", str1, "it");
    }

    @Test
    public void test0180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0180");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguageTag("cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: cinese (Cina) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
    }

    @Test
    public void test0181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0181");
        java.util.Locale locale2 = new java.util.Locale("", "Italian");
        java.lang.String str3 = locale2.getVariant();
        java.util.Random random4 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale2, random4);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: _ITALIAN could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_ITALIAN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0182");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        com.github.javafaker.Internet internet5 = faker4.internet();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        com.github.javafaker.Book book8 = faker6.book();
        com.github.javafaker.Finance finance9 = faker6.finance();
        com.github.javafaker.Book book10 = faker6.book();
        com.github.javafaker.Name name11 = faker6.name;
        faker4.name = name11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        faker13.book = book21;
        com.github.javafaker.Address address23 = faker13.address();
        com.github.javafaker.Hacker hacker24 = faker13.hacker();
        faker4.hacker = hacker24;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(book10);
        org.junit.Assert.assertNotNull(name11);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(address23);
        org.junit.Assert.assertNotNull(hacker24);
    }

    @Test
    public void test0183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0183");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream10 = random2.doubles((long) ' ', 0.20771484130971707d, 0.0d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test0184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0184");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("English (Canada)", (double) 0.73043025f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=english (canada)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder3.addUnicodeLocaleAttribute("\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0186");
        java.util.Random random1 = new java.util.Random((long) (byte) 10);
        float float2 = random1.nextFloat();
        boolean boolean3 = random1.nextBoolean();
        java.util.stream.LongStream longStream6 = random1.longs((long) (byte) 1, (long) (short) 100);
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.73043025f + "'", float2 == 0.73043025f);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test0187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0187");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.lang.String str9 = locale8.getDisplayVariant();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale8);
        com.github.javafaker.Finance finance11 = faker10.finance();
        com.github.javafaker.Code code12 = faker10.code;
        faker0.code = code12;
        com.github.javafaker.Options options14 = faker0.options;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = faker0.resolve("eng");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(finance11);
        org.junit.Assert.assertNotNull(code12);
        org.junit.Assert.assertNotNull(options14);
    }

    @Test
    public void test0188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0188");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.Class<?> wildcardClass1 = locale0.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(wildcardClass1);
    }

    @Test
    public void test0189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0189");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        java.util.Locale locale16 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str17 = locale4.getDisplayLanguage(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = locale16.getDisplayName();
        java.lang.String str20 = locale16.getISO3Language();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\u82f1\u6587" + "'", str17, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese (China)" + "'", str19, "Chinese (China)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "zho" + "'", str20, "zho");
    }

    @Test
    public void test0190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0190");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale7.getDisplayLanguage(locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = locale19.getDisplayName();
        boolean boolean23 = locale0.equals((java.lang.Object) locale19);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u82f1\u6587" + "'", str20, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "cinese (Cina)" + "'", str22, "cinese (Cina)");
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test0191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0191");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        com.github.javafaker.Address address15 = faker5.address();
        faker0.address = address15;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name18 = faker17.name();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name20 = faker19.name();
        faker17.name = name20;
        faker0.name = name20;
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance24 = faker23.finance;
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.DateAndTime dateAndTime29 = faker25.dateAndTime;
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService31 = faker30.randomService;
        java.lang.String str33 = faker30.bothify("");
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.Book book38 = faker34.book();
        faker30.book = book38;
        faker25.book = book38;
        faker23.book = book38;
        faker0.book = book38;
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(name18);
        org.junit.Assert.assertNotNull(name20);
        org.junit.Assert.assertNotNull(finance24);
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(dateAndTime29);
        org.junit.Assert.assertNotNull(randomService31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(book38);
    }

    @Test
    public void test0192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0192");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("en_US", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=en_us");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0193");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.lang.String str8 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "en_CA" + "'", str8, "en_CA");
    }

    @Test
    public void test0194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0194");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Name name12 = faker0.name();
        com.github.javafaker.Finance finance13 = faker0.finance();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(name12);
        org.junit.Assert.assertNotNull(finance13);
    }

    @Test
    public void test0195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0195");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.IntStream intStream4 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) (byte) -1, 10L);
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test0196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0196");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setLanguage("en-CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: en-CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0197");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        java.lang.String str2 = faker0.bothify("Korean");
        com.github.javafaker.Name name3 = faker0.name();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Korean" + "'", str2, "Korean");
        org.junit.Assert.assertNotNull(name3);
    }

    @Test
    public void test0198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0198");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Code code8 = faker0.code;
        com.github.javafaker.Name name9 = faker0.name;
        com.github.javafaker.Lorem lorem10 = faker0.lorem();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = faker0.resolve("can");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(name9);
        org.junit.Assert.assertNotNull(lorem10);
    }

    @Test
    public void test0199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguage("Korean");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.setScript("en_US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: en_US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0200");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Canada", strMap1);
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale19 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str20 = locale7.getDisplayLanguage(locale19);
        java.util.Set<java.lang.String> strSet21 = locale19.getUnicodeLocaleKeys();
        java.lang.String str22 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet21);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u82f1\u6587" + "'", str20, "\u82f1\u6587");
        org.junit.Assert.assertNotNull(strSet21);
        org.junit.Assert.assertNull(str22);
    }

    @Test
    public void test0201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0201");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.Business business10 = faker8.business();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale11.getDisplayLanguage(locale16);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale11);
        com.github.javafaker.Address address20 = faker19.address();
        faker8.address = address20;
        com.github.javafaker.PhoneNumber phoneNumber22 = faker8.phoneNumber();
        java.util.Locale locale24 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale25 = locale24.stripExtensions();
        java.util.Locale locale26 = locale25.stripExtensions();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getCountry();
        java.lang.String str31 = locale27.getScript();
        java.util.Locale locale32 = java.util.Locale.CANADA;
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.lang.String str35 = locale32.getISO3Language();
        java.util.Locale locale36 = locale32.stripExtensions();
        java.lang.String str37 = locale27.getDisplayScript(locale36);
        java.lang.String str38 = locale26.getDisplayScript(locale27);
        com.github.javafaker.Faker faker39 = new com.github.javafaker.Faker(locale27);
        com.github.javafaker.Color color40 = faker39.color;
        com.github.javafaker.Hacker hacker41 = faker39.hacker;
        faker8.hacker = hacker41;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-CA" + "'", str17, "en-CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertNotNull(address20);
        org.junit.Assert.assertNotNull(phoneNumber22);
        org.junit.Assert.assertEquals(locale24.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "CA" + "'", str30, "CA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str34 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str34, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "eng" + "'", str35, "eng");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertNotNull(hacker41);
    }

    @Test
    public void test0202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0202");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.Business business9 = faker8.business();
        com.github.javafaker.Number number10 = faker8.number();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(number10);
    }

    @Test
    public void test0203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0203");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder0.setVariant("de");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: de [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0204");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setLanguage("en_US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: en_US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
    }

    @Test
    public void test0205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0205");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Name name5 = faker0.name;
        com.github.javafaker.Address address6 = faker0.address();
        com.github.javafaker.Business business7 = faker0.business();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(name5);
        org.junit.Assert.assertNotNull(address6);
        org.junit.Assert.assertNotNull(business7);
    }

    @Test
    public void test0206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0206");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.setLanguageTag("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test0207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0207");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.setDefault(locale1);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0208");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getCountry();
        java.lang.String str26 = locale22.getScript();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.lang.String str32 = locale22.getDisplayScript(locale31);
        java.lang.String str33 = locale21.getDisplayScript(locale22);
        java.lang.String str34 = locale17.getDisplayScript(locale22);
        java.lang.String str35 = locale13.getDisplayName(locale17);
        java.util.Set<java.lang.Character> charSet36 = locale17.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale19.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet36);
    }

    @Test
    public void test0209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0209");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Address address10 = faker8.address();
        java.lang.String str12 = faker8.numerify("zh");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "zh" + "'", str12, "zh");
    }

    @Test
    public void test0210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0210");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        boolean boolean14 = random1.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream18 = random1.doubles((long) (byte) -1, (double) 0.43956196f, (double) 1853403699951111791L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test0211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0211");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Hacker hacker10 = faker8.hacker();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(hacker10);
    }

    @Test
    public void test0212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0212");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.lang.String str1 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0213");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Finance finance12 = faker8.finance;
        com.github.javafaker.PhoneNumber phoneNumber13 = faker8.phoneNumber();
        java.lang.Class<?> wildcardClass14 = phoneNumber13.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(phoneNumber13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0214");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.LongStream longStream13 = random1.longs((long) ' ');
        long long14 = random1.nextLong();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3831662765844904176L + "'", long14 == 3831662765844904176L);
    }

    @Test
    public void test0215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0215");
        java.util.Locale locale3 = new java.util.Locale("de", "\u82f1\u6587", "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587\u82f1\u6587");
    }

    @Test
    public void test0216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0216");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
    }

    @Test
    public void test0217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0217");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        com.github.javafaker.Finance finance17 = faker12.finance();
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        java.lang.String str21 = faker18.bothify("");
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.Book book26 = faker22.book();
        faker18.book = book26;
        com.github.javafaker.Options options28 = faker18.options();
        faker12.options = options28;
        faker8.options = options28;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        com.github.javafaker.DateAndTime dateAndTime33 = faker31.date();
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService35 = faker34.randomService;
        java.lang.String str37 = faker34.bothify("");
        com.github.javafaker.DateAndTime dateAndTime38 = faker34.dateAndTime;
        com.github.javafaker.Faker faker39 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService40 = faker39.randomService;
        com.github.javafaker.Book book41 = faker39.book();
        faker34.book = book41;
        com.github.javafaker.Business business43 = faker34.business;
        faker31.business = business43;
        faker8.business = business43;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(finance17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(book26);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertNotNull(dateAndTime33);
        org.junit.Assert.assertNotNull(randomService35);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(dateAndTime38);
        org.junit.Assert.assertNotNull(randomService40);
        org.junit.Assert.assertNotNull(book41);
        org.junit.Assert.assertNotNull(business43);
    }

    @Test
    public void test0218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0218");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder2.setExtension('4', "IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0219");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
    }

    @Test
    public void test0220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0220");
        java.util.Locale locale0 = java.util.Locale.KOREA;
        java.lang.String str1 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
    }

    @Test
    public void test0221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0221");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str6 = locale4.getUnicodeLocaleType("en");
        java.lang.String str7 = locale4.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test0222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0222");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.IntStream intStream4 = random1.ints();
        long long5 = random1.nextLong();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
    }

    @Test
    public void test0223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0223");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setExtension('4', "IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0224");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        java.util.Locale locale7 = java.util.Locale.CHINA;
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream10 = random9.longs();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(locale7, random9);
        com.github.javafaker.Internet internet12 = faker11.internet();
        faker0.internet = internet12;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = faker0.resolve("CA");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertNotNull(internet12);
    }

    @Test
    public void test0225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0225");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles((double) (-1L), (double) 0.73043025f);
        long long5 = random1.nextLong();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream8 = random1.doubles((double) '4', 1.561581040188955d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
    }

    @Test
    public void test0226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0226");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.Internet internet7 = faker0.internet;
        com.github.javafaker.DateAndTime dateAndTime8 = faker0.date();
        com.github.javafaker.Address address9 = faker0.address;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(internet7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertNotNull(address9);
    }

    @Test
    public void test0227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0227");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
    }

    @Test
    public void test0228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0228");
        java.util.Locale locale2 = new java.util.Locale("", "Italian");
        java.lang.String str3 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "_ITALIAN");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITALIAN" + "'", str3, "ITALIAN");
    }

    @Test
    public void test0229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0229");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale6 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder3.setScript("Italien");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Italien [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
    }

    @Test
    public void test0230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0230");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream14 = random13.longs();
        int int16 = random13.nextInt((int) 'u');
        random13.setSeed((long) (byte) 10);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random13.nextBytes(byteArray30);
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale0, random13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream37 = random13.ints(100, (int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, 122, -3, -70, -8, 22]");
    }

    @Test
    public void test0231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0231");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        java.lang.String str16 = faker14.bothify("Italian");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.DateAndTime dateAndTime21 = faker17.dateAndTime;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.Book book30 = faker26.book();
        faker22.book = book30;
        faker17.book = book30;
        com.github.javafaker.Business business33 = faker17.business();
        faker14.business = business33;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateAndTime21);
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(business33);
    }

    @Test
    public void test0232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0232");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ko", 1.561581040188955d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.561581040188955");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0233");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Book book10 = faker6.book();
        java.lang.String str12 = faker6.regexify("eng");
        com.github.javafaker.service.RandomService randomService13 = faker6.randomService;
        com.github.javafaker.Code code14 = faker6.code;
        com.github.javafaker.Hacker hacker15 = faker6.hacker;
        faker0.hacker = hacker15;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business18 = null;
        faker17.business = business18;
        com.github.javafaker.Color color20 = null;
        faker17.color = color20;
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService23 = faker22.randomService;
        java.lang.String str25 = faker22.bothify("");
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService27 = faker26.randomService;
        java.lang.String str29 = faker26.bothify("");
        com.github.javafaker.Book book30 = faker26.book();
        faker22.book = book30;
        com.github.javafaker.Address address32 = faker22.address();
        faker17.address = address32;
        faker0.address = address32;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(book10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertNotNull(code14);
        org.junit.Assert.assertNotNull(hacker15);
        org.junit.Assert.assertNotNull(randomService23);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(randomService27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(book30);
        org.junit.Assert.assertNotNull(address32);
    }

    @Test
    public void test0234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0234");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\uc601\uc5b4\uce90\ub098\ub2e4)", (double) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=32.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0235");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random1);
        java.util.stream.DoubleStream doubleStream6 = random1.doubles((double) 0L, (double) ' ');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream9 = random1.ints((int) (short) 100, (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test0236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0236");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        java.util.stream.IntStream intStream9 = random1.ints((long) 1761283695);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test0237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0237");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream4 = random1.ints((-4972683369271453960L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test0238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0238");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getLanguage();
        java.lang.String str3 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "en" + "'", str2, "en");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CAN" + "'", str3, "CAN");
    }

    @Test
    public void test0239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0239");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        long long9 = random2.nextLong();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3831662765844904176L + "'", long9 == 3831662765844904176L);
    }

    @Test
    public void test0240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0240");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("en_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en_CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0241");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str2 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
    }

    @Test
    public void test0242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0242");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("eng");
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        java.util.Locale.Builder builder10 = builder9.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder9.setExtension(' ', "Italien");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0243");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Germany");
    }

    @Test
    public void test0244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0244");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        double double14 = random1.nextGaussian();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream18 = random1.doubles((long) (-1155869325), (double) 10L, 0.20771484130971707d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.3403793767878887d) + "'", double14 == (-1.3403793767878887d));
    }

    @Test
    public void test0245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0245");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles((double) (-1L), (double) 0.73043025f);
        long long5 = random1.nextLong();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = random1.doubles((-5128016860359238732L), (double) (-1155869325), (double) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
    }

    @Test
    public void test0246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0246");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream18 = random10.longs((long) 'a', (long) 'a', (-1L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
    }

    @Test
    public void test0247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0247");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder3.setExtension('#', "Korean");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: # [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
    }

    @Test
    public void test0248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0248");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        com.github.javafaker.Hacker hacker2 = faker0.hacker;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(hacker2);
    }

    @Test
    public void test0249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0249");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        com.github.javafaker.Business business16 = faker0.business();
        com.github.javafaker.Company company17 = faker0.company();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(business16);
        org.junit.Assert.assertNotNull(company17);
    }

    @Test
    public void test0250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0250");
        java.util.Locale locale1 = new java.util.Locale("eng");
        java.lang.String str3 = locale1.getExtension('u');
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale1);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: eng could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertNull(str3);
    }

    @Test
    public void test0251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0251");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        byte[] byteArray14 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random6.nextBytes(byteArray14);
        double double16 = random6.nextGaussian();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale4, random6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str19 = faker17.resolve("Canada");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(byteArray14);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.4123569817688534d) + "'", double16 == (-0.4123569817688534d));
    }

    @Test
    public void test0252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0252");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder3.removeUnicodeLocaleAttribute("zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: zh [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
    }

    @Test
    public void test0253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0253");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        java.lang.String str16 = faker14.bothify("Italian");
        com.github.javafaker.Business business17 = faker14.business();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertNotNull(business17);
    }

    @Test
    public void test0254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0254");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale20 = locale19.stripExtensions();
        java.util.Locale locale21 = locale20.stripExtensions();
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale22.getCountry();
        java.lang.String str26 = locale22.getScript();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.lang.String str30 = locale27.getISO3Language();
        java.util.Locale locale31 = locale27.stripExtensions();
        java.lang.String str32 = locale22.getDisplayScript(locale31);
        java.lang.String str33 = locale21.getDisplayScript(locale22);
        java.lang.String str34 = locale17.getDisplayScript(locale22);
        java.lang.String str35 = locale13.getDisplayName(locale17);
        java.lang.String str36 = locale17.getVariant();
        java.lang.String str37 = locale17.getDisplayCountry();
        java.lang.String str38 = locale17.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
        org.junit.Assert.assertEquals(locale19.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "CA" + "'", str25, "CA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "eng" + "'", str30, "eng");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str35, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test0255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0255");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setVariant("\u52a0\u62ff\u5927");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0256");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLocale(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0257");
        java.util.Locale locale1 = new java.util.Locale("en-CA");
        java.lang.String str2 = locale1.getDisplayScript();
        java.util.Set<java.lang.Character> charSet3 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "en-ca");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test0258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0258");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Finance finance4 = faker0.finance;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(finance4);
    }

    @Test
    public void test0259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0259");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 'x');
        org.junit.Assert.assertNotNull(doubleStream2);
    }

    @Test
    public void test0260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0260");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Address address10 = faker0.address();
        com.github.javafaker.DateAndTime dateAndTime11 = faker0.date();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.DateAndTime dateAndTime16 = faker12.dateAndTime;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.DateAndTime dateAndTime21 = faker17.dateAndTime;
        faker12.dateAndTime = dateAndTime21;
        com.github.javafaker.Code code23 = null;
        faker12.code = code23;
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.DateAndTime dateAndTime29 = faker25.dateAndTime;
        com.github.javafaker.Lorem lorem30 = null;
        faker25.lorem = lorem30;
        com.github.javafaker.Code code32 = faker25.code();
        faker12.code = code32;
        com.github.javafaker.Company company34 = faker12.company();
        faker0.company = company34;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertNotNull(dateAndTime11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(dateAndTime16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(dateAndTime21);
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(dateAndTime29);
        org.junit.Assert.assertNotNull(code32);
        org.junit.Assert.assertNotNull(company34);
    }

    @Test
    public void test0261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0261");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder8.setRegion("Italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: Italian [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0262");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("Canada", strMap2);
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet5 = locale4.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.util.Locale locale23 = locale19.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.lang.String str28 = locale24.getDisplayVariant();
        java.lang.String str30 = locale24.getExtension('a');
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.util.Locale locale35 = locale31.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.lang.String str42 = locale36.getExtension('a');
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.lang.String str47 = locale43.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale51.getDisplayVariant();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayName(locale55);
        java.lang.String str57 = locale54.getISO3Language();
        java.util.Locale locale58 = locale54.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = locale53.getDisplayLanguage(locale58);
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.getCountry();
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.util.Locale locale69 = locale65.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale71.getDisplayVariant();
        java.util.Locale.setDefault(locale71);
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale9, locale10, locale13, locale16, locale18, locale23, locale24, locale35, locale36, locale43, locale49, locale51, locale53, locale61, locale65, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList75, filteringMode77);
        java.util.List<java.lang.String> strList79 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strSet5, filteringMode77);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str80 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strSet5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str21, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str56, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "eng" + "'", str57, "eng");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-CA" + "'", str59, "en-CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Italian" + "'", str60, "Italian");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str63, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CA" + "'", str64, "CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str67, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "eng" + "'", str68, "eng");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode77.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(strList79);
    }

    @Test
    public void test0263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0263");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder0.setLanguage("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0264");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (short) 100);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles();
        java.util.stream.IntStream intStream5 = random1.ints();
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test0265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0265");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("it", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap4 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList5 = java.util.Locale.LanguageRange.parse("it", strMap4);
        java.util.Locale.LanguageRange[] languageRangeArray6 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList7 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean8 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList7, languageRangeArray6);
        java.util.Locale locale9 = java.util.Locale.ENGLISH;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.lang.String str11 = locale10.getDisplayVariant();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.util.Locale locale23 = locale19.stripExtensions();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getISO3Language();
        java.lang.String str28 = locale24.getDisplayVariant();
        java.lang.String str30 = locale24.getExtension('a');
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.util.Locale locale35 = locale31.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.lang.String str42 = locale36.getExtension('a');
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.lang.String str47 = locale43.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.util.Locale locale51 = java.util.Locale.CANADA;
        java.lang.String str52 = locale51.getDisplayVariant();
        java.util.Locale locale53 = java.util.Locale.ITALIAN;
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayName(locale55);
        java.lang.String str57 = locale54.getISO3Language();
        java.util.Locale locale58 = locale54.stripExtensions();
        java.lang.String str59 = locale58.toLanguageTag();
        java.lang.String str60 = locale53.getDisplayLanguage(locale58);
        java.util.Locale locale61 = java.util.Locale.CANADA;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.lang.String str63 = locale61.getDisplayName(locale62);
        java.lang.String str64 = locale61.getCountry();
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.util.Locale locale69 = locale65.stripExtensions();
        java.util.Locale locale70 = java.util.Locale.JAPAN;
        java.util.Locale locale71 = java.util.Locale.CANADA;
        java.lang.String str72 = locale71.getDisplayVariant();
        java.util.Locale.setDefault(locale71);
        java.util.Locale[] localeArray74 = new java.util.Locale[] { locale9, locale10, locale13, locale16, locale18, locale23, locale24, locale35, locale36, locale43, locale49, locale51, locale53, locale61, locale65, locale70, locale71 };
        java.util.ArrayList<java.util.Locale> localeList75 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList75, localeArray74);
        java.util.Locale.FilteringMode filteringMode77 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList78 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, (java.util.Collection<java.util.Locale>) localeList75, filteringMode77);
        java.util.Collection<java.util.Locale> localeCollection79 = null;
        java.util.List<java.util.Locale> localeList80 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList7, localeCollection79);
        java.util.List<java.util.Locale> localeList81 = java.util.Locale.filter(languageRangeList5, (java.util.Collection<java.util.Locale>) localeList80);
        java.util.Locale locale82 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList80);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList5);
        org.junit.Assert.assertNotNull(languageRangeArray6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str21, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "eng" + "'", str27, "eng");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "it");
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str56, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "eng" + "'", str57, "eng");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-CA" + "'", str59, "en-CA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "Italian" + "'", str60, "Italian");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str63 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str63, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "CA" + "'", str64, "CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str67, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "eng" + "'", str68, "eng");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(localeArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertTrue("'" + filteringMode77 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode77.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList78);
        org.junit.Assert.assertNotNull(localeList80);
        org.junit.Assert.assertNotNull(localeList81);
        org.junit.Assert.assertNull(locale82);
    }

    @Test
    public void test0266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0266");
        java.util.Random random1 = new java.util.Random((long) (byte) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream4 = random1.doubles((-0.9193443348656242d), (double) (-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0267");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale1);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: ????? (??????) could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0268");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Book book2 = faker0.book();
        java.lang.String str4 = faker0.regexify("ko");
        com.github.javafaker.Address address5 = faker0.address;
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko" + "'", str4, "ko");
        org.junit.Assert.assertNotNull(address5);
    }

    @Test
    public void test0269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0269");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale3 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = locale6.getCountry();
        java.lang.String str10 = locale6.getScript();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.util.Locale locale15 = locale11.stripExtensions();
        java.lang.String str16 = locale6.getDisplayScript(locale15);
        java.lang.String str17 = locale5.getDisplayScript(locale6);
        java.util.Locale locale21 = new java.util.Locale("Italian", "", "English");
        java.lang.String str22 = locale6.getDisplayLanguage(locale21);
        java.lang.String str23 = locale0.getDisplayVariant(locale21);
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.lang.String str25 = locale24.getDisplayCountry();
        java.lang.String str26 = locale0.getDisplayCountry(locale24);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CA" + "'", str9, "CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale21.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Canada" + "'", str25, "Canada");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
    }

    @Test
    public void test0270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0270");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder16.setUnicodeLocaleKeyword("can", "italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: can [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0271");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale locale12 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.setUnicodeLocaleKeyword("Korean", "zh");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: Korean [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test0272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0272");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles((double) (-1L), (double) 0.73043025f);
        long long5 = random1.nextLong();
        java.util.stream.IntStream intStream6 = random1.ints();
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(intStream6);
    }

    @Test
    public void test0273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0273");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.lang.String str4 = locale0.getDisplayVariant();
        boolean boolean5 = locale0.hasExtensions();
        java.lang.String str6 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
    }

    @Test
    public void test0274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0274");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Finance finance27 = faker0.finance();
        com.github.javafaker.Number number28 = faker0.number;
        com.github.javafaker.Options options29 = faker0.options;
        com.github.javafaker.Name name30 = faker0.name();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(number28);
        org.junit.Assert.assertNotNull(options29);
        org.junit.Assert.assertNotNull(name30);
    }

    @Test
    public void test0275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0275");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("\u82f1\u6587", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0276");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.lang.String str4 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CAN" + "'", str4, "CAN");
    }

    @Test
    public void test0277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0277");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Italien");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test0278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0278");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setLanguageTag("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0279");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getISO3Country();
        java.lang.Object obj10 = locale5.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CAN" + "'", str9, "CAN");
        org.junit.Assert.assertNotNull(obj10);
        org.junit.Assert.assertEquals(obj10.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj10), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj10), "en_CA");
    }

    @Test
    public void test0280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0280");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        int int6 = random1.nextInt();
        long long7 = random1.nextLong();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream10 = random1.longs((long) (short) 100, (long) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1761283695 + "'", int6 == 1761283695);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 7515937759503895804L + "'", long7 == 7515937759503895804L);
    }

    @Test
    public void test0281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0281");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder3.build();
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.lang.String str10 = locale9.getScript();
        java.util.Locale locale11 = java.util.Locale.KOREA;
        java.lang.String str12 = locale11.getDisplayScript();
        java.lang.String str13 = locale9.getDisplayVariant(locale11);
        java.util.Locale.Builder builder14 = builder3.setLocale(locale11);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0282");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayCountry();
        java.lang.String str2 = locale0.getScript();
        java.util.Set<java.lang.Character> charSet3 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Canada" + "'", str1, "Canada");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(charSet3);
    }

    @Test
    public void test0283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0283");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Set<java.lang.Character> charSet2 = locale1.getExtensionKeys();
        java.lang.String str3 = locale1.getCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(charSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0284");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str4 = locale0.getUnicodeLocaleType("de");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertNull(str4);
    }

    @Test
    public void test0285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0285");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream14 = random13.longs();
        int int16 = random13.nextInt((int) 'u');
        random13.setSeed((long) (byte) 10);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random13.nextBytes(byteArray30);
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale0, random13);
        com.github.javafaker.DateAndTime dateAndTime35 = faker34.dateAndTime;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, 122, -3, -70, -8, 22]");
        org.junit.Assert.assertNotNull(dateAndTime35);
    }

    @Test
    public void test0286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0286");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        java.util.Locale locale16 = java.util.Locale.ITALIAN;
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale21.toLanguageTag();
        java.lang.String str23 = locale16.getDisplayLanguage(locale21);
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker(locale16);
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.service.RandomService randomService29 = faker25.randomService;
        faker24.randomService = randomService29;
        faker0.randomService = randomService29;
        com.github.javafaker.PhoneNumber phoneNumber32 = faker0.phoneNumber;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "en-CA" + "'", str22, "en-CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Italian" + "'", str23, "Italian");
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertNotNull(phoneNumber32);
    }

    @Test
    public void test0287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0287");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("en_US");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: en_US [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0288");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Finance finance12 = faker8.finance;
        com.github.javafaker.PhoneNumber phoneNumber13 = faker8.phoneNumber();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business15 = null;
        faker14.business = business15;
        com.github.javafaker.Color color17 = null;
        faker14.color = color17;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Book book27 = faker23.book();
        faker19.book = book27;
        com.github.javafaker.Address address29 = faker19.address();
        faker14.address = address29;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name32 = faker31.name();
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name34 = faker33.name();
        faker31.name = name34;
        faker14.name = name34;
        com.github.javafaker.Number number37 = faker14.number;
        faker8.number = number37;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(phoneNumber13);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(address29);
        org.junit.Assert.assertNotNull(name32);
        org.junit.Assert.assertNotNull(name34);
        org.junit.Assert.assertNotNull(number37);
    }

    @Test
    public void test0289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0289");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder6 = builder3.clearExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0290");
        java.util.Random random1 = new java.util.Random((long) 100);
        long long2 = random1.nextLong();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream6 = random1.longs((long) (short) -1, (long) 'u', (long) 'x');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-5128016860359238732L) + "'", long2 == (-5128016860359238732L));
    }

    @Test
    public void test0291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0291");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.util.Set<java.lang.String> strSet10 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test0292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0292");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = builder0.build();
        java.lang.Object obj5 = locale4.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(obj5);
        org.junit.Assert.assertEquals(obj5.toString(), "it");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj5), "it");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj5), "it");
    }

    @Test
    public void test0293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0293");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Finance finance6 = faker0.finance();
        com.github.javafaker.Hacker hacker7 = null;
        faker0.hacker = hacker7;
        java.lang.String str10 = faker0.regexify("Italian");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Italian" + "'", str10, "Italian");
    }

    @Test
    public void test0294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0294");
        java.util.Locale locale3 = new java.util.Locale("Italian", "", "English");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale.setDefault(locale5);
        boolean boolean7 = locale5.hasExtensions();
        org.junit.Assert.assertEquals(locale3.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test0295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0295");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        java.lang.String str16 = faker14.bothify("Italian");
        com.github.javafaker.Number number17 = faker14.number();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertNotNull(number17);
    }

    @Test
    public void test0296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0296");
        java.util.Locale locale1 = new java.util.Locale("eng");
        boolean boolean2 = locale1.hasExtensions();
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.lang.String str7 = locale3.getDisplayVariant();
        java.lang.String str9 = locale3.getExtension('a');
        java.lang.String str10 = locale1.getDisplayScript(locale3);
        java.util.Set<java.lang.Character> charSet11 = locale3.getExtensionKeys();
        java.lang.String str12 = locale3.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "eng");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(charSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en_CA" + "'", str12, "en_CA");
    }

    @Test
    public void test0297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0297");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????? (??????)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0298");
        java.util.Locale locale3 = new java.util.Locale("Italian", "", "English");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Locale locale5 = locale3.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale3.getDisplayLanguage(locale6);
        java.lang.String str11 = locale3.getDisplayScript();
        org.junit.Assert.assertEquals(locale3.toString(), "italian__English");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "italian__English");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italian" + "'", str10, "italian");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test0299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0299");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.lang.String str1 = locale0.getScript();
        java.util.Locale locale2 = java.util.Locale.KOREA;
        java.lang.String str3 = locale2.getDisplayScript();
        java.lang.String str4 = locale0.getDisplayVariant(locale2);
        java.lang.String str5 = locale0.getDisplayCountry();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale11);
        java.lang.String str14 = locale11.getDisplayScript();
        java.lang.String str15 = locale11.getISO3Country();
        java.util.Locale locale16 = null;
        java.lang.String str17 = locale11.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getCountry();
        java.lang.String str22 = locale18.getScript();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.lang.String str28 = locale18.getDisplayScript(locale27);
        java.lang.String str29 = locale27.getDisplayCountry();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getLanguage();
        java.util.Random random35 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream36 = random35.longs();
        java.util.stream.DoubleStream doubleStream37 = random35.doubles();
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker(locale30, random35);
        java.lang.String str39 = locale27.getDisplayVariant(locale30);
        java.lang.String str40 = locale11.getDisplayCountry(locale30);
        java.lang.String str41 = locale0.getDisplayVariant(locale30);
        java.util.Set<java.lang.Character> charSet42 = locale30.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en-CA" + "'", str12, "en-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CAN" + "'", str15, "CAN");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "CA" + "'", str21, "CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Canada" + "'", str29, "Canada");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en" + "'", str33, "en");
        org.junit.Assert.assertNotNull(longStream36);
        org.junit.Assert.assertNotNull(doubleStream37);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Canada" + "'", str40, "Canada");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(charSet42);
    }

    @Test
    public void test0300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0300");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        java.lang.String str4 = faker0.numerify("hi!");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = faker0.resolve("");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "hi!" + "'", str4, "hi!");
    }

    @Test
    public void test0301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0301");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        java.util.Set<java.lang.String> strSet2 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
    }

    @Test
    public void test0302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0302");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet4 = locale3.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder5 = builder2.setLocale(locale3);
        java.util.Locale locale6 = builder2.build();
        java.util.Random random8 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream9 = random8.longs();
        byte[] byteArray16 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random8.nextBytes(byteArray16);
        double double18 = random8.nextGaussian();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale6, random8);
        java.util.Locale locale20 = locale6.stripExtensions();
        java.lang.String str21 = locale1.getDisplayVariant(locale20);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(longStream9);
        org.junit.Assert.assertNotNull(byteArray16);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + (-0.4123569817688534d) + "'", double18 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test0303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0303");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        boolean boolean4 = languageRange1.equals((java.lang.Object) "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test0304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0304");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale1.getDisplayCountry(locale3);
        java.lang.String str6 = locale3.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test0305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0305");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.ROOT;
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale0.getDisplayCountry(locale5);
        java.lang.String str8 = locale5.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Canada" + "'", str7, "Canada");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test0306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0306");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        int int9 = random1.nextInt();
        java.util.stream.LongStream longStream10 = random1.longs();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1157793070) + "'", int9 == (-1157793070));
        org.junit.Assert.assertNotNull(longStream10);
    }

    @Test
    public void test0307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0307");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.App app5 = faker0.app;
        com.github.javafaker.Address address6 = faker0.address();
        com.github.javafaker.Options options7 = faker0.options();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.DateAndTime dateAndTime12 = faker8.dateAndTime;
        com.github.javafaker.Lorem lorem13 = null;
        faker8.lorem = lorem13;
        com.github.javafaker.Code code15 = faker8.code();
        com.github.javafaker.Address address16 = faker8.address();
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Finance finance22 = faker17.finance();
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.Book book31 = faker27.book();
        faker23.book = book31;
        com.github.javafaker.Options options33 = faker23.options();
        faker17.options = options33;
        faker8.options = options33;
        faker0.options = options33;
        com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService38 = faker37.randomService;
        com.github.javafaker.DateAndTime dateAndTime39 = faker37.date();
        com.github.javafaker.Number number40 = faker37.number;
        com.github.javafaker.Internet internet41 = faker37.internet;
        faker0.internet = internet41;
        com.github.javafaker.Faker faker43 = new com.github.javafaker.Faker();
        com.github.javafaker.Faker faker44 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService45 = faker44.randomService;
        java.lang.String str47 = faker44.bothify("");
        com.github.javafaker.Faker faker48 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService49 = faker48.randomService;
        java.lang.String str51 = faker48.bothify("");
        com.github.javafaker.Book book52 = faker48.book();
        faker44.book = book52;
        com.github.javafaker.Options options54 = faker44.options();
        com.github.javafaker.App app55 = faker44.app;
        faker43.app = app55;
        com.github.javafaker.Faker faker57 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService58 = faker57.randomService;
        java.lang.String str60 = faker57.bothify("");
        com.github.javafaker.DateAndTime dateAndTime61 = faker57.dateAndTime;
        com.github.javafaker.Faker faker62 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService63 = faker62.randomService;
        java.lang.String str65 = faker62.bothify("");
        com.github.javafaker.DateAndTime dateAndTime66 = faker62.dateAndTime;
        faker57.dateAndTime = dateAndTime66;
        com.github.javafaker.Code code68 = null;
        faker57.code = code68;
        com.github.javafaker.Faker faker70 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService71 = faker70.randomService;
        java.lang.String str73 = faker70.bothify("");
        com.github.javafaker.DateAndTime dateAndTime74 = faker70.dateAndTime;
        com.github.javafaker.Lorem lorem75 = null;
        faker70.lorem = lorem75;
        com.github.javafaker.Code code77 = faker70.code();
        faker57.code = code77;
        com.github.javafaker.Company company79 = faker57.company();
        com.github.javafaker.Business business80 = faker57.business();
        faker43.business = business80;
        faker0.business = business80;
        org.junit.Assert.assertNotNull(app5);
        org.junit.Assert.assertNotNull(address6);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertNotNull(code15);
        org.junit.Assert.assertNotNull(address16);
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(finance22);
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(book31);
        org.junit.Assert.assertNotNull(options33);
        org.junit.Assert.assertNotNull(randomService38);
        org.junit.Assert.assertNotNull(dateAndTime39);
        org.junit.Assert.assertNotNull(number40);
        org.junit.Assert.assertNotNull(internet41);
        org.junit.Assert.assertNotNull(randomService45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(randomService49);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(book52);
        org.junit.Assert.assertNotNull(options54);
        org.junit.Assert.assertNotNull(app55);
        org.junit.Assert.assertNotNull(randomService58);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertNotNull(dateAndTime61);
        org.junit.Assert.assertNotNull(randomService63);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "" + "'", str65, "");
        org.junit.Assert.assertNotNull(dateAndTime66);
        org.junit.Assert.assertNotNull(randomService71);
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "" + "'", str73, "");
        org.junit.Assert.assertNotNull(dateAndTime74);
        org.junit.Assert.assertNotNull(code77);
        org.junit.Assert.assertNotNull(company79);
        org.junit.Assert.assertNotNull(business80);
    }

    @Test
    public void test0308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0308");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale locale11 = new java.util.Locale("ita", "English (Canada)");
        java.util.Locale locale12 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str13 = locale11.getDisplayLanguage(locale12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder7.setLocale(locale11);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ENGLISH (CANADA) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals(locale11.toString(), "ita_ENGLISH (CANADA)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italien" + "'", str13, "Italien");
    }

    @Test
    public void test0309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0309");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.lang.String str10 = locale9.getDisplayVariant();
        java.lang.String str11 = locale9.getLanguage();
        java.lang.String str12 = locale5.getDisplayScript(locale9);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en" + "'", str11, "en");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test0310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0310");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        double double4 = random1.nextGaussian();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        int int9 = random6.nextInt((int) 'u');
        random6.setSeed((long) (byte) 10);
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.Random random15 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream16 = random15.longs();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random15.nextBytes(byteArray23);
        random13.nextBytes(byteArray23);
        random6.nextBytes(byteArray23);
        random1.nextBytes(byteArray23);
        java.util.Random random29 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream30 = random29.doubles();
        java.util.stream.IntStream intStream31 = random29.ints();
        java.util.stream.LongStream longStream35 = random29.longs((long) 100, 0L, (long) 'u');
        java.util.Random random37 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream38 = random37.doubles();
        java.util.Random random40 = new java.util.Random((long) 1);
        java.util.Random random42 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream43 = random42.longs();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random42.nextBytes(byteArray50);
        random40.nextBytes(byteArray50);
        random37.nextBytes(byteArray50);
        random29.nextBytes(byteArray50);
        random1.nextBytes(byteArray50);
        boolean boolean56 = random1.nextBoolean();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.7853314409882288d + "'", double4 == 1.7853314409882288d);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -101, 127, -45, -10, 56]");
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertNotNull(longStream35);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertNotNull(longStream43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 117, 88, -50, 65, -21]");
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
    }

    @Test
    public void test0311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0311");
        java.util.Random random1 = new java.util.Random((-4972683369271453960L));
    }

    @Test
    public void test0312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0312");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        java.lang.String str23 = faker17.regexify("eng");
        com.github.javafaker.service.RandomService randomService24 = faker17.randomService;
        com.github.javafaker.Code code25 = faker17.code;
        com.github.javafaker.Name name26 = faker17.name;
        faker16.name = name26;
        com.github.javafaker.Color color28 = faker16.color;
        com.github.javafaker.Lorem lorem29 = faker16.lorem();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertNotNull(code25);
        org.junit.Assert.assertNotNull(name26);
        org.junit.Assert.assertNotNull(color28);
        org.junit.Assert.assertNotNull(lorem29);
    }

    @Test
    public void test0313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0313");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream7 = random2.longs((long) 'x', (-5128016860359238732L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test0314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0314");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        java.lang.String str8 = locale5.getDisplayScript();
        java.lang.String str9 = locale5.getISO3Country();
        java.util.Locale locale10 = null;
        java.lang.String str11 = locale5.getDisplayVariant(locale10);
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getCountry();
        java.lang.String str16 = locale12.getScript();
        java.util.Locale locale17 = java.util.Locale.CANADA;
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale17.getISO3Language();
        java.util.Locale locale21 = locale17.stripExtensions();
        java.lang.String str22 = locale12.getDisplayScript(locale21);
        java.lang.String str23 = locale21.getDisplayCountry();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale24.getLanguage();
        java.util.Random random29 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream30 = random29.longs();
        java.util.stream.DoubleStream doubleStream31 = random29.doubles();
        com.github.javafaker.Faker faker32 = new com.github.javafaker.Faker(locale24, random29);
        java.lang.String str33 = locale21.getDisplayVariant(locale24);
        java.lang.String str34 = locale5.getDisplayCountry(locale24);
        java.util.Locale locale35 = java.util.Locale.ITALIAN;
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.util.Locale locale40 = locale36.stripExtensions();
        java.lang.String str41 = locale40.toLanguageTag();
        java.lang.String str42 = locale35.getDisplayLanguage(locale40);
        java.lang.String str43 = locale40.getDisplayScript();
        java.lang.String str44 = locale40.getISO3Country();
        java.util.Locale locale45 = null;
        java.lang.String str46 = locale40.getDisplayVariant(locale45);
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.lang.String str50 = locale47.getCountry();
        java.lang.String str51 = locale47.getScript();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale52.getISO3Language();
        java.util.Locale locale56 = locale52.stripExtensions();
        java.lang.String str57 = locale47.getDisplayScript(locale56);
        java.lang.String str58 = locale56.getDisplayCountry();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getLanguage();
        java.util.Random random64 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream65 = random64.longs();
        java.util.stream.DoubleStream doubleStream66 = random64.doubles();
        com.github.javafaker.Faker faker67 = new com.github.javafaker.Faker(locale59, random64);
        java.lang.String str68 = locale56.getDisplayVariant(locale59);
        java.lang.String str69 = locale40.getDisplayCountry(locale59);
        java.lang.String str70 = locale24.getDisplayVariant(locale40);
        java.lang.String str71 = locale24.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CAN" + "'", str9, "CAN");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "CA" + "'", str15, "CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str19, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "eng" + "'", str20, "eng");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Canada" + "'", str23, "Canada");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "en" + "'", str27, "en");
        org.junit.Assert.assertNotNull(longStream30);
        org.junit.Assert.assertNotNull(doubleStream31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Canada" + "'", str34, "Canada");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "en-CA" + "'", str41, "en-CA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "Italian" + "'", str42, "Italian");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "CAN" + "'", str44, "CAN");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str49, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "CA" + "'", str50, "CA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "eng" + "'", str55, "eng");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "Canada" + "'", str58, "Canada");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "en" + "'", str62, "en");
        org.junit.Assert.assertNotNull(longStream65);
        org.junit.Assert.assertNotNull(doubleStream66);
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "" + "'", str68, "");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "Canada" + "'", str69, "Canada");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "en" + "'", str71, "en");
    }

    @Test
    public void test0315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0315");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        java.lang.String str5 = faker0.letterify("eng");
        com.github.javafaker.service.RandomService randomService6 = faker0.randomService;
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.DateAndTime dateAndTime11 = faker7.dateAndTime;
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        com.github.javafaker.Book book14 = faker12.book();
        faker7.book = book14;
        com.github.javafaker.Business business16 = faker7.business;
        com.github.javafaker.Internet internet17 = faker7.internet;
        faker0.internet = internet17;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(dateAndTime11);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(business16);
        org.junit.Assert.assertNotNull(internet17);
    }

    @Test
    public void test0316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0316");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        com.github.javafaker.Book book16 = faker12.book();
        faker8.book = book16;
        com.github.javafaker.DateAndTime dateAndTime18 = faker8.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Book book23 = faker19.book();
        com.github.javafaker.Finance finance24 = faker19.finance();
        com.github.javafaker.Faker faker25 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService26 = faker25.randomService;
        java.lang.String str28 = faker25.bothify("");
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.Book book33 = faker29.book();
        faker25.book = book33;
        com.github.javafaker.Options options35 = faker25.options();
        faker19.options = options35;
        com.github.javafaker.service.RandomService randomService37 = faker19.randomService;
        com.github.javafaker.Faker faker38 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService39 = faker38.randomService;
        com.github.javafaker.Book book40 = faker38.book();
        com.github.javafaker.Finance finance41 = faker38.finance();
        com.github.javafaker.Book book42 = faker38.book();
        com.github.javafaker.Options options43 = faker38.options();
        com.github.javafaker.PhoneNumber phoneNumber44 = faker38.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService45 = faker38.fakeValuesService;
        faker19.fakeValuesService = fakeValuesService45;
        faker8.fakeValuesService = fakeValuesService45;
        com.github.javafaker.Address address48 = faker8.address();
        faker0.address = address48;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(book23);
        org.junit.Assert.assertNotNull(finance24);
        org.junit.Assert.assertNotNull(randomService26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(book33);
        org.junit.Assert.assertNotNull(options35);
        org.junit.Assert.assertNotNull(randomService37);
        org.junit.Assert.assertNotNull(randomService39);
        org.junit.Assert.assertNotNull(book40);
        org.junit.Assert.assertNotNull(finance41);
        org.junit.Assert.assertNotNull(book42);
        org.junit.Assert.assertNotNull(options43);
        org.junit.Assert.assertNotNull(phoneNumber44);
        org.junit.Assert.assertNotNull(fakeValuesService45);
        org.junit.Assert.assertNotNull(address48);
    }

    @Test
    public void test0317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0317");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setRegion("coreano");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: coreano [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0318");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Options options3 = faker2.options();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(options3);
    }

    @Test
    public void test0319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0319");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker8.phoneNumber;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Number number16 = faker11.number();
        com.github.javafaker.Lorem lorem17 = null;
        faker11.lorem = lorem17;
        com.github.javafaker.Business business19 = faker11.business();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.DateAndTime dateAndTime24 = faker20.dateAndTime;
        com.github.javafaker.Lorem lorem25 = null;
        faker20.lorem = lorem25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Lorem lorem31 = faker27.lorem();
        faker20.lorem = lorem31;
        faker11.lorem = lorem31;
        faker8.lorem = lorem31;
        java.util.Locale locale36 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale37 = locale36.stripExtensions();
        java.util.Locale locale38 = locale37.stripExtensions();
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.getCountry();
        java.lang.String str43 = locale39.getScript();
        java.util.Locale locale44 = java.util.Locale.CANADA;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.lang.String str47 = locale44.getISO3Language();
        java.util.Locale locale48 = locale44.stripExtensions();
        java.lang.String str49 = locale39.getDisplayScript(locale48);
        java.lang.String str50 = locale38.getDisplayScript(locale39);
        com.github.javafaker.Faker faker51 = new com.github.javafaker.Faker(locale39);
        com.github.javafaker.Color color52 = faker51.color;
        com.github.javafaker.Faker faker53 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService54 = faker53.randomService;
        java.lang.String str56 = faker53.bothify("");
        com.github.javafaker.DateAndTime dateAndTime57 = faker53.dateAndTime;
        java.lang.String str59 = faker53.letterify("en-CA");
        com.github.javafaker.Code code60 = null;
        faker53.code = code60;
        com.github.javafaker.service.FakeValuesService fakeValuesService62 = faker53.fakeValuesService;
        faker51.fakeValuesService = fakeValuesService62;
        com.github.javafaker.Faker faker64 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService65 = faker64.randomService;
        java.lang.String str67 = faker64.bothify("");
        com.github.javafaker.DateAndTime dateAndTime68 = faker64.dateAndTime;
        com.github.javafaker.Faker faker69 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService70 = faker69.randomService;
        com.github.javafaker.Book book71 = faker69.book();
        faker64.book = book71;
        com.github.javafaker.Business business73 = faker64.business;
        faker51.business = business73;
        com.github.javafaker.Name name75 = faker51.name;
        faker8.name = name75;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(number16);
        org.junit.Assert.assertNotNull(business19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateAndTime24);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(lorem31);
        org.junit.Assert.assertEquals(locale36.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "CA" + "'", str42, "CA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str46 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str46, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "eng" + "'", str47, "eng");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(color52);
        org.junit.Assert.assertNotNull(randomService54);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(dateAndTime57);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "en-CA" + "'", str59, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService62);
        org.junit.Assert.assertNotNull(randomService65);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(dateAndTime68);
        org.junit.Assert.assertNotNull(randomService70);
        org.junit.Assert.assertNotNull(book71);
        org.junit.Assert.assertNotNull(business73);
        org.junit.Assert.assertNotNull(name75);
    }

    @Test
    public void test0320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0320");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale9.getDisplayCountry();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str14 = locale9.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
    }

    @Test
    public void test0321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0321");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream12 = random1.longs((-5128016860359238732L), (long) (-1155869325), (long) 1761283695);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test0322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0322");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getCountry();
        java.lang.String str7 = locale3.getScript();
        java.util.Locale locale8 = java.util.Locale.ROOT;
        java.lang.String str9 = locale8.getVariant();
        java.lang.String str10 = locale3.getDisplayCountry(locale8);
        java.util.Locale.Builder builder11 = builder0.setLocale(locale8);
        java.util.Locale.Builder builder14 = builder0.setExtension('x', "en_CA");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "CA" + "'", str6, "CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Canada" + "'", str10, "Canada");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test0323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0323");
        java.util.Locale locale0 = java.util.Locale.US;
        java.lang.String str1 = locale0.getDisplayCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_US");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "United States" + "'", str1, "United States");
    }

    @Test
    public void test0324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0324");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("CA");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder4 = builder0.setScript("italian");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: italian [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
    }

    @Test
    public void test0325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0325");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Address address10 = faker0.address();
        com.github.javafaker.Hacker hacker11 = faker0.hacker();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = faker0.resolve("\u671d\u9c9c\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertNotNull(hacker11);
    }

    @Test
    public void test0326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0326");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.util.Locale locale3 = java.util.Locale.UK;
        java.lang.String str4 = locale3.getDisplayVariant();
        java.lang.String str5 = locale1.getDisplayCountry(locale3);
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale locale8 = java.util.Locale.CANADA;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Locale locale12 = locale8.stripExtensions();
        java.lang.String str13 = locale6.getDisplayName(locale8);
        java.util.Random random15 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream16 = random15.doubles();
        java.util.stream.LongStream longStream19 = random15.longs((long) 0, 10L);
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale8, random15);
        java.lang.String str21 = locale8.getDisplayVariant();
        java.lang.String str22 = locale3.getDisplayLanguage(locale8);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "can" + "'", str2, "can");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str10, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Korean" + "'", str13, "Korean");
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
    }

    @Test
    public void test0327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0327");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Finance finance3 = faker2.finance();
        com.github.javafaker.Number number4 = faker2.number;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(number4);
    }

    @Test
    public void test0328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0328");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        com.github.javafaker.PhoneNumber phoneNumber9 = faker8.phoneNumber;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        faker10.dateAndTime = dateAndTime19;
        com.github.javafaker.Code code21 = null;
        faker10.code = code21;
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        com.github.javafaker.Book book29 = faker27.book();
        com.github.javafaker.Finance finance30 = faker27.finance();
        com.github.javafaker.Book book31 = faker27.book();
        com.github.javafaker.Options options32 = faker27.options();
        com.github.javafaker.PhoneNumber phoneNumber33 = faker27.phoneNumber();
        faker23.phoneNumber = phoneNumber33;
        com.github.javafaker.Name name35 = faker23.name();
        faker10.name = name35;
        com.github.javafaker.Finance finance37 = faker10.finance();
        com.github.javafaker.Number number38 = faker10.number;
        com.github.javafaker.service.FakeValuesService fakeValuesService39 = faker10.fakeValuesService;
        faker8.fakeValuesService = fakeValuesService39;
        com.github.javafaker.Code code41 = faker8.code;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(phoneNumber9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertNotNull(book29);
        org.junit.Assert.assertNotNull(finance30);
        org.junit.Assert.assertNotNull(book31);
        org.junit.Assert.assertNotNull(options32);
        org.junit.Assert.assertNotNull(phoneNumber33);
        org.junit.Assert.assertNotNull(name35);
        org.junit.Assert.assertNotNull(finance37);
        org.junit.Assert.assertNotNull(number38);
        org.junit.Assert.assertNotNull(fakeValuesService39);
        org.junit.Assert.assertNotNull(code41);
    }

    @Test
    public void test0329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0329");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale3.getDisplayName(locale5);
        java.lang.String str11 = locale0.getDisplayName(locale5);
        java.lang.String str12 = locale0.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Korean" + "'", str4, "Korean");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Korean" + "'", str10, "Korean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
    }

    @Test
    public void test0330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0330");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u82f1\u6587");
        java.lang.String str2 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0331");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.App app5 = faker0.app;
        com.github.javafaker.Internet internet6 = faker0.internet();
        org.junit.Assert.assertNotNull(app5);
        org.junit.Assert.assertNotNull(internet6);
    }

    @Test
    public void test0332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0332");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale locale6 = builder3.build();
        java.lang.Object obj7 = locale6.clone();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
// flaky:         org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(obj7);
// flaky:         org.junit.Assert.assertEquals(obj7.toString(), "en_CA");
// flaky:         org.junit.Assert.assertEquals(java.lang.String.valueOf(obj7), "en_CA");
// flaky:         org.junit.Assert.assertEquals(java.util.Objects.toString(obj7), "en_CA");
    }

    @Test
    public void test0333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0333");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles((double) (-1155869325), (double) (short) 1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test0334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0334");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        com.github.javafaker.DateAndTime dateAndTime5 = faker4.date();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Book book10 = faker6.book();
        java.lang.String str12 = faker6.regexify("eng");
        com.github.javafaker.service.RandomService randomService13 = faker6.randomService;
        com.github.javafaker.Code code14 = faker6.code;
        java.util.Locale locale15 = java.util.Locale.ITALIAN;
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.lang.String str19 = locale16.getISO3Language();
        java.util.Locale locale20 = locale16.stripExtensions();
        java.lang.String str21 = locale20.toLanguageTag();
        java.lang.String str22 = locale15.getDisplayLanguage(locale20);
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker(locale15);
        com.github.javafaker.Company company24 = faker23.company();
        com.github.javafaker.App app25 = faker23.app;
        faker6.app = app25;
        faker4.app = app25;
        com.github.javafaker.Name name28 = faker4.name();
        com.github.javafaker.Code code29 = faker4.code;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = faker4.resolve("it");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(book10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertNotNull(code14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str18, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "eng" + "'", str19, "eng");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en-CA" + "'", str21, "en-CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertNotNull(company24);
        org.junit.Assert.assertNotNull(app25);
        org.junit.Assert.assertNotNull(name28);
        org.junit.Assert.assertNotNull(code29);
    }

    @Test
    public void test0335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.lang.String str19 = locale13.getScript();
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-CA" + "'", str17, "en-CA");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "English" + "'", str18, "English");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test0336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0336");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        random1.setSeed((long) (byte) 10);
        java.util.stream.DoubleStream doubleStream7 = random1.doubles();
        java.util.stream.DoubleStream doubleStream8 = random1.doubles();
        double double9 = random1.nextGaussian();
        double double10 = random1.nextGaussian();
        java.util.stream.IntStream intStream12 = random1.ints((long) (short) 10);
        float float13 = random1.nextFloat();
        long long14 = random1.nextLong();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream8);
        org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8746788966462123d + "'", double9 == 0.8746788966462123d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + (-0.9193443348656242d) + "'", double10 == (-0.9193443348656242d));
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.059201956f + "'", float13 == 0.059201956f);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-6047590478893910070L) + "'", long14 == (-6047590478893910070L));
    }

    @Test
    public void test0337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0337");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Finance finance27 = faker0.finance();
        com.github.javafaker.Number number28 = faker0.number;
        com.github.javafaker.service.FakeValuesService fakeValuesService29 = faker0.fakeValuesService;
        com.github.javafaker.Internet internet30 = null;
        faker0.internet = internet30;
        com.github.javafaker.Finance finance32 = faker0.finance;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(finance27);
        org.junit.Assert.assertNotNull(number28);
        org.junit.Assert.assertNotNull(fakeValuesService29);
        org.junit.Assert.assertNotNull(finance32);
    }

    @Test
    public void test0338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0338");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        java.lang.String str6 = faker0.letterify("English");
        com.github.javafaker.Name name7 = faker0.name;
        com.github.javafaker.DateAndTime dateAndTime8 = faker0.date();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(dateAndTime8);
    }

    @Test
    public void test0339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0339");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Business business8 = faker0.business();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        java.lang.String str15 = faker9.regexify("eng");
        com.github.javafaker.service.RandomService randomService16 = faker9.randomService;
        com.github.javafaker.Code code17 = faker9.code;
        com.github.javafaker.Hacker hacker18 = faker9.hacker;
        faker0.hacker = hacker18;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(business8);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(code17);
        org.junit.Assert.assertNotNull(hacker18);
    }

    @Test
    public void test0340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0340");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Color color9 = faker8.color();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(color9);
    }

    @Test
    public void test0341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0341");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Address address7 = null;
        faker0.address = address7;
        com.github.javafaker.Name name9 = null;
        faker0.name = name9;
        com.github.javafaker.Hacker hacker11 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(hacker11);
    }

    @Test
    public void test0342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0342");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder3 = builder0.setRegion("\u671d\u9c9c\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ??? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test0343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0343");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Internet internet6 = faker0.internet();
        com.github.javafaker.PhoneNumber phoneNumber7 = null;
        faker0.phoneNumber = phoneNumber7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        com.github.javafaker.Book book11 = faker9.book();
        com.github.javafaker.Finance finance12 = faker9.finance();
        faker0.finance = finance12;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNotNull(finance12);
    }

    @Test
    public void test0344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0344");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        boolean boolean14 = random1.nextBoolean();
        java.util.stream.IntStream intStream16 = random1.ints((long) 1761283695);
        boolean boolean17 = random1.nextBoolean();
        random1.setSeed((long) 4);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream22 = random1.ints(23, (int) (short) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test0345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0345");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        boolean boolean16 = locale3.hasExtensions();
        java.lang.String str17 = locale3.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
    }

    @Test
    public void test0346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0346");
        java.util.Locale locale3 = new java.util.Locale("English", "\u52a0\u62ff\u5927", "English");
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale3);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: english_???_English could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u52a0\u62ff\u5927_English");
    }

    @Test
    public void test0347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0347");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        java.util.stream.IntStream intStream9 = random1.ints(0L);
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) (byte) 1, (double) (-1155869325), (double) (byte) 0);
        java.util.stream.IntStream intStream17 = random1.ints((long) 100, (-1157793070), (int) (byte) 0);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(intStream17);
    }

    @Test
    public void test0348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0348");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("anglais (Canada)", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=anglais(canada)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0349");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        java.util.Locale locale4 = builder3.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder3.setVariant("\u82f1\u6587)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: en-ca (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "italian");
    }

    @Test
    public void test0350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0350");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        java.lang.Class<?> wildcardClass17 = locale10.getClass();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(wildcardClass17);
    }

    @Test
    public void test0351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0351");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("english");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setUnicodeLocaleKeyword("hi!", "Korean");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0352");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        java.util.Locale locale4 = java.util.Locale.GERMANY;
        java.lang.String str5 = locale4.getLanguage();
        java.util.Locale.Builder builder6 = builder0.setLocale(locale4);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "de" + "'", str5, "de");
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0353");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        float float5 = random2.nextFloat();
        random2.setSeed((long) 23);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.7308782f + "'", float5 == 0.7308782f);
    }

    @Test
    public void test0354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0354");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        com.github.javafaker.Finance finance2 = faker0.finance;
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService4 = faker3.randomService;
        java.lang.String str6 = faker3.bothify("");
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Book book11 = faker7.book();
        faker3.book = book11;
        com.github.javafaker.Options options13 = faker3.options();
        com.github.javafaker.App app14 = faker3.app;
        faker0.app = app14;
        com.github.javafaker.Code code16 = faker0.code;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business18 = null;
        faker17.business = business18;
        com.github.javafaker.Color color20 = null;
        faker17.color = color20;
        com.github.javafaker.App app22 = faker17.app;
        faker0.app = app22;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(finance2);
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(book11);
        org.junit.Assert.assertNotNull(options13);
        org.junit.Assert.assertNotNull(app14);
        org.junit.Assert.assertNotNull(code16);
        org.junit.Assert.assertNotNull(app22);
    }

    @Test
    public void test0355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0355");
        java.util.Locale locale1 = new java.util.Locale("CA");
        org.junit.Assert.assertEquals(locale1.toString(), "ca");
    }

    @Test
    public void test0356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0356");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name1 = faker0.name();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name3 = faker2.name();
        faker0.name = name3;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale5.getDisplayVariant();
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker(locale5);
        com.github.javafaker.Finance finance8 = faker7.finance();
        faker0.finance = finance8;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        com.github.javafaker.Book book12 = faker10.book();
        com.github.javafaker.Finance finance13 = faker10.finance();
        com.github.javafaker.Book book14 = faker10.book;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        java.lang.String str21 = faker15.letterify("en-CA");
        com.github.javafaker.Code code22 = null;
        faker15.code = code22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.DateAndTime dateAndTime28 = faker24.dateAndTime;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService34 = faker33.randomService;
        java.lang.String str36 = faker33.bothify("");
        com.github.javafaker.Book book37 = faker33.book();
        faker29.book = book37;
        faker24.book = book37;
        faker15.book = book37;
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService42 = faker41.randomService;
        java.lang.String str44 = faker41.bothify("");
        com.github.javafaker.Book book45 = faker41.book();
        com.github.javafaker.Number number46 = faker41.number();
        faker15.number = number46;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = locale53.toLanguageTag();
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        com.github.javafaker.Faker faker56 = new com.github.javafaker.Faker(locale48);
        com.github.javafaker.Company company57 = faker56.company();
        faker15.company = company57;
        faker10.company = company57;
        faker0.company = company57;
        org.junit.Assert.assertNotNull(name1);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(finance8);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(finance13);
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en-CA" + "'", str21, "en-CA");
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateAndTime28);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(randomService34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(book37);
        org.junit.Assert.assertNotNull(randomService42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(book45);
        org.junit.Assert.assertNotNull(number46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str51, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "eng" + "'", str52, "eng");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-CA" + "'", str54, "en-CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian" + "'", str55, "Italian");
        org.junit.Assert.assertNotNull(company57);
    }

    @Test
    public void test0357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0357");
        java.util.Random random1 = new java.util.Random((long) (byte) 10);
        float float2 = random1.nextFloat();
        boolean boolean3 = random1.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream6 = random1.ints((int) 'x', (int) (byte) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + float2 + "' != '" + 0.73043025f + "'", float2 == 0.73043025f);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
    }

    @Test
    public void test0358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0358");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Code code8 = faker0.code;
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale10.getISO3Language();
        java.util.Locale locale14 = locale10.stripExtensions();
        java.lang.String str15 = locale14.toLanguageTag();
        java.lang.String str16 = locale9.getDisplayLanguage(locale14);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale9);
        com.github.javafaker.Company company18 = faker17.company();
        com.github.javafaker.App app19 = faker17.app;
        faker0.app = app19;
        com.github.javafaker.Code code21 = faker0.code();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en-CA" + "'", str15, "en-CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italian" + "'", str16, "Italian");
        org.junit.Assert.assertNotNull(company18);
        org.junit.Assert.assertNotNull(app19);
        org.junit.Assert.assertNotNull(code21);
    }

    @Test
    public void test0359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0359");
        java.util.Random random1 = new java.util.Random(1853403699951111791L);
        java.util.stream.DoubleStream doubleStream3 = random1.doubles(10L);
        org.junit.Assert.assertNotNull(doubleStream3);
    }

    @Test
    public void test0360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0360");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale3.getDisplayName(locale5);
        java.lang.String str11 = locale0.getDisplayName(locale5);
        java.util.Set<java.lang.String> strSet12 = locale5.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "coreano" + "'", str4, "coreano");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Korean" + "'", str10, "Korean");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English (Canada)" + "'", str11, "English (Canada)");
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test0361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0361");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        java.lang.String str2 = faker0.bothify("Korean");
        com.github.javafaker.App app3 = faker0.app();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Korean" + "'", str2, "Korean");
        org.junit.Assert.assertNotNull(app3);
    }

    @Test
    public void test0362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0362");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.Options options10 = faker0.options();
        com.github.javafaker.App app11 = faker0.app;
        com.github.javafaker.Color color12 = faker0.color;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(color12);
    }

    @Test
    public void test0363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0363");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        byte[] byteArray15 = null;
        // The following exception was thrown during execution in test generation
        try {
            random10.nextBytes(byteArray15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
    }

    @Test
    public void test0364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0364");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        java.lang.String str5 = faker0.letterify("eng");
        java.lang.String str7 = faker0.numerify("\u82f1\u6587");
        java.lang.String str9 = faker0.regexify("zho");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = faker0.resolve("italian");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u82f1\u6587" + "'", str7, "\u82f1\u6587");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "zho" + "'", str9, "zho");
    }

    @Test
    public void test0365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0365");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Address address10 = faker8.address();
        java.lang.String str12 = faker8.letterify("Korean");
        java.lang.String str14 = faker8.numerify("inglese (Canada)");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Korean" + "'", str12, "Korean");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "inglese (Canada)" + "'", str14, "inglese (Canada)");
    }

    @Test
    public void test0366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0366");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = locale0.stripExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getUnicodeLocaleType("en_CA");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: en_CA");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
    }

    @Test
    public void test0367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0367");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) (byte) 10);
        long long14 = random1.nextLong();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3831662765844904176L + "'", long14 == 3831662765844904176L);
    }

    @Test
    public void test0368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0368");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.App app5 = faker0.app();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(app5);
    }

    @Test
    public void test0369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0369");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        double double4 = random1.nextGaussian();
        java.util.stream.LongStream longStream5 = random1.longs();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream8 = random1.ints((int) 'x', (int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.7853314409882288d + "'", double4 == 1.7853314409882288d);
        org.junit.Assert.assertNotNull(longStream5);
    }

    @Test
    public void test0370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0370");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        com.github.javafaker.Book book8 = faker6.book();
        com.github.javafaker.Finance finance9 = faker6.finance();
        com.github.javafaker.Book book10 = faker6.book();
        com.github.javafaker.Options options11 = faker6.options();
        com.github.javafaker.PhoneNumber phoneNumber12 = faker6.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService13 = faker6.fakeValuesService;
        faker0.fakeValuesService = fakeValuesService13;
        com.github.javafaker.Company company15 = faker0.company;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(book10);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(phoneNumber12);
        org.junit.Assert.assertNotNull(fakeValuesService13);
        org.junit.Assert.assertNotNull(company15);
    }

    @Test
    public void test0371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0371");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale6.toLanguageTag();
        java.lang.String str8 = locale1.getDisplayLanguage(locale6);
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker(locale1);
        java.lang.String str10 = locale0.getDisplayScript(locale1);
        java.lang.String str11 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "en-CA" + "'", str7, "en-CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italian" + "'", str8, "Italian");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "fra" + "'", str11, "fra");
    }

    @Test
    public void test0372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0372");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("it", strMap1);
        java.util.Locale.LanguageRange languageRange4 = new java.util.Locale.LanguageRange("eng");
        double double5 = languageRange4.getWeight();
        double double6 = languageRange4.getWeight();
        java.lang.String str7 = languageRange4.getRange();
        double double8 = languageRange4.getWeight();
        java.util.Locale.LanguageRange languageRange10 = new java.util.Locale.LanguageRange("eng");
        double double11 = languageRange10.getWeight();
        double double12 = languageRange10.getWeight();
        java.lang.String str13 = languageRange10.getRange();
        double double14 = languageRange10.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray15 = new java.util.Locale.LanguageRange[] { languageRange4, languageRange10 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList16 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList16, languageRangeArray15);
        java.util.Locale.LanguageRange[] languageRangeArray18 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList19 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList19, languageRangeArray18);
        java.util.Locale locale21 = java.util.Locale.ENGLISH;
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.lang.String str23 = locale22.getDisplayVariant();
        java.util.Locale locale24 = java.util.Locale.CANADA;
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.util.Locale locale35 = locale31.stripExtensions();
        java.util.Locale locale36 = java.util.Locale.CANADA;
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale36.getISO3Language();
        java.lang.String str40 = locale36.getDisplayVariant();
        java.lang.String str42 = locale36.getExtension('a');
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.lang.String str46 = locale43.getISO3Language();
        java.util.Locale locale47 = locale43.stripExtensions();
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.lang.String str52 = locale48.getDisplayVariant();
        java.lang.String str54 = locale48.getExtension('a');
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getISO3Language();
        java.lang.String str59 = locale55.getDisplayVariant();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.util.Locale locale63 = java.util.Locale.CANADA;
        java.lang.String str64 = locale63.getDisplayVariant();
        java.util.Locale locale65 = java.util.Locale.ITALIAN;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale67 = java.util.Locale.KOREAN;
        java.lang.String str68 = locale66.getDisplayName(locale67);
        java.lang.String str69 = locale66.getISO3Language();
        java.util.Locale locale70 = locale66.stripExtensions();
        java.lang.String str71 = locale70.toLanguageTag();
        java.lang.String str72 = locale65.getDisplayLanguage(locale70);
        java.util.Locale locale73 = java.util.Locale.CANADA;
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale73.getDisplayName(locale74);
        java.lang.String str76 = locale73.getCountry();
        java.util.Locale locale77 = java.util.Locale.CANADA;
        java.util.Locale locale78 = java.util.Locale.KOREAN;
        java.lang.String str79 = locale77.getDisplayName(locale78);
        java.lang.String str80 = locale77.getISO3Language();
        java.util.Locale locale81 = locale77.stripExtensions();
        java.util.Locale locale82 = java.util.Locale.JAPAN;
        java.util.Locale locale83 = java.util.Locale.CANADA;
        java.lang.String str84 = locale83.getDisplayVariant();
        java.util.Locale.setDefault(locale83);
        java.util.Locale[] localeArray86 = new java.util.Locale[] { locale21, locale22, locale25, locale28, locale30, locale35, locale36, locale47, locale48, locale55, locale61, locale63, locale65, locale73, locale77, locale82, locale83 };
        java.util.ArrayList<java.util.Locale> localeList87 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean88 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList87, localeArray86);
        java.util.Locale.FilteringMode filteringMode89 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, (java.util.Collection<java.util.Locale>) localeList87, filteringMode89);
        java.util.Collection<java.util.Locale> localeCollection91 = null;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList19, localeCollection91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList16, (java.util.Collection<java.util.Locale>) localeList92);
        java.util.Locale locale94 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList93);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 1.0d + "'", double6 == 1.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "eng" + "'", str7, "eng");
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.0d + "'", double8 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertTrue("'" + double12 + "' != '" + 1.0d + "'", double12 == 1.0d);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "eng" + "'", str13, "eng");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.0d + "'", double14 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(languageRangeArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str26 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str26, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str29, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str38, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "eng" + "'", str39, "eng");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "eng" + "'", str46, "eng");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "" + "'", str52, "");
        org.junit.Assert.assertNull(str54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "eng" + "'", str58, "eng");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str62, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale67);
        org.junit.Assert.assertEquals(locale67.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str68 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str68, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "eng" + "'", str69, "eng");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "en-CA" + "'", str71, "en-CA");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "Italian" + "'", str72, "Italian");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str75 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str75, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "CA" + "'", str76, "CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale78);
        org.junit.Assert.assertEquals(locale78.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str79 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str79, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "eng" + "'", str80, "eng");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale83);
        org.junit.Assert.assertEquals(locale83.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "" + "'", str84, "");
        org.junit.Assert.assertNotNull(localeArray86);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + true + "'", boolean88 == true);
        org.junit.Assert.assertTrue("'" + filteringMode89 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode89.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNull(locale94);
    }

    @Test
    public void test0373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0373");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        float float4 = random1.nextFloat();
        float float5 = random1.nextFloat();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        int int7 = random1.nextInt();
        org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.2689426f + "'", float4 == 0.2689426f);
        org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.43956196f + "'", float5 == 0.43956196f);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 52699159 + "'", int7 == 52699159);
    }

    @Test
    public void test0374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0374");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "English (Canada)" + "'", str1, "English (Canada)");
    }

    @Test
    public void test0375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0375");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("CAN");
        java.lang.String str2 = locale1.getCountry();
        java.lang.String str3 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "can");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test0376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0376");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        com.github.javafaker.Address address15 = faker5.address();
        faker0.address = address15;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name18 = faker17.name();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name20 = faker19.name();
        faker17.name = name20;
        faker0.name = name20;
        com.github.javafaker.DateAndTime dateAndTime23 = faker0.date();
        com.github.javafaker.Book book24 = faker0.book();
        com.github.javafaker.App app25 = faker0.app;
        com.github.javafaker.Color color26 = faker0.color;
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(name18);
        org.junit.Assert.assertNotNull(name20);
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(app25);
        org.junit.Assert.assertNull(color26);
    }

    @Test
    public void test0377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0377");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setUnicodeLocaleKeyword("deu", "CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
    }

    @Test
    public void test0378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0378");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        com.github.javafaker.Name name16 = faker0.name();
        com.github.javafaker.Address address17 = faker0.address();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(name16);
        org.junit.Assert.assertNotNull(address17);
    }

    @Test
    public void test0379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0379");
        java.util.Locale locale1 = new java.util.Locale("en-CA");
        java.lang.String str2 = locale1.getDisplayScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "en-ca");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0380");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Locale.LanguageRange[] languageRangeArray1 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList2 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean3 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList2, languageRangeArray1);
        java.util.Locale locale4 = java.util.Locale.ENGLISH;
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale14.getISO3Language();
        java.util.Locale locale18 = locale14.stripExtensions();
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale19.getISO3Language();
        java.lang.String str23 = locale19.getDisplayVariant();
        java.lang.String str25 = locale19.getExtension('a');
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.lang.String str29 = locale26.getISO3Language();
        java.util.Locale locale30 = locale26.stripExtensions();
        java.util.Locale locale31 = java.util.Locale.CANADA;
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.lang.String str34 = locale31.getISO3Language();
        java.lang.String str35 = locale31.getDisplayVariant();
        java.lang.String str37 = locale31.getExtension('a');
        java.util.Locale locale38 = java.util.Locale.CANADA;
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale38.getISO3Language();
        java.lang.String str42 = locale38.getDisplayVariant();
        java.util.Locale locale43 = java.util.Locale.CANADA;
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.lang.String str45 = locale43.getDisplayName(locale44);
        java.util.Locale locale46 = java.util.Locale.CANADA;
        java.lang.String str47 = locale46.getDisplayVariant();
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = locale53.toLanguageTag();
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale57 = java.util.Locale.KOREAN;
        java.lang.String str58 = locale56.getDisplayName(locale57);
        java.lang.String str59 = locale56.getCountry();
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getISO3Language();
        java.util.Locale locale64 = locale60.stripExtensions();
        java.util.Locale locale65 = java.util.Locale.JAPAN;
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.lang.String str67 = locale66.getDisplayVariant();
        java.util.Locale.setDefault(locale66);
        java.util.Locale[] localeArray69 = new java.util.Locale[] { locale4, locale5, locale8, locale11, locale13, locale18, locale19, locale30, locale31, locale38, locale44, locale46, locale48, locale56, locale60, locale65, locale66 };
        java.util.ArrayList<java.util.Locale> localeList70 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList70, localeArray69);
        java.util.Locale.FilteringMode filteringMode72 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList73 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList2, (java.util.Collection<java.util.Locale>) localeList70, filteringMode72);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList74 = java.util.Locale.filter(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList73);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeArray1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str12, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str16, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str21, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "eng" + "'", str22, "eng");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNull(str25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str33, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "eng" + "'", str34, "eng");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str40, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "eng" + "'", str41, "eng");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str45 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str45, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str51, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "eng" + "'", str52, "eng");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-CA" + "'", str54, "en-CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian" + "'", str55, "Italian");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str58 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str58, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "CA" + "'", str59, "CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str62, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "eng" + "'", str63, "eng");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "" + "'", str67, "");
        org.junit.Assert.assertNotNull(localeArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertTrue("'" + filteringMode72 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode72.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList73);
    }

    @Test
    public void test0381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0381");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.service.RandomService randomService4 = faker0.randomService;
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Hacker hacker8 = null;
        faker0.hacker = hacker8;
        com.github.javafaker.Internet internet10 = faker0.internet;
        java.lang.String str12 = faker0.bothify("english");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(internet10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "english" + "'", str12, "english");
    }

    @Test
    public void test0382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0382");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        java.lang.String str2 = faker0.bothify("Korean");
        com.github.javafaker.Color color3 = faker0.color;
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance5 = faker4.finance;
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.DateAndTime dateAndTime10 = faker6.dateAndTime;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.Book book19 = faker15.book();
        faker11.book = book19;
        faker6.book = book19;
        faker4.book = book19;
        com.github.javafaker.Internet internet23 = null;
        faker4.internet = internet23;
        com.github.javafaker.Name name25 = faker4.name;
        faker0.name = name25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.DateAndTime dateAndTime31 = faker27.dateAndTime;
        java.lang.String str33 = faker27.letterify("en-CA");
        com.github.javafaker.Code code34 = null;
        faker27.code = code34;
        com.github.javafaker.Book book36 = faker27.book();
        com.github.javafaker.Number number37 = faker27.number();
        faker0.number = number37;
        com.github.javafaker.Book book39 = faker0.book;
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Korean" + "'", str2, "Korean");
        org.junit.Assert.assertNotNull(color3);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(dateAndTime31);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "en-CA" + "'", str33, "en-CA");
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(number37);
        org.junit.Assert.assertNotNull(book39);
    }

    @Test
    public void test0383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0383");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder10.setVariant("English (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: English (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test0384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0384");
        java.util.Locale locale0 = java.util.Locale.UK;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale3 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale4 = locale3.stripExtensions();
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = locale6.getCountry();
        java.lang.String str10 = locale6.getScript();
        java.util.Locale locale11 = java.util.Locale.CANADA;
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.lang.String str14 = locale11.getISO3Language();
        java.util.Locale locale15 = locale11.stripExtensions();
        java.lang.String str16 = locale6.getDisplayScript(locale15);
        java.lang.String str17 = locale5.getDisplayScript(locale6);
        java.util.Locale locale21 = new java.util.Locale("Italian", "", "English");
        java.lang.String str22 = locale6.getDisplayLanguage(locale21);
        java.lang.String str23 = locale0.getDisplayLanguage(locale21);
        java.util.Locale.setDefault(locale0);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "CA" + "'", str9, "CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str13, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "eng" + "'", str14, "eng");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale21.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "English" + "'", str22, "English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
    }

    @Test
    public void test0385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0385");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("english");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder7.setRegion("\uc601\uc5b4\uce90\ub098\ub2e4)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0386");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        java.util.stream.DoubleStream doubleStream8 = random1.doubles((long) (byte) 0);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test0387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0387");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.Random random14 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream15 = random14.longs();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random14.nextBytes(byteArray22);
        random12.nextBytes(byteArray22);
        random9.nextBytes(byteArray22);
        random1.nextBytes(byteArray22);
        float float27 = random1.nextFloat();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.4100808f + "'", float27 == 0.4100808f);
    }

    @Test
    public void test0388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0388");
        java.util.Locale locale0 = java.util.Locale.CHINA;
        java.util.Random random2 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream3 = random2.longs();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale0, random2);
        long long5 = random2.nextLong();
        java.util.stream.LongStream longStream6 = random2.longs();
        double double7 = random2.nextDouble();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(random2);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream12 = random2.longs((-4964420948893066024L), (-4972683369271453960L), 3831662765844904176L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-4964420948893066024L) + "'", long5 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.41008081149220166d + "'", double7 == 0.41008081149220166d);
    }

    @Test
    public void test0389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0389");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (-1));
        double double4 = random1.nextGaussian();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream7 = random6.longs();
        int int9 = random6.nextInt((int) 'u');
        random6.setSeed((long) (byte) 10);
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.Random random15 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream16 = random15.longs();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random15.nextBytes(byteArray23);
        random13.nextBytes(byteArray23);
        random6.nextBytes(byteArray23);
        random1.nextBytes(byteArray23);
        java.util.Random random29 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream30 = random29.doubles();
        java.util.stream.IntStream intStream31 = random29.ints();
        java.util.stream.LongStream longStream35 = random29.longs((long) 100, 0L, (long) 'u');
        java.util.Random random37 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream38 = random37.doubles();
        java.util.Random random40 = new java.util.Random((long) 1);
        java.util.Random random42 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream43 = random42.longs();
        byte[] byteArray50 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random42.nextBytes(byteArray50);
        random40.nextBytes(byteArray50);
        random37.nextBytes(byteArray50);
        random29.nextBytes(byteArray50);
        random1.nextBytes(byteArray50);
        java.util.stream.LongStream longStream58 = random1.longs((long) (-1), (long) (short) 1);
        java.util.stream.DoubleStream doubleStream59 = random1.doubles();
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.7853314409882288d + "'", double4 == 1.7853314409882288d);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 69 + "'", int9 == 69);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-54, -101, 127, -45, -10, 56]");
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertNotNull(longStream35);
        org.junit.Assert.assertNotNull(doubleStream38);
        org.junit.Assert.assertNotNull(longStream43);
        org.junit.Assert.assertNotNull(byteArray50);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[0, 117, 88, -50, 65, -21]");
        org.junit.Assert.assertNotNull(longStream58);
        org.junit.Assert.assertNotNull(doubleStream59);
    }

    @Test
    public void test0390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0390");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        java.util.stream.LongStream longStream10 = random5.longs((long) (short) 100);
        java.util.Random random12 = new java.util.Random((long) 1);
        random12.setSeed((long) (-1));
        double double15 = random12.nextGaussian();
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream18 = random17.longs();
        int int20 = random17.nextInt((int) 'u');
        random17.setSeed((long) (byte) 10);
        java.util.Random random24 = new java.util.Random((long) 1);
        java.util.Random random26 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream27 = random26.longs();
        byte[] byteArray34 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random26.nextBytes(byteArray34);
        random24.nextBytes(byteArray34);
        random17.nextBytes(byteArray34);
        random12.nextBytes(byteArray34);
        random5.nextBytes(byteArray34);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertTrue("'" + double15 + "' != '" + 1.7853314409882288d + "'", double15 == 1.7853314409882288d);
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 69 + "'", int20 == 69);
        org.junit.Assert.assertNotNull(longStream27);
        org.junit.Assert.assertNotNull(byteArray34);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray34), "[115, -43, 26, -69, -40, -100]");
    }

    @Test
    public void test0391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0391");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.PhoneNumber phoneNumber5 = faker0.phoneNumber();
        org.junit.Assert.assertNotNull(phoneNumber5);
    }

    @Test
    public void test0392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0392");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.UK;
        java.lang.String str2 = locale1.getDisplayVariant();
        java.util.Locale locale4 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale5 = locale4.stripExtensions();
        java.util.Locale locale6 = locale5.stripExtensions();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getCountry();
        java.lang.String str11 = locale7.getScript();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale7.getDisplayScript(locale16);
        java.lang.String str18 = locale6.getDisplayScript(locale7);
        java.util.Locale locale22 = new java.util.Locale("Italian", "", "English");
        java.lang.String str23 = locale7.getDisplayLanguage(locale22);
        java.lang.String str24 = locale1.getDisplayLanguage(locale22);
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.lang.String str35 = locale30.toLanguageTag();
        java.util.Locale.setDefault(category0, locale30);
        java.util.Locale locale37 = java.util.Locale.getDefault();
        java.util.Locale.setDefault(category0, locale37);
        java.util.Locale locale39 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals(locale4.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "CA" + "'", str10, "CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale22.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "English" + "'", str23, "English");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "English" + "'", str24, "English");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "en-CA" + "'", str35, "en-CA");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_GB");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_GB");
    }

    @Test
    public void test0393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0393");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        com.github.javafaker.Book book6 = faker4.book();
        com.github.javafaker.Finance finance7 = faker4.finance();
        com.github.javafaker.Book book8 = faker4.book();
        com.github.javafaker.Options options9 = faker4.options();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker4.phoneNumber();
        faker0.phoneNumber = phoneNumber10;
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService13 = faker12.randomService;
        java.lang.String str15 = faker12.bothify("");
        java.lang.String str17 = faker12.letterify("eng");
        com.github.javafaker.service.RandomService randomService18 = faker12.randomService;
        faker0.randomService = randomService18;
        com.github.javafaker.Options options20 = faker0.options;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertNotNull(book6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(phoneNumber10);
        org.junit.Assert.assertNotNull(randomService13);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "eng" + "'", str17, "eng");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(options20);
    }

    @Test
    public void test0394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0394");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Hacker hacker7 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(hacker7);
    }

    @Test
    public void test0395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0395");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getLanguage();
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream18 = random17.longs();
        java.util.stream.DoubleStream doubleStream19 = random17.doubles();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale12, random17);
        java.lang.String str21 = locale9.getDisplayVariant(locale12);
        java.util.Locale locale22 = java.util.Locale.CANADA;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.util.Locale locale25 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale25);
        java.lang.String str27 = locale23.getDisplayName(locale25);
        java.lang.String str28 = locale12.getDisplayName(locale25);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str24, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "coreano" + "'", str27, "coreano");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "inglese (Canada)" + "'", str28, "inglese (Canada)");
    }

    @Test
    public void test0396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0396");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder7.setScript("IT");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: IT [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test0397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0397");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("eng", "und");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: eng [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0398");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.lang.String str1 = locale0.getVariant();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "");
    }

    @Test
    public void test0399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0399");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        java.util.stream.DoubleStream doubleStream17 = random1.doubles((long) ' ', 0.0d, (double) 10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream21 = random1.longs((long) (byte) -1, (long) (short) 1, 0L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream17);
    }

    @Test
    public void test0400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0400");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        java.lang.String str6 = faker0.letterify("English");
        com.github.javafaker.Name name7 = faker0.name;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.Book book12 = faker8.book();
        com.github.javafaker.Number number13 = faker8.number();
        com.github.javafaker.Finance finance14 = faker8.finance;
        faker0.finance = finance14;
        com.github.javafaker.Book book16 = faker0.book();
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(book12);
        org.junit.Assert.assertNotNull(number13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(book16);
    }

    @Test
    public void test0401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0401");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.PhoneNumber phoneNumber5 = faker0.phoneNumber();
        com.github.javafaker.App app6 = faker0.app;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(phoneNumber5);
        org.junit.Assert.assertNotNull(app6);
    }

    @Test
    public void test0402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0402");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService19 = faker18.randomService;
        com.github.javafaker.Book book20 = faker18.book();
        com.github.javafaker.Finance finance21 = faker18.finance();
        com.github.javafaker.Lorem lorem22 = faker18.lorem();
        com.github.javafaker.Finance finance23 = faker18.finance();
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        java.lang.String str29 = faker24.letterify("eng");
        com.github.javafaker.service.RandomService randomService30 = faker24.randomService;
        faker18.randomService = randomService30;
        faker16.randomService = randomService30;
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService34 = faker33.randomService;
        java.lang.String str36 = faker33.bothify("");
        com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService38 = faker37.randomService;
        java.lang.String str40 = faker37.bothify("");
        com.github.javafaker.Book book41 = faker37.book();
        faker33.book = book41;
        com.github.javafaker.DateAndTime dateAndTime43 = faker33.dateAndTime;
        com.github.javafaker.Faker faker44 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService45 = faker44.randomService;
        java.lang.String str47 = faker44.bothify("");
        com.github.javafaker.Book book48 = faker44.book();
        com.github.javafaker.Finance finance49 = faker44.finance();
        com.github.javafaker.Faker faker50 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService51 = faker50.randomService;
        java.lang.String str53 = faker50.bothify("");
        com.github.javafaker.Faker faker54 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService55 = faker54.randomService;
        java.lang.String str57 = faker54.bothify("");
        com.github.javafaker.Book book58 = faker54.book();
        faker50.book = book58;
        com.github.javafaker.Options options60 = faker50.options();
        faker44.options = options60;
        com.github.javafaker.service.RandomService randomService62 = faker44.randomService;
        com.github.javafaker.Faker faker63 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService64 = faker63.randomService;
        com.github.javafaker.Book book65 = faker63.book();
        com.github.javafaker.Finance finance66 = faker63.finance();
        com.github.javafaker.Book book67 = faker63.book();
        com.github.javafaker.Options options68 = faker63.options();
        com.github.javafaker.PhoneNumber phoneNumber69 = faker63.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService70 = faker63.fakeValuesService;
        faker44.fakeValuesService = fakeValuesService70;
        faker33.fakeValuesService = fakeValuesService70;
        faker16.fakeValuesService = fakeValuesService70;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(randomService19);
        org.junit.Assert.assertNotNull(book20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(lorem22);
        org.junit.Assert.assertNotNull(finance23);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "eng" + "'", str29, "eng");
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertNotNull(randomService34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(randomService38);
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNotNull(book41);
        org.junit.Assert.assertNotNull(dateAndTime43);
        org.junit.Assert.assertNotNull(randomService45);
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(book48);
        org.junit.Assert.assertNotNull(finance49);
        org.junit.Assert.assertNotNull(randomService51);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(randomService55);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNotNull(book58);
        org.junit.Assert.assertNotNull(options60);
        org.junit.Assert.assertNotNull(randomService62);
        org.junit.Assert.assertNotNull(randomService64);
        org.junit.Assert.assertNotNull(book65);
        org.junit.Assert.assertNotNull(finance66);
        org.junit.Assert.assertNotNull(book67);
        org.junit.Assert.assertNotNull(options68);
        org.junit.Assert.assertNotNull(phoneNumber69);
        org.junit.Assert.assertNotNull(fakeValuesService70);
    }

    @Test
    public void test0403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0403");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        random1.setSeed((long) 4);
        java.util.stream.LongStream longStream6 = random1.longs((long) 23);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(longStream6);
    }

    @Test
    public void test0404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0404");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getLanguage();
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream18 = random17.longs();
        java.util.stream.DoubleStream doubleStream19 = random17.doubles();
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale12, random17);
        java.lang.String str21 = locale9.getDisplayVariant(locale12);
        java.util.Locale locale25 = new java.util.Locale("English", "\u52a0\u62ff\u5927", "English");
        java.lang.String str26 = locale9.getDisplayName(locale25);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "en" + "'", str15, "en");
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "\u52a0\u62ff\u5927_English");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "English (Canada)" + "'", str26, "English (Canada)");
    }

    @Test
    public void test0405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0405");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder8 = builder5.setUnicodeLocaleKeyword("CA", "ITALIAN");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setScript("deu");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: deu [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0406");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options1 = faker0.options;
        com.github.javafaker.Finance finance2 = faker0.finance;
        java.lang.String str4 = faker0.bothify("zh");
        com.github.javafaker.Name name5 = faker0.name;
        org.junit.Assert.assertNotNull(options1);
        org.junit.Assert.assertNotNull(finance2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "zh" + "'", str4, "zh");
        org.junit.Assert.assertNotNull(name5);
    }

    @Test
    public void test0407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0407");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Locale locale1 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale1);
        boolean boolean3 = locale1.hasExtensions();
        java.util.Locale locale4 = locale1.stripExtensions();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.lang.String str6 = locale5.getDisplayVariant();
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale5.getDisplayLanguage(locale11);
        java.lang.String str13 = locale11.getDisplayCountry();
        java.lang.String str14 = locale4.getDisplayCountry(locale11);
        java.lang.String str15 = locale0.getDisplayVariant(locale4);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "English" + "'", str12, "English");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Canada" + "'", str13, "Canada");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test0408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0408");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.getDefault(category0);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale7.getDisplayName();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale7.getDisplayName(locale9);
        java.lang.String str15 = locale4.getDisplayName(locale9);
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale17 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587" + "'", str8, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "English (Canada)" + "'", str15, "English (Canada)");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
    }

    @Test
    public void test0409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0409");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("CAN");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap2 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap2);
        java.util.Collection<java.util.Locale> localeCollection4 = null;
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap6 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList7 = java.util.Locale.LanguageRange.parse("Canada", strMap6);
        java.util.Locale locale8 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleKeys();
        java.util.Locale.LanguageRange[] languageRangeArray10 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList11 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList11, languageRangeArray10);
        java.util.Locale locale13 = java.util.Locale.ENGLISH;
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.lang.String str15 = locale14.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.CANADA;
        java.util.Locale locale17 = java.util.Locale.KOREAN;
        java.lang.String str18 = locale16.getDisplayName(locale17);
        java.util.Locale locale19 = java.util.Locale.CANADA;
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale23.getISO3Language();
        java.util.Locale locale27 = locale23.stripExtensions();
        java.util.Locale locale28 = java.util.Locale.CANADA;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayName(locale29);
        java.lang.String str31 = locale28.getISO3Language();
        java.lang.String str32 = locale28.getDisplayVariant();
        java.lang.String str34 = locale28.getExtension('a');
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.util.Locale locale39 = locale35.stripExtensions();
        java.util.Locale locale40 = java.util.Locale.CANADA;
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale40.getISO3Language();
        java.lang.String str44 = locale40.getDisplayVariant();
        java.lang.String str46 = locale40.getExtension('a');
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.lang.String str50 = locale47.getISO3Language();
        java.lang.String str51 = locale47.getDisplayVariant();
        java.util.Locale locale52 = java.util.Locale.CANADA;
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.lang.String str56 = locale55.getDisplayVariant();
        java.util.Locale locale57 = java.util.Locale.ITALIAN;
        java.util.Locale locale58 = java.util.Locale.CANADA;
        java.util.Locale locale59 = java.util.Locale.KOREAN;
        java.lang.String str60 = locale58.getDisplayName(locale59);
        java.lang.String str61 = locale58.getISO3Language();
        java.util.Locale locale62 = locale58.stripExtensions();
        java.lang.String str63 = locale62.toLanguageTag();
        java.lang.String str64 = locale57.getDisplayLanguage(locale62);
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.getCountry();
        java.util.Locale locale69 = java.util.Locale.CANADA;
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.lang.String str72 = locale69.getISO3Language();
        java.util.Locale locale73 = locale69.stripExtensions();
        java.util.Locale locale74 = java.util.Locale.JAPAN;
        java.util.Locale locale75 = java.util.Locale.CANADA;
        java.lang.String str76 = locale75.getDisplayVariant();
        java.util.Locale.setDefault(locale75);
        java.util.Locale[] localeArray78 = new java.util.Locale[] { locale13, locale14, locale17, locale20, locale22, locale27, locale28, locale39, locale40, locale47, locale53, locale55, locale57, locale65, locale69, locale74, locale75 };
        java.util.ArrayList<java.util.Locale> localeList79 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList79, localeArray78);
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList82 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList11, (java.util.Collection<java.util.Locale>) localeList79, filteringMode81);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList7, (java.util.Collection<java.lang.String>) strSet9, filteringMode81);
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList84 = java.util.Locale.filter(languageRangeList1, localeCollection4, filteringMode81);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNotNull(languageRangeArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str18, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str21, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "eng" + "'", str26, "eng");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str30 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str30, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "eng" + "'", str31, "eng");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNull(str34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str42, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "eng" + "'", str43, "eng");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNull(str46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str49, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str54 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str54, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str60 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str60, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "eng" + "'", str61, "eng");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en-CA" + "'", str63, "en-CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Italian" + "'", str64, "Italian");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str67, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "CA" + "'", str68, "CA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str71 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str71, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "eng" + "'", str72, "eng");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale75);
        org.junit.Assert.assertEquals(locale75.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "" + "'", str76, "");
        org.junit.Assert.assertNotNull(localeArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode81.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList82);
        org.junit.Assert.assertNotNull(strList83);
    }

    @Test
    public void test0410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0410");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        faker0.dateAndTime = dateAndTime9;
        com.github.javafaker.Code code11 = null;
        faker0.code = code11;
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService14 = faker13.randomService;
        java.lang.String str16 = faker13.bothify("");
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        com.github.javafaker.Book book19 = faker17.book();
        com.github.javafaker.Finance finance20 = faker17.finance();
        com.github.javafaker.Book book21 = faker17.book();
        com.github.javafaker.Options options22 = faker17.options();
        com.github.javafaker.PhoneNumber phoneNumber23 = faker17.phoneNumber();
        faker13.phoneNumber = phoneNumber23;
        com.github.javafaker.Name name25 = faker13.name();
        faker0.name = name25;
        com.github.javafaker.Internet internet27 = faker0.internet;
        java.lang.String str29 = faker0.numerify("de");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(randomService14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertNotNull(options22);
        org.junit.Assert.assertNotNull(phoneNumber23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(internet27);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "de" + "'", str29, "de");
    }

    @Test
    public void test0411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0411");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream11 = random1.ints(0L, 52699159, 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test0412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0412");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        long long11 = random1.nextLong();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles(1853403699951111791L);
        java.util.stream.IntStream intStream17 = random1.ints(1L, (-1), 4);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 7564655870752979346L + "'", long11 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(intStream17);
    }

    @Test
    public void test0413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0413");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setLanguage("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder5.setUnicodeLocaleKeyword("\uc601\uc5b4\uce90\ub098\ub2e4)", "en_CA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test0414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0414");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.util.Locale locale19 = new java.util.Locale("ita", "English (Canada)");
        java.util.Locale locale20 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str21 = locale19.getDisplayLanguage(locale20);
        java.util.Random random23 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream24 = random23.longs();
        int int26 = random23.nextInt((int) 'u');
        random23.setSeed((long) (byte) 10);
        java.util.Random random30 = new java.util.Random((long) 1);
        java.util.Random random32 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream33 = random32.longs();
        byte[] byteArray40 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random32.nextBytes(byteArray40);
        random30.nextBytes(byteArray40);
        random23.nextBytes(byteArray40);
        com.github.javafaker.Faker faker44 = new com.github.javafaker.Faker(locale20, random23);
        java.lang.String str45 = locale13.getDisplayName(locale20);
        java.util.Set<java.lang.Character> charSet46 = locale13.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals(locale19.toString(), "ita_ENGLISH (CANADA)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "Italien" + "'", str21, "Italien");
        org.junit.Assert.assertNotNull(longStream24);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 69 + "'", int26 == 69);
        org.junit.Assert.assertNotNull(longStream33);
        org.junit.Assert.assertNotNull(byteArray40);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray40), "[-46, 122, -3, -70, -8, 22]");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "anglais (Canada)" + "'", str45, "anglais (Canada)");
        org.junit.Assert.assertNotNull(charSet46);
    }

    @Test
    public void test0415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0415");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        com.github.javafaker.Address address15 = faker5.address();
        faker0.address = address15;
        com.github.javafaker.Book book17 = faker0.book;
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(book17);
    }

    @Test
    public void test0416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0416");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ENGLISH;
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale13.getISO3Language();
        java.util.Locale locale17 = locale13.stripExtensions();
        java.util.Locale locale18 = java.util.Locale.CANADA;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale18.getISO3Language();
        java.lang.String str22 = locale18.getDisplayVariant();
        java.lang.String str24 = locale18.getExtension('a');
        java.util.Locale locale25 = java.util.Locale.CANADA;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale25.getISO3Language();
        java.util.Locale locale29 = locale25.stripExtensions();
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.lang.String str34 = locale30.getDisplayVariant();
        java.lang.String str36 = locale30.getExtension('a');
        java.util.Locale locale37 = java.util.Locale.CANADA;
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.lang.String str40 = locale37.getISO3Language();
        java.lang.String str41 = locale37.getDisplayVariant();
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.util.Locale locale45 = java.util.Locale.CANADA;
        java.lang.String str46 = locale45.getDisplayVariant();
        java.util.Locale locale47 = java.util.Locale.ITALIAN;
        java.util.Locale locale48 = java.util.Locale.CANADA;
        java.util.Locale locale49 = java.util.Locale.KOREAN;
        java.lang.String str50 = locale48.getDisplayName(locale49);
        java.lang.String str51 = locale48.getISO3Language();
        java.util.Locale locale52 = locale48.stripExtensions();
        java.lang.String str53 = locale52.toLanguageTag();
        java.lang.String str54 = locale47.getDisplayLanguage(locale52);
        java.util.Locale locale55 = java.util.Locale.CANADA;
        java.util.Locale locale56 = java.util.Locale.KOREAN;
        java.lang.String str57 = locale55.getDisplayName(locale56);
        java.lang.String str58 = locale55.getCountry();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.lang.String str62 = locale59.getISO3Language();
        java.util.Locale locale63 = locale59.stripExtensions();
        java.util.Locale locale64 = java.util.Locale.JAPAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.lang.String str66 = locale65.getDisplayVariant();
        java.util.Locale.setDefault(locale65);
        java.util.Locale[] localeArray68 = new java.util.Locale[] { locale3, locale4, locale7, locale10, locale12, locale17, locale18, locale29, locale30, locale37, locale43, locale45, locale47, locale55, locale59, locale64, locale65 };
        java.util.ArrayList<java.util.Locale> localeList69 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean70 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList69, localeArray68);
        java.util.Locale.FilteringMode filteringMode71 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList72 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.util.Locale>) localeList69, filteringMode71);
        java.util.Locale.Category category73 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale74 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category73, locale74);
        java.util.Set<java.lang.String> strSet76 = locale74.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList77 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet76);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str15, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str20, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "eng" + "'", str21, "eng");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str27, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "eng" + "'", str28, "eng");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNull(str36);
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str39 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str39, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "eng" + "'", str40, "eng");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str50, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "eng" + "'", str51, "eng");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "en-CA" + "'", str53, "en-CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "Italian" + "'", str54, "Italian");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str57 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str57, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "CA" + "'", str58, "CA");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "eng" + "'", str62, "eng");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(localeArray68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + true + "'", boolean70 == true);
        org.junit.Assert.assertTrue("'" + filteringMode71 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode71.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList72);
        org.junit.Assert.assertTrue("'" + category73 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category73.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(strSet76);
        org.junit.Assert.assertNotNull(strList77);
    }

    @Test
    public void test0417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0417");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService2 = faker1.randomService;
        java.lang.String str4 = faker1.bothify("");
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Book book9 = faker5.book();
        faker1.book = book9;
        com.github.javafaker.Options options11 = faker1.options();
        com.github.javafaker.App app12 = faker1.app;
        faker0.app = app12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.Book book18 = faker14.book();
        com.github.javafaker.Book book19 = faker14.book;
        com.github.javafaker.Finance finance20 = faker14.finance();
        com.github.javafaker.Business business21 = faker14.business();
        com.github.javafaker.Color color22 = faker14.color();
        com.github.javafaker.Color color23 = faker14.color();
        faker0.color = color23;
        org.junit.Assert.assertNotNull(randomService2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(app12);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(book18);
        org.junit.Assert.assertNotNull(book19);
        org.junit.Assert.assertNotNull(finance20);
        org.junit.Assert.assertNotNull(business21);
        org.junit.Assert.assertNotNull(color22);
        org.junit.Assert.assertNotNull(color23);
    }

    @Test
    public void test0418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0418");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Book book2 = faker0.book();
        java.lang.String str4 = faker0.regexify("ko");
        com.github.javafaker.Business business5 = faker0.business;
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko" + "'", str4, "ko");
        org.junit.Assert.assertNotNull(business5);
    }

    @Test
    public void test0419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0419");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
    }

    @Test
    public void test0420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0420");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getLanguage();
        java.util.Random random5 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream6 = random5.longs();
        java.util.stream.DoubleStream doubleStream7 = random5.doubles();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0, random5);
        java.util.stream.LongStream longStream10 = random5.longs((long) (short) 100);
        double double11 = random5.nextDouble();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "en" + "'", str3, "en");
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(longStream10);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.7308781907032909d + "'", double11 == 0.7308781907032909d);
    }

    @Test
    public void test0421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0421");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale11);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale6);
        com.github.javafaker.Number number15 = faker14.number;
        com.github.javafaker.Lorem lorem16 = faker14.lorem;
        faker0.lorem = lorem16;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en-CA" + "'", str12, "en-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertNotNull(number15);
        org.junit.Assert.assertNotNull(lorem16);
    }

    @Test
    public void test0422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0422");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Number number9 = faker8.number;
        com.github.javafaker.Business business10 = faker8.business;
        com.github.javafaker.App app11 = faker8.app();
        com.github.javafaker.Finance finance12 = faker8.finance;
        com.github.javafaker.PhoneNumber phoneNumber13 = faker8.phoneNumber();
        com.github.javafaker.Options options14 = faker8.options;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(app11);
        org.junit.Assert.assertNotNull(finance12);
        org.junit.Assert.assertNotNull(phoneNumber13);
        org.junit.Assert.assertNotNull(options14);
    }

    @Test
    public void test0423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0423");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder9 = builder7.setLanguageTag("english");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.setExtension(' ', "\u82f1\u6587)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test0424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0424");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getVariant();
        boolean boolean12 = locale9.hasExtensions();
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale13.getDisplayName();
        java.util.Locale locale15 = java.util.Locale.CANADA;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.lang.String str18 = locale15.getISO3Language();
        java.util.Locale locale19 = locale15.stripExtensions();
        java.lang.String str20 = locale13.getDisplayName(locale15);
        java.util.Locale locale21 = java.util.Locale.CHINA;
        java.util.Set<java.lang.Character> charSet22 = locale21.getExtensionKeys();
        java.lang.String str23 = locale13.getDisplayVariant(locale21);
        java.lang.String str24 = locale9.getDisplayScript(locale21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str17, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "eng" + "'", str18, "eng");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Korean" + "'", str20, "Korean");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test0425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0425");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale3.getDisplayName();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale3.getDisplayName(locale5);
        java.util.Locale locale11 = java.util.Locale.CHINA;
        java.util.Set<java.lang.Character> charSet12 = locale11.getExtensionKeys();
        java.lang.String str13 = locale3.getDisplayVariant(locale11);
        java.util.Random random15 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream16 = random15.longs();
        byte[] byteArray23 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random15.nextBytes(byteArray23);
        double double25 = random15.nextGaussian();
        java.util.stream.DoubleStream doubleStream27 = random15.doubles((long) '#');
        int int28 = random15.nextInt();
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker(locale11, random15);
        boolean boolean30 = locale1.equals((java.lang.Object) faker29);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u671d\u9c9c\u6587" + "'", str4, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Korean" + "'", str10, "Korean");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(byteArray23);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-0.4123569817688534d) + "'", double25 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1429008869 + "'", int28 == 1429008869);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test0426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0426");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Finance finance9 = faker0.finance();
        com.github.javafaker.Lorem lorem10 = faker0.lorem();
        com.github.javafaker.PhoneNumber phoneNumber11 = faker0.phoneNumber;
        com.github.javafaker.Finance finance12 = faker0.finance();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(lorem10);
        org.junit.Assert.assertNotNull(phoneNumber11);
        org.junit.Assert.assertNotNull(finance12);
    }

    @Test
    public void test0427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0427");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        faker6.book = book14;
        com.github.javafaker.Options options16 = faker6.options();
        faker0.options = options16;
        com.github.javafaker.Options options18 = faker0.options;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertNotNull(options18);
    }

    @Test
    public void test0428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0428");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale0);
        boolean boolean2 = locale0.hasExtensions();
        java.util.Locale locale3 = locale0.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.lang.String str5 = locale4.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.lang.String str9 = locale6.getISO3Language();
        java.util.Locale locale10 = locale6.stripExtensions();
        java.lang.String str11 = locale4.getDisplayLanguage(locale10);
        java.lang.String str12 = locale10.getDisplayCountry();
        java.lang.String str13 = locale3.getDisplayCountry(locale10);
        java.lang.String str14 = locale3.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str8, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "eng" + "'", str9, "eng");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "English" + "'", str11, "English");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "italiano" + "'", str14, "italiano");
    }

    @Test
    public void test0429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0429");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.removeUnicodeLocaleAttribute("Canada");
        java.util.Locale.Builder builder7 = builder3.setVariant("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder10 = builder8.setLanguage("English");
        java.util.Locale.Builder builder12 = builder10.setVariant("Italien");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder12.setRegion("english");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: english [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test0430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0430");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        com.github.javafaker.PhoneNumber phoneNumber18 = faker16.phoneNumber;
        java.lang.String str20 = faker16.numerify("");
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertNotNull(phoneNumber18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
    }

    @Test
    public void test0431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0431");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = locale0.stripExtensions();
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "en" + "'", str4, "en");
    }

    @Test
    public void test0432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0432");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = locale1.getUnicodeLocaleType("en_US");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: en_US");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test0433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0433");
        java.util.Locale locale2 = new java.util.Locale("eng", "english");
        org.junit.Assert.assertEquals(locale2.toString(), "eng_ENGLISH");
    }

    @Test
    public void test0434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0434");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("eng");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        double double4 = languageRange1.getWeight();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "eng" + "'", str2, "eng");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
    }

    @Test
    public void test0435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0435");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getCountry();
        java.lang.String str4 = locale0.getScript();
        java.util.Locale locale5 = java.util.Locale.CANADA;
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale5.getISO3Language();
        java.util.Locale locale9 = locale5.stripExtensions();
        java.lang.String str10 = locale0.getDisplayScript(locale9);
        java.lang.String str11 = locale9.getDisplayCountry();
        java.lang.String str12 = locale9.getDisplayCountry();
        java.util.Random random14 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream15 = random14.longs();
        byte[] byteArray22 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random14.nextBytes(byteArray22);
        long long24 = random14.nextLong();
        java.util.stream.DoubleStream doubleStream26 = random14.doubles((long) (byte) 10);
        java.util.stream.LongStream longStream27 = random14.longs();
        java.util.stream.DoubleStream doubleStream28 = random14.doubles();
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker(locale9, random14);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream33 = random14.doubles((long) (-1), (double) 100, (double) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "CA" + "'", str3, "CA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str7, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "eng" + "'", str8, "eng");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Canada" + "'", str11, "Canada");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Canada" + "'", str12, "Canada");
        org.junit.Assert.assertNotNull(longStream15);
        org.junit.Assert.assertNotNull(byteArray22);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 7564655870752979346L + "'", long24 == 7564655870752979346L);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertNotNull(longStream27);
        org.junit.Assert.assertNotNull(doubleStream28);
    }

    @Test
    public void test0436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0436");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        java.util.Locale.Builder builder17 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder17.addUnicodeLocaleAttribute("inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: inglese (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0437");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.Random random3 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream4 = random3.longs();
        byte[] byteArray11 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random3.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        double double14 = random1.nextDouble();
        java.util.stream.IntStream intStream18 = random1.ints((long) 'a', (-1), (int) (byte) 10);
        java.util.stream.IntStream intStream19 = random1.ints();
        long long20 = random1.nextLong();
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(byteArray11);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.41008081149220166d + "'", double14 == 0.41008081149220166d);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(intStream19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 3831662765844904176L + "'", long20 == 3831662765844904176L);
    }

    @Test
    public void test0438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0438");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        java.lang.String str6 = faker0.regexify("eng");
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        com.github.javafaker.Code code8 = faker0.code;
        com.github.javafaker.Hacker hacker9 = faker0.hacker;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.Book book14 = faker10.book();
        java.lang.String str16 = faker10.regexify("eng");
        com.github.javafaker.service.RandomService randomService17 = faker10.randomService;
        com.github.javafaker.Code code18 = faker10.code;
        faker0.code = code18;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(hacker9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(book14);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "eng" + "'", str16, "eng");
        org.junit.Assert.assertNotNull(randomService17);
        org.junit.Assert.assertNotNull(code18);
    }

    @Test
    public void test0439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0439");
        java.util.Locale locale1 = new java.util.Locale("en-CA");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.lang.String str3 = locale1.getScript();
        java.lang.String str4 = locale1.toLanguageTag();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale1.getISO3Language();
            org.junit.Assert.fail("Expected exception of type java.util.MissingResourceException; message: Couldn't find 3-letter language code for en-ca");
        } catch (java.util.MissingResourceException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "en-ca");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "und" + "'", str4, "und");
    }

    @Test
    public void test0440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0440");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayLanguage(locale6);
        java.util.Locale locale8 = java.util.Locale.CHINA;
        java.util.Random random10 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream11 = random10.longs();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale8, random10);
        long long13 = random10.nextLong();
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random10);
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        java.lang.String str21 = faker15.letterify("en-CA");
        com.github.javafaker.Code code22 = null;
        faker15.code = code22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.DateAndTime dateAndTime28 = faker24.dateAndTime;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        java.lang.String str32 = faker29.bothify("");
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService34 = faker33.randomService;
        java.lang.String str36 = faker33.bothify("");
        com.github.javafaker.Book book37 = faker33.book();
        faker29.book = book37;
        faker24.book = book37;
        faker15.book = book37;
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService42 = faker41.randomService;
        java.lang.String str44 = faker41.bothify("");
        com.github.javafaker.Book book45 = faker41.book();
        com.github.javafaker.Number number46 = faker41.number();
        faker15.number = number46;
        java.util.Locale locale48 = java.util.Locale.ITALIAN;
        java.util.Locale locale49 = java.util.Locale.CANADA;
        java.util.Locale locale50 = java.util.Locale.KOREAN;
        java.lang.String str51 = locale49.getDisplayName(locale50);
        java.lang.String str52 = locale49.getISO3Language();
        java.util.Locale locale53 = locale49.stripExtensions();
        java.lang.String str54 = locale53.toLanguageTag();
        java.lang.String str55 = locale48.getDisplayLanguage(locale53);
        com.github.javafaker.Faker faker56 = new com.github.javafaker.Faker(locale48);
        com.github.javafaker.Company company57 = faker56.company();
        faker15.company = company57;
        faker14.company = company57;
        java.util.Locale locale60 = java.util.Locale.CANADA;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayName(locale61);
        java.lang.String str63 = locale60.getLanguage();
        java.util.Random random65 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream66 = random65.longs();
        java.util.stream.DoubleStream doubleStream67 = random65.doubles();
        com.github.javafaker.Faker faker68 = new com.github.javafaker.Faker(locale60, random65);
        com.github.javafaker.Business business69 = faker68.business();
        com.github.javafaker.Color color70 = faker68.color;
        faker14.color = color70;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "English" + "'", str7, "English");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-4964420948893066024L) + "'", long13 == (-4964420948893066024L));
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "en-CA" + "'", str21, "en-CA");
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateAndTime28);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(randomService34);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertNotNull(book37);
        org.junit.Assert.assertNotNull(randomService42);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertNotNull(book45);
        org.junit.Assert.assertNotNull(number46);
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str51 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str51, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "eng" + "'", str52, "eng");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "en-CA" + "'", str54, "en-CA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "Italian" + "'", str55, "Italian");
        org.junit.Assert.assertNotNull(company57);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str62 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str62, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "en" + "'", str63, "en");
        org.junit.Assert.assertNotNull(longStream66);
        org.junit.Assert.assertNotNull(doubleStream67);
        org.junit.Assert.assertNotNull(business69);
        org.junit.Assert.assertNotNull(color70);
    }

    @Test
    public void test0441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0441");
        java.util.Locale locale3 = new java.util.Locale("", "ko", "eng");
        java.util.Locale locale4 = java.util.Locale.ITALIAN;
        java.lang.String str5 = locale4.getScript();
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale6.getDisplayScript();
        java.lang.String str8 = locale4.getDisplayVariant(locale6);
        java.lang.String str9 = locale3.getDisplayScript(locale4);
        java.util.Set<java.lang.String> strSet10 = locale4.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "_KO_eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(strSet10);
    }

    @Test
    public void test0442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0442");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.lang.String str1 = locale0.getDisplayVariant();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale0);
        java.util.Set<java.lang.String> strSet3 = locale0.getUnicodeLocaleKeys();
        java.util.Set<java.lang.Character> charSet4 = locale0.getExtensionKeys();
        boolean boolean5 = locale0.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test0443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0443");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.PRC;
        java.util.Locale.setDefault(category0, locale1);
        java.util.Locale locale3 = java.util.Locale.CANADA;
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale3.getDisplayName(locale4);
        java.lang.String str6 = locale3.getISO3Language();
        java.util.Locale locale7 = locale3.stripExtensions();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale9 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale9);
        boolean boolean11 = locale9.hasExtensions();
        java.util.Locale locale12 = locale9.stripExtensions();
        java.util.Locale.setDefault(category0, locale9);
        java.lang.Class<?> wildcardClass14 = category0.getClass();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str5, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test0444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0444");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        java.lang.String str6 = faker0.letterify("en-CA");
        com.github.javafaker.Code code7 = null;
        faker0.code = code7;
        com.github.javafaker.service.FakeValuesService fakeValuesService9 = faker0.fakeValuesService;
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService11 = faker10.randomService;
        java.lang.String str13 = faker10.bothify("");
        com.github.javafaker.DateAndTime dateAndTime14 = faker10.dateAndTime;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        com.github.javafaker.Book book17 = faker15.book();
        faker10.book = book17;
        com.github.javafaker.Business business19 = faker10.business;
        faker0.business = business19;
        com.github.javafaker.Hacker hacker21 = faker0.hacker;
        com.github.javafaker.Color color22 = faker0.color();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertNotNull(fakeValuesService9);
        org.junit.Assert.assertNotNull(randomService11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(dateAndTime14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertNotNull(book17);
        org.junit.Assert.assertNotNull(business19);
        org.junit.Assert.assertNotNull(hacker21);
        org.junit.Assert.assertNotNull(color22);
    }

    @Test
    public void test0445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0445");
        java.util.Locale locale2 = new java.util.Locale("English", "CA");
        boolean boolean3 = locale2.hasExtensions();
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.lang.String str5 = locale2.getDisplayName();
        org.junit.Assert.assertEquals(locale2.toString(), "english_CA");
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "english (Canada)" + "'", str5, "english (Canada)");
    }

    @Test
    public void test0446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0446");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale locale3 = builder2.build();
        java.util.Locale.Builder builder5 = builder2.setLanguage("");
        boolean boolean6 = locale1.equals((java.lang.Object) builder2);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test0447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0447");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (byte) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=100.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0448");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService18 = faker17.randomService;
        java.lang.String str20 = faker17.bothify("");
        com.github.javafaker.Book book21 = faker17.book();
        java.lang.String str23 = faker17.regexify("eng");
        com.github.javafaker.service.RandomService randomService24 = faker17.randomService;
        com.github.javafaker.Code code25 = faker17.code;
        com.github.javafaker.Name name26 = faker17.name;
        faker16.name = name26;
        java.lang.String str29 = faker16.numerify("can");
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(randomService18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "eng" + "'", str23, "eng");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertNotNull(code25);
        org.junit.Assert.assertNotNull(name26);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "can" + "'", str29, "can");
    }

    @Test
    public void test0449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0449");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Book book5 = faker0.book;
        com.github.javafaker.Finance finance6 = faker0.finance();
        com.github.javafaker.Address address7 = faker0.address();
        com.github.javafaker.PhoneNumber phoneNumber8 = faker0.phoneNumber();
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        com.github.javafaker.Number number14 = faker9.number();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService16 = faker15.randomService;
        java.lang.String str18 = faker15.bothify("");
        com.github.javafaker.DateAndTime dateAndTime19 = faker15.dateAndTime;
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService21 = faker20.randomService;
        java.lang.String str23 = faker20.bothify("");
        com.github.javafaker.DateAndTime dateAndTime24 = faker20.dateAndTime;
        faker15.dateAndTime = dateAndTime24;
        com.github.javafaker.Code code26 = null;
        faker15.code = code26;
        com.github.javafaker.Faker faker28 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService29 = faker28.randomService;
        java.lang.String str31 = faker28.bothify("");
        com.github.javafaker.Faker faker32 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService33 = faker32.randomService;
        com.github.javafaker.Book book34 = faker32.book();
        com.github.javafaker.Finance finance35 = faker32.finance();
        com.github.javafaker.Book book36 = faker32.book();
        com.github.javafaker.Options options37 = faker32.options();
        com.github.javafaker.PhoneNumber phoneNumber38 = faker32.phoneNumber();
        faker28.phoneNumber = phoneNumber38;
        com.github.javafaker.Name name40 = faker28.name();
        faker15.name = name40;
        com.github.javafaker.Finance finance42 = faker15.finance();
        com.github.javafaker.Number number43 = faker15.number;
        faker9.number = number43;
        faker0.number = number43;
        com.github.javafaker.Address address46 = faker0.address();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(book5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(address7);
        org.junit.Assert.assertNotNull(phoneNumber8);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(number14);
        org.junit.Assert.assertNotNull(randomService16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertNotNull(randomService21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(dateAndTime24);
        org.junit.Assert.assertNotNull(randomService29);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(randomService33);
        org.junit.Assert.assertNotNull(book34);
        org.junit.Assert.assertNotNull(finance35);
        org.junit.Assert.assertNotNull(book36);
        org.junit.Assert.assertNotNull(options37);
        org.junit.Assert.assertNotNull(phoneNumber38);
        org.junit.Assert.assertNotNull(name40);
        org.junit.Assert.assertNotNull(finance42);
        org.junit.Assert.assertNotNull(number43);
        org.junit.Assert.assertNotNull(address46);
    }

    @Test
    public void test0450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0450");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        com.github.javafaker.Address address15 = faker5.address();
        faker0.address = address15;
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name18 = faker17.name();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name20 = faker19.name();
        faker17.name = name20;
        faker0.name = name20;
        com.github.javafaker.Number number23 = faker0.number;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name25 = faker24.name();
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name27 = faker26.name();
        faker24.name = name27;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        com.github.javafaker.Book book31 = faker29.book();
        com.github.javafaker.Finance finance32 = faker29.finance();
        com.github.javafaker.Book book33 = faker29.book();
        com.github.javafaker.Options options34 = faker29.options();
        com.github.javafaker.PhoneNumber phoneNumber35 = faker29.phoneNumber();
        com.github.javafaker.service.FakeValuesService fakeValuesService36 = faker29.fakeValuesService;
        faker24.fakeValuesService = fakeValuesService36;
        com.github.javafaker.Code code38 = faker24.code;
        faker0.code = code38;
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(address15);
        org.junit.Assert.assertNotNull(name18);
        org.junit.Assert.assertNotNull(name20);
        org.junit.Assert.assertNotNull(number23);
        org.junit.Assert.assertNotNull(name25);
        org.junit.Assert.assertNotNull(name27);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertNotNull(book31);
        org.junit.Assert.assertNotNull(finance32);
        org.junit.Assert.assertNotNull(book33);
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(phoneNumber35);
        org.junit.Assert.assertNotNull(fakeValuesService36);
        org.junit.Assert.assertNotNull(code38);
    }

    @Test
    public void test0451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0451");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale0);
        java.lang.String str14 = faker12.numerify("Korean");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Korean" + "'", str14, "Korean");
    }

    @Test
    public void test0452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0452");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Address address9 = faker8.address();
        com.github.javafaker.Address address10 = faker8.address();
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        com.github.javafaker.Book book13 = faker11.book();
        com.github.javafaker.Finance finance14 = faker11.finance();
        com.github.javafaker.Book book15 = faker11.book();
        com.github.javafaker.Name name16 = faker11.name;
        faker8.name = name16;
        java.lang.String str19 = faker8.bothify("Korean");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(address9);
        org.junit.Assert.assertNotNull(address10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(finance14);
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(name16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
    }

    @Test
    public void test0453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0453");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder6 = builder0.setUnicodeLocaleKeyword("\u82f1\u6587)", "");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: en-ca (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0454");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name18 = faker17.name();
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.Name name20 = faker19.name();
        faker17.name = name20;
        com.github.javafaker.Lorem lorem22 = faker17.lorem();
        faker16.lorem = lorem22;
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService25 = faker24.randomService;
        java.lang.String str27 = faker24.bothify("");
        com.github.javafaker.DateAndTime dateAndTime28 = faker24.dateAndTime;
        com.github.javafaker.Faker faker29 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService30 = faker29.randomService;
        com.github.javafaker.Book book31 = faker29.book();
        faker24.book = book31;
        com.github.javafaker.Business business33 = faker24.business;
        com.github.javafaker.Name name34 = faker24.name;
        faker16.name = name34;
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(name18);
        org.junit.Assert.assertNotNull(name20);
        org.junit.Assert.assertNotNull(lorem22);
        org.junit.Assert.assertNotNull(randomService25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(dateAndTime28);
        org.junit.Assert.assertNotNull(randomService30);
        org.junit.Assert.assertNotNull(book31);
        org.junit.Assert.assertNotNull(business33);
        org.junit.Assert.assertNotNull(name34);
    }

    @Test
    public void test0455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0455");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.lang.String str3 = locale0.getISO3Language();
        java.util.Locale locale4 = locale0.stripExtensions();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.util.Locale locale6 = java.util.Locale.CANADA;
        java.lang.String str7 = locale6.getDisplayVariant();
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale6);
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        java.lang.String str10 = locale0.getDisplayLanguage(locale6);
        java.lang.String str11 = locale0.getDisplayScript();
        java.util.Random random13 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream14 = random13.longs();
        int int16 = random13.nextInt((int) 'u');
        random13.setSeed((long) (byte) 10);
        java.util.Random random20 = new java.util.Random((long) 1);
        java.util.Random random22 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream23 = random22.longs();
        byte[] byteArray30 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random22.nextBytes(byteArray30);
        random20.nextBytes(byteArray30);
        random13.nextBytes(byteArray30);
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale0, random13);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream38 = random13.doubles((long) (-1), (double) (-5128016860359238732L), (double) 1429008869);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "eng" + "'", str3, "eng");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 69 + "'", int16 == 69);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(byteArray30);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray30), "[-46, 122, -3, -70, -8, 22]");
    }

    @Test
    public void test0456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0456");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService2 = faker1.randomService;
        java.lang.String str4 = faker1.bothify("");
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Book book9 = faker5.book();
        faker1.book = book9;
        com.github.javafaker.Options options11 = faker1.options();
        com.github.javafaker.App app12 = faker1.app;
        faker0.app = app12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.DateAndTime dateAndTime18 = faker14.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.DateAndTime dateAndTime23 = faker19.dateAndTime;
        faker14.dateAndTime = dateAndTime23;
        com.github.javafaker.Code code25 = null;
        faker14.code = code25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.DateAndTime dateAndTime31 = faker27.dateAndTime;
        com.github.javafaker.Lorem lorem32 = null;
        faker27.lorem = lorem32;
        com.github.javafaker.Code code34 = faker27.code();
        faker14.code = code34;
        com.github.javafaker.Company company36 = faker14.company();
        com.github.javafaker.Business business37 = faker14.business();
        faker0.business = business37;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str40 = faker0.resolve("und");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(app12);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(dateAndTime31);
        org.junit.Assert.assertNotNull(code34);
        org.junit.Assert.assertNotNull(company36);
        org.junit.Assert.assertNotNull(business37);
    }

    @Test
    public void test0457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0457");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=inglese(canada)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0458");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = builder0.build();
        java.util.Locale.Builder builder3 = builder0.setLanguage("italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder5 = builder3.setRegion("inglese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: inglese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test0459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0459");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("CAN");
        java.util.Locale.LanguageRange languageRange3 = new java.util.Locale.LanguageRange("eng");
        double double4 = languageRange3.getWeight();
        double double5 = languageRange3.getWeight();
        java.lang.String str6 = languageRange3.getRange();
        double double7 = languageRange3.getWeight();
        java.util.Locale.LanguageRange languageRange9 = new java.util.Locale.LanguageRange("eng");
        double double10 = languageRange9.getWeight();
        double double11 = languageRange9.getWeight();
        java.lang.String str12 = languageRange9.getRange();
        double double13 = languageRange9.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] { languageRange3, languageRange9 };
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.util.Locale locale20 = java.util.Locale.ENGLISH;
        java.util.Locale locale21 = java.util.Locale.CANADA;
        java.lang.String str22 = locale21.getDisplayVariant();
        java.util.Locale locale23 = java.util.Locale.CANADA;
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale27 = java.util.Locale.KOREAN;
        java.lang.String str28 = locale26.getDisplayName(locale27);
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.util.Locale locale30 = java.util.Locale.CANADA;
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.lang.String str33 = locale30.getISO3Language();
        java.util.Locale locale34 = locale30.stripExtensions();
        java.util.Locale locale35 = java.util.Locale.CANADA;
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale35.getISO3Language();
        java.lang.String str39 = locale35.getDisplayVariant();
        java.lang.String str41 = locale35.getExtension('a');
        java.util.Locale locale42 = java.util.Locale.CANADA;
        java.util.Locale locale43 = java.util.Locale.KOREAN;
        java.lang.String str44 = locale42.getDisplayName(locale43);
        java.lang.String str45 = locale42.getISO3Language();
        java.util.Locale locale46 = locale42.stripExtensions();
        java.util.Locale locale47 = java.util.Locale.CANADA;
        java.util.Locale locale48 = java.util.Locale.KOREAN;
        java.lang.String str49 = locale47.getDisplayName(locale48);
        java.lang.String str50 = locale47.getISO3Language();
        java.lang.String str51 = locale47.getDisplayVariant();
        java.lang.String str53 = locale47.getExtension('a');
        java.util.Locale locale54 = java.util.Locale.CANADA;
        java.util.Locale locale55 = java.util.Locale.KOREAN;
        java.lang.String str56 = locale54.getDisplayName(locale55);
        java.lang.String str57 = locale54.getISO3Language();
        java.lang.String str58 = locale54.getDisplayVariant();
        java.util.Locale locale59 = java.util.Locale.CANADA;
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.lang.String str61 = locale59.getDisplayName(locale60);
        java.util.Locale locale62 = java.util.Locale.CANADA;
        java.lang.String str63 = locale62.getDisplayVariant();
        java.util.Locale locale64 = java.util.Locale.ITALIAN;
        java.util.Locale locale65 = java.util.Locale.CANADA;
        java.util.Locale locale66 = java.util.Locale.KOREAN;
        java.lang.String str67 = locale65.getDisplayName(locale66);
        java.lang.String str68 = locale65.getISO3Language();
        java.util.Locale locale69 = locale65.stripExtensions();
        java.lang.String str70 = locale69.toLanguageTag();
        java.lang.String str71 = locale64.getDisplayLanguage(locale69);
        java.util.Locale locale72 = java.util.Locale.CANADA;
        java.util.Locale locale73 = java.util.Locale.KOREAN;
        java.lang.String str74 = locale72.getDisplayName(locale73);
        java.lang.String str75 = locale72.getCountry();
        java.util.Locale locale76 = java.util.Locale.CANADA;
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = locale76.getDisplayName(locale77);
        java.lang.String str79 = locale76.getISO3Language();
        java.util.Locale locale80 = locale76.stripExtensions();
        java.util.Locale locale81 = java.util.Locale.JAPAN;
        java.util.Locale locale82 = java.util.Locale.CANADA;
        java.lang.String str83 = locale82.getDisplayVariant();
        java.util.Locale.setDefault(locale82);
        java.util.Locale[] localeArray85 = new java.util.Locale[] { locale20, locale21, locale24, locale27, locale29, locale34, locale35, locale46, locale47, locale54, locale60, locale62, locale64, locale72, locale76, locale81, locale82 };
        java.util.ArrayList<java.util.Locale> localeList86 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean87 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList86, localeArray85);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.util.Locale> localeList89 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.util.Locale>) localeList86, filteringMode88);
        java.util.Collection<java.util.Locale> localeCollection90 = null;
        java.util.List<java.util.Locale> localeList91 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, localeCollection90);
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList1, (java.util.Collection<java.util.Locale>) localeList91);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 1.0d + "'", double4 == 1.0d);
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 1.0d + "'", double5 == 1.0d);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "eng" + "'", str6, "eng");
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.0d + "'", double7 == 1.0d);
        org.junit.Assert.assertTrue("'" + double10 + "' != '" + 1.0d + "'", double10 == 1.0d);
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + 1.0d + "'", double11 == 1.0d);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.0d + "'", double13 == 1.0d);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "en");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str25 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str25, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str28 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str28, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str32 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str32, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "eng" + "'", str33, "eng");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str37 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str37, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "eng" + "'", str38, "eng");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str44, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "eng" + "'", str45, "eng");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str49 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str49, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "eng" + "'", str50, "eng");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNull(str53);
        org.junit.Assert.assertNotNull(locale54);
        org.junit.Assert.assertEquals(locale54.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str56 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str56, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "eng" + "'", str57, "eng");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale59);
        org.junit.Assert.assertEquals(locale59.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str61 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str61, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str67 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str67, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str68 + "' != '" + "eng" + "'", str68, "eng");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "en-CA" + "'", str70, "en-CA");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "Italian" + "'", str71, "Italian");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str74 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str74, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "CA" + "'", str75, "CA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str78 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str78, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "eng" + "'", str79, "eng");
        org.junit.Assert.assertNotNull(locale80);
        org.junit.Assert.assertEquals(locale80.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(localeArray85);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + true + "'", boolean87 == true);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode88.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(localeList89);
        org.junit.Assert.assertNotNull(localeList91);
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList93);
    }

    @Test
    public void test0460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0460");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.Options options7 = faker6.options;
        faker0.options = options7;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.DateAndTime dateAndTime13 = faker9.dateAndTime;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        com.github.javafaker.Book book16 = faker14.book();
        faker9.book = book16;
        com.github.javafaker.Finance finance18 = faker9.finance();
        com.github.javafaker.Options options19 = faker9.options();
        faker0.options = options19;
        com.github.javafaker.Book book21 = faker0.book;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(dateAndTime13);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertNotNull(book16);
        org.junit.Assert.assertNotNull(finance18);
        org.junit.Assert.assertNotNull(options19);
        org.junit.Assert.assertNotNull(book21);
    }

    @Test
    public void test0461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0461");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        java.util.Locale.Builder builder17 = builder5.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder5.setLanguage("inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: inglese (Canada) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test0462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0462");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("\u671d\u9c9c\u6587", (double) (-1.0f));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-1.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test0463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0463");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getDisplayName();
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.lang.String str5 = locale2.getISO3Language();
        java.util.Locale locale6 = locale2.stripExtensions();
        java.lang.String str7 = locale0.getDisplayName(locale2);
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream10 = random9.doubles();
        java.util.stream.LongStream longStream13 = random9.longs((long) 0, 10L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale2, random9);
        com.github.javafaker.DateAndTime dateAndTime15 = faker14.dateAndTime;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "coreano" + "'", str1, "coreano");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str4, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "eng" + "'", str5, "eng");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Korean" + "'", str7, "Korean");
        org.junit.Assert.assertNotNull(doubleStream10);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(dateAndTime15);
    }

    @Test
    public void test0464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0464");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        int int4 = random1.nextInt((int) 'u');
        boolean boolean5 = random1.nextBoolean();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(random1);
        com.github.javafaker.Faker faker7 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService8 = faker7.randomService;
        java.lang.String str10 = faker7.bothify("");
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.Book book15 = faker11.book();
        faker7.book = book15;
        faker6.book = book15;
        com.github.javafaker.Business business18 = faker6.business();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 69 + "'", int4 == 69);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(randomService8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(book15);
        org.junit.Assert.assertNotNull(business18);
    }

    @Test
    public void test0465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0465");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Internet internet5 = faker0.internet;
        com.github.javafaker.Number number6 = faker0.number;
        com.github.javafaker.service.RandomService randomService7 = faker0.randomService;
        java.lang.String str9 = faker0.bothify("und");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(number6);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "und" + "'", str9, "und");
    }

    @Test
    public void test0466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0466");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "coreano" + "'", str2, "coreano");
    }

    @Test
    public void test0467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0467");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("italian", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test0468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0468");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Hacker hacker6 = faker0.hacker;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(hacker6);
    }

    @Test
    public void test0469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0469");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles();
        java.util.stream.DoubleStream doubleStream7 = random1.doubles((long) 100, (double) (byte) 0, (double) 1429008869);
        java.util.Random random9 = new java.util.Random((long) 1);
        random9.setSeed((long) (short) 100);
        java.util.stream.DoubleStream doubleStream12 = random9.doubles();
        java.util.Random random14 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream15 = random14.doubles();
        java.util.Random random17 = new java.util.Random((long) 1);
        java.util.Random random19 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream20 = random19.longs();
        byte[] byteArray27 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random19.nextBytes(byteArray27);
        random17.nextBytes(byteArray27);
        random14.nextBytes(byteArray27);
        random9.nextBytes(byteArray27);
        random1.nextBytes(byteArray27);
        java.util.stream.DoubleStream doubleStream33 = random1.doubles();
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(longStream20);
        org.junit.Assert.assertNotNull(byteArray27);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray27), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertNotNull(doubleStream33);
    }

    @Test
    public void test0470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0470");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        boolean boolean1 = locale0.hasExtensions();
        java.lang.String str2 = locale0.toLanguageTag();
        java.util.Locale locale5 = new java.util.Locale("", "Italian");
        java.lang.String str6 = locale5.getVariant();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "zh" + "'", str2, "zh");
        org.junit.Assert.assertEquals(locale5.toString(), "_ITALIAN");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
    }

    @Test
    public void test0471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0471");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("English");
        java.util.Locale locale6 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder5.setVariant("can");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: can [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "english");
    }

    @Test
    public void test0472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0472");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company9 = faker8.company();
        com.github.javafaker.Business business10 = faker8.business();
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.util.Locale locale12 = java.util.Locale.CANADA;
        java.util.Locale locale13 = java.util.Locale.KOREAN;
        java.lang.String str14 = locale12.getDisplayName(locale13);
        java.lang.String str15 = locale12.getISO3Language();
        java.util.Locale locale16 = locale12.stripExtensions();
        java.lang.String str17 = locale16.toLanguageTag();
        java.lang.String str18 = locale11.getDisplayLanguage(locale16);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale11);
        com.github.javafaker.Address address20 = faker19.address();
        faker8.address = address20;
        com.github.javafaker.Address address22 = faker8.address();
        com.github.javafaker.Name name23 = null;
        faker8.name = name23;
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str14 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str14, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "eng" + "'", str15, "eng");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-CA" + "'", str17, "en-CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertNotNull(address20);
        org.junit.Assert.assertNotNull(address22);
    }

    @Test
    public void test0473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0473");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale.Builder builder8 = builder5.setVariant("Korean");
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale12);
        java.lang.String str14 = locale10.getDisplayName(locale12);
        java.util.Set<java.lang.Character> charSet15 = locale10.getExtensionKeys();
        java.util.Locale.Builder builder16 = builder5.setLocale(locale10);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder5.setExtension(' ', "inglese (Canada)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "coreano" + "'", str14, "coreano");
        org.junit.Assert.assertNotNull(charSet15);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test0474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0474");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Lorem lorem4 = faker0.lorem();
        com.github.javafaker.Finance finance5 = faker0.finance();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        java.lang.String str11 = faker6.letterify("eng");
        com.github.javafaker.service.RandomService randomService12 = faker6.randomService;
        faker0.randomService = randomService12;
        com.github.javafaker.Code code14 = faker0.code();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(lorem4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "eng" + "'", str11, "eng");
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertNotNull(code14);
    }

    @Test
    public void test0475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0475");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService10 = faker9.randomService;
        java.lang.String str12 = faker9.bothify("");
        com.github.javafaker.Book book13 = faker9.book();
        faker5.book = book13;
        faker0.book = book13;
        com.github.javafaker.Business business16 = faker0.business();
        com.github.javafaker.Code code17 = faker0.code;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(randomService10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(book13);
        org.junit.Assert.assertNotNull(business16);
        org.junit.Assert.assertNotNull(code17);
    }

    @Test
    public void test0476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0476");
        java.util.Locale locale3 = new java.util.Locale("Italian", "\u82f1\u6587", "\u671d\u9c9c\u6587");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u82f1\u6587\u671d\u9c9c\u6587");
    }

    @Test
    public void test0477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0477");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Business business1 = null;
        faker0.business = business1;
        com.github.javafaker.Color color3 = null;
        faker0.color = color3;
        java.lang.String str6 = faker0.letterify("English");
        com.github.javafaker.Name name7 = faker0.name;
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService9 = faker8.randomService;
        java.lang.String str11 = faker8.bothify("");
        com.github.javafaker.DateAndTime dateAndTime12 = faker8.dateAndTime;
        com.github.javafaker.Lorem lorem13 = null;
        faker8.lorem = lorem13;
        com.github.javafaker.Code code15 = faker8.code();
        com.github.javafaker.Address address16 = faker8.address();
        com.github.javafaker.App app17 = faker8.app;
        faker0.app = app17;
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "English" + "'", str6, "English");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(randomService9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertNotNull(code15);
        org.junit.Assert.assertNotNull(address16);
        org.junit.Assert.assertNotNull(app17);
    }

    @Test
    public void test0478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0478");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        com.github.javafaker.Book book7 = faker5.book();
        faker0.book = book7;
        com.github.javafaker.Business business9 = faker0.business;
        com.github.javafaker.Internet internet10 = faker0.internet;
        java.lang.String str12 = faker0.numerify("inglese");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertNotNull(book7);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(internet10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "inglese" + "'", str12, "inglese");
    }

    @Test
    public void test0479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0479");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Finance finance1 = faker0.finance;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Hacker hacker3 = faker0.hacker;
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.date();
        com.github.javafaker.Number number5 = faker0.number;
        org.junit.Assert.assertNotNull(finance1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(hacker3);
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(number5);
    }

    @Test
    public void test0480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0480");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        java.lang.String str11 = faker5.letterify("en-CA");
        com.github.javafaker.Code code12 = null;
        faker5.code = code12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.DateAndTime dateAndTime18 = faker14.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Book book27 = faker23.book();
        faker19.book = book27;
        faker14.book = book27;
        faker5.book = book27;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        com.github.javafaker.Number number36 = faker31.number();
        faker5.number = number36;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.util.Locale locale43 = locale39.stripExtensions();
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = locale38.getDisplayLanguage(locale43);
        com.github.javafaker.Faker faker46 = new com.github.javafaker.Faker(locale38);
        com.github.javafaker.Company company47 = faker46.company();
        faker5.company = company47;
        faker0.company = company47;
        java.lang.String str51 = faker0.bothify("de");
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en-CA" + "'", str44, "en-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertNotNull(company47);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "de" + "'", str51, "de");
    }

    @Test
    public void test0481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0481");
        java.util.Locale locale0 = java.util.Locale.ITALIAN;
        java.util.Locale locale1 = java.util.Locale.CANADA;
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.lang.String str4 = locale1.getISO3Language();
        java.util.Locale locale5 = locale1.stripExtensions();
        java.lang.String str6 = locale5.toLanguageTag();
        java.lang.String str7 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker8 = new com.github.javafaker.Faker(locale0);
        java.util.Locale locale9 = locale0.stripExtensions();
        java.lang.String str10 = locale0.getISO3Language();
        java.util.Random random12 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream13 = random12.longs();
        java.util.stream.DoubleStream doubleStream14 = random12.doubles();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(locale0, random12);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream19 = random12.longs(1853403699951111791L, (long) (byte) 1, (long) (byte) 0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str3, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "eng" + "'", str4, "eng");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "en-CA" + "'", str6, "en-CA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Italian" + "'", str7, "Italian");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ita" + "'", str10, "ita");
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream14);
    }

    @Test
    public void test0482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0482");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("zh");
        org.junit.Assert.assertNotNull(languageRangeList1);
    }

    @Test
    public void test0483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0483");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayName(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALIAN;
        java.util.Locale.setDefault(locale3);
        java.lang.String str5 = locale1.getDisplayName(locale3);
        java.util.Locale locale6 = java.util.Locale.ITALIAN;
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayName(locale8);
        java.lang.String str10 = locale7.getISO3Language();
        java.util.Locale locale11 = locale7.stripExtensions();
        java.lang.String str12 = locale11.toLanguageTag();
        java.lang.String str13 = locale6.getDisplayLanguage(locale11);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale6);
        java.lang.String str15 = locale6.getLanguage();
        boolean boolean16 = locale6.hasExtensions();
        java.lang.String str17 = locale3.getDisplayVariant(locale6);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str2, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "coreano" + "'", str5, "coreano");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str9, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "eng" + "'", str10, "eng");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "en-CA" + "'", str12, "en-CA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "it" + "'", str15, "it");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
    }

    @Test
    public void test0484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0484");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Address address7 = null;
        faker0.address = address7;
        com.github.javafaker.Name name9 = null;
        faker0.name = name9;
        com.github.javafaker.Color color11 = faker0.color;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(color11);
    }

    @Test
    public void test0485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0485");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService2 = faker1.randomService;
        java.lang.String str4 = faker1.bothify("");
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.Book book9 = faker5.book();
        faker1.book = book9;
        com.github.javafaker.Options options11 = faker1.options();
        com.github.javafaker.App app12 = faker1.app;
        faker0.app = app12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.DateAndTime dateAndTime18 = faker14.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.DateAndTime dateAndTime23 = faker19.dateAndTime;
        faker14.dateAndTime = dateAndTime23;
        com.github.javafaker.Code code25 = null;
        faker14.code = code25;
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService28 = faker27.randomService;
        java.lang.String str30 = faker27.bothify("");
        com.github.javafaker.DateAndTime dateAndTime31 = faker27.dateAndTime;
        com.github.javafaker.Lorem lorem32 = null;
        faker27.lorem = lorem32;
        com.github.javafaker.Code code34 = faker27.code();
        faker14.code = code34;
        com.github.javafaker.Company company36 = faker14.company();
        com.github.javafaker.Business business37 = faker14.business();
        faker0.business = business37;
        com.github.javafaker.Address address39 = faker0.address();
        org.junit.Assert.assertNotNull(randomService2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(book9);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertNotNull(app12);
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(randomService28);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(dateAndTime31);
        org.junit.Assert.assertNotNull(code34);
        org.junit.Assert.assertNotNull(company36);
        org.junit.Assert.assertNotNull(business37);
        org.junit.Assert.assertNotNull(address39);
    }

    @Test
    public void test0486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0486");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        com.github.javafaker.Book book2 = faker0.book();
        com.github.javafaker.Finance finance3 = faker0.finance();
        com.github.javafaker.Book book4 = faker0.book;
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService6 = faker5.randomService;
        java.lang.String str8 = faker5.bothify("");
        com.github.javafaker.DateAndTime dateAndTime9 = faker5.dateAndTime;
        java.lang.String str11 = faker5.letterify("en-CA");
        com.github.javafaker.Code code12 = null;
        faker5.code = code12;
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService15 = faker14.randomService;
        java.lang.String str17 = faker14.bothify("");
        com.github.javafaker.DateAndTime dateAndTime18 = faker14.dateAndTime;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        java.lang.String str26 = faker23.bothify("");
        com.github.javafaker.Book book27 = faker23.book();
        faker19.book = book27;
        faker14.book = book27;
        faker5.book = book27;
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService32 = faker31.randomService;
        java.lang.String str34 = faker31.bothify("");
        com.github.javafaker.Book book35 = faker31.book();
        com.github.javafaker.Number number36 = faker31.number();
        faker5.number = number36;
        java.util.Locale locale38 = java.util.Locale.ITALIAN;
        java.util.Locale locale39 = java.util.Locale.CANADA;
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale39.getISO3Language();
        java.util.Locale locale43 = locale39.stripExtensions();
        java.lang.String str44 = locale43.toLanguageTag();
        java.lang.String str45 = locale38.getDisplayLanguage(locale43);
        com.github.javafaker.Faker faker46 = new com.github.javafaker.Faker(locale38);
        com.github.javafaker.Company company47 = faker46.company();
        faker5.company = company47;
        faker0.company = company47;
        com.github.javafaker.Options options50 = faker0.options();
        com.github.javafaker.Internet internet51 = faker0.internet;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertNotNull(book2);
        org.junit.Assert.assertNotNull(finance3);
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(randomService6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "en-CA" + "'", str11, "en-CA");
        org.junit.Assert.assertNotNull(randomService15);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(dateAndTime18);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(randomService32);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(book35);
        org.junit.Assert.assertNotNull(number36);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "it");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str41 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str41, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "eng" + "'", str42, "eng");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "en-CA" + "'", str44, "en-CA");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertNotNull(company47);
        org.junit.Assert.assertNotNull(options50);
        org.junit.Assert.assertNotNull(internet51);
    }

    @Test
    public void test0487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0487");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("english");
    }

    @Test
    public void test0488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0488");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale4);
        com.github.javafaker.Color color17 = faker16.color;
        java.lang.String str19 = faker16.regexify("en-CA");
        com.github.javafaker.Number number20 = faker16.number();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(color17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "en-CA" + "'", str19, "en-CA");
        org.junit.Assert.assertNotNull(number20);
    }

    @Test
    public void test0489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0489");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream2 = random1.longs();
        byte[] byteArray9 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random1.nextBytes(byteArray9);
        double double11 = random1.nextGaussian();
        java.util.stream.DoubleStream doubleStream13 = random1.doubles((long) '#');
        int int14 = random1.nextInt();
        int int16 = random1.nextInt(1429008869);
        int int18 = random1.nextInt((int) (byte) 1);
        org.junit.Assert.assertNotNull(longStream2);
        org.junit.Assert.assertNotNull(byteArray9);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray9), "[115, -43, 26, -69, -40, -100]");
        org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.4123569817688534d) + "'", double11 == (-0.4123569817688534d));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1429008869 + "'", int14 == 1429008869);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1414906606 + "'", int16 == 1414906606);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
    }

    @Test
    public void test0490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0490");
        java.util.Random random1 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream2 = random1.doubles();
        java.util.stream.IntStream intStream3 = random1.ints();
        java.util.stream.LongStream longStream7 = random1.longs((long) 100, 0L, (long) 'u');
        double double8 = random1.nextGaussian();
        long long9 = random1.nextLong();
        boolean boolean10 = random1.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream13 = random1.doubles((double) 'a', (double) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(longStream7);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 1.561581040188955d + "'", double8 == 1.561581040188955d);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 3831662765844904176L + "'", long9 == 3831662765844904176L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test0491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0491");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.DateAndTime dateAndTime4 = faker0.dateAndTime;
        com.github.javafaker.Lorem lorem5 = null;
        faker0.lorem = lorem5;
        com.github.javafaker.Address address7 = null;
        faker0.address = address7;
        java.lang.String str10 = faker0.numerify("italian");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = faker0.resolve("CA");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italian" + "'", str10, "italian");
    }

    @Test
    public void test0492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0492");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService5 = faker4.randomService;
        java.lang.String str7 = faker4.bothify("");
        com.github.javafaker.Book book8 = faker4.book();
        faker0.book = book8;
        com.github.javafaker.DateAndTime dateAndTime10 = faker0.dateAndTime;
        com.github.javafaker.Book book11 = faker0.book();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(randomService5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(book11);
    }

    @Test
    public void test0493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0493");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService7 = faker6.randomService;
        java.lang.String str9 = faker6.bothify("");
        com.github.javafaker.DateAndTime dateAndTime10 = faker6.dateAndTime;
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService12 = faker11.randomService;
        java.lang.String str14 = faker11.bothify("");
        com.github.javafaker.DateAndTime dateAndTime15 = faker11.dateAndTime;
        faker6.dateAndTime = dateAndTime15;
        com.github.javafaker.Code code17 = null;
        faker6.code = code17;
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService20 = faker19.randomService;
        java.lang.String str22 = faker19.bothify("");
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService24 = faker23.randomService;
        com.github.javafaker.Book book25 = faker23.book();
        com.github.javafaker.Finance finance26 = faker23.finance();
        com.github.javafaker.Book book27 = faker23.book();
        com.github.javafaker.Options options28 = faker23.options();
        com.github.javafaker.PhoneNumber phoneNumber29 = faker23.phoneNumber();
        faker19.phoneNumber = phoneNumber29;
        com.github.javafaker.Name name31 = faker19.name();
        faker6.name = name31;
        com.github.javafaker.Finance finance33 = faker6.finance();
        faker0.finance = finance33;
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(randomService7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(dateAndTime10);
        org.junit.Assert.assertNotNull(randomService12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(randomService20);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(randomService24);
        org.junit.Assert.assertNotNull(book25);
        org.junit.Assert.assertNotNull(finance26);
        org.junit.Assert.assertNotNull(book27);
        org.junit.Assert.assertNotNull(options28);
        org.junit.Assert.assertNotNull(phoneNumber29);
        org.junit.Assert.assertNotNull(name31);
        org.junit.Assert.assertNotNull(finance33);
    }

    @Test
    public void test0494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0494");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test0495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0495");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale13.getDisplayCountry();
        java.util.Locale.Builder builder16 = builder3.setLocale(locale13);
        java.lang.String str17 = locale13.toLanguageTag();
        java.lang.String str18 = locale13.getDisplayLanguage();
        java.lang.Object obj19 = locale13.clone();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Canada" + "'", str15, "Canada");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "en-CA" + "'", str17, "en-CA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "inglese" + "'", str18, "inglese");
        org.junit.Assert.assertNotNull(obj19);
        org.junit.Assert.assertEquals(obj19.toString(), "en_CA");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj19), "en_CA");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj19), "en_CA");
    }

    @Test
    public void test0496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0496");
        java.util.Random random1 = new java.util.Random((long) 1);
        random1.setSeed((long) (short) 100);
        java.util.stream.DoubleStream doubleStream4 = random1.doubles();
        java.util.Random random6 = new java.util.Random((long) 1);
        java.util.stream.DoubleStream doubleStream7 = random6.doubles();
        java.util.Random random9 = new java.util.Random((long) 1);
        java.util.Random random11 = new java.util.Random((long) 1);
        java.util.stream.LongStream longStream12 = random11.longs();
        byte[] byteArray19 = new byte[] { (byte) 100, (byte) 100, (byte) -1, (byte) 1, (byte) -1, (byte) -1 };
        random11.nextBytes(byteArray19);
        random9.nextBytes(byteArray19);
        random6.nextBytes(byteArray19);
        random1.nextBytes(byteArray19);
        long long24 = random1.nextLong();
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(doubleStream7);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(byteArray19);
        org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-42, -97, -43, -72, -76, -37]");
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3596673253889729385L + "'", long24 == 3596673253889729385L);
    }

    @Test
    public void test0497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0497");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        com.github.javafaker.service.RandomService randomService1 = faker0.randomService;
        java.lang.String str3 = faker0.bothify("");
        com.github.javafaker.Book book4 = faker0.book();
        com.github.javafaker.Number number5 = faker0.number();
        com.github.javafaker.Lorem lorem6 = null;
        faker0.lorem = lorem6;
        com.github.javafaker.Book book8 = faker0.book();
        com.github.javafaker.Finance finance9 = faker0.finance();
        com.github.javafaker.Company company10 = faker0.company();
        org.junit.Assert.assertNotNull(randomService1);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(book4);
        org.junit.Assert.assertNotNull(number5);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(finance9);
        org.junit.Assert.assertNotNull(company10);
    }

    @Test
    public void test0498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0498");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale locale1 = java.util.Locale.getDefault();
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder3 = builder0.setLocale(locale1);
        java.util.Locale.Builder builder5 = builder0.setVariant("");
        java.util.Locale.Builder builder6 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder6.setVariant("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: en-ca ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test0499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0499");
        java.util.Locale locale3 = new java.util.Locale("Chinese (China)", "cinese (Cina)", "Chinese (China)");
        org.junit.Assert.assertEquals(locale3.toString(), "chinese (china)_CINESE (CINA)_Chinese (China)");
    }

    @Test
    public void test0500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest0.test0500");
        java.util.Locale locale1 = new java.util.Locale("\uc601\uc5b4\uce90\ub098\ub2e4)");
        java.util.Locale locale2 = locale1.stripExtensions();
        java.util.Locale locale3 = locale2.stripExtensions();
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayName(locale5);
        java.lang.String str7 = locale4.getCountry();
        java.lang.String str8 = locale4.getScript();
        java.util.Locale locale9 = java.util.Locale.CANADA;
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale9.getISO3Language();
        java.util.Locale locale13 = locale9.stripExtensions();
        java.lang.String str14 = locale4.getDisplayScript(locale13);
        java.lang.String str15 = locale3.getDisplayScript(locale4);
        java.util.Locale locale19 = new java.util.Locale("Italian", "", "English");
        java.lang.String str20 = locale4.getDisplayLanguage(locale19);
        java.lang.String str21 = locale19.getDisplayCountry();
        java.lang.String str22 = locale19.getDisplayScript();
        org.junit.Assert.assertEquals(locale1.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str6, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "CA" + "'", str7, "CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\uc601\uc5b4\uce90\ub098\ub2e4)" + "'", str11, "\uc601\uc5b4\uce90\ub098\ub2e4)");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "eng" + "'", str12, "eng");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals(locale19.toString(), "italian__English");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "English" + "'", str20, "English");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
    }
}
