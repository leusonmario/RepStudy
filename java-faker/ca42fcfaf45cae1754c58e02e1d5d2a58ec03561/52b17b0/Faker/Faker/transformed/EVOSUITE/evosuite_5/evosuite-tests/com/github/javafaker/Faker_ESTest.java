/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 09:48:39 GMT 2021
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.App;
import com.github.javafaker.Code;
import com.github.javafaker.Color;
import com.github.javafaker.Company;
import com.github.javafaker.Faker;
import com.github.javafaker.Finance;
import com.github.javafaker.Hacker;
import com.github.javafaker.Number;
import com.github.javafaker.service.FakeValuesService;
import com.github.javafaker.service.FakeValuesServiceInterface;
import com.github.javafaker.service.RandomService;
import java.lang.reflect.Proxy;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.Locale;
import java.util.Random;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Faker_ESTest extends Faker_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Locale locale0 = Locale.CHINA;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(locale0);
      
      RandomService randomService0 = null;
      FakeValuesService fakeValuesService0 = new FakeValuesService(locale0, randomService0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(fakeValuesService0);
      
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesService0, fakeValuesService0);
      assertEquals("zh", locale0.getLanguage());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("CN", locale0.getCountry());
      assertNotNull(proxy0);
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      Faker faker0 = new Faker();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Faker faker0 = new Faker(mockRandom0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Locale locale0 = Locale.JAPANESE;
      assertEquals("ja", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      Locale locale0 = Locale.JAPAN;
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String string0 = locale0.getDisplayCountry();
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("Japan", string0);
      assertNotNull(string0);
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      Locale locale0 = Locale.KOREAN;
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertEquals(250, stringArray0.length);
      assertNotNull(stringArray0);
      
      RandomService randomService0 = null;
      FakeValuesService fakeValuesService0 = new FakeValuesService(locale0, randomService0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(fakeValuesService0);
      
      String string0 = "E$V";
      String string1 = fakeValuesService0.numerify(string0);
      assertTrue(string1.equals((Object)string0));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("E$V", string1);
      assertNotNull(string1);
      
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesService0, fakeValuesService0);
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotNull(proxy0);
      
      Proxy proxy1 = (Proxy)Faker.createProxiedFakeValuesService((FakeValuesServiceInterface) proxy0, (FakeValuesServiceInterface) proxy0);
      assertFalse(proxy1.equals((Object)proxy0));
      assertEquals("ko", locale0.toString());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("kor", locale0.getISO3Language());
      assertEquals("ko", locale0.getLanguage());
      assertEquals("", locale0.getCountry());
      assertNotSame(proxy0, proxy1);
      assertNotSame(proxy1, proxy0);
      assertNotNull(proxy1);
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      double double0 = mockRandom0.nextGaussian();
      assertEquals(0.0, double0, 0.01);
      
      Faker faker0 = new Faker(mockRandom0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      Locale locale0 = Locale.FRENCH;
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Random random0 = null;
      char char0 = 'A';
      String string0 = locale0.getExtension(char0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("fr", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("fra", locale0.getISO3Language());
      assertNull(string0);
      
      Faker faker0 = new Faker(locale0, random0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      Locale locale0 = null;
      long long0 = (-788L);
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "T#";
      Locale locale0 = new Locale(string0);
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("t#", locale0.toString());
      assertEquals("t#", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // t# could not be found, does not have a corresponding yaml file
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "Vxx27Y#Eq^?hs,";
      Locale locale0 = new Locale(string0, string0, string0);
      assertEquals("Vxx27Y#Eq^?hs,", locale0.getVariant());
      assertEquals("VXX27Y#EQ^?HS,", locale0.getCountry());
      assertEquals("vxx27y#eq^?hs,_VXX27Y#EQ^?HS,_Vxx27Y#Eq^?hs,", locale0.toString());
      assertEquals("vxx27y#eq^?hs,", locale0.getLanguage());
      assertNotNull(locale0);
      
      boolean boolean0 = locale0.hasExtensions();
      assertEquals("Vxx27Y#Eq^?hs,", locale0.getVariant());
      assertEquals("VXX27Y#EQ^?HS,", locale0.getCountry());
      assertEquals("vxx27y#eq^?hs,_VXX27Y#EQ^?HS,_Vxx27Y#Eq^?hs,", locale0.toString());
      assertEquals("vxx27y#eq^?hs,", locale0.getLanguage());
      assertFalse(boolean0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      String string1 = locale0.toLanguageTag();
      assertFalse(string1.equals((Object)string0));
      assertEquals("Vxx27Y#Eq^?hs,", locale0.getVariant());
      assertEquals("VXX27Y#EQ^?HS,", locale0.getCountry());
      assertEquals("vxx27y#eq^?hs,_VXX27Y#EQ^?HS,_Vxx27Y#Eq^?hs,", locale0.toString());
      assertEquals("vxx27y#eq^?hs,", locale0.getLanguage());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals("und", string1);
      assertNotNull(string1);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(string0.equals((Object)string1));
      assertFalse(set0.contains(string0));
      assertEquals("Vxx27Y#Eq^?hs,", locale0.getVariant());
      assertEquals("VXX27Y#EQ^?HS,", locale0.getCountry());
      assertEquals("vxx27y#eq^?hs,_VXX27Y#EQ^?HS,_Vxx27Y#Eq^?hs,", locale0.toString());
      assertEquals("vxx27y#eq^?hs,", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotSame(string0, string1);
      assertNotNull(set0);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0, mockRandom0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // vxx27y#eq^?hs,_VXX27Y#EQ^?HS,_Vxx27Y#Eq^?hs, could not be found, does not have a corresponding yaml file
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      LinkedList<Locale.LanguageRange> linkedList0 = new LinkedList<Locale.LanguageRange>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      LinkedHashSet<Locale> linkedHashSet0 = new LinkedHashSet<Locale>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      boolean boolean0 = linkedHashSet0.add(locale0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertEquals("IT", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(boolean0);
      
      Locale locale1 = Locale.lookup(linkedList0, linkedHashSet0);
      assertTrue(linkedHashSet0.contains(locale0));
      assertEquals(0, linkedList0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertNull(locale1);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      String string0 = "~&aH<fDUP|uV-e@p";
      int int0 = (-6);
      FakeValuesServiceInterface fakeValuesServiceInterface0 = null;
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesServiceInterface0, fakeValuesServiceInterface0);
      assertNotNull(proxy0);
      
      Proxy proxy1 = (Proxy)Faker.createProxiedFakeValuesService((FakeValuesServiceInterface) proxy0, fakeValuesServiceInterface0);
      assertNotSame(proxy0, proxy1);
      assertNotSame(proxy1, proxy0);
      assertNotNull(proxy1);
      
      String string1 = "MyqsK^ixvJx*\"{l";
      int int1 = 501;
      String string2 = null;
  }
}
