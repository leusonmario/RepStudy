import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest4 {

    public static boolean debug = false;

    @Test
    public void test2001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2001");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        java.util.stream.DoubleStream doubleStream14 = random0.doubles(0L);
        java.util.stream.DoubleStream doubleStream18 = random0.doubles(0L, (double) 0.10903478f, (double) 0.4734224f);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream22 = random0.doubles((long) 5, 0.009945688299262503d, (-0.305573272110351d));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-90, -65, 42, 24, 79, 66]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.7007122f + "'", float10 == 0.7007122f);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(doubleStream18);
    }

    @Test
    public void test2002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2002");
        java.util.Locale locale3 = new java.util.Locale("zho", "zho", "und");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getVariant();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getISO3Country();
        java.lang.String str10 = locale7.getLanguage();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.lang.String str17 = locale7.getDisplayVariant();
        java.lang.String str18 = locale4.getDisplayVariant(locale7);
        java.lang.String str19 = locale3.getDisplayName(locale7);
        java.util.Set<java.lang.String> strSet20 = locale7.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale3.toString(), "zho_ZHO_und");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italiano" + "'", str16, "italiano");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho (ZHO,und)" + "'", str19, "zho (ZHO,und)");
        org.junit.Assert.assertNotNull(strSet20);
    }

    @Test
    public void test2003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2003");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        int int12 = random0.nextInt();
        int int13 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream15 = random0.doubles((long) 2092904466);
        random0.setSeed((long) 36985688);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[85, -53, 15, 70, -45, -104]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.9142847278252004d + "'", double9 == 0.9142847278252004d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 103303102 + "'", int11 == 103303102);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-851679509) + "'", int12 == (-851679509));
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1122024279) + "'", int13 == (-1122024279));
        org.junit.Assert.assertNotNull(doubleStream15);
    }

    @Test
    public void test2004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2004");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        int int2 = random0.nextInt();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(random0);
        java.lang.String str5 = faker3.bothify("ja");
        com.github.javafaker.Company company6 = faker3.company();
        com.github.javafaker.Book book7 = faker3.book();
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 1357946454 + "'", int2 == 1357946454);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ja" + "'", str5, "ja");
        org.junit.Assert.assertNotNull(company6);
        org.junit.Assert.assertNotNull(book7);
    }

    @Test
    public void test2005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2005");
        java.util.Locale locale1 = new java.util.Locale("\u610f\u5927\u5229\u6587");
        java.lang.Object obj2 = locale1.clone();
        org.junit.Assert.assertEquals(locale1.toString(), "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "\u610f\u5927\u5229\u6587");
    }

    @Test
    public void test2006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2006");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale locale9 = builder3.build();
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setRegion("");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder15 = builder10.setVariant("Italian");
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale.Builder builder18 = builder15.setLocale(locale16);
        java.lang.String str19 = locale9.getDisplayVariant(locale16);
        java.util.Set<java.lang.String> strSet20 = locale9.getUnicodeLocaleAttributes();
        boolean boolean21 = locale9.hasExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German (Germany)" + "'", str17, "German (Germany)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test2007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2007");
        java.util.Locale locale1 = new java.util.Locale("fr_fr (FR_FR)");
        java.util.Set<java.lang.String> strSet2 = locale1.getUnicodeLocaleKeys();
        java.util.Random random3 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream6 = random3.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream7 = random3.ints();
        java.util.Random random8 = new java.util.Random();
        byte[] byteArray15 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random8.nextBytes(byteArray15);
        java.util.stream.LongStream longStream19 = random8.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream21 = random8.doubles(1L);
        double double22 = random8.nextGaussian();
        java.util.stream.DoubleStream doubleStream24 = random8.doubles((long) 0);
        java.util.Random random25 = new java.util.Random();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random25.nextBytes(byteArray32);
        random8.nextBytes(byteArray32);
        random3.nextBytes(byteArray32);
        float float36 = random3.nextFloat();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker37 = new com.github.javafaker.Faker(locale1, random3);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: fr_fr (fr_fr) could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale1.toString(), "fr_fr (fr_fr)");
        org.junit.Assert.assertNotNull(strSet2);
        org.junit.Assert.assertNotNull(doubleStream6);
        org.junit.Assert.assertNotNull(intStream7);
        org.junit.Assert.assertNotNull(byteArray15);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray15), "[-83, -11, 75, -88, -20, -115]");
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(doubleStream21);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.9165538670326955d + "'", double22 == 0.9165538670326955d);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-97, -10, 44, -21, -93, -38]");
// flaky:         org.junit.Assert.assertTrue("'" + float36 + "' != '" + 0.9249746f + "'", float36 == 0.9249746f);
    }

    @Test
    public void test2008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2008");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale5 = new java.util.Locale("fr_FR", "fr_FR");
        java.util.Locale locale8 = new java.util.Locale("hi!", "italiano");
        java.lang.String str9 = locale5.getDisplayScript(locale8);
        java.lang.String str10 = locale1.getDisplayName(locale8);
        boolean boolean11 = locale1.hasExtensions();
        java.lang.String str12 = locale1.toLanguageTag();
        java.lang.String str13 = locale1.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals(locale5.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_ITALIANO");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Italian (Italy)" + "'", str10, "Italian (Italy)");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "it-IT" + "'", str12, "it-IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "it-IT" + "'", str13, "it-IT");
    }

    @Test
    public void test2009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2009");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.Random random3 = new java.util.Random();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random3.nextBytes(byteArray10);
        random0.nextBytes(byteArray10);
        boolean boolean13 = random0.nextBoolean();
        int int14 = random0.nextInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream17 = random0.longs((long) 881747472, (long) (-371360826));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[-102, -40, 74, 13, -4, -91]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1341498217 + "'", int14 == 1341498217);
    }

    @Test
    public void test2010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2010");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale1.getDisplayVariant(locale5);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.lang.String str10 = locale1.getISO3Country();
        java.lang.String str11 = locale1.getISO3Language();
        java.util.Set<java.lang.String> strSet12 = locale1.getUnicodeLocaleAttributes();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(locale1);
        java.lang.String str14 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ita" + "'", str11, "ita");
        org.junit.Assert.assertNotNull(strSet12);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "it_IT" + "'", str14, "it_IT");
    }

    @Test
    public void test2011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2011");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("ITA");
        java.util.Locale locale11 = builder10.build();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = locale17.getDisplayVariant(locale21);
        java.lang.String str25 = locale13.getDisplayScript(locale21);
        java.lang.String str26 = locale13.getLanguage();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale28.getDisplayScript(locale30);
        java.util.Locale locale33 = java.util.Locale.forLanguageTag("");
        java.lang.String str34 = locale30.getDisplayLanguage(locale33);
        java.lang.String str35 = locale30.getISO3Language();
        java.lang.String str36 = locale13.getDisplayCountry(locale30);
        java.lang.String str37 = locale13.getISO3Language();
        java.util.Locale locale38 = locale13.stripExtensions();
        java.lang.String str39 = locale11.getDisplayVariant(locale38);
        java.lang.String str40 = locale11.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tedesco (Germania)" + "'", str7, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "de_DE_#u-ita");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ITA" + "'", str18, "ITA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ITA" + "'", str29, "ITA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Chinese" + "'", str34, "Chinese");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "zho" + "'", str35, "zho");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
// flaky:         org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Germania" + "'", str40, "Germania");
    }

    @Test
    public void test2012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2012");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale12 = new java.util.Locale("fr_FR", "it");
        java.util.Locale.setDefault(category0, locale12);
        java.lang.String str14 = locale12.getDisplayScript();
        java.util.Locale.Builder builder15 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder17 = builder15.setRegion("");
        java.util.Locale.Builder builder18 = builder15.clearExtensions();
        java.util.Locale.Builder builder19 = builder15.clear();
        java.util.Locale locale20 = builder19.build();
        java.lang.String str21 = locale12.getDisplayVariant(locale20);
        java.util.Locale locale22 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale25 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str26 = locale22.getDisplayName(locale25);
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale28.getISO3Country();
        java.lang.String str30 = locale28.getISO3Country();
        java.lang.String str31 = locale28.getLanguage();
        java.util.Locale locale32 = java.util.Locale.ITALY;
        java.util.Locale locale33 = locale32.stripExtensions();
        java.lang.String str34 = locale33.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.TAIWAN;
        java.lang.String str36 = locale33.getDisplayScript(locale35);
        java.lang.String str37 = locale28.getDisplayLanguage(locale33);
        java.lang.String str38 = locale25.getDisplayVariant(locale28);
        java.util.Locale locale39 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet40 = locale39.getExtensionKeys();
        java.lang.String str41 = locale39.getDisplayName();
        java.lang.String str42 = locale25.getDisplayName(locale39);
        java.util.Set<java.lang.String> strSet43 = locale39.getUnicodeLocaleKeys();
        java.lang.String str44 = locale12.getDisplayLanguage(locale39);
        java.lang.String str45 = locale12.getISO3Country();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinois" + "'", str8, "chinois");
        org.junit.Assert.assertEquals(locale12.toString(), "fr_fr_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale25.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (Taiwan)" + "'", str26, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ITA" + "'", str29, "ITA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ITA" + "'", str30, "ITA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "it" + "'", str31, "it");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ITA" + "'", str34, "ITA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "italiano" + "'", str37, "italiano");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Chinese" + "'", str41, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str42 + "' != '" + "\u610f\u5927\u5229\u6587 (FR_FR)" + "'", str42, "\u610f\u5927\u5229\u6587 (FR_FR)");
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr_fr" + "'", str44, "fr_fr");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ITA" + "'", str45, "ITA");
    }

    @Test
    public void test2013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2013");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        boolean boolean8 = locale5.hasExtensions();
        java.lang.String str9 = locale5.getISO3Language();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale12 = new java.util.Locale("IT");
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale14.getDisplayCountry(locale17);
        java.util.Locale.setDefault(locale14);
        java.lang.String str21 = locale12.getDisplayCountry(locale14);
        java.lang.String str22 = locale5.getDisplayScript(locale12);
        java.lang.String str23 = locale12.getVariant();
        java.lang.String str24 = locale12.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian" + "'", str1, "Italian");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test2014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2014");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        int int2 = random0.nextInt();
        java.util.stream.IntStream intStream4 = random0.ints((long) (short) 100);
        int int6 = random0.nextInt(282464450);
        java.util.stream.LongStream longStream8 = random0.longs((long) 10);
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + 230920152 + "'", int2 == 230920152);
        org.junit.Assert.assertNotNull(intStream4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 260505101 + "'", int6 == 260505101);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test2015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2015");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("coreano");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "coreano");
    }

    @Test
    public void test2016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2016");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.Random random9 = new java.util.Random();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random9.nextBytes(byteArray16);
        random0.nextBytes(byteArray16);
        java.util.stream.DoubleStream doubleStream20 = random0.doubles((long) 282464450);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-65, 10, -112, -125, -128, -34]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-49, -105, 91, 5, -82, 88]");
        org.junit.Assert.assertNotNull(doubleStream20);
    }

    @Test
    public void test2017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2017");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("Italian");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        java.util.Locale.Builder builder27 = builder18.clearExtensions();
        java.util.Locale.Builder builder29 = builder18.removeUnicodeLocaleAttribute("deu");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "italian");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test2018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2018");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale8.getDisplayCountry(locale11);
        java.lang.String str14 = locale11.getCountry();
        java.lang.String str15 = locale1.getDisplayScript(locale11);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.lang.String str17 = locale16.getDisplayLanguage();
        java.util.Locale locale21 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str22 = locale16.getDisplayLanguage(locale21);
        java.lang.String str23 = locale21.getScript();
        boolean boolean24 = locale21.hasExtensions();
        java.lang.String str26 = locale21.getUnicodeLocaleType("zh");
        java.lang.String str27 = locale21.getDisplayScript();
        java.util.Locale locale31 = new java.util.Locale("hi!__ITA", "fr", "hi!");
        java.lang.String str32 = locale21.getDisplayCountry(locale31);
        java.util.Locale locale33 = locale31.stripExtensions();
        java.lang.String str34 = locale11.getDisplayLanguage(locale31);
        java.lang.String str35 = locale11.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it-IT" + "'", str7, "it-IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "IT" + "'", str14, "IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italian" + "'", str17, "Italian");
        org.junit.Assert.assertEquals(locale21.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale31.toString(), "hi!__ita_FR_hi!");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "hi!__ita_FR_hi!");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "Italian" + "'", str34, "Italian");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "Italian (Italy)" + "'", str35, "Italian (Italy)");
    }

    @Test
    public void test2019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2019");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale12 = new java.util.Locale("fr_FR", "it");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale16 = new java.util.Locale("IT");
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayCountry(locale19);
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.util.Locale locale22 = locale21.stripExtensions();
        java.lang.String str23 = locale18.getDisplayCountry(locale21);
        java.util.Locale.setDefault(locale18);
        java.lang.String str25 = locale16.getDisplayCountry(locale18);
        java.lang.String str26 = locale16.getDisplayScript();
        java.util.Locale locale27 = java.util.Locale.CANADA;
        java.util.Locale locale29 = new java.util.Locale("IT");
        java.lang.String str30 = locale27.getDisplayVariant(locale29);
        java.lang.String str31 = locale29.getDisplayLanguage();
        java.lang.String str32 = locale16.getDisplayCountry(locale29);
        java.util.Locale.setDefault(category0, locale16);
        java.util.Locale locale34 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.String> strSet35 = locale34.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinois" + "'", str8, "chinois");
        org.junit.Assert.assertEquals(locale12.toString(), "fr_fr_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale29.toString(), "it");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str31, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test2020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2020");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder11.setVariant("\uc774\ud0c8\ub9ac\uc544");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed variant: ????????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2021");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("italie");
        double double2 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
    }

    @Test
    public void test2022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2022");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale3.toLanguageTag();
        java.lang.String str6 = locale3.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fr" + "'", str5, "fr");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "fr");
    }

    @Test
    public void test2023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2023");
        java.util.Random random1 = new java.util.Random(7409857911417851323L);
    }

    @Test
    public void test2024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2024");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.setLanguage("TWN");
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale.Builder builder9 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder11 = builder9.setRegion("");
        java.util.Locale.Builder builder12 = builder9.clearExtensions();
        java.util.Locale.Builder builder13 = builder9.clear();
        java.util.Locale.Builder builder14 = builder13.clearExtensions();
        java.util.Locale locale15 = builder13.build();
        java.util.Locale.Builder builder16 = builder0.setLocale(locale15);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder19 = builder0.setUnicodeLocaleKeyword("\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)", "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: ???? (???) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "twn");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2025");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        java.lang.String str14 = locale2.getDisplayScript(locale10);
        java.util.Locale locale17 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str18 = locale2.getDisplayScript(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale20 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet21 = locale20.getExtensionKeys();
        boolean boolean22 = locale20.hasExtensions();
        java.lang.String str23 = locale20.getScript();
        java.util.Locale.setDefault(category0, locale20);
        java.util.Locale locale25 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
    }

    @Test
    public void test2026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2026");
        java.util.Random random1 = new java.util.Random((long) (-720507519));
        java.util.stream.IntStream intStream4 = random1.ints(0, 282464450);
        java.util.stream.LongStream longStream5 = random1.longs();
        java.util.stream.LongStream longStream7 = random1.longs((long) 273070545);
        // The following exception was thrown during execution in test generation
        try {
            int int9 = random1.nextInt((-1273579237));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be positive");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test2027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2027");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Code code4 = faker1.code();
        com.github.javafaker.Lorem lorem5 = faker1.lorem();
        com.github.javafaker.Code code6 = faker1.code();
        com.github.javafaker.Lorem lorem7 = faker1.lorem();
        com.github.javafaker.Book book8 = faker1.book();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(code4);
        org.junit.Assert.assertNotNull(lorem5);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertNotNull(lorem7);
        org.junit.Assert.assertNotNull(book8);
    }

    @Test
    public void test2028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2028");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.lang.String str5 = locale1.getDisplayScript();
        java.lang.String str6 = locale1.getISO3Language();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.lang.String str14 = locale10.getDisplayLanguage(locale13);
        java.lang.String str15 = locale1.getDisplayVariant(locale10);
        java.util.Random random16 = new java.util.Random();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random16.nextBytes(byteArray23);
        java.util.stream.DoubleStream doubleStream25 = random16.doubles();
        java.util.stream.DoubleStream doubleStream27 = random16.doubles((long) 348768006);
        boolean boolean28 = locale10.equals((java.lang.Object) doubleStream27);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ita" + "'", str6, "ita");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Chinese" + "'", str14, "Chinese");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[125, -22, 122, -101, -120, -43]");
        org.junit.Assert.assertNotNull(doubleStream25);
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2029");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getISO3Country();
        boolean boolean17 = locale14.hasExtensions();
        java.lang.String str18 = locale11.getDisplayVariant(locale14);
        java.util.Locale.Builder builder19 = builder3.setLocale(locale11);
        java.util.Locale.Builder builder20 = builder19.clear();
        java.util.Locale.Builder builder22 = builder20.setVariant("France");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder20.setRegion("fr_fr (FR_FR)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: fr_fr (FR_FR) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2030");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getDisplayName();
        java.lang.String str4 = locale0.getDisplayCountry();
        java.lang.String str5 = locale0.getDisplayVariant();
        java.lang.String str6 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Franz\366sisch" + "'", str3, "Franz\366sisch");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "fr" + "'", str6, "fr");
    }

    @Test
    public void test2031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2031");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        com.github.javafaker.Company company6 = faker1.company();
        com.github.javafaker.Options options7 = faker1.options();
        java.lang.String str9 = faker1.numerify("fr_fr");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertNotNull(company6);
        org.junit.Assert.assertNotNull(options7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr_fr" + "'", str9, "fr_fr");
    }

    @Test
    public void test2032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2032");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        java.lang.String str6 = faker1.bothify("\uc911\uad6d\uc5b4\uc911\uad6d)");
        com.github.javafaker.Business business7 = faker1.business();
        com.github.javafaker.Code code8 = faker1.code();
        com.github.javafaker.Business business9 = faker1.business();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str6, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(business7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(business9);
    }

    @Test
    public void test2033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2033");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        int int12 = random0.nextInt();
        int int13 = random0.nextInt();
        long long14 = random0.nextLong();
        boolean boolean15 = random0.nextBoolean();
        java.util.stream.IntStream intStream18 = random0.ints((-96960024), 387091885);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-20, 103, -70, -126, 105, 93]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.2200566870364447d + "'", double9 == 1.2200566870364447d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 569345830 + "'", int11 == 569345830);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1987724282) + "'", int12 == (-1987724282));
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1274750095) + "'", int13 == (-1274750095));
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-6172703992465364087L) + "'", long14 == (-6172703992465364087L));
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(intStream18);
    }

    @Test
    public void test2034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2034");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale locale5 = builder0.build();
        java.lang.String str6 = locale5.getCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
    }

    @Test
    public void test2035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2035");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        double double13 = random0.nextDouble();
        java.util.Random random14 = new java.util.Random();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random14.nextBytes(byteArray21);
        double double23 = random14.nextGaussian();
        java.util.stream.DoubleStream doubleStream24 = random14.doubles();
        int int25 = random14.nextInt();
        java.util.stream.DoubleStream doubleStream27 = random14.doubles((long) (byte) 10);
        double double28 = random14.nextGaussian();
        java.util.Random random29 = new java.util.Random();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random29.nextBytes(byteArray36);
        random14.nextBytes(byteArray36);
        random0.nextBytes(byteArray36);
        java.util.stream.DoubleStream doubleStream40 = random0.doubles();
        java.util.Random random41 = new java.util.Random();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random41.nextBytes(byteArray48);
        java.util.stream.LongStream longStream52 = random41.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream54 = random41.doubles(1L);
        double double55 = random41.nextGaussian();
        java.util.stream.DoubleStream doubleStream57 = random41.doubles((long) 0);
        java.util.Random random58 = new java.util.Random();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random58.nextBytes(byteArray65);
        random41.nextBytes(byteArray65);
        random0.nextBytes(byteArray65);
        boolean boolean69 = random0.nextBoolean();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-85, -31, 91, 81, -105, 77]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.1644702f + "'", float10 == 0.1644702f);
        org.junit.Assert.assertNotNull(doubleStream12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.6332980450824776d + "'", double13 == 0.6332980450824776d);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-34, 108, -10, -107, -105, -2]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.08019772039016394d) + "'", double23 == (-0.08019772039016394d));
        org.junit.Assert.assertNotNull(doubleStream24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 927652996 + "'", int25 == 927652996);
        org.junit.Assert.assertNotNull(doubleStream27);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.3362251003356113d) + "'", double28 == (-0.3362251003356113d));
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-82, 91, -2, -61, -118, 93]");
        org.junit.Assert.assertNotNull(doubleStream40);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[99, 94, -13, -35, 69, -11]");
        org.junit.Assert.assertNotNull(longStream52);
        org.junit.Assert.assertNotNull(doubleStream54);
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + 1.16625698287874d + "'", double55 == 1.16625698287874d);
        org.junit.Assert.assertNotNull(doubleStream57);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-55, 74, -120, 23, -119, 40]");
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test2036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2036");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.LongStream longStream12 = random0.longs((long) 0);
        java.util.stream.LongStream longStream13 = random0.longs();
        double double14 = random0.nextDouble();
        double double15 = random0.nextDouble();
        java.util.stream.IntStream intStream18 = random0.ints((-383561884), 220786794);
        long long19 = random0.nextLong();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-56, -84, -77, 112, 113, 51]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.6264758f + "'", float10 == 0.6264758f);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.31933203995830406d + "'", double14 == 0.31933203995830406d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.8001168160001888d + "'", double15 == 0.8001168160001888d);
        org.junit.Assert.assertNotNull(intStream18);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + 2913446817595392521L + "'", long19 == 2913446817595392521L);
    }

    @Test
    public void test2037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2037");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        float float17 = random0.nextFloat();
        java.util.stream.LongStream longStream18 = random0.longs();
        java.util.stream.DoubleStream doubleStream19 = random0.doubles();
        float float20 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-51, 51, -126, 30, -60, 58]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.134997412393232d + "'", double14 == 1.134997412393232d);
        org.junit.Assert.assertNotNull(doubleStream16);
// flaky:         org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.569036f + "'", float17 == 0.569036f);
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(doubleStream19);
// flaky:         org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.39887035f + "'", float20 == 0.39887035f);
    }

    @Test
    public void test2038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2038");
        com.github.javafaker.Faker faker0 = new com.github.javafaker.Faker();
        java.lang.String str2 = faker0.numerify("IT");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str4 = faker0.resolve("und");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "IT" + "'", str2, "IT");
    }

    @Test
    public void test2039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2039");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        boolean boolean8 = locale5.hasExtensions();
        java.lang.String str10 = locale5.getUnicodeLocaleType("zh");
        java.lang.String str11 = locale5.getDisplayScript();
        java.util.Locale locale15 = new java.util.Locale("hi!__ITA", "fr", "hi!");
        java.lang.String str16 = locale5.getDisplayCountry(locale15);
        java.util.Locale locale20 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str21 = locale15.getDisplayLanguage(locale20);
        java.lang.String str22 = locale15.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italienisch" + "'", str1, "Italienisch");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals(locale15.toString(), "hi!__ita_FR_hi!");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals(locale20.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "hi!__ita" + "'", str21, "hi!__ita");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "FR" + "'", str22, "FR");
    }

    @Test
    public void test2040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2040");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.Object obj2 = locale0.clone();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertNotNull(obj2);
        org.junit.Assert.assertEquals(obj2.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj2), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj2), "zh_TW");
    }

    @Test
    public void test2041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2041");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.IntStream intStream20 = random5.ints();
        double double21 = random5.nextGaussian();
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(random5);
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker(random5);
        java.util.stream.IntStream intStream26 = random5.ints((-1621813963), 348768006);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-96, -15, -43, -41, -123, -59]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.74726087f + "'", float15 == 0.74726087f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.44160724f + "'", float16 == 0.44160724f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(intStream20);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.4878687305837544d) + "'", double21 == (-0.4878687305837544d));
        org.junit.Assert.assertNotNull(intStream26);
    }

    @Test
    public void test2042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2042");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale.setDefault(locale6);
        java.util.Locale locale11 = java.util.Locale.US;
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String str15 = locale13.getISO3Country();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.lang.String str20 = locale13.getDisplayVariant(locale17);
        java.lang.String str21 = locale11.getDisplayName(locale13);
        java.util.Set<java.lang.String> strSet22 = locale11.getUnicodeLocaleKeys();
        java.lang.String str23 = locale6.getDisplayName(locale11);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinois" + "'", str8, "chinois");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "inglese (Stati Uniti)" + "'", str21, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Chinese (Taiwan)" + "'", str23, "Chinese (Taiwan)");
    }

    @Test
    public void test2043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2043");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale8 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale12 = new java.util.Locale("hi!", "italiano");
        java.lang.String str13 = locale8.getDisplayVariant(locale12);
        java.util.Locale locale14 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = locale12.getDisplayName(locale14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!_ITALIANO");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test2044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2044");
        java.util.Random random1 = new java.util.Random((long) (-1545810632));
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream4 = random1.longs((long) (-695283849), (-8908121981742280681L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2045");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Color color4 = faker1.color();
        com.github.javafaker.Internet internet5 = faker1.internet();
        com.github.javafaker.Internet internet6 = faker1.internet();
        com.github.javafaker.Number number7 = faker1.number();
        com.github.javafaker.DateAndTime dateAndTime8 = faker1.date();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(color4);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(number7);
        org.junit.Assert.assertNotNull(dateAndTime8);
    }

    @Test
    public void test2046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2046");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getISO3Country();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(locale0);
        java.lang.String str4 = locale0.toLanguageTag();
        java.lang.String str5 = locale0.getDisplayScript();
        java.lang.String str6 = locale0.getVariant();
        java.lang.String str7 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test2047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2047");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        com.github.javafaker.Finance finance6 = faker1.finance();
        com.github.javafaker.Color color7 = faker1.color();
        com.github.javafaker.Options options8 = faker1.options();
        java.lang.String str10 = faker1.letterify("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(options8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str10, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
    }

    @Test
    public void test2048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2048");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("Italian");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder28 = builder18.addUnicodeLocaleAttribute("\ud504\ub791\uc2a4,hi!)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi!__ita (???????,hi!) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "italian");
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test2049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2049");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.Finance finance6 = faker1.finance();
        com.github.javafaker.Address address7 = faker1.address();
        com.github.javafaker.DateAndTime dateAndTime8 = faker1.date();
        java.lang.String str10 = faker1.letterify("\u6cd5\u570b");
        java.lang.String str12 = faker1.numerify("\u65e5\u6587");
        com.github.javafaker.Name name13 = faker1.name();
        com.github.javafaker.Name name14 = faker1.name();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(address7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u6cd5\u570b" + "'", str10, "\u6cd5\u570b");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u6587" + "'", str12, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(name13);
        org.junit.Assert.assertNotNull(name14);
    }

    @Test
    public void test2050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2050");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        java.util.stream.IntStream intStream14 = random0.ints();
        java.util.stream.IntStream intStream18 = random0.ints((long) 351833871, 17, 1785693086);
        java.util.stream.IntStream intStream20 = random0.ints((long) 1490859811);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream24 = random0.doubles((long) (-1403966851), (double) 0.19021666f, (double) 0.10869104f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-25, 94, -49, -38, -4, 66]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertNotNull(intStream18);
        org.junit.Assert.assertNotNull(intStream20);
    }

    @Test
    public void test2051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2051");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.lang.String str6 = locale4.getScript();
        java.lang.String str7 = locale4.getScript();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale4.getUnicodeLocaleType("\uc601\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ?????");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test2052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2052");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Business business4 = faker1.business();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.PhoneNumber phoneNumber6 = faker1.phoneNumber();
        java.lang.String str8 = faker1.bothify("cinese (Taiwan)");
        com.github.javafaker.Color color9 = faker1.color();
        com.github.javafaker.Business business10 = faker1.business();
        com.github.javafaker.Book book11 = faker1.book();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(business4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(phoneNumber6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cinese (Taiwan)" + "'", str8, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(color9);
        org.junit.Assert.assertNotNull(business10);
        org.junit.Assert.assertNotNull(book11);
    }

    @Test
    public void test2053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2053");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getDisplayName();
        java.util.Locale locale4 = java.util.Locale.JAPAN;
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.lang.String str8 = locale6.getDisplayName(locale7);
        java.util.Locale locale9 = java.util.Locale.ITALY;
        java.util.Locale locale10 = locale9.stripExtensions();
        java.lang.String str11 = locale10.getISO3Country();
        java.lang.String str12 = locale10.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.lang.String str17 = locale10.getDisplayVariant(locale14);
        java.lang.String str18 = locale6.getDisplayScript(locale14);
        java.util.Locale locale21 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str22 = locale6.getDisplayScript(locale21);
        java.lang.String str23 = locale21.toLanguageTag();
        java.lang.String str24 = locale21.toLanguageTag();
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setRegion("");
        java.util.Locale.Builder builder29 = builder27.setRegion("");
        java.util.Locale locale30 = builder29.build();
        java.lang.String str31 = locale21.getDisplayName(locale30);
        java.lang.String str32 = locale21.getDisplayCountry();
        java.lang.String str33 = locale4.getDisplayName(locale21);
        java.lang.String str34 = locale0.getDisplayCountry(locale4);
        java.lang.String str35 = locale0.getDisplayLanguage();
        java.lang.String str36 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "French" + "'", str3, "French");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ITA" + "'", str12, "ITA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals(locale21.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "und" + "'", str24, "und");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "fr_fr (FR_FR)" + "'", str31, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "FR_FR" + "'", str32, "FR_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "Japanese (Japan)" + "'", str33, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "French" + "'", str35, "French");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
    }

    @Test
    public void test2054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2054");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.DateAndTime dateAndTime4 = faker1.date();
        java.lang.String str6 = faker1.bothify("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        com.github.javafaker.Lorem lorem7 = faker1.lorem();
        com.github.javafaker.DateAndTime dateAndTime8 = faker1.date();
        com.github.javafaker.Business business9 = faker1.business();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str6, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(lorem7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertNotNull(business9);
    }

    @Test
    public void test2055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2055");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("FRANCESE");
        java.util.Locale.Builder builder2 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder5 = builder2.clearExtensions();
        java.util.Locale.Builder builder8 = builder5.setExtension('a', "IT");
        java.util.Locale locale9 = builder8.build();
        boolean boolean10 = languageRange1.equals((java.lang.Object) locale9);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2056");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Business business20 = faker19.business();
        com.github.javafaker.Finance finance21 = faker19.finance();
        com.github.javafaker.Book book22 = faker19.book();
        com.github.javafaker.DateAndTime dateAndTime23 = faker19.date();
        com.github.javafaker.Internet internet24 = faker19.internet();
        com.github.javafaker.Code code25 = faker19.code();
        com.github.javafaker.Options options26 = faker19.options();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[116, -25, 24, 58, 55, 26]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.49438304f + "'", float15 == 0.49438304f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.061869442f + "'", float16 == 0.061869442f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(business20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(internet24);
        org.junit.Assert.assertNotNull(code25);
        org.junit.Assert.assertNotNull(options26);
    }

    @Test
    public void test2057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2057");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setLanguage("Chinese");
        java.util.Locale.Builder builder15 = builder10.removeUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "allemand");
        java.util.Locale.Builder builder20 = builder15.setRegion("");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder15.setLanguageTag("\u82f1\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2058");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(locale1);
        java.lang.String str5 = faker3.bothify("italiano");
        java.lang.String str7 = faker3.letterify("allemand");
        java.lang.String str9 = faker3.bothify("italian");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano" + "'", str5, "italiano");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "allemand" + "'", str7, "allemand");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "italian" + "'", str9, "italian");
    }

    @Test
    public void test2059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2059");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("Italia");
        java.util.Locale.Category category11 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder12 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder14 = builder12.setRegion("");
        java.util.Locale locale15 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder16 = builder12.setLocale(locale15);
        java.util.Locale.Builder builder18 = builder12.setLanguage("");
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale20.getISO3Country();
        java.util.Set<java.lang.String> strSet22 = locale20.getUnicodeLocaleKeys();
        java.util.Locale locale26 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str27 = locale20.getDisplayCountry(locale26);
        java.lang.String str28 = locale20.toLanguageTag();
        java.lang.String str29 = locale20.getDisplayCountry();
        java.util.Locale.Builder builder30 = builder18.setLocale(locale20);
        java.util.Locale.setDefault(category11, locale20);
        java.lang.String str32 = locale20.getCountry();
        java.util.Locale.Builder builder33 = builder8.setLocale(locale20);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + category11 + "' != '" + java.util.Locale.Category.FORMAT + "'", category11.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
// flaky:         org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ITA" + "'", str21, "ITA");
        org.junit.Assert.assertNotNull(strSet22);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "Italy" + "'", str27, "Italy");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "it-IT" + "'", str28, "it-IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italy" + "'", str29, "Italy");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "IT" + "'", str32, "IT");
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test2060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2060");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.DateAndTime dateAndTime4 = faker1.date();
        com.github.javafaker.DateAndTime dateAndTime5 = faker1.date();
        com.github.javafaker.Internet internet6 = faker1.internet();
        com.github.javafaker.Name name7 = faker1.name();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(name7);
    }

    @Test
    public void test2061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2061");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale8.getDisplayCountry(locale11);
        java.lang.String str14 = locale11.getCountry();
        java.lang.String str15 = locale1.getDisplayScript(locale11);
        java.util.Random random16 = new java.util.Random();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random16.nextBytes(byteArray23);
        double double25 = random16.nextGaussian();
        java.util.stream.DoubleStream doubleStream26 = random16.doubles();
        int int27 = random16.nextInt();
        java.util.stream.DoubleStream doubleStream29 = random16.doubles(0L);
        long long30 = random16.nextLong();
        java.util.stream.DoubleStream doubleStream32 = random16.doubles((long) (short) 10);
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker(locale1, random16);
        int int35 = random16.nextInt((int) (short) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream38 = random16.ints(1424990419, 59265050);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it-IT" + "'", str7, "it-IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "IT" + "'", str14, "IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-18, -28, -17, 112, 108, 33]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.216581047166032d + "'", double25 == 1.216581047166032d);
        org.junit.Assert.assertNotNull(doubleStream26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1609764103 + "'", int27 == 1609764103);
        org.junit.Assert.assertNotNull(doubleStream29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-1940040623198221433L) + "'", long30 == (-1940040623198221433L));
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertTrue("'" + int35 + "' != '" + 0 + "'", int35 == 0);
    }

    @Test
    public void test2062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2062");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.util.Locale locale4 = locale2.stripExtensions();
        java.lang.String str5 = locale2.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test2063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2063");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.setLanguage("IT");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category7);
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setUnicodeLocaleKeyword("en_CA", "allemand");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: en_CA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois" + "'", str15, "chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u53f0\u7063" + "'", str18, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test2064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2064");
        java.util.Random random1 = new java.util.Random((-1L));
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(random1);
    }

    @Test
    public void test2065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2065");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getLanguage();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale6.getDisplayScript(locale8);
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.lang.String str11 = locale6.getISO3Language();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.util.Random random17 = new java.util.Random();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random17.nextBytes(byteArray24);
        java.util.stream.LongStream longStream26 = random17.longs();
        float float27 = random17.nextFloat();
        float float28 = random17.nextFloat();
        java.util.stream.DoubleStream doubleStream30 = random17.doubles(100L);
        com.github.javafaker.Faker faker31 = new com.github.javafaker.Faker(locale15, random17);
        java.lang.String str32 = locale6.getDisplayVariant(locale15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italiano" + "'", str10, "italiano");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ita" + "'", str11, "ita");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-123, 59, -33, -96, -85, -22]");
        org.junit.Assert.assertNotNull(longStream26);
// flaky:         org.junit.Assert.assertTrue("'" + float27 + "' != '" + 0.46558195f + "'", float27 == 0.46558195f);
// flaky:         org.junit.Assert.assertTrue("'" + float28 + "' != '" + 0.52526814f + "'", float28 == 0.52526814f);
        org.junit.Assert.assertNotNull(doubleStream30);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
    }

    @Test
    public void test2066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2066");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        java.util.Random random17 = new java.util.Random();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random17.nextBytes(byteArray24);
        random0.nextBytes(byteArray24);
        java.util.stream.IntStream intStream29 = random0.ints((-1086029816), (-664244362));
        double double30 = random0.nextGaussian();
        int int31 = random0.nextInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream33 = random0.doubles((long) (-1878765660));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[111, -77, -62, -101, -87, -12]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-1.6102644227600684d) + "'", double14 == (-1.6102644227600684d));
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-118, 52, -76, -30, -80, -106]");
        org.junit.Assert.assertNotNull(intStream29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.025718713482516687d + "'", double30 == 0.025718713482516687d);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1503598910 + "'", int31 == 1503598910);
    }

    @Test
    public void test2067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2067");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale5.getUnicodeLocaleType("fr");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale5.getUnicodeLocaleType("twn");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: twn");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italia" + "'", str6, "Italia");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
    }

    @Test
    public void test2068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2068");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\u7fa9\u5927\u5229");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2069");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        boolean boolean2 = locale0.hasExtensions();
        java.lang.String str3 = locale0.getScript();
        java.lang.String str4 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "de_DE" + "'", str4, "de_DE");
    }

    @Test
    public void test2070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2070");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.Collection<java.util.Locale> localeCollection1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale> localeList2 = java.util.Locale.filter(languageRangeList0, localeCollection1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2071");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\uc774\ud0c8\ub9ac\uc544\uc5b4 (FR_FR)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???????????(fr_fr)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2072");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Code code7 = faker1.code();
        com.github.javafaker.Code code8 = faker1.code();
        com.github.javafaker.Book book9 = faker1.book();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(book9);
    }

    @Test
    public void test2073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2073");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.lang.String str6 = locale4.getScript();
        java.util.Locale locale7 = java.util.Locale.KOREAN;
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.lang.String str9 = locale7.getDisplayCountry(locale8);
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale7.getDisplayCountry(locale10);
        java.lang.String str13 = locale4.getDisplayLanguage(locale7);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale15.getDisplayVariant(locale19);
        java.lang.String str23 = locale19.getDisplayLanguage();
        java.lang.String str24 = locale19.getScript();
        java.util.Set<java.lang.String> strSet25 = locale19.getUnicodeLocaleAttributes();
        boolean boolean26 = locale7.equals((java.lang.Object) strSet25);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "hi!" + "'", str13, "hi!");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(strSet25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2074");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Code code7 = faker1.code();
        com.github.javafaker.Color color8 = faker1.color();
        com.github.javafaker.Options options9 = faker1.options();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = faker1.resolve("French");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(options9);
    }

    @Test
    public void test2075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2075");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        java.lang.String str7 = faker1.numerify("Koreanisch");
        java.lang.String str9 = faker1.numerify("German");
        com.github.javafaker.Number number10 = faker1.number();
        com.github.javafaker.Address address11 = faker1.address();
        java.lang.String str13 = faker1.numerify("fr_fr");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Koreanisch" + "'", str7, "Koreanisch");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "German" + "'", str9, "German");
        org.junit.Assert.assertNotNull(number10);
        org.junit.Assert.assertNotNull(address11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "fr_fr" + "'", str13, "fr_fr");
    }

    @Test
    public void test2076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2076");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = locale7.getLanguage();
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getDisplayVariant();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Locale locale13 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
    }

    @Test
    public void test2077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2077");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        boolean boolean8 = locale5.hasExtensions();
        java.lang.String str10 = locale5.getUnicodeLocaleType("zh");
        java.lang.String str11 = locale5.getDisplayScript();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale16 = new java.util.Locale("IT");
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale20 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category12, locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale.setDefault(category12, locale22);
        java.util.Locale locale26 = java.util.Locale.getDefault(category12);
        java.lang.String str27 = locale5.getDisplayVariant(locale26);
        java.util.Random random28 = new java.util.Random();
        boolean boolean29 = random28.nextBoolean();
        java.util.stream.IntStream intStream31 = random28.ints((long) (short) 1);
        java.util.Random random32 = new java.util.Random();
        byte[] byteArray39 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random32.nextBytes(byteArray39);
        java.util.stream.LongStream longStream41 = random32.longs();
        float float42 = random32.nextFloat();
        java.util.stream.LongStream longStream44 = random32.longs((long) 0);
        java.util.stream.IntStream intStream47 = random32.ints((int) (short) 0, 303251316);
        java.util.Random random48 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream51 = random48.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream52 = random48.ints();
        java.util.Random random53 = new java.util.Random();
        byte[] byteArray60 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random53.nextBytes(byteArray60);
        java.util.stream.LongStream longStream64 = random53.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream66 = random53.doubles(1L);
        double double67 = random53.nextGaussian();
        java.util.stream.DoubleStream doubleStream69 = random53.doubles((long) 0);
        java.util.Random random70 = new java.util.Random();
        byte[] byteArray77 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random70.nextBytes(byteArray77);
        random53.nextBytes(byteArray77);
        random48.nextBytes(byteArray77);
        random32.nextBytes(byteArray77);
        random28.nextBytes(byteArray77);
        boolean boolean83 = random28.nextBoolean();
        float float84 = random28.nextFloat();
        float float85 = random28.nextFloat();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker86 = new com.github.javafaker.Faker(locale5, random28);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: hi!__ITA could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "italien" + "'", str1, "italien");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ITA" + "'", str27, "ITA");
// flaky:         org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(intStream31);
        org.junit.Assert.assertNotNull(byteArray39);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray39), "[93, -46, 53, 22, -109, -124]");
        org.junit.Assert.assertNotNull(longStream41);
// flaky:         org.junit.Assert.assertTrue("'" + float42 + "' != '" + 0.6722737f + "'", float42 == 0.6722737f);
        org.junit.Assert.assertNotNull(longStream44);
        org.junit.Assert.assertNotNull(intStream47);
        org.junit.Assert.assertNotNull(doubleStream51);
        org.junit.Assert.assertNotNull(intStream52);
        org.junit.Assert.assertNotNull(byteArray60);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray60), "[110, 32, 77, -88, -121, 57]");
        org.junit.Assert.assertNotNull(longStream64);
        org.junit.Assert.assertNotNull(doubleStream66);
// flaky:         org.junit.Assert.assertTrue("'" + double67 + "' != '" + (-1.3900426741775758d) + "'", double67 == (-1.3900426741775758d));
        org.junit.Assert.assertNotNull(doubleStream69);
        org.junit.Assert.assertNotNull(byteArray77);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray77), "[77, 87, -101, -26, -43, -57]");
// flaky:         org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
// flaky:         org.junit.Assert.assertTrue("'" + float84 + "' != '" + 0.513878f + "'", float84 == 0.513878f);
// flaky:         org.junit.Assert.assertTrue("'" + float85 + "' != '" + 0.8544588f + "'", float85 == 0.8544588f);
    }

    @Test
    public void test2078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2078");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        double double15 = random0.nextDouble();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles();
        int int18 = random0.nextInt(1038659894);
        float float19 = random0.nextFloat();
        java.util.stream.LongStream longStream21 = random0.longs((long) '4');
        java.util.stream.IntStream intStream22 = random0.ints();
        java.util.stream.LongStream longStream23 = random0.longs();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[37, 110, 7, 37, 98, -63]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.6461396543014377d + "'", double14 == 0.6461396543014377d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.10984188382283877d + "'", double15 == 0.10984188382283877d);
        org.junit.Assert.assertNotNull(doubleStream16);
// flaky:         org.junit.Assert.assertTrue("'" + int18 + "' != '" + 461378588 + "'", int18 == 461378588);
// flaky:         org.junit.Assert.assertTrue("'" + float19 + "' != '" + 0.23576891f + "'", float19 == 0.23576891f);
        org.junit.Assert.assertNotNull(longStream21);
        org.junit.Assert.assertNotNull(intStream22);
        org.junit.Assert.assertNotNull(longStream23);
    }

    @Test
    public void test2079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2079");
        java.util.Locale locale2 = new java.util.Locale("", "ko");
        java.lang.String str3 = locale2.getLanguage();
        boolean boolean4 = locale2.hasExtensions();
        java.util.Locale locale5 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = locale2.getDisplayCountry(locale5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale2.toString(), "_KO");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2080");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Random random3 = new java.util.Random();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random3.nextBytes(byteArray10);
        java.util.stream.LongStream longStream12 = random3.longs();
        float float13 = random3.nextFloat();
        float float14 = random3.nextFloat();
        java.util.stream.DoubleStream doubleStream16 = random3.doubles(100L);
        java.util.stream.LongStream longStream17 = random3.longs();
        random3.setSeed((long) (short) 100);
        java.util.stream.IntStream intStream20 = random3.ints();
        java.util.stream.LongStream longStream22 = random3.longs(0L);
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker(locale0, random3);
        long long24 = random3.nextLong();
        java.util.stream.DoubleStream doubleStream25 = random3.doubles();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[8, 16, -12, 15, 93, 12]");
        org.junit.Assert.assertNotNull(longStream12);
// flaky:         org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.21677774f + "'", float13 == 0.21677774f);
// flaky:         org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.24682558f + "'", float14 == 0.24682558f);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(longStream17);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(longStream22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + (-5128016860359238732L) + "'", long24 == (-5128016860359238732L));
        org.junit.Assert.assertNotNull(doubleStream25);
    }

    @Test
    public void test2081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2081");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        java.lang.String str7 = faker1.numerify("fr_FR");
        com.github.javafaker.PhoneNumber phoneNumber8 = faker1.phoneNumber();
        com.github.javafaker.PhoneNumber phoneNumber9 = faker1.phoneNumber();
        com.github.javafaker.Finance finance10 = faker1.finance();
        com.github.javafaker.Internet internet11 = faker1.internet();
        java.lang.String str13 = faker1.bothify("");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr_FR" + "'", str7, "fr_FR");
        org.junit.Assert.assertNotNull(phoneNumber8);
        org.junit.Assert.assertNotNull(phoneNumber9);
        org.junit.Assert.assertNotNull(finance10);
        org.junit.Assert.assertNotNull(internet11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
    }

    @Test
    public void test2082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2082");
        java.util.Locale locale3 = new java.util.Locale("inglese (Stati Uniti)", "USA", "English");
        java.lang.String str4 = locale3.getDisplayCountry();
        org.junit.Assert.assertEquals(locale3.toString(), "inglese (stati uniti)_USA_English");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "USA" + "'", str4, "USA");
    }

    @Test
    public void test2083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2083");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("French");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList3 = java.util.Locale.LanguageRange.parse("Italia");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap5 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList6 = java.util.Locale.LanguageRange.parse("und", strMap5);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap7 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList8 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList6, strMap7);
        java.util.Locale.LanguageRange[] languageRangeArray9 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList10 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList10, languageRangeArray9);
        java.lang.String[] strArray16 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList17 = new java.util.ArrayList<java.lang.String>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList17, strArray16);
        java.util.List<java.lang.String> strList19 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, (java.util.Collection<java.lang.String>) strList17);
        java.util.Collection<java.lang.String> strCollection20 = null;
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strCollection20);
        java.util.Collection<java.util.Locale> localeCollection22 = null;
        java.util.Locale.LanguageRange[] languageRangeArray23 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList24 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList24, languageRangeArray23);
        java.lang.String[] strArray30 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList31 = new java.util.ArrayList<java.lang.String>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList31, strArray30);
        java.util.List<java.lang.String> strList33 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList31);
        java.util.Locale.LanguageRange[] languageRangeArray34 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList35 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean36 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList35, languageRangeArray34);
        java.lang.String[] strArray41 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList42 = new java.util.ArrayList<java.lang.String>();
        boolean boolean43 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList42, strArray41);
        java.util.List<java.lang.String> strList44 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, (java.util.Collection<java.lang.String>) strList42);
        java.util.Collection<java.lang.String> strCollection45 = null;
        java.util.List<java.lang.String> strList46 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList35, strCollection45);
        java.lang.String str47 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, strCollection45);
        java.util.Locale.LanguageRange[] languageRangeArray48 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList49 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList49, languageRangeArray48);
        java.lang.String[] strArray55 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList56 = new java.util.ArrayList<java.lang.String>();
        boolean boolean57 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList56, strArray55);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList49, (java.util.Collection<java.lang.String>) strList56);
        java.util.Locale.FilteringMode filteringMode59 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList60 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList24, (java.util.Collection<java.lang.String>) strList56, filteringMode59);
        java.util.List<java.util.Locale> localeList61 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, localeCollection22, filteringMode59);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap62 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList63 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList10, strMap62);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap64 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList65 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList63, strMap64);
        java.util.Locale locale66 = java.util.Locale.CANADA;
        java.util.Locale locale68 = new java.util.Locale("IT");
        java.lang.String str69 = locale66.getDisplayVariant(locale68);
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.util.Locale locale71 = java.util.Locale.KOREAN;
        java.lang.String str72 = locale70.getDisplayCountry(locale71);
        java.util.Locale locale73 = java.util.Locale.ITALY;
        java.util.Locale locale74 = locale73.stripExtensions();
        java.lang.String str75 = locale70.getDisplayCountry(locale73);
        java.util.Locale.setDefault(locale70);
        java.lang.String str77 = locale68.getDisplayCountry(locale70);
        java.lang.String str78 = locale70.getScript();
        java.util.Set<java.lang.String> strSet79 = locale70.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags(languageRangeList63, (java.util.Collection<java.lang.String>) strSet79);
        java.util.Locale.FilteringMode filteringMode81 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags(languageRangeList6, (java.util.Collection<java.lang.String>) strSet79, filteringMode81);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags(languageRangeList3, (java.util.Collection<java.lang.String>) strList82);
        java.util.List<java.lang.String> strList84 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList82);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap85 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList86 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap85);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeList3);
        org.junit.Assert.assertNotNull(languageRangeList6);
        org.junit.Assert.assertNotNull(languageRangeList8);
        org.junit.Assert.assertNotNull(languageRangeArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(strArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strList19);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(languageRangeArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertNotNull(strList33);
        org.junit.Assert.assertNotNull(languageRangeArray34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(strArray41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + true + "'", boolean43 == true);
        org.junit.Assert.assertNotNull(strList44);
        org.junit.Assert.assertNotNull(strList46);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertNotNull(languageRangeArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(strArray55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + true + "'", boolean57 == true);
        org.junit.Assert.assertNotNull(strList58);
        org.junit.Assert.assertTrue("'" + filteringMode59 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode59.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList60);
        org.junit.Assert.assertNotNull(localeList61);
        org.junit.Assert.assertNotNull(languageRangeList63);
        org.junit.Assert.assertNotNull(languageRangeList65);
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale68.toString(), "it");
        org.junit.Assert.assertEquals("'" + str69 + "' != '" + "" + "'", str69, "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(locale73);
        org.junit.Assert.assertEquals(locale73.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "" + "'", str77, "");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertNotNull(strSet79);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertTrue("'" + filteringMode81 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode81.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertNotNull(strList84);
        org.junit.Assert.assertNotNull(languageRangeList86);
    }

    @Test
    public void test2084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2084");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale8 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale8.getISO3Language();
        java.util.Set<java.lang.String> strSet12 = locale8.getUnicodeLocaleAttributes();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ita" + "'", str11, "ita");
        org.junit.Assert.assertNotNull(strSet12);
    }

    @Test
    public void test2085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2085");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale2 = new java.util.Locale("IT");
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.lang.String str4 = locale0.getCountry();
        java.util.Set<java.lang.Character> charSet5 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "CA" + "'", str4, "CA");
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test2086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2086");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        java.util.stream.LongStream longStream14 = random0.longs();
        random0.setSeed((long) (short) 100);
        java.util.stream.IntStream intStream17 = random0.ints();
        java.util.stream.LongStream longStream19 = random0.longs(0L);
        float float20 = random0.nextFloat();
        long long21 = random0.nextLong();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[93, -48, -23, 83, 80, 48]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.27022237f + "'", float10 == 0.27022237f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.5257014f + "'", float11 == 0.5257014f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.7220096f + "'", float20 == 0.7220096f);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-4894608278020295867L) + "'", long21 == (-4894608278020295867L));
    }

    @Test
    public void test2087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2087");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getISO3Country();
        java.lang.String str3 = locale0.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
    }

    @Test
    public void test2088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2088");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str4 = locale0.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.lang.String str9 = locale6.getLanguage();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.lang.String str15 = locale6.getDisplayLanguage(locale11);
        java.lang.String str16 = locale3.getDisplayVariant(locale6);
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale6.getDisplayLanguage(locale18);
        java.util.Random random21 = new java.util.Random();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random21.nextBytes(byteArray28);
        double double30 = random21.nextGaussian();
        java.util.stream.DoubleStream doubleStream31 = random21.doubles();
        int int32 = random21.nextInt();
        java.util.stream.DoubleStream doubleStream34 = random21.doubles(0L);
        long long35 = random21.nextLong();
        boolean boolean36 = random21.nextBoolean();
        boolean boolean37 = locale6.equals((java.lang.Object) boolean36);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Taiwan)" + "'", str4, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it" + "'", str9, "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ITA" + "'", str12, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "italiano" + "'", str15, "italiano");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Chinese" + "'", str19, "Chinese");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str20, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[73, 116, 58, 13, 95, 10]");
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + (-1.084929086180349d) + "'", double30 == (-1.084929086180349d));
        org.junit.Assert.assertNotNull(doubleStream31);
// flaky:         org.junit.Assert.assertTrue("'" + int32 + "' != '" + (-93918292) + "'", int32 == (-93918292));
        org.junit.Assert.assertNotNull(doubleStream34);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + 7197591833672547199L + "'", long35 == 7197591833672547199L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
    }

    @Test
    public void test2089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2089");
        java.util.Random random1 = new java.util.Random((long) (-1755955924));
    }

    @Test
    public void test2090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2090");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        java.util.Locale.Builder builder11 = builder3.removeUnicodeLocaleAttribute("Chinese");
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale locale13 = builder12.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
    }

    @Test
    public void test2091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2091");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        random0.setSeed((long) '#');
        java.util.stream.DoubleStream doubleStream15 = random0.doubles(10L);
        java.util.stream.LongStream longStream16 = random0.longs();
        java.util.stream.IntStream intStream17 = random0.ints();
        java.util.stream.LongStream longStream20 = random0.longs((long) (-894906242), (long) 25326595);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-104, 53, 65, -10, -84, 52]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.7066382f + "'", float10 == 0.7066382f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.65239304f + "'", float11 == 0.65239304f);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(longStream20);
    }

    @Test
    public void test2092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2092");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getISO3Country();
        boolean boolean17 = locale14.hasExtensions();
        java.lang.String str18 = locale11.getDisplayVariant(locale14);
        java.util.Locale.Builder builder19 = builder3.setLocale(locale11);
        java.util.Locale.Builder builder20 = builder19.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder19.setScript("und-KO");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: und-KO [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2093");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Business business7 = faker1.business();
        com.github.javafaker.Company company8 = faker1.company();
        com.github.javafaker.Internet internet9 = faker1.internet();
        java.lang.String str11 = faker1.numerify("\u5fb7\u6587\u5fb7\u570b)");
        java.lang.String str13 = faker1.letterify("cinese (Taiwan)");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(business7);
        org.junit.Assert.assertNotNull(company8);
        org.junit.Assert.assertNotNull(internet9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "\u5fb7\u6587\u5fb7\u570b)" + "'", str11, "\u5fb7\u6587\u5fb7\u570b)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "cinese (Taiwan)" + "'", str13, "cinese (Taiwan)");
    }

    @Test
    public void test2094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2094");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        boolean boolean4 = locale1.hasExtensions();
        java.lang.String str5 = locale1.getScript();
        java.lang.String str6 = locale1.getISO3Country();
        java.util.Random random7 = new java.util.Random();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random7.nextBytes(byteArray14);
        java.util.stream.LongStream longStream16 = random7.longs();
        float float17 = random7.nextFloat();
        java.util.stream.DoubleStream doubleStream19 = random7.doubles((long) (short) 10);
        java.util.stream.DoubleStream doubleStream21 = random7.doubles(0L);
        boolean boolean22 = locale1.equals((java.lang.Object) doubleStream21);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-104, -61, 70, -118, 54, 116]");
        org.junit.Assert.assertNotNull(longStream16);
// flaky:         org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.5230352f + "'", float17 == 0.5230352f);
        org.junit.Assert.assertNotNull(doubleStream19);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2095");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.getISO3Country();
        java.lang.String str5 = locale3.getISO3Country();
        java.lang.String str6 = locale3.getLanguage();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.lang.String str12 = locale3.getDisplayLanguage(locale8);
        java.lang.String str13 = locale3.getDisplayVariant();
        java.lang.String str14 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale15 = locale0.stripExtensions();
        java.lang.String str16 = locale0.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ITA" + "'", str4, "ITA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "italiano" + "'", str12, "italiano");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Korean" + "'", str16, "Korean");
    }

    @Test
    public void test2096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2096");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale3);
        java.lang.String str22 = faker20.letterify("ko");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str24 = faker20.resolve("de_DE");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[13, 35, 126, 99, 91, -64]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.6985642f + "'", float15 == 0.6985642f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.105962515f + "'", float16 == 0.105962515f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ko" + "'", str22, "ko");
    }

    @Test
    public void test2097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2097");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.getISO3Country();
        java.lang.String str5 = locale3.getISO3Country();
        java.lang.String str6 = locale3.getLanguage();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.lang.String str12 = locale3.getDisplayLanguage(locale8);
        java.lang.String str13 = locale3.getDisplayVariant();
        java.lang.String str14 = locale0.getDisplayVariant(locale3);
        java.util.Set<java.lang.Character> charSet15 = locale0.getExtensionKeys();
        java.lang.String str16 = locale0.getDisplayName();
        java.util.Locale.Builder builder17 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder19 = builder17.setRegion("");
        java.util.Locale.Builder builder20 = builder17.clearExtensions();
        java.util.Locale.Builder builder22 = builder17.setVariant("Italian");
        java.util.Locale locale23 = java.util.Locale.GERMANY;
        java.lang.String str24 = locale23.getDisplayName();
        java.util.Locale.Builder builder25 = builder22.setLocale(locale23);
        java.util.Locale.Builder builder27 = builder22.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale28 = java.util.Locale.ITALIAN;
        java.lang.String str29 = locale28.getDisplayLanguage();
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale32 = java.util.Locale.KOREAN;
        java.lang.String str33 = locale31.getDisplayName(locale32);
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.util.Locale locale35 = locale34.stripExtensions();
        java.lang.String str36 = locale35.getISO3Country();
        java.lang.String str37 = locale35.getISO3Country();
        java.util.Locale locale39 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale40 = java.util.Locale.KOREAN;
        java.lang.String str41 = locale39.getDisplayName(locale40);
        java.lang.String str42 = locale35.getDisplayVariant(locale39);
        java.lang.String str43 = locale31.getDisplayScript(locale39);
        java.util.Locale locale46 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str47 = locale31.getDisplayScript(locale46);
        java.lang.String str48 = locale46.toLanguageTag();
        java.lang.String str49 = locale46.toLanguageTag();
        java.util.Locale.Builder builder50 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder52 = builder50.setRegion("");
        java.util.Locale.Builder builder54 = builder52.setRegion("");
        java.util.Locale locale55 = builder54.build();
        java.lang.String str56 = locale46.getDisplayName(locale55);
        java.lang.String str57 = locale28.getDisplayCountry(locale46);
        java.lang.String str59 = locale46.getExtension('x');
        java.util.Locale locale60 = java.util.Locale.JAPANESE;
        java.util.Locale locale63 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale64 = java.util.Locale.ITALY;
        java.util.Locale locale65 = locale64.stripExtensions();
        java.lang.String str66 = locale65.getISO3Country();
        java.lang.String str67 = locale65.getISO3Country();
        java.util.Locale locale69 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale70 = java.util.Locale.KOREAN;
        java.lang.String str71 = locale69.getDisplayName(locale70);
        java.lang.String str72 = locale65.getDisplayVariant(locale69);
        java.util.Set<java.lang.Character> charSet73 = locale65.getExtensionKeys();
        java.lang.String str74 = locale65.getISO3Country();
        java.lang.String str75 = locale65.getISO3Language();
        java.lang.String str76 = locale63.getDisplayCountry(locale65);
        java.lang.String str77 = locale60.getDisplayLanguage(locale65);
        com.github.javafaker.Faker faker78 = new com.github.javafaker.Faker(locale60);
        java.lang.String str79 = locale46.getDisplayCountry(locale60);
        java.util.Locale.Builder builder80 = builder22.setLocale(locale60);
        java.util.Locale locale81 = builder80.build();
        java.util.Locale.Builder builder82 = builder80.clearExtensions();
        java.util.Locale.Builder builder84 = builder82.removeUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder85 = builder82.clear();
        boolean boolean86 = locale0.equals((java.lang.Object) builder82);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ITA" + "'", str4, "ITA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "italiano" + "'", str12, "italiano");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(charSet15);
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Korean" + "'", str16, "Korean");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str24 + "' != '" + "German (Germany)" + "'", str24, "German (Germany)");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Italian" + "'", str29, "Italian");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ITA" + "'", str36, "ITA");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ITA" + "'", str37, "ITA");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals(locale46.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "und" + "'", str48, "und");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "und" + "'", str49, "und");
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "fr_fr (FR_FR)" + "'", str56, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertNull(str59);
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ja");
        org.junit.Assert.assertEquals(locale63.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "ITA" + "'", str66, "ITA");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "ITA" + "'", str67, "ITA");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
        org.junit.Assert.assertNotNull(locale70);
        org.junit.Assert.assertEquals(locale70.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "" + "'", str71, "");
        org.junit.Assert.assertEquals("'" + str72 + "' != '" + "" + "'", str72, "");
        org.junit.Assert.assertNotNull(charSet73);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ITA" + "'", str74, "ITA");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "ita" + "'", str75, "ita");
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "Francia" + "'", str76, "Francia");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "giapponese" + "'", str77, "giapponese");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "FR_FR" + "'", str79, "FR_FR");
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "ja");
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder84);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
    }

    @Test
    public void test2098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2098");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder7 = builder0.setLanguage("IT");
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder7.removeUnicodeLocaleAttribute("\ub3c5\uc77c");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2099");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = locale14.getDisplayScript(locale22);
        java.util.Locale locale29 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str30 = locale14.getDisplayScript(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setRegion("");
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale11.getDisplayCountry(locale29);
        java.lang.String str42 = locale29.getExtension('x');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale48.getExtensionKeys();
        java.lang.String str57 = locale48.getISO3Country();
        java.lang.String str58 = locale48.getISO3Language();
        java.lang.String str59 = locale46.getDisplayCountry(locale48);
        java.lang.String str60 = locale43.getDisplayLanguage(locale48);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale43);
        java.lang.String str62 = locale29.getDisplayCountry(locale43);
        java.util.Locale.Builder builder63 = builder5.setLocale(locale43);
        java.util.Locale locale64 = builder63.build();
        java.util.Locale.Builder builder65 = builder63.clearExtensions();
        java.util.Locale.Builder builder67 = builder65.removeUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder68 = builder67.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder71 = builder67.setUnicodeLocaleKeyword("", "Italian (Italy)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italian" + "'", str12, "Italian");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr_fr (FR_FR)" + "'", str39, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ITA" + "'", str57, "ITA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ita" + "'", str58, "ita");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Francia" + "'", str59, "Francia");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FR_FR" + "'", str62, "FR_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test2100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2100");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.setLanguage("TWN");
        java.util.Locale locale7 = builder0.build();
        java.lang.String str8 = locale7.getDisplayName();
        java.lang.String str9 = locale7.getDisplayLanguage();
        java.util.Set<java.lang.String> strSet10 = locale7.getUnicodeLocaleAttributes();
        java.lang.String str11 = locale7.getDisplayCountry();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "twn");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "twn" + "'", str8, "twn");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "twn" + "'", str9, "twn");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test2101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2101");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (short) 0);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        java.lang.String str7 = languageRange2.getRange();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it" + "'", str7, "it");
    }

    @Test
    public void test2102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2102");
        java.util.Random random1 = new java.util.Random((long) 494295214);
        java.util.stream.IntStream intStream3 = random1.ints((long) 11872451);
        org.junit.Assert.assertNotNull(intStream3);
    }

    @Test
    public void test2103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2103");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        int int10 = random0.nextInt((int) 'u');
        double double11 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(random0);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream16 = random0.doubles((double) 0.76190096f, (double) (-1989047807));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-15, -106, 117, -91, 107, -94]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 71 + "'", int10 == 71);
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.03124691709422805d) + "'", double11 == (-0.03124691709422805d));
        org.junit.Assert.assertNotNull(doubleStream12);
    }

    @Test
    public void test2104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2104");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setLanguage("Italy");
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.TAIWAN;
        java.lang.String str10 = locale7.getDisplayScript(locale9);
        java.lang.String str11 = locale7.getDisplayScript();
        java.lang.String str12 = locale7.getISO3Language();
        java.util.Locale.Builder builder13 = builder5.setLocale(locale7);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder13.setUnicodeLocaleKeyword("en", "Koreanisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword type: Koreanisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ita" + "'", str12, "ita");
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2105");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale6.getDisplayScript(locale8);
        java.lang.String str10 = locale3.getDisplayCountry(locale6);
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(locale3);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList20);
        java.util.Collection<java.lang.String> strCollection23 = null;
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strCollection23);
        boolean boolean25 = locale3.equals((java.lang.Object) languageRangeList13);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test2106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2106");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder9 = builder3.setExtension('x', "allemand");
        java.util.Locale.Builder builder11 = builder3.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder14 = builder11.setLanguageTag("");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Empty subtag [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "italian");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2107");
        java.util.Locale locale2 = new java.util.Locale("fr_FR", "it");
        java.util.Random random3 = new java.util.Random();
        boolean boolean4 = random3.nextBoolean();
        boolean boolean5 = random3.nextBoolean();
        java.util.stream.LongStream longStream6 = random3.longs();
        boolean boolean7 = locale2.equals((java.lang.Object) longStream6);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_fr_IT");
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(longStream6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2108");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str8 = locale1.getDisplayVariant(locale4);
        java.util.Set<java.lang.String> strSet9 = locale1.getUnicodeLocaleAttributes();
        java.lang.String str10 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test2109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2109");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale8.getDisplayCountry(locale11);
        java.lang.String str14 = locale11.getCountry();
        java.lang.String str15 = locale1.getDisplayScript(locale11);
        java.util.Random random16 = new java.util.Random();
        byte[] byteArray23 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random16.nextBytes(byteArray23);
        double double25 = random16.nextGaussian();
        java.util.stream.DoubleStream doubleStream26 = random16.doubles();
        int int27 = random16.nextInt();
        java.util.stream.DoubleStream doubleStream29 = random16.doubles(0L);
        long long30 = random16.nextLong();
        java.util.stream.DoubleStream doubleStream32 = random16.doubles((long) (short) 10);
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker(locale1, random16);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream35 = random16.longs((-2668386094977564893L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it-IT" + "'", str7, "it-IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "IT" + "'", str14, "IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(byteArray23);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray23), "[-93, 76, 18, 112, -40, -110]");
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 1.3036818539413608d + "'", double25 == 1.3036818539413608d);
        org.junit.Assert.assertNotNull(doubleStream26);
// flaky:         org.junit.Assert.assertTrue("'" + int27 + "' != '" + (-1287863627) + "'", int27 == (-1287863627));
        org.junit.Assert.assertNotNull(doubleStream29);
// flaky:         org.junit.Assert.assertTrue("'" + long30 + "' != '" + (-4836104670923456441L) + "'", long30 == (-4836104670923456441L));
        org.junit.Assert.assertNotNull(doubleStream32);
    }

    @Test
    public void test2110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2110");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale locale6 = builder5.build();
        java.util.Locale.Builder builder8 = builder5.setScript("");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2111");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale.Builder builder11 = builder3.setVariant("");
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale.Builder builder15 = builder3.setExtension('u', "francese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setScript("und");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: und [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2112");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder0.setLanguage("");
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale14 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str15 = locale8.getDisplayCountry(locale14);
        java.lang.String str16 = locale8.toLanguageTag();
        java.lang.String str17 = locale8.getDisplayCountry();
        java.util.Locale.Builder builder18 = builder6.setLocale(locale8);
        java.util.Locale locale19 = builder6.build();
        java.util.Locale locale20 = builder6.build();
        java.util.Locale.Builder builder21 = builder6.clear();
        java.util.Locale locale22 = builder6.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italy" + "'", str15, "Italy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it-IT" + "'", str16, "it-IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italy" + "'", str17, "Italy");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
    }

    @Test
    public void test2113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2113");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str7 = faker1.bothify("it");
        com.github.javafaker.PhoneNumber phoneNumber8 = faker1.phoneNumber();
        com.github.javafaker.PhoneNumber phoneNumber9 = faker1.phoneNumber();
        com.github.javafaker.Company company10 = faker1.company();
        com.github.javafaker.Number number11 = faker1.number();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(company5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it" + "'", str7, "it");
        org.junit.Assert.assertNotNull(phoneNumber8);
        org.junit.Assert.assertNotNull(phoneNumber9);
        org.junit.Assert.assertNotNull(company10);
        org.junit.Assert.assertNotNull(number11);
    }

    @Test
    public void test2114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2114");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("France");
    }

    @Test
    public void test2115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2115");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("x-lvariant-fr", (double) 0.6148134f);
        java.lang.String str3 = languageRange2.getRange();
        double double4 = languageRange2.getWeight();
        java.lang.String str5 = languageRange2.getRange();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-lvariant-fr" + "'", str3, "x-lvariant-fr");
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.6148133873939514d + "'", double4 == 0.6148133873939514d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "x-lvariant-fr" + "'", str5, "x-lvariant-fr");
    }

    @Test
    public void test2116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2116");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        java.util.stream.LongStream longStream3 = random0.longs((long) (byte) 1);
        java.util.stream.IntStream intStream7 = random0.ints((long) 1002980205, (-1702682190), (-771933883));
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(intStream7);
    }

    @Test
    public void test2117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2117");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getLanguage();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale1);
        boolean boolean6 = locale1.hasExtensions();
        java.lang.String str7 = locale1.getScript();
        java.util.Locale.setDefault(locale1);
        java.util.Locale locale9 = locale1.stripExtensions();
        java.util.Locale locale10 = java.util.Locale.JAPANESE;
        boolean boolean11 = locale10.hasExtensions();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category12, locale16);
        java.lang.String str18 = locale16.getScript();
        boolean boolean19 = locale16.hasExtensions();
        java.lang.String str20 = locale10.getDisplayCountry(locale16);
        java.util.Locale locale21 = locale16.stripExtensions();
        boolean boolean22 = locale1.equals((java.lang.Object) locale16);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ja");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale16.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "hi!__ITA");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2118");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Options options5 = faker1.options();
        com.github.javafaker.Name name6 = faker1.name();
        com.github.javafaker.Options options7 = faker1.options();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertNotNull(options7);
    }

    @Test
    public void test2119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2119");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        com.github.javafaker.Company company6 = faker1.company();
        java.lang.String str8 = faker1.bothify("\u671d\u9c9c\u6587");
        java.lang.String str10 = faker1.numerify("");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertNotNull(company6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\u671d\u9c9c\u6587" + "'", str8, "\u671d\u9c9c\u6587");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test2120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2120");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getISO3Country();
        java.lang.String str2 = locale0.getDisplayScript();
        boolean boolean4 = locale0.equals((java.lang.Object) "\ud504\ub791\uc2a4,hi!)");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "TWN" + "'", str1, "TWN");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2121");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.DoubleStream doubleStream21 = random5.doubles((long) (byte) 1);
        double double22 = random5.nextDouble();
        java.util.stream.DoubleStream doubleStream26 = random5.doubles(0L, 0.0d, (double) 1356316543);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream30 = random5.ints((long) (-1877133671), (-1686831152), (-1866363753));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-121, -81, -64, -123, 23, -95]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.9839073f + "'", float15 == 0.9839073f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.59980035f + "'", float16 == 0.59980035f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(doubleStream21);
// flaky:         org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.8532315743952782d + "'", double22 == 0.8532315743952782d);
        org.junit.Assert.assertNotNull(doubleStream26);
    }

    @Test
    public void test2122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2122");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.lang.String str13 = locale1.getDisplayScript(locale9);
        java.lang.String str14 = locale1.getLanguage();
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Locale locale18 = java.util.Locale.TAIWAN;
        java.lang.String str19 = locale16.getDisplayScript(locale18);
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.lang.String str22 = locale18.getDisplayLanguage(locale21);
        java.lang.String str23 = locale18.getISO3Language();
        java.lang.String str24 = locale1.getDisplayCountry(locale18);
        java.lang.String str25 = locale1.getISO3Language();
        java.util.Locale locale26 = locale1.stripExtensions();
        boolean boolean27 = locale1.hasExtensions();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Chinese" + "'", str22, "Chinese");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "zho" + "'", str23, "zho");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
    }

    @Test
    public void test2123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2123");
        java.util.Locale locale2 = new java.util.Locale("zho-x-lvariant-und", "\u4e2d\u6587\u4e2d\u570b)");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u4e2d\u6587\u4e2d\u570b)");
    }

    @Test
    public void test2124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2124");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("\uc911\uad6d\uc5b4\uc911\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=???????? (??????)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2125");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        java.util.stream.LongStream longStream13 = random0.longs();
        java.util.stream.DoubleStream doubleStream17 = random0.doubles(6448421598433570082L, (double) 0.28971082f, (double) 0.31204516f);
        random0.setSeed(0L);
        java.util.stream.IntStream intStream23 = random0.ints((long) (short) 10, (-1730591738), (int) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream25 = random0.doubles((long) (-1888461981));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[88, -35, -21, 35, -51, 90]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.31181479f + "'", float10 == 0.31181479f);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(intStream23);
    }

    @Test
    public void test2126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2126");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.util.Random random6 = new java.util.Random();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random6.nextBytes(byteArray13);
        double double15 = random6.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random6.doubles();
        int int17 = random6.nextInt();
        java.util.stream.DoubleStream doubleStream19 = random6.doubles(0L);
        long long20 = random6.nextLong();
        java.util.stream.DoubleStream doubleStream22 = random6.doubles((long) (short) 10);
        double double23 = random6.nextDouble();
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker(locale0, random6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str26 = locale0.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[87, -118, 64, 48, -106, 10]");
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.9238283158196834d) + "'", double15 == (-0.9238283158196834d));
        org.junit.Assert.assertNotNull(doubleStream16);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-485329112) + "'", int17 == (-485329112));
        org.junit.Assert.assertNotNull(doubleStream19);
// flaky:         org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-7505381589506926490L) + "'", long20 == (-7505381589506926490L));
        org.junit.Assert.assertNotNull(doubleStream22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.26821425181598146d + "'", double23 == 0.26821425181598146d);
    }

    @Test
    public void test2127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2127");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.stream.DoubleStream doubleStream11 = random0.doubles((long) 348768006);
        boolean boolean12 = random0.nextBoolean();
        int int14 = random0.nextInt(522952910);
        double double15 = random0.nextGaussian();
        int int16 = random0.nextInt();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, -128, 102, 25, -70, -49]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream11);
// flaky:         org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int14 + "' != '" + 443177919 + "'", int14 == 443177919);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + (-0.6966638700149469d) + "'", double15 == (-0.6966638700149469d));
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-61016292) + "'", int16 == (-61016292));
    }

    @Test
    public void test2128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2128");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder13 = builder5.setExtension('x', "de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setScript("\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2129");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("deu");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale5 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str6 = locale2.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale8.getLanguage();
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.lang.String str17 = locale8.getDisplayLanguage(locale13);
        java.lang.String str18 = locale5.getDisplayVariant(locale8);
        java.util.Set<java.lang.String> strSet19 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str20 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet19);
        java.util.Locale locale24 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str25 = locale24.toLanguageTag();
        java.lang.String str26 = locale24.getDisplayName();
        java.util.Set<java.lang.String> strSet27 = locale24.getUnicodeLocaleAttributes();
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.parse("Italia");
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList38);
        java.util.Collection<java.lang.String> strCollection41 = null;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strCollection41);
        java.util.Locale.LanguageRange[] languageRangeArray43 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList44 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList44, languageRangeArray43);
        java.lang.String[] strArray50 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList51 = new java.util.ArrayList<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList51, strArray50);
        java.util.List<java.lang.String> strList53 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList44, (java.util.Collection<java.lang.String>) strList51);
        java.util.Locale.FilteringMode filteringMode54 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList53, filteringMode54);
        java.util.Locale.FilteringMode filteringMode56 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList57 = java.util.Locale.filterTags(languageRangeList29, (java.util.Collection<java.lang.String>) strList55, filteringMode56);
        java.util.List<java.lang.String> strList58 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet27, filteringMode56);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale5.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "cinese (Taiwan)" + "'", str6, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it" + "'", str11, "it");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "italiano" + "'", str17, "italiano");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(strSet19);
        org.junit.Assert.assertNull(str20);
        org.junit.Assert.assertEquals(locale24.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "x-lvariant-fr" + "'", str25, "x-lvariant-fr");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "cinese (taiwan) (fr)" + "'", str26, "cinese (taiwan) (fr)");
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNotNull(languageRangeArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(strList53);
        org.junit.Assert.assertTrue("'" + filteringMode54 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode54.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertTrue("'" + filteringMode56 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode56.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList57);
        org.junit.Assert.assertNotNull(strList58);
    }

    @Test
    public void test2130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2130");
        java.util.Locale locale2 = new java.util.Locale("fr_FR", "it");
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale2.getDisplayLanguage(locale3);
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale6 = java.util.Locale.getDefault(category5);
        java.util.Locale locale7 = java.util.Locale.CANADA;
        java.util.Locale locale9 = new java.util.Locale("IT");
        java.lang.String str10 = locale7.getDisplayVariant(locale9);
        java.util.Locale.setDefault(category5, locale7);
        java.util.Locale locale13 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category5, locale13);
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayCountry(locale16);
        java.util.Locale.setDefault(category5, locale15);
        java.util.Locale locale22 = new java.util.Locale("hi!__ITA", "fr", "hi!");
        java.lang.String str23 = locale22.getScript();
        java.util.Locale.setDefault(category5, locale22);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.getISO3Country();
        java.lang.String str28 = locale26.getISO3Country();
        java.lang.String str29 = locale26.toLanguageTag();
        java.util.Locale.Category category30 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale34 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category30, locale34);
        java.lang.String str36 = locale26.getDisplayCountry(locale34);
        boolean boolean37 = locale34.hasExtensions();
        java.lang.String str38 = locale22.getDisplayName(locale34);
        java.lang.String str39 = locale3.getDisplayVariant(locale34);
        java.lang.String str40 = locale3.getDisplayVariant();
        org.junit.Assert.assertEquals(locale2.toString(), "fr_fr_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr_fr" + "'", str4, "fr_fr");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale9.toString(), "it");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals(locale13.toString(), "it");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale22.toString(), "hi!__ita_FR_hi!");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ITA" + "'", str27, "ITA");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ITA" + "'", str28, "ITA");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it-IT" + "'", str29, "it-IT");
        org.junit.Assert.assertTrue("'" + category30 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category30.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale34.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "Italy" + "'", str36, "Italy");
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
// flaky:         org.junit.Assert.assertEquals("'" + str38 + "' != '" + "hi!__ita (France,hi!)" + "'", str38, "hi!__ita (France,hi!)");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
    }

    @Test
    public void test2131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2131");
        java.util.Random random1 = new java.util.Random((long) 771880568);
    }

    @Test
    public void test2132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2132");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.lang.String str5 = locale1.getDisplayScript();
        java.lang.String str6 = locale1.getISO3Language();
        java.util.Locale locale8 = new java.util.Locale("francese");
        java.lang.String str9 = locale8.getDisplayName();
        java.lang.String str10 = locale1.getDisplayScript(locale8);
        java.util.Locale locale14 = new java.util.Locale("zh_TW", "\uc911\uad6d\uc5b4", "Italienisch");
        java.lang.String str15 = locale1.getDisplayVariant(locale14);
        java.lang.String str16 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ita" + "'", str6, "ita");
        org.junit.Assert.assertEquals(locale8.toString(), "francese");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "francese" + "'", str9, "francese");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
// flaky:         org.junit.Assert.assertEquals(locale14.toString(), "\uc911\uad6d\uc5b4_Italienisch");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
    }

    @Test
    public void test2133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2133");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italian (Italy)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=italian (italy)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2134");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        java.util.stream.LongStream longStream14 = random0.longs();
        random0.setSeed((long) (short) 100);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream19 = random0.ints(218002746, (-1072492290));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[65, 37, 88, 63, -20, -66]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.051162004f + "'", float10 == 0.051162004f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.9310709f + "'", float11 == 0.9310709f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
    }

    @Test
    public void test2135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2135");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.setLanguage("IT");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category7);
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale17);
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getISO3Country();
        java.lang.String str24 = locale21.toLanguageTag();
        java.util.Locale locale25 = java.util.Locale.GERMANY;
        java.lang.String str26 = locale21.getDisplayName(locale25);
        java.lang.String str27 = locale21.toLanguageTag();
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.util.Locale locale29 = java.util.Locale.KOREAN;
        java.lang.String str30 = locale28.getDisplayCountry(locale29);
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale28.getDisplayCountry(locale31);
        java.lang.String str34 = locale31.getCountry();
        java.lang.String str35 = locale21.getDisplayScript(locale31);
        java.util.Locale.Builder builder36 = builder19.setLocale(locale21);
        java.lang.String str37 = locale21.getScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois" + "'", str15, "chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u53f0\u7063" + "'", str18, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ITA" + "'", str23, "ITA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it-IT" + "'", str24, "it-IT");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "Italienisch (Italien)" + "'", str26, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "it-IT" + "'", str27, "it-IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "IT" + "'", str34, "IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test2136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2136");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str9 = locale4.getExtension('a');
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder11.build();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale15.getDisplayVariant(locale19);
        java.util.Set<java.lang.Character> charSet23 = locale15.getExtensionKeys();
        java.lang.String str24 = locale15.getISO3Country();
        java.lang.String str25 = locale15.getISO3Language();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale31.getISO3Country();
        java.lang.String str33 = locale31.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale31.getDisplayVariant(locale35);
        java.lang.String str39 = locale27.getDisplayScript(locale35);
        java.util.Locale locale42 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str43 = locale27.getDisplayScript(locale42);
        java.lang.String str44 = locale42.getDisplayName();
        boolean boolean45 = locale42.hasExtensions();
        java.lang.String str46 = locale15.getDisplayScript(locale42);
        com.github.javafaker.Faker faker47 = new com.github.javafaker.Faker(locale15);
        java.util.Set<java.lang.String> strSet48 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder49 = builder11.setLocale(locale15);
        java.lang.String str50 = locale15.getDisplayLanguage();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ita" + "'", str25, "ita");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ITA" + "'", str32, "ITA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ITA" + "'", str33, "ITA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale42.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr_fr (FR_FR)" + "'", str44, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str50, "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test2137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2137");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "IT");
        java.util.Locale locale7 = java.util.Locale.FRANCE;
        java.lang.String str8 = locale7.getVariant();
        java.lang.String str9 = locale7.getLanguage();
        java.lang.String str10 = locale7.getISO3Language();
        java.lang.String str11 = locale7.getDisplayVariant();
        java.util.Locale.Builder builder12 = builder3.setLocale(locale7);
        java.lang.String str13 = locale7.getDisplayCountry();
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList22);
        java.util.Collection<java.lang.String> strCollection25 = null;
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strCollection25);
        java.util.Collection<java.util.Locale> localeCollection27 = null;
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList36);
        java.util.Locale.LanguageRange[] languageRangeArray39 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList40 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList40, languageRangeArray39);
        java.lang.String[] strArray46 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList47 = new java.util.ArrayList<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList47, strArray46);
        java.util.List<java.lang.String> strList49 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, (java.util.Collection<java.lang.String>) strList47);
        java.util.Collection<java.lang.String> strCollection50 = null;
        java.util.List<java.lang.String> strList51 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList40, strCollection50);
        java.lang.String str52 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection50);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.lang.String[] strArray60 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList61 = new java.util.ArrayList<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList61, strArray60);
        java.util.List<java.lang.String> strList63 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strList61);
        java.util.Locale.FilteringMode filteringMode64 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList65 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList61, filteringMode64);
        java.util.List<java.util.Locale> localeList66 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, localeCollection27, filteringMode64);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap67 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList68 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, strMap67);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap69 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList70 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList68, strMap69);
        boolean boolean71 = locale7.equals((java.lang.Object) strMap69);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "fr" + "'", str9, "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "fra" + "'", str10, "fra");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "\u6cd5\u570b" + "'", str13, "\u6cd5\u570b");
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(strList49);
        org.junit.Assert.assertNotNull(strList51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(strList63);
        org.junit.Assert.assertTrue("'" + filteringMode64 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode64.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList65);
        org.junit.Assert.assertNotNull(localeList66);
        org.junit.Assert.assertNotNull(languageRangeList68);
        org.junit.Assert.assertNotNull(languageRangeList70);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
    }

    @Test
    public void test2138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2138");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Color color4 = faker1.color();
        com.github.javafaker.Internet internet5 = faker1.internet();
        com.github.javafaker.Internet internet6 = faker1.internet();
        com.github.javafaker.Company company7 = faker1.company();
        java.lang.String str9 = faker1.numerify("\u7fa9\u5927\u5229\u6587");
        com.github.javafaker.PhoneNumber phoneNumber10 = faker1.phoneNumber();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(color4);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(internet6);
        org.junit.Assert.assertNotNull(company7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str9, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(phoneNumber10);
    }

    @Test
    public void test2139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2139");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str9 = locale4.getExtension('a');
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder11.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder11.addUnicodeLocaleAttribute("zh-TW");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: zh-TW [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
    }

    @Test
    public void test2140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2140");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder13 = builder5.setExtension('x', "de");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setLanguage("Japanese (Japan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Japanese (Japan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\u5fb7\u6587\u5fb7\u570b)" + "'", str7, "\u5fb7\u6587\u5fb7\u570b)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2141");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.IntStream intStream10 = random0.ints(0L);
        java.util.stream.IntStream intStream13 = random0.ints((int) (short) 10, (int) '4');
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream15 = random0.ints((long) (-1832452933));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-115, 97, 124, -68, 73, 93]");
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test2142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2142");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale3.getDisplayName();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Random random8 = null;
        com.github.javafaker.Faker faker9 = new com.github.javafaker.Faker(locale7, random8);
        com.github.javafaker.Address address10 = faker9.address();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "German (Germany)" + "'", str4, "German (Germany)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertNotNull(address10);
    }

    @Test
    public void test2143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2143");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.LongStream longStream4 = random0.longs((long) 348768006, (long) (byte) 10, (long) '4');
        float float5 = random0.nextFloat();
        int int7 = random0.nextInt(203628591);
        java.util.stream.LongStream longStream8 = random0.longs();
        org.junit.Assert.assertNotNull(longStream4);
// flaky:         org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.22633165f + "'", float5 == 0.22633165f);
// flaky:         org.junit.Assert.assertTrue("'" + int7 + "' != '" + 109034011 + "'", int7 == 109034011);
        org.junit.Assert.assertNotNull(longStream8);
    }

    @Test
    public void test2144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2144");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setLanguage("Chinese");
        java.util.Locale.Builder builder15 = builder10.removeUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "allemand");
        java.util.Locale.Builder builder20 = builder15.setRegion("");
        java.util.Locale.Builder builder22 = builder20.setRegion("ko");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder22.setExtension('u', "hi!_ITALIANO");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension value: hi! [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2145");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Random random1 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles((long) 1);
        java.util.Random random4 = new java.util.Random();
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random4.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random1);
        long long15 = random1.nextLong();
        int int17 = random1.nextInt((int) (short) 10);
        int int19 = random1.nextInt(17);
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(random1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = faker20.resolve("HI!__ITA");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-10, -124, -117, 55, 47, -123]");
// flaky:         org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-8898113058537377445L) + "'", long15 == (-8898113058537377445L));
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 7 + "'", int19 == 7);
    }

    @Test
    public void test2146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2146");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.Finance finance6 = faker1.finance();
        com.github.javafaker.Number number7 = faker1.number();
        com.github.javafaker.Book book8 = faker1.book();
        java.lang.String str10 = faker1.bothify("Koreanisch");
        com.github.javafaker.PhoneNumber phoneNumber11 = faker1.phoneNumber();
        com.github.javafaker.Business business12 = faker1.business();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(number7);
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Koreanisch" + "'", str10, "Koreanisch");
        org.junit.Assert.assertNotNull(phoneNumber11);
        org.junit.Assert.assertNotNull(business12);
    }

    @Test
    public void test2147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2147");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr-FR");
        double double2 = languageRange1.getWeight();
        double double3 = languageRange1.getWeight();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
    }

    @Test
    public void test2148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2148");
        java.util.Locale locale2 = new java.util.Locale("\u7fa9\u5927\u5229\u6587", "zh-CN");
        java.util.Locale.Builder builder3 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder5 = builder3.setRegion("");
        java.util.Locale.Builder builder7 = builder3.setLanguage("");
        java.util.Locale.Builder builder8 = builder3.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale locale10 = builder8.build();
        java.lang.String str11 = locale2.getDisplayScript(locale10);
        java.util.Locale.setDefault(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "\u7fa9\u5927\u5229\u6587_ZH-CN");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test2149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2149");
        java.util.Random random1 = new java.util.Random((long) (-524939417));
    }

    @Test
    public void test2150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2150");
        java.util.Locale locale2 = new java.util.Locale("ITALIANO", "ko");
        java.lang.String str3 = locale2.getLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "italiano_KO");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italiano" + "'", str3, "italiano");
    }

    @Test
    public void test2151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2151");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("TWN");
        java.util.Locale.LanguageRange[] languageRangeArray2 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList3 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean4 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList3, languageRangeArray2);
        java.lang.String[] strArray9 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList10 = new java.util.ArrayList<java.lang.String>();
        boolean boolean11 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList10, strArray9);
        java.util.List<java.lang.String> strList12 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList3, (java.util.Collection<java.lang.String>) strList10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strList12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale14.getVariant();
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale14.getDisplayLanguage(locale16);
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        com.github.javafaker.Faker faker24 = new com.github.javafaker.Faker(locale20);
        java.lang.String str25 = locale20.getISO3Language();
        java.util.Set<java.lang.String> strSet26 = locale20.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags(languageRangeList1, (java.util.Collection<java.lang.String>) strSet26);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(languageRangeArray2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strArray9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(strList12);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Koreanisch" + "'", str17, "Koreanisch");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "zho" + "'", str25, "zho");
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(strList27);
    }

    @Test
    public void test2152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2152");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.stream.DoubleStream doubleStream11 = random0.doubles((long) 494295214);
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(random0);
        random0.setSeed((long) 33);
        java.util.stream.IntStream intStream15 = random0.ints();
        double double16 = random0.nextDouble();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-85, 78, -123, 115, -120, 103]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream11);
        org.junit.Assert.assertNotNull(intStream15);
        org.junit.Assert.assertTrue("'" + double16 + "' != '" + 0.7280116037950541d + "'", double16 == 0.7280116037950541d);
    }

    @Test
    public void test2153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2153");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random0);
        java.lang.String str16 = faker14.bothify("zho");
        com.github.javafaker.Code code17 = faker14.code();
        com.github.javafaker.Company company18 = faker14.company();
        java.lang.String str20 = faker14.bothify("\u53f0\u7063)");
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-32, -110, -47, -12, -45, 96]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.20976543f + "'", float10 == 0.20976543f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.7091784f + "'", float11 == 0.7091784f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertNotNull(code17);
        org.junit.Assert.assertNotNull(company18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\u53f0\u7063)" + "'", str20, "\u53f0\u7063)");
    }

    @Test
    public void test2154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2154");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getLanguage();
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale0.getDisplayLanguage(locale2);
        java.lang.String str7 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "allemand" + "'", str6, "allemand");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DEU" + "'", str7, "DEU");
    }

    @Test
    public void test2155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2155");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Business business20 = faker19.business();
        com.github.javafaker.Finance finance21 = faker19.finance();
        com.github.javafaker.Book book22 = faker19.book();
        com.github.javafaker.DateAndTime dateAndTime23 = faker19.date();
        com.github.javafaker.Internet internet24 = faker19.internet();
        com.github.javafaker.Address address25 = faker19.address();
        java.lang.String str27 = faker19.numerify("jpn");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[3, -73, -24, -83, 10, 83]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.52702695f + "'", float15 == 0.52702695f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.001179874f + "'", float16 == 0.001179874f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(business20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(internet24);
        org.junit.Assert.assertNotNull(address25);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "jpn" + "'", str27, "jpn");
    }

    @Test
    public void test2156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2156");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.LongStream longStream12 = random0.longs((long) 0);
        java.util.stream.LongStream longStream13 = random0.longs();
        double double14 = random0.nextDouble();
        boolean boolean15 = random0.nextBoolean();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[42, 98, 72, 69, 104, -59]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.48028338f + "'", float10 == 0.48028338f);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.25730365174349545d + "'", double14 == 0.25730365174349545d);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2157");
        java.util.Locale locale0 = java.util.Locale.TAIWAN;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "TWN" + "'", str2, "TWN");
    }

    @Test
    public void test2158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2158");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.util.Set<java.lang.Character> charSet13 = locale5.getExtensionKeys();
        java.lang.String str14 = locale5.getISO3Country();
        java.lang.String str15 = locale5.getISO3Language();
        java.lang.String str16 = locale3.getDisplayCountry(locale5);
        java.lang.String str17 = locale0.getDisplayLanguage(locale5);
        com.github.javafaker.Faker faker18 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Company company19 = faker18.company();
        com.github.javafaker.Lorem lorem20 = faker18.lorem();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals(locale3.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ita" + "'", str15, "ita");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Francia" + "'", str16, "Francia");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "giapponese" + "'", str17, "giapponese");
        org.junit.Assert.assertNotNull(company19);
        org.junit.Assert.assertNotNull(lorem20);
    }

    @Test
    public void test2159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2159");
        java.util.Locale locale2 = new java.util.Locale("\uc911\uad6d\uc5b4\uc911\uad6d)", "ITALIE");
        java.lang.String str3 = locale2.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "\uc911\uad6d\uc5b4\uc911\uad6d)_ITALIE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITALIE" + "'", str3, "ITALIE");
    }

    @Test
    public void test2160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2160");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.stream.IntStream intStream3 = random0.ints();
        java.util.stream.DoubleStream doubleStream4 = random0.doubles();
        java.util.stream.LongStream longStream5 = random0.longs();
        java.util.stream.DoubleStream doubleStream8 = random0.doubles((-0.4235051869499334d), (double) 1929786089);
        java.util.Random random9 = new java.util.Random();
        boolean boolean10 = random9.nextBoolean();
        java.util.stream.IntStream intStream12 = random9.ints((long) (short) 1);
        java.util.Random random13 = new java.util.Random();
        byte[] byteArray20 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random13.nextBytes(byteArray20);
        java.util.stream.LongStream longStream22 = random13.longs();
        float float23 = random13.nextFloat();
        java.util.stream.LongStream longStream25 = random13.longs((long) 0);
        java.util.stream.IntStream intStream28 = random13.ints((int) (short) 0, 303251316);
        java.util.Random random29 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream32 = random29.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream33 = random29.ints();
        java.util.Random random34 = new java.util.Random();
        byte[] byteArray41 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random34.nextBytes(byteArray41);
        java.util.stream.LongStream longStream45 = random34.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream47 = random34.doubles(1L);
        double double48 = random34.nextGaussian();
        java.util.stream.DoubleStream doubleStream50 = random34.doubles((long) 0);
        java.util.Random random51 = new java.util.Random();
        byte[] byteArray58 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random51.nextBytes(byteArray58);
        random34.nextBytes(byteArray58);
        random29.nextBytes(byteArray58);
        random13.nextBytes(byteArray58);
        random9.nextBytes(byteArray58);
        random0.nextBytes(byteArray58);
        int int66 = random0.nextInt(669687679);
        long long67 = random0.nextLong();
        float float68 = random0.nextFloat();
        int int69 = random0.nextInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream71 = random0.longs((-5847090683474567704L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(doubleStream8);
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(intStream12);
        org.junit.Assert.assertNotNull(byteArray20);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray20), "[-100, 73, 103, 45, 82, 1]");
        org.junit.Assert.assertNotNull(longStream22);
// flaky:         org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.8064363f + "'", float23 == 0.8064363f);
        org.junit.Assert.assertNotNull(longStream25);
        org.junit.Assert.assertNotNull(intStream28);
        org.junit.Assert.assertNotNull(doubleStream32);
        org.junit.Assert.assertNotNull(intStream33);
        org.junit.Assert.assertNotNull(byteArray41);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray41), "[-20, -41, 22, -80, -112, -105]");
        org.junit.Assert.assertNotNull(longStream45);
        org.junit.Assert.assertNotNull(doubleStream47);
// flaky:         org.junit.Assert.assertTrue("'" + double48 + "' != '" + (-0.6746342487141641d) + "'", double48 == (-0.6746342487141641d));
        org.junit.Assert.assertNotNull(doubleStream50);
        org.junit.Assert.assertNotNull(byteArray58);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray58), "[71, 108, -42, -49, -104, 109]");
// flaky:         org.junit.Assert.assertTrue("'" + int66 + "' != '" + 432640674 + "'", int66 == 432640674);
// flaky:         org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-6633109311214543620L) + "'", long67 == (-6633109311214543620L));
// flaky:         org.junit.Assert.assertTrue("'" + float68 + "' != '" + 0.37648964f + "'", float68 == 0.37648964f);
// flaky:         org.junit.Assert.assertTrue("'" + int69 + "' != '" + (-1750828645) + "'", int69 == (-1750828645));
    }

    @Test
    public void test2161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2161");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayCountry(locale7);
        java.lang.String str9 = locale5.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.TAIWAN;
        java.lang.String str14 = locale11.getDisplayScript(locale13);
        java.util.Locale locale16 = java.util.Locale.forLanguageTag("");
        java.lang.String str17 = locale13.getDisplayLanguage(locale16);
        java.lang.String str18 = locale13.getISO3Language();
        java.util.Locale locale22 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str23 = locale13.getDisplayVariant(locale22);
        java.lang.String str24 = locale5.getDisplayName(locale22);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutschland" + "'", str8, "Deutschland");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "DEU" + "'", str9, "DEU");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ITA" + "'", str12, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Chinese" + "'", str17, "Chinese");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "zho" + "'", str18, "zho");
        org.junit.Assert.assertEquals(locale22.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "German (Germany)" + "'", str24, "German (Germany)");
    }

    @Test
    public void test2162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2162");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Japanese");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "japanese");
    }

    @Test
    public void test2163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2163");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Country();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str28 = locale23.getExtension('a');
        java.util.Locale locale29 = locale23.stripExtensions();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale29);
        java.util.Locale.Builder builder31 = builder4.setLocale(locale29);
        java.util.Locale.Builder builder34 = builder4.setExtension('x', "");
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale.Builder builder38 = builder35.clearExtensions();
        java.util.Locale.Builder builder40 = builder35.setVariant("Italian");
        java.util.Locale locale41 = builder35.build();
        java.util.Set<java.lang.String> strSet42 = locale41.getUnicodeLocaleKeys();
        java.util.Locale locale43 = java.util.Locale.UK;
        java.lang.String str44 = locale43.getDisplayLanguage();
        java.lang.String str45 = locale41.getDisplayVariant(locale43);
        java.util.Locale.Builder builder46 = builder34.setLocale(locale41);
        java.util.Set<java.lang.Character> charSet47 = locale41.getExtensionKeys();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertNotNull(strSet42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "en_GB");
// flaky:         org.junit.Assert.assertEquals("'" + str44 + "' != '" + "\uc601\uc5b4" + "'", str44, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "Italian" + "'", str45, "Italian");
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(charSet47);
    }

    @Test
    public void test2164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2164");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder7 = builder4.setLanguageTag("fr");
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder8.setLanguage("Franz\366sisch");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: Franzo?sisch [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2165");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.Finance finance6 = faker1.finance();
        com.github.javafaker.Address address7 = faker1.address();
        java.lang.String str9 = faker1.letterify("\uc911\uad6d\uc5b4");
        com.github.javafaker.Number number10 = faker1.number();
        com.github.javafaker.Lorem lorem11 = faker1.lorem();
        com.github.javafaker.Book book12 = faker1.book();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(address7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str9, "\uc911\uad6d\uc5b4");
        org.junit.Assert.assertNotNull(number10);
        org.junit.Assert.assertNotNull(lorem11);
        org.junit.Assert.assertNotNull(book12);
    }

    @Test
    public void test2166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2166");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.lang.String str7 = locale5.getExtension('x');
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = locale5.getUnicodeLocaleType("italiano");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: italiano");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNull(str7);
    }

    @Test
    public void test2167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2167");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        java.util.stream.IntStream intStream3 = random0.ints((long) (short) 1);
        java.util.stream.IntStream intStream4 = random0.ints();
        random0.setSeed((long) '#');
        long long7 = random0.nextLong();
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-5013995466868426345L) + "'", long7 == (-5013995466868426345L));
    }

    @Test
    public void test2168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2168");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str8 = locale5.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italia" + "'", str6, "Italia");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2169");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale.Builder builder1 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder3 = builder1.setRegion("");
        java.util.Locale locale4 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder5 = null; // flaky: builder1.setLocale(locale4);
        java.util.Locale.Builder builder7 = builder1.setLanguage("");
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.util.Set<java.lang.String> strSet11 = locale9.getUnicodeLocaleKeys();
        java.util.Locale locale15 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str16 = locale9.getDisplayCountry(locale15);
        java.lang.String str17 = locale9.toLanguageTag();
        java.lang.String str18 = locale9.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder7.setLocale(locale9);
        java.util.Locale.setDefault(category0, locale9);
        java.util.Locale locale21 = java.util.Locale.getDefault(category0);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Country();
        java.lang.String str26 = locale23.toLanguageTag();
        java.util.Locale locale27 = java.util.Locale.GERMANY;
        java.lang.String str28 = locale23.getDisplayName(locale27);
        java.lang.String str29 = locale23.toLanguageTag();
        java.lang.String str30 = locale23.getISO3Language();
        java.util.Set<java.lang.Character> charSet31 = locale23.getExtensionKeys();
        java.util.Random random32 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream34 = random32.doubles((long) 1);
        java.util.stream.IntStream intStream35 = random32.ints();
        java.util.stream.DoubleStream doubleStream36 = random32.doubles();
        java.util.stream.LongStream longStream37 = random32.longs();
        java.util.stream.DoubleStream doubleStream40 = random32.doubles((-0.4235051869499334d), (double) 1929786089);
        java.util.Random random41 = new java.util.Random();
        boolean boolean42 = random41.nextBoolean();
        java.util.stream.IntStream intStream44 = random41.ints((long) (short) 1);
        java.util.Random random45 = new java.util.Random();
        byte[] byteArray52 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random45.nextBytes(byteArray52);
        java.util.stream.LongStream longStream54 = random45.longs();
        float float55 = random45.nextFloat();
        java.util.stream.LongStream longStream57 = random45.longs((long) 0);
        java.util.stream.IntStream intStream60 = random45.ints((int) (short) 0, 303251316);
        java.util.Random random61 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream64 = random61.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream65 = random61.ints();
        java.util.Random random66 = new java.util.Random();
        byte[] byteArray73 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random66.nextBytes(byteArray73);
        java.util.stream.LongStream longStream77 = random66.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream79 = random66.doubles(1L);
        double double80 = random66.nextGaussian();
        java.util.stream.DoubleStream doubleStream82 = random66.doubles((long) 0);
        java.util.Random random83 = new java.util.Random();
        byte[] byteArray90 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random83.nextBytes(byteArray90);
        random66.nextBytes(byteArray90);
        random61.nextBytes(byteArray90);
        random45.nextBytes(byteArray90);
        random41.nextBytes(byteArray90);
        random32.nextBytes(byteArray90);
        com.github.javafaker.Faker faker97 = new com.github.javafaker.Faker(locale23, random32);
        java.util.Locale.setDefault(category0, locale23);
        java.util.Locale locale99 = java.util.Locale.getDefault(category0);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
// flaky:         org.junit.Assert.assertEquals(locale4.toString(), "ko");
// flaky:         org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals(locale15.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italy" + "'", str16, "Italy");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it-IT" + "'", str17, "it-IT");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str18, "\uc774\ud0c8\ub9ac\uc544");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it-IT" + "'", str26, "it-IT");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "Italienisch (Italien)" + "'", str28, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "it-IT" + "'", str29, "it-IT");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ita" + "'", str30, "ita");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertNotNull(doubleStream34);
        org.junit.Assert.assertNotNull(intStream35);
        org.junit.Assert.assertNotNull(doubleStream36);
        org.junit.Assert.assertNotNull(longStream37);
        org.junit.Assert.assertNotNull(doubleStream40);
// flaky:         org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(intStream44);
        org.junit.Assert.assertNotNull(byteArray52);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray52), "[121, -5, 27, 84, 47, 79]");
        org.junit.Assert.assertNotNull(longStream54);
// flaky:         org.junit.Assert.assertTrue("'" + float55 + "' != '" + 0.95534104f + "'", float55 == 0.95534104f);
        org.junit.Assert.assertNotNull(longStream57);
        org.junit.Assert.assertNotNull(intStream60);
        org.junit.Assert.assertNotNull(doubleStream64);
        org.junit.Assert.assertNotNull(intStream65);
        org.junit.Assert.assertNotNull(byteArray73);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray73), "[42, -68, -111, 39, -25, 121]");
        org.junit.Assert.assertNotNull(longStream77);
        org.junit.Assert.assertNotNull(doubleStream79);
// flaky:         org.junit.Assert.assertTrue("'" + double80 + "' != '" + (-1.100951497758575d) + "'", double80 == (-1.100951497758575d));
        org.junit.Assert.assertNotNull(doubleStream82);
        org.junit.Assert.assertNotNull(byteArray90);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray90), "[61, -23, -123, -89, 87, 34]");
        org.junit.Assert.assertNotNull(locale99);
        org.junit.Assert.assertEquals(locale99.toString(), "it_IT");
    }

    @Test
    public void test2170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2170");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.Random random9 = new java.util.Random();
        byte[] byteArray16 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random9.nextBytes(byteArray16);
        random0.nextBytes(byteArray16);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(random0);
        java.util.stream.LongStream longStream22 = random0.longs((long) (-96960024), (long) 1989017876);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-59, 105, -20, -66, 58, -112]");
        org.junit.Assert.assertNotNull(byteArray16);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray16), "[-16, -27, 81, 46, -110, 31]");
        org.junit.Assert.assertNotNull(longStream22);
    }

    @Test
    public void test2171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2171");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.IntStream intStream20 = random5.ints();
        double double21 = random5.nextGaussian();
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(random5);
        float float23 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream24 = random5.doubles();
        java.util.stream.DoubleStream doubleStream28 = random5.doubles((long) 478045646, (double) (short) 0, (double) 0.84266293f);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream30 = random5.ints((-5186443006322816213L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[108, 79, -125, 126, -28, -50]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.8655002f + "'", float15 == 0.8655002f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.38349468f + "'", float16 == 0.38349468f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(intStream20);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + 1.126659648897371d + "'", double21 == 1.126659648897371d);
// flaky:         org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.73848194f + "'", float23 == 0.73848194f);
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertNotNull(doubleStream28);
    }

    @Test
    public void test2172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2172");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc774\ud0c8\ub9ac\uc544\uc5b4 (FR_FR)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test2173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2173");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.stream.IntStream intStream3 = random0.ints();
        java.util.stream.DoubleStream doubleStream4 = random0.doubles();
        java.util.stream.LongStream longStream5 = random0.longs();
        float float6 = random0.nextFloat();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(longStream5);
// flaky:         org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.50201815f + "'", float6 == 0.50201815f);
    }

    @Test
    public void test2174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2174");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.stream.IntStream intStream11 = random0.ints((long) 282464450);
        long long12 = random0.nextLong();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles();
        double double14 = random0.nextDouble();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-125, -78, -56, 34, 106, -24]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(intStream11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1200792671818303141L) + "'", long12 == (-1200792671818303141L));
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.46317286271729774d + "'", double14 == 0.46317286271729774d);
    }

    @Test
    public void test2175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2175");
        java.util.Locale locale0 = java.util.Locale.ROOT;
        java.util.Locale locale1 = java.util.Locale.ROOT;
        java.lang.String str2 = locale0.getDisplayLanguage(locale1);
        java.lang.String str3 = locale1.getVariant();
        java.lang.String str4 = locale1.getScript();
        java.util.Random random5 = null;
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker6 = new com.github.javafaker.Faker(locale1, random5);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message:  could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test2176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2176");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str7 = faker1.bothify("it");
        com.github.javafaker.Book book8 = faker1.book();
        com.github.javafaker.Business business9 = faker1.business();
        com.github.javafaker.PhoneNumber phoneNumber10 = faker1.phoneNumber();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(company5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it" + "'", str7, "it");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(business9);
        org.junit.Assert.assertNotNull(phoneNumber10);
    }

    @Test
    public void test2177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2177");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.lang.Object obj11 = locale10.clone();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinois" + "'", str8, "chinois");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(obj11);
        org.junit.Assert.assertEquals(obj11.toString(), "zh_TW");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj11), "zh_TW");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj11), "zh_TW");
    }

    @Test
    public void test2178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2178");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getLanguage();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.util.Locale locale8 = java.util.Locale.TAIWAN;
        java.lang.String str9 = locale6.getDisplayScript(locale8);
        java.lang.String str10 = locale1.getDisplayLanguage(locale6);
        java.util.Set<java.lang.String> strSet11 = locale6.getUnicodeLocaleKeys();
        java.lang.String str12 = locale6.getISO3Country();
        java.lang.String str13 = locale6.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "italiano" + "'", str10, "italiano");
        org.junit.Assert.assertNotNull(strSet11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ITA" + "'", str12, "ITA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
    }

    @Test
    public void test2179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2179");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setLanguage("Chinese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder13.setScript("Stati Uniti");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Stati Uniti [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2180");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder0.setLanguage("");
        java.util.Locale.Builder builder5 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder5.clear();
        java.util.Locale locale7 = builder5.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder9 = builder5.setLanguageTag("\u6cd5\u570b");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "");
    }

    @Test
    public void test2181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2181");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Options options5 = faker1.options();
        com.github.javafaker.Name name6 = faker1.name();
        java.lang.String str8 = faker1.bothify("FR_FR");
        java.lang.String str10 = faker1.bothify("English");
        com.github.javafaker.Lorem lorem11 = faker1.lorem();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR_FR" + "'", str8, "FR_FR");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "English" + "'", str10, "English");
        org.junit.Assert.assertNotNull(lorem11);
    }

    @Test
    public void test2182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2182");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("German");
        java.util.Locale locale2 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Random random3 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream5 = random3.doubles((long) 1);
        java.util.Random random6 = new java.util.Random();
        byte[] byteArray13 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random6.nextBytes(byteArray13);
        random3.nextBytes(byteArray13);
        com.github.javafaker.Faker faker16 = new com.github.javafaker.Faker(locale2, random3);
        long long17 = random3.nextLong();
        int int19 = random3.nextInt((int) (short) 10);
        int int21 = random3.nextInt(17);
        boolean boolean22 = languageRange1.equals((java.lang.Object) 17);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(doubleStream5);
        org.junit.Assert.assertNotNull(byteArray13);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray13), "[25, 111, -75, 66, -56, -15]");
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-2672075364137584493L) + "'", long17 == (-2672075364137584493L));
// flaky:         org.junit.Assert.assertTrue("'" + int19 + "' != '" + 8 + "'", int19 == 8);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 10 + "'", int21 == 10);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test2183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2183");
        java.util.Locale locale2 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale4.getDisplayVariant(locale8);
        java.util.Set<java.lang.Character> charSet12 = locale4.getExtensionKeys();
        java.lang.String str13 = locale4.getISO3Country();
        java.lang.String str14 = locale4.getISO3Language();
        java.lang.String str15 = locale2.getDisplayCountry(locale4);
        boolean boolean16 = locale4.hasExtensions();
        java.lang.String str17 = locale4.getVariant();
        java.lang.String str18 = locale4.getDisplayCountry();
        org.junit.Assert.assertEquals(locale2.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ita" + "'", str14, "ita");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Francia" + "'", str15, "Francia");
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
// flaky:         org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italy" + "'", str18, "Italy");
    }

    @Test
    public void test2184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2184");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category6, locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.util.Locale.setDefault(category6, locale12);
        java.util.Locale locale18 = new java.util.Locale("fr_FR", "it");
        java.util.Locale.setDefault(category6, locale18);
        java.lang.String str20 = locale18.getDisplayScript();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setRegion("");
        java.util.Locale.Builder builder24 = builder21.clearExtensions();
        java.util.Locale.Builder builder25 = builder21.clear();
        java.util.Locale locale26 = builder25.build();
        java.lang.String str27 = locale18.getDisplayVariant(locale26);
        java.lang.String str28 = locale4.getDisplayVariant(locale18);
        java.util.Locale locale30 = new java.util.Locale("IT");
        java.lang.String str31 = locale18.getDisplayCountry(locale30);
        java.util.Random random32 = null;
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker(random32);
        com.github.javafaker.Options options34 = faker33.options();
        com.github.javafaker.Name name35 = faker33.name();
        com.github.javafaker.Options options36 = faker33.options();
        java.lang.String str38 = faker33.bothify("\uc911\uad6d\uc5b4\uc911\uad6d)");
        com.github.javafaker.Internet internet39 = faker33.internet();
        com.github.javafaker.Color color40 = faker33.color();
        boolean boolean41 = locale18.equals((java.lang.Object) color40);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale10.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "chinois" + "'", str14, "chinois");
        org.junit.Assert.assertEquals(locale18.toString(), "fr_fr_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italia" + "'", str31, "Italia");
        org.junit.Assert.assertNotNull(options34);
        org.junit.Assert.assertNotNull(name35);
        org.junit.Assert.assertNotNull(options36);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str38, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(internet39);
        org.junit.Assert.assertNotNull(color40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test2185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2185");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setLanguage("Chinese");
        java.util.Locale.Builder builder15 = builder10.removeUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder18 = builder15.setExtension('a', "allemand");
        java.util.Locale.Builder builder20 = builder15.setRegion("");
        java.util.Locale.Builder builder23 = builder20.setExtension('a', "ITALY");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder25 = builder23.setScript("usa");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: usa [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test2186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2186");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random0.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream4 = random0.ints();
        int int6 = random0.nextInt(66681857);
        java.util.stream.DoubleStream doubleStream8 = random0.doubles((long) 403531747);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(intStream4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 7993687 + "'", int6 == 7993687);
        org.junit.Assert.assertNotNull(doubleStream8);
    }

    @Test
    public void test2187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2187");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale.Builder builder11 = builder3.setVariant("");
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale.Builder builder14 = builder3.removeUnicodeLocaleAttribute("eng");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder3.addUnicodeLocaleAttribute("\u5fb7\u6587\u5fb7\u570b)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2188");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.DateAndTime dateAndTime4 = faker1.date();
        com.github.javafaker.Address address5 = faker1.address();
        java.lang.String str7 = faker1.bothify("\uc911\uad6d\uc5b4\ub300\ub9cc)");
        com.github.javafaker.Book book8 = faker1.book();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(dateAndTime4);
        org.junit.Assert.assertNotNull(address5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str7, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(book8);
    }

    @Test
    public void test2189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2189");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Business business20 = faker19.business();
        com.github.javafaker.Finance finance21 = faker19.finance();
        com.github.javafaker.Name name22 = faker19.name();
        com.github.javafaker.Lorem lorem23 = faker19.lorem();
        com.github.javafaker.DateAndTime dateAndTime24 = faker19.date();
        com.github.javafaker.Options options25 = faker19.options();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-18, 100, -95, -36, -56, -90]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.7794329f + "'", float15 == 0.7794329f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.6129847f + "'", float16 == 0.6129847f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(business20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(name22);
        org.junit.Assert.assertNotNull(lorem23);
        org.junit.Assert.assertNotNull(dateAndTime24);
        org.junit.Assert.assertNotNull(options25);
    }

    @Test
    public void test2190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2190");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = locale14.getDisplayScript(locale22);
        java.util.Locale locale29 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str30 = locale14.getDisplayScript(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setRegion("");
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale11.getDisplayCountry(locale29);
        java.lang.String str42 = locale29.getExtension('x');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale48.getExtensionKeys();
        java.lang.String str57 = locale48.getISO3Country();
        java.lang.String str58 = locale48.getISO3Language();
        java.lang.String str59 = locale46.getDisplayCountry(locale48);
        java.lang.String str60 = locale43.getDisplayLanguage(locale48);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale43);
        java.lang.String str62 = locale29.getDisplayCountry(locale43);
        java.util.Locale.Builder builder63 = builder5.setLocale(locale43);
        java.util.Locale locale64 = builder63.build();
        java.util.Locale.Builder builder65 = builder63.clearExtensions();
        java.util.Locale.Builder builder67 = builder65.removeUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder68 = builder67.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder71 = builder68.setUnicodeLocaleKeyword("zho-x-lvariant-und", "cinese (Cina)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key: zho-x-lvariant-und [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italian" + "'", str12, "Italian");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr_fr (FR_FR)" + "'", str39, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ITA" + "'", str57, "ITA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ita" + "'", str58, "ita");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Francia" + "'", str59, "Francia");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FR_FR" + "'", str62, "FR_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test2191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2191");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale1.getDisplayVariant(locale5);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.lang.String str10 = locale1.getISO3Country();
        java.lang.String str11 = locale1.getISO3Language();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.getISO3Country();
        java.lang.String str19 = locale17.getISO3Country();
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.lang.String str24 = locale17.getDisplayVariant(locale21);
        java.lang.String str25 = locale13.getDisplayScript(locale21);
        java.util.Locale locale28 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str29 = locale13.getDisplayScript(locale28);
        java.lang.String str30 = locale28.getDisplayName();
        boolean boolean31 = locale28.hasExtensions();
        java.lang.String str32 = locale1.getDisplayScript(locale28);
        java.lang.String str33 = locale1.getISO3Language();
        com.github.javafaker.Faker faker34 = new com.github.javafaker.Faker(locale1);
        java.util.Set<java.lang.String> strSet35 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ita" + "'", str11, "ita");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ITA" + "'", str18, "ITA");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals(locale28.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr_fr (FR_FR)" + "'", str30, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ita" + "'", str33, "ita");
        org.junit.Assert.assertNotNull(strSet35);
    }

    @Test
    public void test2192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2192");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        boolean boolean8 = locale5.hasExtensions();
        java.lang.String str9 = locale5.getISO3Language();
        java.util.Locale locale10 = java.util.Locale.CANADA;
        java.util.Locale locale12 = new java.util.Locale("IT");
        java.lang.String str13 = locale10.getDisplayVariant(locale12);
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayCountry(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale14.getDisplayCountry(locale17);
        java.util.Locale.setDefault(locale14);
        java.lang.String str21 = locale12.getDisplayCountry(locale14);
        java.lang.String str22 = locale5.getDisplayScript(locale12);
        java.lang.String str23 = locale12.getVariant();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str25 = locale12.getUnicodeLocaleType("");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian" + "'", str1, "Italian");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!" + "'", str9, "hi!");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale12.toString(), "it");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
    }

    @Test
    public void test2193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2193");
        java.util.Locale locale1 = new java.util.Locale("fr_fr (FR_FR)");
        boolean boolean2 = locale1.hasExtensions();
        java.lang.String str3 = locale1.getVariant();
        java.util.Set<java.lang.Character> charSet4 = locale1.getExtensionKeys();
        org.junit.Assert.assertEquals(locale1.toString(), "fr_fr (fr_fr)");
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test2194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2194");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale12 = new java.util.Locale("fr_FR", "it");
        java.util.Locale.setDefault(category0, locale12);
        java.util.Random random14 = null;
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(random14);
        com.github.javafaker.Options options16 = faker15.options();
        java.lang.String str18 = faker15.numerify("Italian");
        java.lang.String str20 = faker15.bothify("italiano");
        com.github.javafaker.Name name21 = faker15.name();
        com.github.javafaker.Company company22 = faker15.company();
        com.github.javafaker.Code code23 = faker15.code();
        boolean boolean24 = locale12.equals((java.lang.Object) faker15);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinois" + "'", str8, "chinois");
        org.junit.Assert.assertEquals(locale12.toString(), "fr_fr_IT");
        org.junit.Assert.assertNotNull(options16);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italian" + "'", str18, "Italian");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "italiano" + "'", str20, "italiano");
        org.junit.Assert.assertNotNull(name21);
        org.junit.Assert.assertNotNull(company22);
        org.junit.Assert.assertNotNull(code23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test2195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2195");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.lang.String str6 = locale4.getLanguage();
        java.util.Random random7 = new java.util.Random();
        boolean boolean8 = random7.nextBoolean();
        java.util.stream.LongStream longStream12 = random7.longs((long) 'a', (long) 'a', (long) 'u');
        java.util.stream.DoubleStream doubleStream13 = random7.doubles();
        java.util.stream.DoubleStream doubleStream16 = random7.doubles((double) 0.15157121f, (double) 0.89793515f);
        java.util.stream.LongStream longStream19 = random7.longs((long) (byte) 0, (long) 1790365215);
        java.util.stream.DoubleStream doubleStream21 = random7.doubles(100L);
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(locale4, random7);
        java.lang.String str24 = faker22.letterify("hi!_TWN");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "hi!_TWN" + "'", str24, "hi!_TWN");
    }

    @Test
    public void test2196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2196");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Italien", (double) 218002746);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=2.18002746E8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2197");
        java.util.Locale locale1 = new java.util.Locale("fr_fr");
        java.lang.String str2 = locale1.getLanguage();
        org.junit.Assert.assertEquals(locale1.toString(), "fr_fr");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr_fr" + "'", str2, "fr_fr");
    }

    @Test
    public void test2198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2198");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
    }

    @Test
    public void test2199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2199");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale.Builder builder7 = builder4.setLanguageTag("fr");
        java.util.Locale.Builder builder8 = builder4.clearExtensions();
        java.util.Locale.Builder builder9 = builder8.clear();
        java.util.Locale.Builder builder11 = builder9.setLanguageTag("de-DE");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2200");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale.Builder builder11 = builder3.setVariant("");
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale.Builder builder14 = builder3.setLanguage("ITALIANO");
        java.util.Locale locale15 = builder14.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "italiano");
    }

    @Test
    public void test2201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2201");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        double double13 = random0.nextDouble();
        java.util.Random random14 = new java.util.Random();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random14.nextBytes(byteArray21);
        double double23 = random14.nextGaussian();
        java.util.stream.DoubleStream doubleStream24 = random14.doubles();
        int int25 = random14.nextInt();
        java.util.stream.DoubleStream doubleStream27 = random14.doubles((long) (byte) 10);
        double double28 = random14.nextGaussian();
        java.util.Random random29 = new java.util.Random();
        byte[] byteArray36 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random29.nextBytes(byteArray36);
        random14.nextBytes(byteArray36);
        random0.nextBytes(byteArray36);
        java.util.stream.DoubleStream doubleStream40 = random0.doubles();
        java.util.Random random41 = new java.util.Random();
        byte[] byteArray48 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random41.nextBytes(byteArray48);
        java.util.stream.LongStream longStream52 = random41.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream54 = random41.doubles(1L);
        double double55 = random41.nextGaussian();
        java.util.stream.DoubleStream doubleStream57 = random41.doubles((long) 0);
        java.util.Random random58 = new java.util.Random();
        byte[] byteArray65 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random58.nextBytes(byteArray65);
        random41.nextBytes(byteArray65);
        random0.nextBytes(byteArray65);
        float float69 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-95, 35, 42, -30, 44, -84]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.62662995f + "'", float10 == 0.62662995f);
        org.junit.Assert.assertNotNull(doubleStream12);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.07385098612578d + "'", double13 == 0.07385098612578d);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[86, -50, -59, -6, -16, 105]");
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + (-0.5950695741077785d) + "'", double23 == (-0.5950695741077785d));
        org.junit.Assert.assertNotNull(doubleStream24);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1577097531 + "'", int25 == 1577097531);
        org.junit.Assert.assertNotNull(doubleStream27);
// flaky:         org.junit.Assert.assertTrue("'" + double28 + "' != '" + (-0.021015925327608067d) + "'", double28 == (-0.021015925327608067d));
        org.junit.Assert.assertNotNull(byteArray36);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray36), "[-96, 65, -122, -28, 103, -59]");
        org.junit.Assert.assertNotNull(doubleStream40);
        org.junit.Assert.assertNotNull(byteArray48);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray48), "[68, -7, -85, 46, -87, -115]");
        org.junit.Assert.assertNotNull(longStream52);
        org.junit.Assert.assertNotNull(doubleStream54);
// flaky:         org.junit.Assert.assertTrue("'" + double55 + "' != '" + (-0.8985707760716175d) + "'", double55 == (-0.8985707760716175d));
        org.junit.Assert.assertNotNull(doubleStream57);
        org.junit.Assert.assertNotNull(byteArray65);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray65), "[-96, 125, -70, 104, 95, 91]");
// flaky:         org.junit.Assert.assertTrue("'" + float69 + "' != '" + 0.75207204f + "'", float69 == 0.75207204f);
    }

    @Test
    public void test2202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2202");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str4 = locale0.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayName();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale.Builder builder9 = builder6.clearExtensions();
        java.util.Locale.Builder builder11 = builder6.setLanguage("Italy");
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.lang.String str17 = locale13.getDisplayScript();
        java.lang.String str18 = locale13.getISO3Language();
        java.util.Locale.Builder builder19 = builder11.setLocale(locale13);
        java.lang.String str20 = locale13.getDisplayName();
        java.lang.String str21 = locale0.getDisplayLanguage(locale13);
        java.util.Set<java.lang.Character> charSet22 = locale13.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Taiwan)" + "'", str4, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese (Taiwan)" + "'", str5, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ita" + "'", str18, "ita");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian (Italy)" + "'", str20, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese" + "'", str21, "cinese");
        org.junit.Assert.assertNotNull(charSet22);
    }

    @Test
    public void test2203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2203");
        java.util.Locale locale2 = new java.util.Locale("hi! (ITA)", "giapponese");
        java.lang.String str3 = locale2.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "hi! (ita)_GIAPPONESE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "hi! (ita)" + "'", str3, "hi! (ita)");
    }

    @Test
    public void test2204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2204");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.LongStream longStream13 = random0.longs((long) (byte) 1);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random0);
        java.util.stream.DoubleStream doubleStream15 = random0.doubles();
        double double16 = random0.nextGaussian();
        long long17 = random0.nextLong();
        java.util.stream.DoubleStream doubleStream18 = random0.doubles();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-94, 64, -76, 75, 89, 84]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.42462355f + "'", float10 == 0.42462355f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.40434474f + "'", float11 == 0.40434474f);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream15);
// flaky:         org.junit.Assert.assertTrue("'" + double16 + "' != '" + (-0.20449722928612646d) + "'", double16 == (-0.20449722928612646d));
// flaky:         org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-174240880430624632L) + "'", long17 == (-174240880430624632L));
        org.junit.Assert.assertNotNull(doubleStream18);
    }

    @Test
    public void test2205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2205");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.setLanguage("IT");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category7);
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder19.setScript("");
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("CHN");
        java.util.Locale.Builder builder26 = builder23.setUnicodeLocaleKeyword("CN", "FRANCESE");
        java.util.Locale locale27 = builder26.build();
        java.lang.String str28 = locale27.getDisplayScript();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois" + "'", str15, "chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u53f0\u7063" + "'", str18, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW_#u-chn-cn-francese");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
    }

    @Test
    public void test2206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2206");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        java.util.Locale.Builder builder11 = builder3.setLanguageTag("Chinese");
        java.util.Locale.Builder builder13 = builder3.setVariant("");
        java.lang.Class<?> wildcardClass14 = builder13.getClass();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test2207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2207");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        com.github.javafaker.Faker faker2 = new com.github.javafaker.Faker(locale0);
        com.github.javafaker.Code code3 = faker2.code();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(code3);
    }

    @Test
    public void test2208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2208");
        java.util.Locale locale2 = new java.util.Locale("fr_FR", "fr_FR");
        java.util.Locale locale5 = new java.util.Locale("hi!", "italiano");
        java.lang.String str6 = locale2.getDisplayScript(locale5);
        java.util.Locale.Builder builder7 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder9 = builder7.setRegion("");
        java.util.Locale.Builder builder10 = builder7.clearExtensions();
        java.util.Locale.Builder builder12 = builder10.setLanguageTag("Italian");
        java.util.Locale.Builder builder14 = builder10.setRegion("");
        java.util.Locale.Builder builder16 = builder10.setLanguageTag("fr");
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str19 = locale18.getISO3Country();
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getISO3Country();
        boolean boolean24 = locale21.hasExtensions();
        java.lang.String str25 = locale18.getDisplayVariant(locale21);
        java.util.Locale.Builder builder26 = builder10.setLocale(locale18);
        java.lang.String str27 = locale5.getDisplayVariant(locale18);
        java.lang.String str28 = locale5.getDisplayName();
        java.lang.Object obj29 = locale5.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!_ITALIANO");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ITA" + "'", str23, "ITA");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi! (ITALIANO)" + "'", str28, "hi! (ITALIANO)");
        org.junit.Assert.assertNotNull(obj29);
        org.junit.Assert.assertEquals(obj29.toString(), "hi!_ITALIANO");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj29), "hi!_ITALIANO");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj29), "hi!_ITALIANO");
    }

    @Test
    public void test2209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2209");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder9 = builder3.setExtension('x', "allemand");
        java.util.Locale.Builder builder11 = builder3.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.setLanguageTag("ITALIE");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder16 = builder14.addUnicodeLocaleAttribute("hi!_TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi!_TWN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "italian");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test2210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2210");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale1.getDisplayName();
        boolean boolean6 = locale1.equals((java.lang.Object) 1.8987199281076712d);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str2, "\u7fa9\u5927\u5229\u6587");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)" + "'", str4, "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2211");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Set<java.lang.Character> charSet8 = locale7.getExtensionKeys();
        java.lang.String str9 = locale7.getLanguage();
        java.util.Random random10 = new java.util.Random();
        boolean boolean11 = random10.nextBoolean();
        int int12 = random10.nextInt();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(random10);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale7, random10);
        java.util.stream.LongStream longStream15 = random10.longs();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(charSet8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "en" + "'", str9, "en");
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-211847969) + "'", int12 == (-211847969));
        org.junit.Assert.assertNotNull(longStream15);
    }

    @Test
    public void test2212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2212");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random0.doubles((-1.3525503855396068d), (double) 0.0f);
        float float4 = random0.nextFloat();
        int int5 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream6 = random0.doubles();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream10 = random0.longs((long) 2121472736, 8059345600936854979L, (long) 55);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream3);
// flaky:         org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.5117026f + "'", float4 == 0.5117026f);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-216047062) + "'", int5 == (-216047062));
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test2213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2213");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("x-lvariant-fr", (double) 0.6148134f);
        java.lang.String str3 = languageRange2.getRange();
        java.lang.String str4 = languageRange2.getRange();
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        java.util.stream.LongStream longStream19 = random5.longs();
        random5.setSeed((long) (short) 100);
        double double22 = random5.nextGaussian();
        boolean boolean23 = languageRange2.equals((java.lang.Object) double22);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "x-lvariant-fr" + "'", str3, "x-lvariant-fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "x-lvariant-fr" + "'", str4, "x-lvariant-fr");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[60, -63, 97, -28, 77, 94]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.62049574f + "'", float15 == 0.62049574f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.064312756f + "'", float16 == 0.064312756f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertTrue("'" + double22 + "' != '" + 0.6246292191371761d + "'", double22 == 0.6246292191371761d);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test2214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2214");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = builder0.build();
        java.util.Set<java.lang.String> strSet7 = locale6.getUnicodeLocaleKeys();
        java.util.Locale locale8 = java.util.Locale.UK;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale6.getDisplayVariant(locale8);
        java.util.Random random11 = new java.util.Random();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random11.nextBytes(byteArray18);
        java.util.stream.LongStream longStream22 = random11.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream24 = random11.doubles(1L);
        double double25 = random11.nextGaussian();
        java.util.stream.DoubleStream doubleStream27 = random11.doubles((long) 0);
        com.github.javafaker.Faker faker28 = new com.github.javafaker.Faker(locale8, random11);
        java.lang.String str30 = faker28.letterify("ITALIAN (ITALY)");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "English" + "'", str9, "English");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Italian" + "'", str10, "Italian");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[36, 67, -85, 93, -68, -117]");
        org.junit.Assert.assertNotNull(longStream22);
        org.junit.Assert.assertNotNull(doubleStream24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-0.9703507662364069d) + "'", double25 == (-0.9703507662364069d));
        org.junit.Assert.assertNotNull(doubleStream27);
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ITALIAN (ITALY)" + "'", str30, "ITALIAN (ITALY)");
    }

    @Test
    public void test2215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2215");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ko", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList11);
        java.util.Locale.LanguageRange[] languageRangeArray14 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList15 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean16 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList15, languageRangeArray14);
        java.lang.String[] strArray21 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList22 = new java.util.ArrayList<java.lang.String>();
        boolean boolean23 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList22, strArray21);
        java.util.List<java.lang.String> strList24 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.lang.String>) strList22);
        java.util.Locale locale26 = new java.util.Locale("hi!");
        java.util.Locale locale28 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale31 = java.util.Locale.KOREAN;
        java.lang.String str32 = locale30.getDisplayName(locale31);
        java.util.Locale locale33 = java.util.Locale.ITALY;
        java.util.Locale locale34 = locale33.stripExtensions();
        java.lang.String str35 = locale34.getISO3Country();
        java.lang.String str36 = locale34.getISO3Country();
        java.util.Locale locale38 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale39 = java.util.Locale.KOREAN;
        java.lang.String str40 = locale38.getDisplayName(locale39);
        java.lang.String str41 = locale34.getDisplayVariant(locale38);
        java.lang.String str42 = locale30.getDisplayScript(locale38);
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = locale44.getDisplayScript(locale52);
        java.util.Locale locale57 = java.util.Locale.ITALY;
        java.util.Locale locale58 = locale57.stripExtensions();
        java.lang.String str59 = locale58.getISO3Country();
        java.lang.String str60 = locale58.getISO3Country();
        java.util.Locale locale61 = java.util.Locale.GERMAN;
        java.util.Locale locale62 = java.util.Locale.KOREAN;
        java.util.Locale locale63 = java.util.Locale.KOREAN;
        java.lang.String str64 = locale62.getDisplayCountry(locale63);
        java.util.Locale locale65 = java.util.Locale.KOREA;
        java.util.Locale locale66 = java.util.Locale.ENGLISH;
        java.util.Locale locale68 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale69 = java.util.Locale.KOREAN;
        java.lang.String str70 = locale68.getDisplayName(locale69);
        java.util.Locale locale71 = java.util.Locale.ITALY;
        java.util.Locale locale72 = locale71.stripExtensions();
        java.lang.String str73 = locale72.getISO3Country();
        java.lang.String str74 = locale72.getISO3Country();
        java.util.Locale locale76 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale77 = java.util.Locale.KOREAN;
        java.lang.String str78 = locale76.getDisplayName(locale77);
        java.lang.String str79 = locale72.getDisplayVariant(locale76);
        java.lang.String str80 = locale68.getDisplayScript(locale76);
        java.util.Locale locale81 = java.util.Locale.ITALY;
        java.util.Locale locale82 = locale81.stripExtensions();
        java.lang.String str83 = locale82.getISO3Country();
        java.util.Set<java.lang.String> strSet84 = locale82.getUnicodeLocaleKeys();
        java.util.Locale locale85 = java.util.Locale.KOREAN;
        java.lang.String str86 = locale85.getVariant();
        java.lang.String str87 = locale85.getVariant();
        java.util.Locale locale88 = java.util.Locale.ITALY;
        java.util.Locale locale89 = locale88.stripExtensions();
        java.util.Locale locale90 = java.util.Locale.ENGLISH;
        java.util.Locale locale91 = java.util.Locale.TAIWAN;
        java.util.Locale locale92 = java.util.Locale.ITALY;
        java.util.Locale[] localeArray93 = new java.util.Locale[] { locale26, locale28, locale38, locale52, locale58, locale61, locale63, locale65, locale66, locale68, locale82, locale85, locale88, locale90, locale91, locale92 };
        java.util.ArrayList<java.util.Locale> localeList94 = new java.util.ArrayList<java.util.Locale>();
        boolean boolean95 = java.util.Collections.addAll((java.util.Collection<java.util.Locale>) localeList94, localeArray93);
        java.util.Locale locale96 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList15, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.Locale locale97 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.util.Locale>) localeList94);
        java.util.Locale locale98 = java.util.Locale.lookup(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList94);
        java.lang.String str99 = locale98.getCountry();
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(languageRangeArray14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(strArray21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertNotNull(strList24);
        org.junit.Assert.assertEquals(locale26.toString(), "hi!");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "ITA" + "'", str35, "ITA");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "ITA" + "'", str36, "ITA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ITA" + "'", str59, "ITA");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "ITA" + "'", str60, "ITA");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "de");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "ko");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(locale65);
        org.junit.Assert.assertEquals(locale65.toString(), "ko_KR");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "en");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "");
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str70 + "' != '" + "" + "'", str70, "");
        org.junit.Assert.assertNotNull(locale71);
        org.junit.Assert.assertEquals(locale71.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale72);
        org.junit.Assert.assertEquals(locale72.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str73 + "' != '" + "ITA" + "'", str73, "ITA");
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "ITA" + "'", str74, "ITA");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "");
        org.junit.Assert.assertNotNull(locale77);
        org.junit.Assert.assertEquals(locale77.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str78 + "' != '" + "" + "'", str78, "");
        org.junit.Assert.assertEquals("'" + str79 + "' != '" + "" + "'", str79, "");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "" + "'", str80, "");
        org.junit.Assert.assertNotNull(locale81);
        org.junit.Assert.assertEquals(locale81.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "ITA" + "'", str83, "ITA");
        org.junit.Assert.assertNotNull(strSet84);
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "" + "'", str86, "");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "" + "'", str87, "");
        org.junit.Assert.assertNotNull(locale88);
        org.junit.Assert.assertEquals(locale88.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale89);
        org.junit.Assert.assertEquals(locale89.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale90);
        org.junit.Assert.assertEquals(locale90.toString(), "en");
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it_IT");
        org.junit.Assert.assertNotNull(localeArray93);
        org.junit.Assert.assertTrue("'" + boolean95 + "' != '" + true + "'", boolean95 == true);
        org.junit.Assert.assertNull(locale96);
        org.junit.Assert.assertNull(locale97);
        org.junit.Assert.assertNotNull(locale98);
        org.junit.Assert.assertEquals(locale98.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str99 + "' != '" + "" + "'", str99, "");
    }

    @Test
    public void test2216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2216");
        java.util.Locale locale1 = new java.util.Locale("ITA");
        java.lang.String str2 = locale1.getISO3Language();
        java.lang.String str3 = locale1.getScript();
        java.util.Locale.setDefault(locale1);
        java.lang.String str5 = locale1.getDisplayCountry();
        java.lang.String str6 = locale1.toString();
        org.junit.Assert.assertEquals(locale1.toString(), "ita");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ita" + "'", str2, "ita");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ita" + "'", str6, "ita");
    }

    @Test
    public void test2217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2217");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("Italiano", (double) 23);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=23.0");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2218");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = locale14.getDisplayScript(locale22);
        java.util.Locale locale29 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str30 = locale14.getDisplayScript(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setRegion("");
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale11.getDisplayCountry(locale29);
        java.lang.String str42 = locale29.getExtension('x');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale48.getExtensionKeys();
        java.lang.String str57 = locale48.getISO3Country();
        java.lang.String str58 = locale48.getISO3Language();
        java.lang.String str59 = locale46.getDisplayCountry(locale48);
        java.lang.String str60 = locale43.getDisplayLanguage(locale48);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale43);
        java.lang.String str62 = locale29.getDisplayCountry(locale43);
        java.util.Locale.Builder builder63 = builder5.setLocale(locale43);
        java.util.Locale.Builder builder64 = builder63.clear();
        java.util.Locale.Builder builder65 = builder64.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italian" + "'", str12, "Italian");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr_fr (FR_FR)" + "'", str39, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ITA" + "'", str57, "ITA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ita" + "'", str58, "ita");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Francia" + "'", str59, "Francia");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FR_FR" + "'", str62, "FR_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test2219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2219");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale3.getDisplayName(locale7);
        java.lang.String str9 = locale7.getLanguage();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Set<java.lang.String> strSet11 = locale7.getUnicodeLocaleKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ita");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ita");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Italian" + "'", str5, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str8, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertNotNull(strSet11);
    }

    @Test
    public void test2220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2220");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(locale1);
        boolean boolean4 = locale1.hasExtensions();
        java.util.Set<java.lang.String> strSet5 = locale1.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(strSet5);
    }

    @Test
    public void test2221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2221");
        java.util.Locale locale2 = new java.util.Locale("German", "inglese");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        java.util.Locale locale8 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayName(locale9);
        java.lang.String str11 = locale4.getDisplayVariant(locale8);
        java.util.Set<java.lang.Character> charSet12 = locale4.getExtensionKeys();
        java.lang.String str13 = locale4.getISO3Country();
        java.lang.String str14 = locale2.getDisplayScript(locale4);
        org.junit.Assert.assertEquals(locale2.toString(), "german_INGLESE");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(charSet12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test2222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2222");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        int int10 = random0.nextInt((int) 'u');
        double double11 = random0.nextDouble();
        float float12 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles(0L, (double) 0.73533946f, (double) 303251316);
        random0.setSeed((long) (-1866363753));
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[77, 104, -98, 83, -12, 97]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 37 + "'", int10 == 37);
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + 0.0690570210865542d + "'", double11 == 0.0690570210865542d);
// flaky:         org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.4038874f + "'", float12 == 0.4038874f);
        org.junit.Assert.assertNotNull(doubleStream16);
    }

    @Test
    public void test2223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2223");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        int int2 = random0.nextInt();
        java.util.stream.IntStream intStream4 = random0.ints((long) (short) 100);
        int int6 = random0.nextInt(282464450);
        java.util.stream.LongStream longStream7 = random0.longs();
        random0.setSeed((long) 60788252);
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1181009686) + "'", int2 == (-1181009686));
        org.junit.Assert.assertNotNull(intStream4);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + 122822252 + "'", int6 == 122822252);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test2224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2224");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getVariant();
        java.lang.String str2 = locale0.getVariant();
        java.lang.String str3 = locale0.toLanguageTag();
        java.util.Locale locale6 = new java.util.Locale("hi!", "TWN");
        java.lang.String str7 = locale0.getDisplayScript(locale6);
        java.lang.String str8 = locale0.getDisplayScript();
        java.util.Locale.Category category9 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale11.getDisplayName(locale12);
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale15.getDisplayVariant(locale19);
        java.lang.String str23 = locale11.getDisplayScript(locale19);
        java.util.Locale locale26 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str27 = locale11.getDisplayScript(locale26);
        java.util.Locale.setDefault(category9, locale26);
        java.util.Locale locale29 = java.util.Locale.getDefault(category9);
        java.util.Locale locale30 = java.util.Locale.getDefault(category9);
        java.lang.String str31 = locale0.getDisplayLanguage(locale30);
        java.lang.String str32 = locale30.getScript();
        java.lang.String str33 = locale30.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ko" + "'", str3, "ko");
        org.junit.Assert.assertEquals(locale6.toString(), "hi!_TWN");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertTrue("'" + category9 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category9.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertEquals(locale26.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Korean" + "'", str31, "Korean");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr_fr_FR_FR" + "'", str33, "fr_fr_FR_FR");
    }

    @Test
    public void test2225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2225");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale8 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayCountry(locale11);
        java.util.Locale.setDefault(category0, locale10);
        java.util.Locale.Builder builder14 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder16 = builder14.setRegion("");
        java.util.Locale.Builder builder17 = builder14.clearExtensions();
        java.util.Locale.Builder builder19 = builder14.setLanguage("Italy");
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getISO3Country();
        java.util.Locale locale23 = java.util.Locale.TAIWAN;
        java.lang.String str24 = locale21.getDisplayScript(locale23);
        java.lang.String str25 = locale21.getDisplayScript();
        java.lang.String str26 = locale21.getISO3Language();
        java.util.Locale.Builder builder27 = builder19.setLocale(locale21);
        java.util.Set<java.lang.Character> charSet28 = locale21.getExtensionKeys();
        java.lang.String str29 = locale10.getDisplayLanguage(locale21);
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.util.Set<java.lang.String> strSet31 = locale30.getUnicodeLocaleAttributes();
        java.util.Locale locale35 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str36 = locale35.toLanguageTag();
        java.lang.String str37 = locale35.getScript();
        java.lang.String str38 = locale30.getDisplayVariant(locale35);
        java.lang.String str39 = locale35.getISO3Country();
        java.lang.String str40 = locale21.getDisplayCountry(locale35);
        java.lang.String str41 = locale35.getLanguage();
        java.lang.String str42 = locale35.getDisplayVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ita" + "'", str26, "ita");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "coreano" + "'", str29, "coreano");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(strSet31);
        org.junit.Assert.assertEquals(locale35.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "x-lvariant-fr" + "'", str36, "x-lvariant-fr");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italy" + "'", str40, "Italy");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "cinese (taiwan)" + "'", str41, "cinese (taiwan)");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr" + "'", str42, "fr");
    }

    @Test
    public void test2226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2226");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.LongStream longStream4 = random0.longs((long) 348768006, (long) (byte) 10, (long) '4');
        java.util.stream.IntStream intStream8 = random0.ints((long) 5, 1, 1785693086);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        random0.setSeed(0L);
        java.util.stream.DoubleStream doubleStream12 = random0.doubles();
        java.util.stream.LongStream longStream13 = random0.longs();
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test2227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2227");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\uc911\uad6d\uc5b4");
        java.util.Locale locale2 = java.util.Locale.ROOT;
        java.util.Locale.setDefault(locale2);
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Locale locale10 = new java.util.Locale("Chinese", "fr");
        java.lang.String str11 = locale6.getDisplayVariant(locale10);
        boolean boolean12 = locale6.hasExtensions();
        java.lang.String str13 = locale2.getDisplayLanguage(locale6);
        java.lang.String str14 = locale1.getDisplayScript(locale6);
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals(locale10.toString(), "chinese_FR");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test2228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2228");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ita");
        java.lang.String str2 = languageRange1.getRange();
        java.util.Locale locale3 = java.util.Locale.FRANCE;
        java.lang.String str4 = locale3.getVariant();
        java.util.Set<java.lang.String> strSet5 = locale3.getUnicodeLocaleAttributes();
        java.lang.String str6 = locale3.getDisplayScript();
        boolean boolean7 = languageRange1.equals((java.lang.Object) str6);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ita" + "'", str2, "ita");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(strSet5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test2229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2229");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Set<java.lang.Character> charSet7 = locale1.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(charSet7);
    }

    @Test
    public void test2230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2230");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.lang.String str6 = locale0.getDisplayCountry();
        java.util.Random random7 = new java.util.Random();
        boolean boolean8 = random7.nextBoolean();
        java.util.stream.IntStream intStream10 = random7.ints((long) (short) 1);
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(locale0, random7);
        com.github.javafaker.Business business12 = faker11.business();
        com.github.javafaker.Lorem lorem13 = faker11.lorem();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "China" + "'", str6, "China");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(business12);
        org.junit.Assert.assertNotNull(lorem13);
    }

    @Test
    public void test2231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2231");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.Random random3 = new java.util.Random();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random3.nextBytes(byteArray10);
        random0.nextBytes(byteArray10);
        double double13 = random0.nextGaussian();
        boolean boolean14 = random0.nextBoolean();
        float float15 = random0.nextFloat();
        java.util.stream.IntStream intStream16 = random0.ints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream20 = random0.ints(3000910722503397162L, (-446451387), (-1359561616));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[70, 31, -106, 2, 22, -106]");
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.013233548284395198d + "'", double13 == 0.013233548284395198d);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.20289421f + "'", float15 == 0.20289421f);
        org.junit.Assert.assertNotNull(intStream16);
    }

    @Test
    public void test2232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2232");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("French", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        java.util.Locale locale8 = new java.util.Locale("it_FR_FR", "\u5fb7\u6587\u5fb7\u570b)", "FR");
        java.util.Set<java.lang.String> strSet9 = locale8.getUnicodeLocaleAttributes();
        java.util.Locale.FilteringMode filteringMode10 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList11 = java.util.Locale.filterTags(languageRangeList4, (java.util.Collection<java.lang.String>) strSet9, filteringMode10);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.lang.String[] strArray19 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList20 = new java.util.ArrayList<java.lang.String>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList20, strArray19);
        java.util.List<java.lang.String> strList22 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList20);
        java.lang.String[] strArray27 = new java.lang.String[] { "ITA", "Italian", "fr_FR", "hi!" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.lang.String str30 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap31 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList32 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, strMap31);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap34 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList35 = java.util.Locale.LanguageRange.parse("und", strMap34);
        java.util.List<java.util.Locale.LanguageRange> languageRangeList37 = java.util.Locale.LanguageRange.parse("Italia");
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList46);
        java.util.Collection<java.lang.String> strCollection49 = null;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strCollection49);
        java.util.Collection<java.util.Locale> localeCollection51 = null;
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList71);
        java.util.Collection<java.lang.String> strCollection74 = null;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, strCollection74);
        java.lang.String str76 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, strCollection74);
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.lang.String>) strList85);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList85, filteringMode88);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, localeCollection51, filteringMode88);
        java.util.Locale.FilteringMode filteringMode91 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList92 = java.util.Locale.filter(languageRangeList37, (java.util.Collection<java.util.Locale>) localeList90, filteringMode91);
        java.util.List<java.util.Locale> localeList93 = java.util.Locale.filter(languageRangeList35, (java.util.Collection<java.util.Locale>) localeList90);
        java.util.List<java.util.Locale> localeList94 = java.util.Locale.filter(languageRangeList32, (java.util.Collection<java.util.Locale>) localeList93);
        java.util.List<java.util.Locale> localeList95 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList94);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
// flaky:         org.junit.Assert.assertEquals(locale8.toString(), "\u5fb7\u6587\u5fb7\u570b)_FR");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + filteringMode10 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode10.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(strList22);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNull(str30);
        org.junit.Assert.assertNotNull(languageRangeList32);
        org.junit.Assert.assertNotNull(languageRangeList35);
        org.junit.Assert.assertNotNull(languageRangeList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode88.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertTrue("'" + filteringMode91 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode91.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList92);
        org.junit.Assert.assertNotNull(localeList93);
        org.junit.Assert.assertNotNull(localeList94);
        org.junit.Assert.assertNotNull(localeList95);
    }

    @Test
    public void test2233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2233");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.util.Set<java.lang.Character> charSet13 = locale5.getExtensionKeys();
        java.lang.String str14 = locale5.getISO3Country();
        java.lang.String str15 = locale5.getISO3Language();
        java.lang.String str16 = locale3.getDisplayCountry(locale5);
        java.lang.String str17 = locale0.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet18 = locale0.getUnicodeLocaleAttributes();
        java.util.Set<java.lang.String> strSet19 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals(locale3.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ita" + "'", str15, "ita");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Francia" + "'", str16, "Francia");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "giapponese" + "'", str17, "giapponese");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNotNull(strSet19);
    }

    @Test
    public void test2234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2234");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Business business20 = faker19.business();
        com.github.javafaker.Business business21 = faker19.business();
        java.lang.String str23 = faker19.letterify("it_IT");
        com.github.javafaker.Options options24 = faker19.options();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-10, -26, 32, 29, 124, 102]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.7783728f + "'", float15 == 0.7783728f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.5846928f + "'", float16 == 0.5846928f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(business20);
        org.junit.Assert.assertNotNull(business21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "it_IT" + "'", str23, "it_IT");
        org.junit.Assert.assertNotNull(options24);
    }

    @Test
    public void test2235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2235");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Name name7 = faker1.name();
        com.github.javafaker.Code code8 = faker1.code();
        com.github.javafaker.Number number9 = faker1.number();
        com.github.javafaker.Name name10 = faker1.name();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(code8);
        org.junit.Assert.assertNotNull(number9);
        org.junit.Assert.assertNotNull(name10);
    }

    @Test
    public void test2236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2236");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.lang.String str7 = locale3.getDisplayLanguage(locale6);
        java.lang.String str8 = locale3.getISO3Language();
        java.util.Locale locale12 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str13 = locale3.getDisplayVariant(locale12);
        java.util.Set<java.lang.String> strSet14 = locale12.getUnicodeLocaleAttributes();
        java.util.Locale.Category category15 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale19 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category15, locale19);
        java.lang.String str21 = locale19.getScript();
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale22.getDisplayCountry(locale25);
        java.lang.String str28 = locale19.getDisplayLanguage(locale22);
        java.lang.String str29 = locale12.getDisplayName(locale19);
        java.lang.String str30 = locale12.getDisplayScript();
        java.util.Locale locale32 = new java.util.Locale("it_IT");
        java.lang.String str33 = locale32.getDisplayCountry();
        java.lang.String str34 = locale12.getDisplayCountry(locale32);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = locale32.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals(locale12.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + category15 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category15.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale19.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "hi!" + "'", str28, "hi!");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "cinese (taiwan) (fr)" + "'", str29, "cinese (taiwan) (fr)");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals(locale32.toString(), "it_it");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
    }

    @Test
    public void test2237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2237");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        java.util.stream.IntStream intStream14 = random0.ints();
        java.util.stream.IntStream intStream18 = random0.ints((long) 351833871, 17, 1785693086);
        random0.setSeed((long) (-70247928));
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[93, -4, 75, -67, -88, 49]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(intStream14);
        org.junit.Assert.assertNotNull(intStream18);
    }

    @Test
    public void test2238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2238");
        java.util.Locale locale2 = new java.util.Locale("fr_FR", "fr_FR");
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale5.getDisplayScript(locale13);
        java.util.Locale locale20 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str21 = locale5.getDisplayScript(locale20);
        java.lang.String str22 = locale20.toLanguageTag();
        java.lang.String str23 = locale20.toLanguageTag();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.setRegion("");
        java.util.Locale.Builder builder28 = builder26.setRegion("");
        java.util.Locale locale29 = builder28.build();
        java.lang.String str30 = locale20.getDisplayName(locale29);
        java.lang.String str31 = locale20.getDisplayCountry();
        java.lang.String str32 = locale3.getDisplayName(locale20);
        java.lang.String str33 = locale2.getDisplayLanguage(locale20);
        java.lang.Object obj34 = locale2.clone();
        org.junit.Assert.assertEquals(locale2.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale20.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr_fr (FR_FR)" + "'", str30, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR_FR" + "'", str31, "FR_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese (Japan)" + "'", str32, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr_fr" + "'", str33, "fr_fr");
        org.junit.Assert.assertNotNull(obj34);
        org.junit.Assert.assertEquals(obj34.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj34), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj34), "fr_fr_FR_FR");
    }

    @Test
    public void test2239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2239");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.IntStream intStream20 = random5.ints();
        double double21 = random5.nextGaussian();
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(random5);
        float float23 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream24 = random5.doubles();
        float float25 = random5.nextFloat();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream27 = random5.ints((long) (-894906242));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[64, 29, -3, -42, -71, -71]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.060411155f + "'", float15 == 0.060411155f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.37459344f + "'", float16 == 0.37459344f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(intStream20);
// flaky:         org.junit.Assert.assertTrue("'" + double21 + "' != '" + (-0.9412108413037034d) + "'", double21 == (-0.9412108413037034d));
// flaky:         org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.35978007f + "'", float23 == 0.35978007f);
        org.junit.Assert.assertNotNull(doubleStream24);
// flaky:         org.junit.Assert.assertTrue("'" + float25 + "' != '" + 0.6482892f + "'", float25 == 0.6482892f);
    }

    @Test
    public void test2240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2240");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.getISO3Country();
        com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(locale0);
        java.lang.String str4 = locale0.toLanguageTag();
        java.lang.String str5 = locale0.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
    }

    @Test
    public void test2241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2241");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr-FR");
        java.lang.String str2 = languageRange1.getRange();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr-fr" + "'", str2, "fr-fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr-fr" + "'", str3, "fr-fr");
    }

    @Test
    public void test2242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2242");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category5, locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.util.Locale locale12 = locale9.stripExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale9.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italy" + "'", str11, "Italy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "hi!__ITA");
    }

    @Test
    public void test2243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2243");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.stream.LongStream longStream6 = random0.longs((long) 427836975, 4407342282996398343L, 7371221834332919704L);
        double double7 = random0.nextGaussian();
        double double8 = random0.nextDouble();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(longStream6);
// flaky:         org.junit.Assert.assertTrue("'" + double7 + "' != '" + 1.3811411624247665d + "'", double7 == 1.3811411624247665d);
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.5411135940914369d + "'", double8 == 0.5411135940914369d);
    }

    @Test
    public void test2244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2244");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.lang.String str13 = locale1.getDisplayScript(locale9);
        java.util.Locale locale16 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str17 = locale1.getDisplayScript(locale16);
        java.lang.String str18 = locale16.toLanguageTag();
        java.lang.String str19 = locale16.toLanguageTag();
        java.util.Locale.Builder builder20 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder22 = builder20.setRegion("");
        java.util.Locale.Builder builder24 = builder22.setRegion("");
        java.util.Locale locale25 = builder24.build();
        java.lang.String str26 = locale16.getDisplayName(locale25);
        java.lang.String str27 = locale25.getVariant();
        java.util.Set<java.lang.String> strSet28 = locale25.getUnicodeLocaleKeys();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str30 = locale25.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "und" + "'", str18, "und");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "und" + "'", str19, "und");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "fr_fr (FR_FR)" + "'", str26, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(strSet28);
    }

    @Test
    public void test2245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2245");
        java.util.Locale locale2 = new java.util.Locale("KO", "KO");
        org.junit.Assert.assertEquals(locale2.toString(), "ko_KO");
    }

    @Test
    public void test2246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2246");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale7 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str8 = locale1.getDisplayCountry(locale7);
        java.lang.String str9 = locale1.getDisplayLanguage();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = locale1.getExtension('#');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: #");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italy" + "'", str8, "Italy");
// flaky:         org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str9, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
    }

    @Test
    public void test2247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2247");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        boolean boolean2 = random0.nextBoolean();
        java.util.stream.LongStream longStream3 = random0.longs();
        java.util.stream.DoubleStream doubleStream6 = random0.doubles(0.3605423704638422d, (double) 1741626782);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream9 = random0.doubles((double) 330049965, 0.8254908105750499d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(longStream3);
        org.junit.Assert.assertNotNull(doubleStream6);
    }

    @Test
    public void test2248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2248");
        java.util.Locale locale0 = java.util.Locale.JAPAN;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(strSet1);
    }

    @Test
    public void test2249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2249");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.Lorem lorem6 = faker1.lorem();
        java.lang.String str8 = faker1.numerify("zh_CN");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(lorem6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zh_CN" + "'", str8, "zh_CN");
    }

    @Test
    public void test2250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2250");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("USA", (double) (-673194154));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=-6.73194154E8");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2251");
        java.util.Locale locale2 = new java.util.Locale("cinese (taiwan)", "tedesco");
        org.junit.Assert.assertEquals(locale2.toString(), "cinese (taiwan)_TEDESCO");
    }

    @Test
    public void test2252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2252");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        double double15 = random0.nextDouble();
        java.util.stream.DoubleStream doubleStream18 = random0.doubles(0.8548341255517066d, (double) 0.9479531f);
        boolean boolean19 = random0.nextBoolean();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-47, 84, -59, -110, 85, -62]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.07233341547926217d + "'", double14 == 0.07233341547926217d);
// flaky:         org.junit.Assert.assertTrue("'" + double15 + "' != '" + 0.011152309269514826d + "'", double15 == 0.011152309269514826d);
        org.junit.Assert.assertNotNull(doubleStream18);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2253");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale2 = new java.util.Locale("IT");
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale4.getDisplayCountry(locale7);
        java.util.Locale.setDefault(locale4);
        java.lang.String str11 = locale2.getDisplayCountry(locale4);
        java.lang.String str12 = locale2.getDisplayScript();
        java.lang.String str13 = locale2.getISO3Country();
        java.lang.String str15 = locale2.getUnicodeLocaleType("IT");
        java.lang.String str16 = locale2.getCountry();
        java.util.Locale locale17 = java.util.Locale.PRC;
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.lang.String str19 = locale18.getDisplayLanguage();
        java.lang.String str20 = locale17.getDisplayVariant(locale18);
        com.github.javafaker.Faker faker21 = new com.github.javafaker.Faker(locale17);
        java.lang.String str22 = locale17.getISO3Language();
        java.util.Set<java.lang.String> strSet23 = locale17.getUnicodeLocaleAttributes();
        java.lang.String str24 = locale2.getDisplayVariant(locale17);
        java.util.Locale.Builder builder25 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder27 = builder25.setRegion("");
        java.util.Locale.Builder builder29 = builder27.setRegion("");
        java.util.Locale.Builder builder31 = builder27.setLanguage("IT");
        java.util.Locale.Category category32 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale36 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category32, locale36);
        java.util.Locale locale38 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale39 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str40 = locale38.getDisplayLanguage(locale39);
        java.util.Locale.setDefault(category32, locale38);
        java.util.Locale locale42 = java.util.Locale.getDefault(category32);
        java.lang.String str43 = locale42.getDisplayCountry();
        java.util.Locale.Builder builder44 = builder27.setLocale(locale42);
        java.util.Locale.Builder builder46 = builder44.setScript("");
        java.util.Locale.Builder builder48 = builder46.addUnicodeLocaleAttribute("CHN");
        java.util.Locale.Builder builder51 = builder48.setUnicodeLocaleKeyword("CN", "FRANCESE");
        java.util.Locale locale52 = builder48.build();
        java.lang.String str53 = locale17.getDisplayName(locale52);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNull(str15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str19, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zho" + "'", str22, "zho");
        org.junit.Assert.assertNotNull(strSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + category32 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category32.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale36.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "chinois" + "'", str40, "chinois");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "\u53f0\u7063" + "'", str43, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW_#u-chn-cn-francese");
// flaky:         org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str53, "\u4e2d\u6587\u4e2d\u570b)");
    }

    @Test
    public void test2254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2254");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.setLanguage("IT");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category7);
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder19.setScript("");
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("CHN");
        java.util.Locale.Builder builder26 = builder23.setUnicodeLocaleKeyword("CN", "FRANCESE");
        java.util.Locale.Builder builder28 = builder26.setLanguage("Cina");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder30 = builder28.setScript("TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: TWN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois" + "'", str15, "chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u53f0\u7063" + "'", str18, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
    }

    @Test
    public void test2255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2255");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        java.util.stream.LongStream longStream13 = random0.longs();
        java.util.stream.DoubleStream doubleStream17 = random0.doubles(6448421598433570082L, (double) 0.28971082f, (double) 0.31204516f);
        long long18 = random0.nextLong();
        long long19 = random0.nextLong();
        double double20 = random0.nextDouble();
        java.util.stream.LongStream longStream23 = random0.longs((long) 6, (long) 1222457291);
        float float24 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[92, 45, -42, 0, 92, -120]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.93366486f + "'", float10 == 0.93366486f);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 5183167979744265228L + "'", long18 == 5183167979744265228L);
// flaky:         org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-3002193594808629452L) + "'", long19 == (-3002193594808629452L));
// flaky:         org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.92834420746295d + "'", double20 == 0.92834420746295d);
        org.junit.Assert.assertNotNull(longStream23);
// flaky:         org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.97578704f + "'", float24 == 0.97578704f);
    }

    @Test
    public void test2256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2256");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        boolean boolean14 = random0.nextBoolean();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(random0);
        java.util.stream.LongStream longStream18 = random0.longs((long) (-2068934742), 0L);
        double double19 = random0.nextDouble();
        java.util.stream.LongStream longStream23 = random0.longs((long) 707361935, (long) (-890288509), (long) 1085998239);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-81, 125, 24, 42, 11, 60]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.08684180427227618d + "'", double9 == 0.08684180427227618d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1960350894 + "'", int11 == 1960350894);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(longStream18);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.8191254129780099d + "'", double19 == 0.8191254129780099d);
        org.junit.Assert.assertNotNull(longStream23);
    }

    @Test
    public void test2257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2257");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("KO");
        java.util.Locale locale2 = java.util.Locale.PRC;
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.lang.String str4 = locale3.getDisplayLanguage();
        java.lang.String str5 = locale2.getDisplayVariant(locale3);
        java.util.Locale locale6 = java.util.Locale.KOREA;
        java.lang.String str7 = locale2.getDisplayName(locale6);
        java.util.Set<java.lang.String> strSet8 = locale2.getUnicodeLocaleKeys();
        java.lang.String str9 = java.util.Locale.lookupTag(languageRangeList1, (java.util.Collection<java.lang.String>) strSet8);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap10 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList11 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList1, strMap10);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap12 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList11, strMap12);
        org.junit.Assert.assertNotNull(languageRangeList1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str7, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(strSet8);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(languageRangeList11);
        org.junit.Assert.assertNotNull(languageRangeList13);
    }

    @Test
    public void test2258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2258");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("fr-FR");
        double double2 = languageRange1.getWeight();
        java.lang.String str3 = languageRange1.getRange();
        org.junit.Assert.assertTrue("'" + double2 + "' != '" + 1.0d + "'", double2 == 1.0d);
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr-fr" + "'", str3, "fr-fr");
    }

    @Test
    public void test2259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2259");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.lang.String str1 = locale0.getDisplayLanguage();
        java.util.Locale locale5 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str6 = locale0.getDisplayLanguage(locale5);
        java.lang.String str7 = locale5.getScript();
        boolean boolean8 = locale5.hasExtensions();
        java.lang.String str10 = locale5.getUnicodeLocaleType("zh");
        java.lang.String str11 = locale5.getDisplayScript();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale13 = java.util.Locale.getDefault(category12);
        java.util.Locale locale14 = java.util.Locale.CANADA;
        java.util.Locale locale16 = new java.util.Locale("IT");
        java.lang.String str17 = locale14.getDisplayVariant(locale16);
        java.util.Locale.setDefault(category12, locale14);
        java.util.Locale locale20 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category12, locale20);
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayCountry(locale23);
        java.util.Locale.setDefault(category12, locale22);
        java.util.Locale locale26 = java.util.Locale.getDefault(category12);
        java.lang.String str27 = locale5.getDisplayVariant(locale26);
        boolean boolean28 = locale5.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str1 + "' != '" + "Italian" + "'", str1, "Italian");
        org.junit.Assert.assertEquals(locale5.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italian" + "'", str6, "Italian");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale13);
// flaky:         org.junit.Assert.assertEquals(locale13.toString(), "usa_TWN_KOR");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale16.toString(), "it");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale20.toString(), "it");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ITA" + "'", str27, "ITA");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test2260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2260");
        java.util.Locale locale1 = new java.util.Locale("English");
        java.lang.String str2 = locale1.getDisplayCountry();
        org.junit.Assert.assertEquals(locale1.toString(), "english");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2261");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "IT");
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "chinois");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder6.removeUnicodeLocaleAttribute("italiano (Italia)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: italiano (Italia) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2262");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale0.getDisplayLanguage(locale2);
        java.util.Set<java.lang.String> strSet4 = locale2.getUnicodeLocaleKeys();
        java.util.Locale locale5 = locale2.stripExtensions();
        java.lang.String str6 = locale2.getISO3Language();
        java.lang.String str7 = locale2.getISO3Country();
        java.lang.String str8 = locale2.getVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Koreanisch" + "'", str3, "Koreanisch");
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "deu" + "'", str6, "deu");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "DEU" + "'", str7, "DEU");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
    }

    @Test
    public void test2263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2263");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category5, locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        boolean boolean12 = locale9.hasExtensions();
        java.lang.String str13 = locale9.getDisplayVariant();
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("ITA");
        java.lang.String str16 = locale9.getDisplayName(locale15);
        java.lang.String str17 = locale9.toLanguageTag();
        java.util.Random random18 = new java.util.Random();
        byte[] byteArray25 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random18.nextBytes(byteArray25);
        double double27 = random18.nextGaussian();
        java.util.stream.DoubleStream doubleStream28 = random18.doubles();
        int int29 = random18.nextInt();
        java.util.stream.DoubleStream doubleStream31 = random18.doubles((long) (byte) 10);
        java.util.stream.LongStream longStream34 = random18.longs((long) (-890288509), (long) 1741626782);
        double double35 = random18.nextDouble();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker36 = new com.github.javafaker.Faker(locale9, random18);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: hi!__ITA could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale9.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italy" + "'", str11, "Italy");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ita");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! (ITA)" + "'", str16, "hi! (ITA)");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "x-lvariant-ITA" + "'", str17, "x-lvariant-ITA");
        org.junit.Assert.assertNotNull(byteArray25);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray25), "[-5, 23, 105, 61, -115, 105]");
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 1.7675354592911205d + "'", double27 == 1.7675354592911205d);
        org.junit.Assert.assertNotNull(doubleStream28);
// flaky:         org.junit.Assert.assertTrue("'" + int29 + "' != '" + 670351633 + "'", int29 == 670351633);
        org.junit.Assert.assertNotNull(doubleStream31);
        org.junit.Assert.assertNotNull(longStream34);
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.4416334367773762d + "'", double35 == 0.4416334367773762d);
    }

    @Test
    public void test2264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2264");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.LongStream longStream4 = random0.longs((long) 348768006, (long) (byte) 10, (long) '4');
        java.util.stream.IntStream intStream8 = random0.ints((long) 5, 1, 1785693086);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        int int11 = random0.nextInt(351833871);
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Name name13 = faker12.name();
        org.junit.Assert.assertNotNull(longStream4);
        org.junit.Assert.assertNotNull(intStream8);
        org.junit.Assert.assertNotNull(doubleStream9);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 156989434 + "'", int11 == 156989434);
        org.junit.Assert.assertNotNull(name13);
    }

    @Test
    public void test2265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2265");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.util.Locale.Category category6 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale10 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category6, locale10);
        java.util.Locale locale12 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale13 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str14 = locale12.getDisplayLanguage(locale13);
        java.util.Locale.setDefault(category6, locale12);
        java.util.Locale locale18 = new java.util.Locale("fr_FR", "it");
        java.util.Locale.setDefault(category6, locale18);
        java.lang.String str20 = locale18.getDisplayScript();
        java.util.Locale.Builder builder21 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder23 = builder21.setRegion("");
        java.util.Locale.Builder builder24 = builder21.clearExtensions();
        java.util.Locale.Builder builder25 = builder21.clear();
        java.util.Locale locale26 = builder25.build();
        java.lang.String str27 = locale18.getDisplayVariant(locale26);
        java.lang.String str28 = locale4.getDisplayVariant(locale18);
        java.util.Locale locale30 = new java.util.Locale("IT");
        java.lang.String str31 = locale18.getDisplayCountry(locale30);
        java.lang.String str32 = locale18.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertTrue("'" + category6 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category6.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale10.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "chinois" + "'", str14, "chinois");
        org.junit.Assert.assertEquals(locale18.toString(), "fr_fr_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals(locale30.toString(), "it");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italia" + "'", str31, "Italia");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "fr_fr" + "'", str32, "fr_fr");
    }

    @Test
    public void test2266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2266");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("german (germany)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=german (germany)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2267");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str9 = locale4.getExtension('a');
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale locale13 = builder11.build();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale20 = java.util.Locale.KOREAN;
        java.lang.String str21 = locale19.getDisplayName(locale20);
        java.lang.String str22 = locale15.getDisplayVariant(locale19);
        java.util.Set<java.lang.Character> charSet23 = locale15.getExtensionKeys();
        java.lang.String str24 = locale15.getISO3Country();
        java.lang.String str25 = locale15.getISO3Language();
        java.util.Locale locale27 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale28 = java.util.Locale.KOREAN;
        java.lang.String str29 = locale27.getDisplayName(locale28);
        java.util.Locale locale30 = java.util.Locale.ITALY;
        java.util.Locale locale31 = locale30.stripExtensions();
        java.lang.String str32 = locale31.getISO3Country();
        java.lang.String str33 = locale31.getISO3Country();
        java.util.Locale locale35 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale36 = java.util.Locale.KOREAN;
        java.lang.String str37 = locale35.getDisplayName(locale36);
        java.lang.String str38 = locale31.getDisplayVariant(locale35);
        java.lang.String str39 = locale27.getDisplayScript(locale35);
        java.util.Locale locale42 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str43 = locale27.getDisplayScript(locale42);
        java.lang.String str44 = locale42.getDisplayName();
        boolean boolean45 = locale42.hasExtensions();
        java.lang.String str46 = locale15.getDisplayScript(locale42);
        com.github.javafaker.Faker faker47 = new com.github.javafaker.Faker(locale15);
        java.util.Set<java.lang.String> strSet48 = locale15.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder49 = builder11.setLocale(locale15);
        java.util.Locale.Builder builder51 = builder49.setRegion("it");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertNotNull(charSet23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ita" + "'", str25, "ita");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ITA" + "'", str32, "ITA");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ITA" + "'", str33, "ITA");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals(locale42.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "fr_fr (FR_FR)" + "'", str44, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test2268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2268");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.LongStream longStream4 = random0.longs((long) 348768006, (long) (byte) 10, (long) '4');
        float float5 = random0.nextFloat();
        java.util.stream.LongStream longStream7 = random0.longs((long) 5);
        float float8 = random0.nextFloat();
        java.util.stream.IntStream intStream10 = random0.ints((long) 1785693086);
        java.util.stream.LongStream longStream13 = random0.longs((long) 500610452, (long) 1222457291);
        org.junit.Assert.assertNotNull(longStream4);
// flaky:         org.junit.Assert.assertTrue("'" + float5 + "' != '" + 0.8772824f + "'", float5 == 0.8772824f);
        org.junit.Assert.assertNotNull(longStream7);
// flaky:         org.junit.Assert.assertTrue("'" + float8 + "' != '" + 0.44627446f + "'", float8 == 0.44627446f);
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(longStream13);
    }

    @Test
    public void test2269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2269");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = locale14.getDisplayScript(locale22);
        java.util.Locale locale29 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str30 = locale14.getDisplayScript(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setRegion("");
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale11.getDisplayCountry(locale29);
        java.lang.String str42 = locale29.getExtension('x');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale48.getExtensionKeys();
        java.lang.String str57 = locale48.getISO3Country();
        java.lang.String str58 = locale48.getISO3Language();
        java.lang.String str59 = locale46.getDisplayCountry(locale48);
        java.lang.String str60 = locale43.getDisplayLanguage(locale48);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale43);
        java.lang.String str62 = locale29.getDisplayCountry(locale43);
        java.util.Locale.Builder builder63 = builder5.setLocale(locale43);
        java.util.Locale locale64 = builder63.build();
        java.util.Locale.Builder builder65 = builder63.clearExtensions();
        java.util.Locale.Builder builder67 = builder65.removeUnicodeLocaleAttribute("KOR");
        java.util.Locale.Builder builder68 = builder65.clear();
        java.util.Locale locale69 = builder65.build();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "Italian" + "'", str12, "Italian");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr_fr (FR_FR)" + "'", str39, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ITA" + "'", str57, "ITA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ita" + "'", str58, "ita");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Francia" + "'", str59, "Francia");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FR_FR" + "'", str62, "FR_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(locale69);
        org.junit.Assert.assertEquals(locale69.toString(), "");
    }

    @Test
    public void test2270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2270");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        boolean boolean2 = random0.nextBoolean();
        java.util.stream.LongStream longStream5 = random0.longs((long) 'u', (long) 1325809780);
        java.util.stream.IntStream intStream9 = random0.ints((long) 461378588, 1060900612, 1573499063);
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(intStream9);
    }

    @Test
    public void test2271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2271");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.util.Set<java.lang.String> strSet6 = locale4.getUnicodeLocaleKeys();
        java.lang.String str7 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet6);
        java.util.Locale.LanguageRange[] languageRangeArray8 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList9 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean10 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList9, languageRangeArray8);
        java.lang.String[] strArray15 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.util.List<java.lang.String> strList18 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList16);
        java.lang.String[] strArray23 = new java.lang.String[] { "ITA", "Italian", "fr_FR", "hi!" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.lang.String str26 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList9, (java.util.Collection<java.lang.String>) strList24);
        java.lang.String str27 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList24);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap28 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList29 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap28);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap30 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList31 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap30);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertNotNull(strSet6);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(languageRangeArray8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(strList18);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(str26);
        org.junit.Assert.assertNull(str27);
        org.junit.Assert.assertNotNull(languageRangeList29);
        org.junit.Assert.assertNotNull(languageRangeList31);
    }

    @Test
    public void test2272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2272");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str4 = locale0.getDisplayName(locale3);
        java.util.Locale.setDefault(locale3);
        java.lang.String str6 = locale3.getVariant();
        java.lang.String str7 = locale3.getVariant();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        boolean boolean18 = locale15.hasExtensions();
        java.lang.String str19 = locale12.getDisplayVariant(locale15);
        java.util.Locale.setDefault(category8, locale15);
        java.lang.String str21 = locale3.getDisplayVariant(locale15);
        java.util.Locale.setDefault(locale3);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Taiwan)" + "'", str4, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_FR_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_FR_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test2273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2273");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.letterify("\ud55c\uad6d\uc5b4");
        java.lang.String str6 = faker1.numerify("\u4e2d\u6587\u4e2d\u570b)");
        com.github.javafaker.Name name7 = faker1.name();
        com.github.javafaker.Company company8 = faker1.company();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str6, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(company8);
    }

    @Test
    public void test2274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2274");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ub3c5\uc77c");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test2275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2275");
        java.util.Random random1 = new java.util.Random((long) (-720507519));
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream3 = random1.ints((long) (-2068865592));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2276");
        java.util.Locale locale2 = new java.util.Locale("Italian (Italy)", "zh_TW");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleKeys();
        org.junit.Assert.assertEquals(locale2.toString(), "italian (italy)_ZH_TW");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test2277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2277");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.lang.String str11 = locale8.getISO3Language();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "deu" + "'", str11, "deu");
    }

    @Test
    public void test2278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2278");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getDisplayLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "italiano" + "'", str3, "italiano");
    }

    @Test
    public void test2279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2279");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        com.github.javafaker.Company company6 = faker1.company();
        com.github.javafaker.Color color7 = faker1.color();
        com.github.javafaker.DateAndTime dateAndTime8 = faker1.date();
        com.github.javafaker.Company company9 = faker1.company();
        com.github.javafaker.Name name10 = faker1.name();
        com.github.javafaker.Options options11 = faker1.options();
        java.lang.String str13 = faker1.numerify("ITALIAN (ITALY)");
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertNotNull(company6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(name10);
        org.junit.Assert.assertNotNull(options11);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITALIAN (ITALY)" + "'", str13, "ITALIAN (ITALY)");
    }

    @Test
    public void test2280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2280");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setLanguage("\ud55c\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???????? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2281");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.stream.IntStream intStream3 = random0.ints();
        java.util.stream.DoubleStream doubleStream4 = random0.doubles();
        java.util.stream.LongStream longStream5 = random0.longs();
        java.util.stream.DoubleStream doubleStream8 = random0.doubles((-0.4235051869499334d), (double) 1929786089);
        int int10 = random0.nextInt(382788593);
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(doubleStream8);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 223630106 + "'", int10 == 223630106);
    }

    @Test
    public void test2282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2282");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles((long) (byte) 10);
        double double14 = random0.nextGaussian();
        java.util.Random random15 = new java.util.Random();
        byte[] byteArray22 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random15.nextBytes(byteArray22);
        random0.nextBytes(byteArray22);
        java.util.stream.LongStream longStream25 = random0.longs();
        double double26 = random0.nextGaussian();
        double double27 = random0.nextDouble();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-94, -97, 85, -24, 68, 104]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.4729627644804833d) + "'", double9 == (-0.4729627644804833d));
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1440215720) + "'", int11 == (-1440215720));
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.7783639741791522d + "'", double14 == 1.7783639741791522d);
        org.junit.Assert.assertNotNull(byteArray22);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray22), "[108, -114, -127, 50, 7, 72]");
        org.junit.Assert.assertNotNull(longStream25);
// flaky:         org.junit.Assert.assertTrue("'" + double26 + "' != '" + 0.37702033812317154d + "'", double26 == 0.37702033812317154d);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.7728147970062104d + "'", double27 == 0.7728147970062104d);
    }

    @Test
    public void test2283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2283");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Business business7 = faker1.business();
        com.github.javafaker.Company company8 = faker1.company();
        com.github.javafaker.DateAndTime dateAndTime9 = faker1.date();
        com.github.javafaker.Name name10 = faker1.name();
        com.github.javafaker.Code code11 = faker1.code();
        com.github.javafaker.DateAndTime dateAndTime12 = faker1.date();
        com.github.javafaker.Name name13 = faker1.name();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(business7);
        org.junit.Assert.assertNotNull(company8);
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(name10);
        org.junit.Assert.assertNotNull(code11);
        org.junit.Assert.assertNotNull(dateAndTime12);
        org.junit.Assert.assertNotNull(name13);
    }

    @Test
    public void test2284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2284");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (short) 0);
        double double3 = languageRange2.getWeight();
        double double4 = languageRange2.getWeight();
        java.lang.String str5 = languageRange2.getRange();
        java.lang.String str6 = languageRange2.getRange();
        java.util.Locale locale7 = java.util.Locale.PRC;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.lang.String str9 = locale8.getDisplayLanguage();
        java.lang.String str10 = locale7.getDisplayVariant(locale8);
        com.github.javafaker.Faker faker11 = new com.github.javafaker.Faker(locale7);
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(locale7);
        com.github.javafaker.Company company13 = faker12.company();
        com.github.javafaker.Lorem lorem14 = faker12.lorem();
        boolean boolean15 = languageRange2.equals((java.lang.Object) faker12);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertTrue("'" + double4 + "' != '" + 0.0d + "'", double4 == 0.0d);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "it" + "'", str5, "it");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "italiano" + "'", str9, "italiano");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(company13);
        org.junit.Assert.assertNotNull(lorem14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
    }

    @Test
    public void test2285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2285");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Code code4 = faker1.code();
        com.github.javafaker.Business business5 = faker1.business();
        java.lang.String str7 = faker1.numerify("ja");
        com.github.javafaker.Internet internet8 = faker1.internet();
        com.github.javafaker.Options options9 = faker1.options();
        java.lang.String str11 = faker1.numerify("cinese (Taiwan)");
        com.github.javafaker.Options options12 = faker1.options();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(code4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ja" + "'", str7, "ja");
        org.junit.Assert.assertNotNull(internet8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "cinese (Taiwan)" + "'", str11, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(options12);
    }

    @Test
    public void test2286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2286");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.stream.IntStream intStream11 = random0.ints((long) 282464450);
        long long12 = random0.nextLong();
        double double13 = random0.nextGaussian();
        java.util.Random random14 = new java.util.Random();
        byte[] byteArray21 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random14.nextBytes(byteArray21);
        java.util.stream.LongStream longStream23 = random14.longs();
        float float24 = random14.nextFloat();
        java.util.stream.DoubleStream doubleStream26 = random14.doubles((long) (short) 10);
        double double27 = random14.nextDouble();
        java.util.Random random28 = new java.util.Random();
        byte[] byteArray35 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random28.nextBytes(byteArray35);
        double double37 = random28.nextGaussian();
        java.util.stream.DoubleStream doubleStream38 = random28.doubles();
        int int39 = random28.nextInt();
        java.util.stream.DoubleStream doubleStream41 = random28.doubles((long) (byte) 10);
        double double42 = random28.nextGaussian();
        java.util.Random random43 = new java.util.Random();
        byte[] byteArray50 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random43.nextBytes(byteArray50);
        random28.nextBytes(byteArray50);
        random14.nextBytes(byteArray50);
        random0.nextBytes(byteArray50);
        boolean boolean55 = random0.nextBoolean();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[92, 97, -117, 71, 117, -76]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(intStream11);
// flaky:         org.junit.Assert.assertTrue("'" + long12 + "' != '" + 7802215349107424866L + "'", long12 == 7802215349107424866L);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.7985035805003016d + "'", double13 == 0.7985035805003016d);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-59, 51, -109, 118, 58, -96]");
        org.junit.Assert.assertNotNull(longStream23);
// flaky:         org.junit.Assert.assertTrue("'" + float24 + "' != '" + 0.76824826f + "'", float24 == 0.76824826f);
        org.junit.Assert.assertNotNull(doubleStream26);
// flaky:         org.junit.Assert.assertTrue("'" + double27 + "' != '" + 0.7320776337880844d + "'", double27 == 0.7320776337880844d);
        org.junit.Assert.assertNotNull(byteArray35);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray35), "[94, 22, -112, 119, -69, 32]");
// flaky:         org.junit.Assert.assertTrue("'" + double37 + "' != '" + 0.6626852218114412d + "'", double37 == 0.6626852218114412d);
        org.junit.Assert.assertNotNull(doubleStream38);
// flaky:         org.junit.Assert.assertTrue("'" + int39 + "' != '" + 36494994 + "'", int39 == 36494994);
        org.junit.Assert.assertNotNull(doubleStream41);
// flaky:         org.junit.Assert.assertTrue("'" + double42 + "' != '" + 0.8551511650785212d + "'", double42 == 0.8551511650785212d);
        org.junit.Assert.assertNotNull(byteArray50);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray50), "[-114, 57, -25, 20, -31, 69]");
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
    }

    @Test
    public void test2287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2287");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("ko");
        java.lang.String str2 = languageRange1.getRange();
        double double3 = languageRange1.getWeight();
        java.lang.String str4 = languageRange1.getRange();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ko" + "'", str2, "ko");
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 1.0d + "'", double3 == 1.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ko" + "'", str4, "ko");
    }

    @Test
    public void test2288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2288");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = locale14.getDisplayScript(locale22);
        java.util.Locale locale29 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str30 = locale14.getDisplayScript(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setRegion("");
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale11.getDisplayCountry(locale29);
        java.lang.String str42 = locale29.getExtension('x');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale48.getExtensionKeys();
        java.lang.String str57 = locale48.getISO3Country();
        java.lang.String str58 = locale48.getISO3Language();
        java.lang.String str59 = locale46.getDisplayCountry(locale48);
        java.lang.String str60 = locale43.getDisplayLanguage(locale48);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale43);
        java.lang.String str62 = locale29.getDisplayCountry(locale43);
        java.util.Locale.Builder builder63 = builder5.setLocale(locale43);
        java.util.Locale.Builder builder65 = builder5.addUnicodeLocaleAttribute("chinois");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder67 = builder5.setLanguageTag("Italian (FR_FR)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Italian (FR_FR) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "tedesco (Germania)" + "'", str7, "tedesco (Germania)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "italiano" + "'", str12, "italiano");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr_fr (FR_FR)" + "'", str39, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ITA" + "'", str57, "ITA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ita" + "'", str58, "ita");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Francia" + "'", str59, "Francia");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FR_FR" + "'", str62, "FR_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
    }

    @Test
    public void test2289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2289");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        boolean boolean14 = random0.nextBoolean();
        com.github.javafaker.Faker faker15 = new com.github.javafaker.Faker(random0);
        java.util.stream.LongStream longStream18 = random0.longs((long) (-2068934742), 0L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Company company20 = faker19.company();
        com.github.javafaker.Business business21 = faker19.business();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[109, 42, 22, 92, 120, 117]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.5944553853291494d + "'", double9 == 1.5944553853291494d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-906860668) + "'", int11 == (-906860668));
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(longStream18);
        org.junit.Assert.assertNotNull(company20);
        org.junit.Assert.assertNotNull(business21);
    }

    @Test
    public void test2290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2290");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getLanguage();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale1);
        com.github.javafaker.Number number6 = faker5.number();
        com.github.javafaker.Color color7 = faker5.color();
        com.github.javafaker.Lorem lorem8 = faker5.lorem();
        com.github.javafaker.Business business9 = faker5.business();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertNotNull(number6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertNotNull(lorem8);
        org.junit.Assert.assertNotNull(business9);
    }

    @Test
    public void test2291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2291");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        int int10 = random0.nextInt();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-7, -105, 47, 67, -50, 73]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 134802005 + "'", int10 == 134802005);
    }

    @Test
    public void test2292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2292");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale8 = new java.util.Locale("IT");
        java.util.Locale.setDefault(category0, locale8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category0);
        java.util.Locale locale13 = new java.util.Locale("zh-TW", "Deutschland");
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        java.lang.String str18 = locale15.getLanguage();
        java.lang.String str19 = locale13.getDisplayVariant(locale15);
        java.util.Locale.setDefault(locale15);
        java.util.Locale.setDefault(category0, locale15);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals(locale8.toString(), "it");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it");
        org.junit.Assert.assertEquals(locale13.toString(), "zh-tw_DEUTSCHLAND");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "it" + "'", str18, "it");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test2293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2293");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.LongStream longStream12 = random0.longs((long) 0);
        java.util.stream.LongStream longStream13 = random0.longs();
        boolean boolean14 = random0.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream16 = random0.doubles((-8298053217031308164L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[27, -75, 4, -70, -25, -15]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.105665326f + "'", float10 == 0.105665326f);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(longStream13);
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test2294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2294");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("Italian");
    }

    @Test
    public void test2295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2295");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale7 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str8 = locale1.getDisplayCountry(locale7);
        java.lang.String str9 = locale1.toLanguageTag();
        java.lang.String str10 = locale1.getDisplayCountry();
        java.lang.String str11 = locale1.getDisplayVariant();
        java.lang.String str12 = locale1.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertEquals(locale7.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Italy" + "'", str8, "Italy");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it-IT" + "'", str9, "it-IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Italia" + "'", str10, "Italia");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
    }

    @Test
    public void test2296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2296");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.util.Locale locale7 = java.util.Locale.GERMAN;
        java.lang.String str8 = locale5.getDisplayCountry(locale7);
        java.lang.String str9 = locale7.getLanguage();
        java.lang.String str10 = locale7.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "Deutschland" + "'", str8, "Deutschland");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "de" + "'", str9, "de");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test2297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2297");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random0.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream4 = random0.ints();
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream16 = random5.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(1L);
        double double19 = random5.nextGaussian();
        java.util.stream.DoubleStream doubleStream21 = random5.doubles((long) 0);
        java.util.Random random22 = new java.util.Random();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random22.nextBytes(byteArray29);
        random5.nextBytes(byteArray29);
        random0.nextBytes(byteArray29);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream36 = random0.longs((long) (-1636825383), (-3963152936323367632L), (long) 52);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[56, 33, 48, 53, 95, -11]");
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(doubleStream18);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.2349012644316565d + "'", double19 == 0.2349012644316565d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[64, 1, 38, -4, -89, 20]");
    }

    @Test
    public void test2298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2298");
        java.util.Locale locale1 = new java.util.Locale("Franz\366sisch");
        org.junit.Assert.assertEquals(locale1.toString(), "franz\366sisch");
    }

    @Test
    public void test2299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2299");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("US", strMap1);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap3 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap3);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
    }

    @Test
    public void test2300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2300");
        java.util.Locale locale3 = new java.util.Locale("Italian", "IT", "Italia");
        boolean boolean4 = locale3.hasExtensions();
        java.util.Set<java.lang.Character> charSet5 = locale3.getExtensionKeys();
        org.junit.Assert.assertEquals(locale3.toString(), "italian_IT_Italia");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(charSet5);
    }

    @Test
    public void test2301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2301");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random0.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream4 = random0.ints();
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream16 = random5.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(1L);
        double double19 = random5.nextGaussian();
        java.util.stream.DoubleStream doubleStream21 = random5.doubles((long) 0);
        java.util.Random random22 = new java.util.Random();
        byte[] byteArray29 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random22.nextBytes(byteArray29);
        random5.nextBytes(byteArray29);
        random0.nextBytes(byteArray29);
        int int33 = random0.nextInt();
        java.util.stream.IntStream intStream34 = random0.ints();
        java.util.stream.IntStream intStream37 = random0.ints(368164043, 461378588);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[104, 77, 16, -32, 113, 14]");
        org.junit.Assert.assertNotNull(longStream16);
        org.junit.Assert.assertNotNull(doubleStream18);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.09785688739899391d + "'", double19 == 0.09785688739899391d);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[15, 125, -92, -40, -100, 126]");
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1196066542 + "'", int33 == 1196066542);
        org.junit.Assert.assertNotNull(intStream34);
        org.junit.Assert.assertNotNull(intStream37);
    }

    @Test
    public void test2302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2302");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.lang.String str1 = locale0.getDisplayScript();
        java.lang.String str2 = locale0.toLanguageTag();
        java.lang.String str3 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "fr" + "'", str2, "fr");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr" + "'", str3, "fr");
    }

    @Test
    public void test2303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2303");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder13 = builder5.setExtension('x', "de");
        java.util.Locale.Builder builder15 = builder5.setVariant("");
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("\u4e2d\u6587\u4e2d\u570b)");
        java.util.Locale.Builder builder18 = builder15.setLocale(locale17);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder20 = builder15.setLanguage("fr-FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: fr-FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test2304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2304");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ja_JP", strMap1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=ja_jp");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2305");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Internet internet4 = faker1.internet();
        com.github.javafaker.Internet internet5 = faker1.internet();
        com.github.javafaker.DateAndTime dateAndTime6 = faker1.date();
        com.github.javafaker.Finance finance7 = faker1.finance();
        com.github.javafaker.Company company8 = faker1.company();
        com.github.javafaker.Lorem lorem9 = faker1.lorem();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(internet4);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(company8);
        org.junit.Assert.assertNotNull(lorem9);
    }

    @Test
    public void test2306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2306");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.Random random3 = new java.util.Random();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random3.nextBytes(byteArray10);
        random0.nextBytes(byteArray10);
        double double13 = random0.nextGaussian();
        boolean boolean14 = random0.nextBoolean();
        float float15 = random0.nextFloat();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream19 = random0.ints((long) (-714542539), (-2073684975), 1929786089);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[56, -125, -120, -19, 49, -47]");
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + (-1.1837218819278428d) + "'", double13 == (-1.1837218819278428d));
// flaky:         org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.34976786f + "'", float15 == 0.34976786f);
    }

    @Test
    public void test2307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2307");
        java.util.Locale locale3 = new java.util.Locale("\u7fa9\u5927\u5229\u6587", "fr", "it-it");
        java.lang.String str4 = locale3.getDisplayLanguage();
        org.junit.Assert.assertEquals(locale3.toString(), "\u7fa9\u5927\u5229\u6587_FR_it-it");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\u7fa9\u5927\u5229\u6587" + "'", str4, "\u7fa9\u5927\u5229\u6587");
    }

    @Test
    public void test2308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2308");
        java.util.Locale locale2 = new java.util.Locale("ITALIAN (ITALY)", "\u82f1\u6587");
        java.lang.String str3 = locale2.toString();
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\u82f1\u6587");
// flaky:         org.junit.Assert.assertEquals("'" + str3 + "' != '" + "\u82f1\u6587" + "'", str3, "\u82f1\u6587");
    }

    @Test
    public void test2309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2309");
        java.util.Locale locale0 = java.util.Locale.CHINESE;
        java.lang.String str1 = locale0.getDisplayVariant();
        java.lang.String str2 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2310");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        random0.setSeed((-1L));
        java.util.stream.IntStream intStream13 = random0.ints((long) 1161892605);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream17 = random0.ints((long) (-32713349), 1353382824, 316463864);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[25, 117, 78, 41, -62, -113]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.3093366554445425d) + "'", double9 == (-1.3093366554445425d));
        org.junit.Assert.assertNotNull(intStream13);
    }

    @Test
    public void test2311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2311");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.Finance finance6 = faker1.finance();
        com.github.javafaker.Address address7 = faker1.address();
        com.github.javafaker.DateAndTime dateAndTime8 = faker1.date();
        java.lang.String str10 = faker1.letterify("\u6cd5\u570b");
        java.lang.String str12 = faker1.numerify("\u65e5\u6587");
        com.github.javafaker.PhoneNumber phoneNumber13 = faker1.phoneNumber();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(finance6);
        org.junit.Assert.assertNotNull(address7);
        org.junit.Assert.assertNotNull(dateAndTime8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "\u6cd5\u570b" + "'", str10, "\u6cd5\u570b");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u65e5\u6587" + "'", str12, "\u65e5\u6587");
        org.junit.Assert.assertNotNull(phoneNumber13);
    }

    @Test
    public void test2312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2312");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale.Builder builder8 = builder5.setExtension('u', "");
        java.util.Locale.Builder builder10 = builder8.removeUnicodeLocaleAttribute("und");
        java.util.Locale.Builder builder13 = builder10.setExtension('u', "KOR");
        java.util.Locale.Builder builder15 = builder10.setLanguageTag("Italy");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder17 = builder15.setRegion("italiano (Italia)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: italiano (Italia) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test2313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2313");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        java.util.stream.DoubleStream doubleStream17 = random0.doubles((long) 0, (-1.2780391703792549d), (double) 0.96307296f);
        java.util.stream.DoubleStream doubleStream18 = random0.doubles();
        int int20 = random0.nextInt(203628591);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[6, 12, 91, -8, -29, -82]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream17);
        org.junit.Assert.assertNotNull(doubleStream18);
// flaky:         org.junit.Assert.assertTrue("'" + int20 + "' != '" + 143011184 + "'", int20 == 143011184);
    }

    @Test
    public void test2314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2314");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = builder4.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder4.setUnicodeLocaleKeyword("", "\uc911\uad6d\uc5b4\uc911\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale keyword key:  [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
    }

    @Test
    public void test2315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2315");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale0.getDisplayCountry(locale3);
        java.util.Locale.setDefault(locale0);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.lang.String str8 = locale7.getDisplayLanguage();
        java.util.Locale locale12 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str13 = locale7.getDisplayLanguage(locale12);
        java.lang.String str14 = locale12.getScript();
        boolean boolean15 = locale12.hasExtensions();
        java.lang.String str17 = locale12.getUnicodeLocaleType("zh");
        java.lang.String str18 = locale12.getDisplayScript();
        java.lang.String str19 = locale0.getDisplayName(locale12);
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale0);
        java.lang.String str21 = locale0.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str8, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals(locale12.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian" + "'", str13, "Italian");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Korean" + "'", str19, "Korean");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
    }

    @Test
    public void test2316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2316");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        java.util.stream.LongStream longStream14 = random0.longs();
        random0.setSeed((long) (short) 100);
        java.util.stream.IntStream intStream17 = random0.ints();
        java.util.stream.LongStream longStream19 = random0.longs(0L);
        double double20 = random0.nextDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream23 = random0.longs((long) (-1496673702), (long) (-1621813963));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[70, 95, -13, 85, -22, 96]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.92416143f + "'", float10 == 0.92416143f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.94484407f + "'", float11 == 0.94484407f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertNotNull(intStream17);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertTrue("'" + double20 + "' != '" + 0.7220096548596434d + "'", double20 == 0.7220096548596434d);
    }

    @Test
    public void test2317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2317");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Company company5 = faker1.company();
        java.lang.String str7 = faker1.bothify("it");
        com.github.javafaker.Book book8 = faker1.book();
        com.github.javafaker.Internet internet9 = faker1.internet();
        com.github.javafaker.Address address10 = faker1.address();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(company5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it" + "'", str7, "it");
        org.junit.Assert.assertNotNull(book8);
        org.junit.Assert.assertNotNull(internet9);
        org.junit.Assert.assertNotNull(address10);
    }

    @Test
    public void test2318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2318");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder11 = builder9.removeUnicodeLocaleAttribute("tedesco (Germania)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: tedesco (Germania) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test2319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2319");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str9 = locale4.getExtension('a');
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String str15 = locale13.getISO3Country();
        java.lang.String str16 = locale13.getLanguage();
        java.util.Locale.Builder builder17 = builder2.setLocale(locale13);
        java.util.Locale.Builder builder19 = builder2.setLanguageTag("tedesco");
        java.util.Locale.Builder builder21 = builder2.setLanguageTag("italian");
        java.util.Locale.Builder builder22 = builder21.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder24 = builder21.removeUnicodeLocaleAttribute("HI!__ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: HI!__ITA [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test2320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2320");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.DoubleStream doubleStream21 = random5.doubles((long) (byte) 1);
        java.util.stream.IntStream intStream23 = random5.ints(0L);
        java.util.stream.IntStream intStream26 = random5.ints((-994230832), 37);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-90, 11, -51, 124, 40, -93]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.62731564f + "'", float15 == 0.62731564f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.79471767f + "'", float16 == 0.79471767f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(intStream23);
        org.junit.Assert.assertNotNull(intStream26);
    }

    @Test
    public void test2321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2321");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        float float17 = random0.nextFloat();
        byte[] byteArray21 = new byte[] { (byte) -1, (byte) 1, (byte) 1 };
        random0.nextBytes(byteArray21);
        float float23 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-101, -90, 39, 67, 111, -23]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.10684275436520865d + "'", double14 == 0.10684275436520865d);
        org.junit.Assert.assertNotNull(doubleStream16);
// flaky:         org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.16288203f + "'", float17 == 0.16288203f);
        org.junit.Assert.assertNotNull(byteArray21);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray21), "[-81, -110, 76]");
// flaky:         org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.9017071f + "'", float23 == 0.9017071f);
    }

    @Test
    public void test2322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2322");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setLanguageTag("fr-FR");
        java.util.Locale.Builder builder9 = builder7.setLanguage("Chinese");
        java.util.Locale.Builder builder10 = builder7.clear();
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder13 = builder10.setScript("und-a-chinois");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: und-a-chinois [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2323");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        java.util.stream.LongStream longStream14 = random0.longs();
        random0.setSeed((long) (short) 100);
        double double17 = random0.nextGaussian();
        double double18 = random0.nextDouble();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-90, -122, -14, 123, -9, -102]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.4355924f + "'", float10 == 0.4355924f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.53717226f + "'", float11 == 0.53717226f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
        org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.6246292191371761d + "'", double17 == 0.6246292191371761d);
        org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.6671595726539502d + "'", double18 == 0.6671595726539502d);
    }

    @Test
    public void test2324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2324");
        java.util.Locale locale3 = new java.util.Locale("und-a-chinois", "\uc911\uad6d\uc5b4\ub300\ub9cc)", "Deutsch (Deutschland)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc911\uad6d\uc5b4\ub300\ub9cc)_Deutsch (Deutschland)");
    }

    @Test
    public void test2325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2325");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale.Builder builder6 = builder0.setLanguage("");
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Set<java.lang.String> strSet10 = locale8.getUnicodeLocaleKeys();
        java.util.Locale locale14 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str15 = locale8.getDisplayCountry(locale14);
        java.lang.String str16 = locale8.toLanguageTag();
        java.lang.String str17 = locale8.getDisplayCountry();
        java.util.Locale.Builder builder18 = builder6.setLocale(locale8);
        java.util.Locale locale19 = java.util.Locale.ITALY;
        java.util.Locale locale20 = locale19.stripExtensions();
        java.lang.String str21 = locale20.getISO3Country();
        java.lang.String str22 = locale20.getISO3Country();
        java.util.Locale locale24 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale24.getDisplayName(locale25);
        java.lang.String str27 = locale20.getDisplayVariant(locale24);
        java.util.Set<java.lang.Character> charSet28 = locale20.getExtensionKeys();
        java.lang.String str29 = locale20.getISO3Country();
        java.lang.String str30 = locale20.getISO3Language();
        java.util.Locale locale32 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale33 = java.util.Locale.KOREAN;
        java.lang.String str34 = locale32.getDisplayName(locale33);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getISO3Country();
        java.lang.String str38 = locale36.getISO3Country();
        java.util.Locale locale40 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale41 = java.util.Locale.KOREAN;
        java.lang.String str42 = locale40.getDisplayName(locale41);
        java.lang.String str43 = locale36.getDisplayVariant(locale40);
        java.lang.String str44 = locale32.getDisplayScript(locale40);
        java.util.Locale locale47 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str48 = locale32.getDisplayScript(locale47);
        java.lang.String str49 = locale47.getDisplayName();
        boolean boolean50 = locale47.hasExtensions();
        java.lang.String str51 = locale20.getDisplayScript(locale47);
        java.util.Locale.setDefault(locale20);
        java.util.Locale.Builder builder53 = builder6.setLocale(locale20);
        java.util.Locale.Category category54 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale55 = java.util.Locale.getDefault(category54);
        java.util.Locale locale56 = java.util.Locale.CANADA;
        java.util.Locale locale58 = new java.util.Locale("IT");
        java.lang.String str59 = locale56.getDisplayVariant(locale58);
        java.util.Locale.setDefault(category54, locale56);
        java.util.Locale locale61 = java.util.Locale.getDefault(category54);
        java.util.Locale locale62 = java.util.Locale.getDefault(category54);
        java.util.Locale locale63 = java.util.Locale.getDefault(category54);
        java.lang.String str64 = locale20.getDisplayVariant(locale63);
        java.lang.Object obj65 = locale20.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertNotNull(strSet10);
        org.junit.Assert.assertEquals(locale14.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Italy" + "'", str15, "Italy");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it-IT" + "'", str16, "it-IT");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "Italy" + "'", str17, "Italy");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ITA" + "'", str21, "ITA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertNotNull(charSet28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ITA" + "'", str29, "ITA");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "ita" + "'", str30, "ita");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "");
        org.junit.Assert.assertNotNull(locale33);
        org.junit.Assert.assertEquals(locale33.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ITA" + "'", str37, "ITA");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "ITA" + "'", str38, "ITA");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals(locale47.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "fr_fr (FR_FR)" + "'", str49, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertTrue("'" + category54 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category54.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale58.toString(), "it");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "" + "'", str59, "");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "en_CA");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
        org.junit.Assert.assertNotNull(obj65);
        org.junit.Assert.assertEquals(obj65.toString(), "it_IT");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj65), "it_IT");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj65), "it_IT");
    }

    @Test
    public void test2326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2326");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        java.lang.String str14 = locale2.getDisplayScript(locale10);
        java.util.Locale locale17 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str18 = locale2.getDisplayScript(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getISO3Country();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale32.getDisplayVariant(locale36);
        java.util.Set<java.lang.Character> charSet40 = locale32.getExtensionKeys();
        java.lang.String str41 = locale32.getISO3Country();
        java.lang.String str42 = locale32.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = locale44.getDisplayScript(locale52);
        java.util.Locale locale59 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str60 = locale44.getDisplayScript(locale59);
        java.lang.String str61 = locale59.getDisplayName();
        boolean boolean62 = locale59.hasExtensions();
        java.lang.String str63 = locale32.getDisplayScript(locale59);
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(category0, locale32);
        java.lang.String str66 = locale32.getDisplayName();
        java.lang.String str67 = locale32.toLanguageTag();
        java.util.Set<java.lang.Character> charSet68 = locale32.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ITA" + "'", str33, "ITA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ITA" + "'", str34, "ITA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ITA" + "'", str41, "ITA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ita" + "'", str42, "ita");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale59.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr_fr (FR_FR)" + "'", str61, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "italiano (Italia)" + "'", str66, "italiano (Italia)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "it-IT" + "'", str67, "it-IT");
        org.junit.Assert.assertNotNull(charSet68);
    }

    @Test
    public void test2327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2327");
        java.util.Locale locale3 = new java.util.Locale("Taiwan", "English", "\ud55c\uad6d\uc5b4");
        java.lang.String str4 = locale3.getDisplayLanguage();
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "taiwan" + "'", str4, "taiwan");
    }

    @Test
    public void test2328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2328");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale2 = new java.util.Locale("IT");
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale4.getDisplayCountry(locale7);
        java.util.Locale.setDefault(locale4);
        java.lang.String str11 = locale2.getDisplayCountry(locale4);
        java.lang.String str12 = locale2.getDisplayScript();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("IT");
        java.lang.String str16 = locale13.getDisplayVariant(locale15);
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale2.getDisplayCountry(locale15);
        boolean boolean19 = locale15.hasExtensions();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str17, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2329");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Business business5 = faker1.business();
        java.lang.String str7 = faker1.numerify("fr_FR");
        com.github.javafaker.Lorem lorem8 = faker1.lorem();
        com.github.javafaker.PhoneNumber phoneNumber9 = faker1.phoneNumber();
        com.github.javafaker.Internet internet10 = faker1.internet();
        java.lang.String str12 = faker1.letterify("\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        com.github.javafaker.Number number13 = faker1.number();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(business5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "fr_FR" + "'", str7, "fr_FR");
        org.junit.Assert.assertNotNull(lorem8);
        org.junit.Assert.assertNotNull(phoneNumber9);
        org.junit.Assert.assertNotNull(internet10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)" + "'", str12, "\u7fa9\u5927\u5229\u6587\u7fa9\u5927\u5229)");
        org.junit.Assert.assertNotNull(number13);
    }

    @Test
    public void test2330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2330");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder7 = builder2.setExtension('x', "zh");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test2331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2331");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        java.util.stream.LongStream longStream3 = random0.longs((long) (byte) 1);
        int int5 = random0.nextInt((int) (short) 100);
        double double6 = random0.nextGaussian();
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(longStream3);
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + 89 + "'", int5 == 89);
// flaky:         org.junit.Assert.assertTrue("'" + double6 + "' != '" + (-1.1773024353301154d) + "'", double6 == (-1.1773024353301154d));
    }

    @Test
    public void test2332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2332");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("zh-TW");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
    }

    @Test
    public void test2333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2333");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        java.util.stream.IntStream intStream15 = random0.ints(103, 669687679);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.IntStream intStream17 = random0.ints((long) (-1301663836));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[35, 3, -58, -9, -20, 17]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.72128916f + "'", float10 == 0.72128916f);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(intStream15);
    }

    @Test
    public void test2334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2334");
        java.util.Locale.Category category0 = java.util.Locale.Category.FORMAT;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.GERMANY;
        java.lang.String str4 = locale3.getDisplayName();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale3);
        java.util.Locale.setDefault(category0, locale3);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        boolean boolean12 = locale11.hasExtensions();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleAttributes();
        java.util.Locale.setDefault(category0, locale11);
        java.util.Locale locale15 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.setDefault(category0, locale15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: Can't set default locale to NULL");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.FORMAT + "'", category0.equals(java.util.Locale.Category.FORMAT));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "de_DE");
// flaky:         org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)" + "'", str4, "\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "de_DE");
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(strSet13);
    }

    @Test
    public void test2335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2335");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Country();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str28 = locale23.getExtension('a');
        java.util.Locale locale29 = locale23.stripExtensions();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale29);
        java.util.Locale.Builder builder31 = builder4.setLocale(locale29);
        java.util.Locale locale32 = builder31.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder31.setScript("Japanese");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Japanese [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
    }

    @Test
    public void test2336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2336");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strCollection22);
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList33);
        java.util.Collection<java.lang.String> strCollection36 = null;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, strCollection36);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList37);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap39 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList40 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap39);
        java.util.Locale.Builder builder41 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder43 = builder41.setRegion("");
        java.util.Locale.Builder builder44 = builder41.clearExtensions();
        java.util.Locale.Builder builder46 = builder41.setVariant("Italian");
        java.util.Locale locale47 = builder41.build();
        java.util.Set<java.lang.String> strSet48 = locale47.getUnicodeLocaleKeys();
        java.util.Locale locale49 = java.util.Locale.UK;
        java.lang.String str50 = locale49.getDisplayLanguage();
        java.lang.String str51 = locale47.getDisplayVariant(locale49);
        java.util.Locale.setDefault(locale49);
        java.util.Set<java.lang.String> strSet53 = locale49.getUnicodeLocaleAttributes();
        java.lang.String str54 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet53);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(languageRangeList40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "");
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "en_GB");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "\uc601\uc5b4" + "'", str50, "\uc601\uc5b4");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "Italian" + "'", str51, "Italian");
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNull(str54);
    }

    @Test
    public void test2337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2337");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Internet internet4 = faker1.internet();
        com.github.javafaker.Internet internet5 = faker1.internet();
        com.github.javafaker.DateAndTime dateAndTime6 = faker1.date();
        com.github.javafaker.Finance finance7 = faker1.finance();
        com.github.javafaker.Finance finance8 = faker1.finance();
        com.github.javafaker.Options options9 = faker1.options();
        com.github.javafaker.DateAndTime dateAndTime10 = faker1.date();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(internet4);
        org.junit.Assert.assertNotNull(internet5);
        org.junit.Assert.assertNotNull(dateAndTime6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(finance8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(dateAndTime10);
    }

    @Test
    public void test2338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2338");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder6 = builder3.setExtension('a', "IT");
        java.util.Locale.Builder builder9 = builder6.setExtension('a', "chinois");
        java.util.Locale locale10 = builder9.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder9.addUnicodeLocaleAttribute("\uc911\uad6d\uc5b4\uc911\uad6d)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ???????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
    }

    @Test
    public void test2339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2339");
        java.util.Random random1 = new java.util.Random((long) 1761283695);
    }

    @Test
    public void test2340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2340");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        boolean boolean2 = random0.nextBoolean();
        random0.setSeed((long) (-890288509));
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Code code6 = faker5.code();
        com.github.javafaker.Number number7 = faker5.number();
        java.lang.String str9 = faker5.numerify("\uc911\uad6d\uc5b4");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = faker5.resolve("\u82f1\u8a9e");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertNotNull(code6);
        org.junit.Assert.assertNotNull(number7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str9, "\uc911\uad6d\uc5b4");
    }

    @Test
    public void test2341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2341");
        java.util.Random random1 = new java.util.Random((long) 174669336);
        int int3 = random1.nextInt(351833871);
        java.util.stream.IntStream intStream4 = random1.ints();
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 292929931 + "'", int3 == 292929931);
        org.junit.Assert.assertNotNull(intStream4);
    }

    @Test
    public void test2342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2342");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.lang.String[] strArray15 = new java.lang.String[] { "ITA", "Italian", "fr_FR", "hi!" };
        java.util.ArrayList<java.lang.String> strList16 = new java.util.ArrayList<java.lang.String>();
        boolean boolean17 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList16, strArray15);
        java.lang.String str18 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList16);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap19 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList20 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap19);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap21 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList22 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap21);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap23 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList24 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList20, strMap23);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(strArray15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNull(str18);
        org.junit.Assert.assertNotNull(languageRangeList20);
        org.junit.Assert.assertNotNull(languageRangeList22);
        org.junit.Assert.assertNotNull(languageRangeList24);
    }

    @Test
    public void test2343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2343");
        java.util.Locale locale3 = new java.util.Locale("\u671d\u9c9c\u6587", "zh_TW", "\u4e2d\u6587");
        java.util.Set<java.lang.Character> charSet4 = locale3.getExtensionKeys();
        java.util.Locale.setDefault(locale3);
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\u671d\u9c9c\u6587\u4e2d\u6587");
        org.junit.Assert.assertNotNull(charSet4);
    }

    @Test
    public void test2344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2344");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("ITALY", strMap1);
        org.junit.Assert.assertNotNull(languageRangeList2);
    }

    @Test
    public void test2345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2345");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Business business4 = faker1.business();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.PhoneNumber phoneNumber6 = faker1.phoneNumber();
        java.lang.String str8 = faker1.bothify("cinese (Taiwan)");
        com.github.javafaker.Code code9 = faker1.code();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(business4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(phoneNumber6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "cinese (Taiwan)" + "'", str8, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(code9);
    }

    @Test
    public void test2346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2346");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        double double17 = random0.nextDouble();
        double double18 = random0.nextGaussian();
        boolean boolean19 = random0.nextBoolean();
        float float20 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[2, -118, -112, -84, -46, -117]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.38257975689769913d + "'", double14 == 0.38257975689769913d);
        org.junit.Assert.assertNotNull(doubleStream16);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.5277927120300263d + "'", double17 == 0.5277927120300263d);
// flaky:         org.junit.Assert.assertTrue("'" + double18 + "' != '" + 0.1571550455735188d + "'", double18 == 0.1571550455735188d);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
// flaky:         org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.34923428f + "'", float20 == 0.34923428f);
    }

    @Test
    public void test2347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2347");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles((long) (byte) 10);
        java.util.stream.IntStream intStream14 = random0.ints();
        boolean boolean15 = random0.nextBoolean();
        java.util.stream.IntStream intStream16 = random0.ints();
        java.util.stream.IntStream intStream19 = random0.ints((-909108607), 28819237);
        float float20 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-25, -41, 59, 96, -99, 62]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.8192456220999689d + "'", double9 == 0.8192456220999689d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-283349321) + "'", int11 == (-283349321));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(intStream14);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(intStream19);
// flaky:         org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.19534343f + "'", float20 == 0.19534343f);
    }

    @Test
    public void test2348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2348");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        boolean boolean2 = locale0.hasExtensions();
        java.util.Random random3 = new java.util.Random();
        byte[] byteArray10 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random3.nextBytes(byteArray10);
        java.util.stream.LongStream longStream12 = random3.longs();
        float float13 = random3.nextFloat();
        float float14 = random3.nextFloat();
        java.util.stream.DoubleStream doubleStream16 = random3.doubles(100L);
        java.util.stream.LongStream longStream17 = random3.longs();
        random3.setSeed((long) (short) 100);
        java.util.stream.IntStream intStream20 = random3.ints();
        java.util.stream.LongStream longStream22 = random3.longs(0L);
        com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker(locale0, random3);
        java.util.Locale.Category category24 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale25 = java.util.Locale.getDefault(category24);
        java.util.Locale locale26 = java.util.Locale.CANADA;
        java.util.Locale locale28 = new java.util.Locale("IT");
        java.lang.String str29 = locale26.getDisplayVariant(locale28);
        java.util.Locale.setDefault(category24, locale26);
        java.util.Locale locale31 = java.util.Locale.FRANCE;
        java.lang.String str32 = locale31.getVariant();
        java.lang.String str33 = locale31.getLanguage();
        java.lang.String str34 = locale31.getISO3Language();
        java.lang.String str35 = locale31.getDisplayVariant();
        java.util.Locale.setDefault(category24, locale31);
        java.lang.String str37 = locale0.getDisplayScript(locale31);
        java.lang.String str38 = locale0.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(byteArray10);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray10), "[33, 11, 100, -120, 105, 103]");
        org.junit.Assert.assertNotNull(longStream12);
// flaky:         org.junit.Assert.assertTrue("'" + float13 + "' != '" + 0.39111274f + "'", float13 == 0.39111274f);
// flaky:         org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.10055977f + "'", float14 == 0.10055977f);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(longStream17);
        org.junit.Assert.assertNotNull(intStream20);
        org.junit.Assert.assertNotNull(longStream22);
        org.junit.Assert.assertTrue("'" + category24 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category24.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale25);
// flaky:         org.junit.Assert.assertEquals(locale25.toString(), "fr_FR");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale28.toString(), "it");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr" + "'", str33, "fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fra" + "'", str34, "fra");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
    }

    @Test
    public void test2349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2349");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.lang.String str13 = locale1.getDisplayScript(locale9);
        java.util.Locale locale16 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str17 = locale1.getDisplayScript(locale16);
        java.util.Locale.Builder builder18 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder20 = builder18.setRegion("");
        java.util.Locale.Builder builder21 = builder18.clearExtensions();
        java.util.Locale.Builder builder22 = builder18.clear();
        java.util.Locale.Builder builder23 = builder22.clearExtensions();
        java.util.Locale locale24 = builder22.build();
        java.lang.String str25 = locale1.getDisplayName(locale24);
        java.util.Locale locale26 = java.util.Locale.PRC;
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.lang.String str28 = locale27.getDisplayLanguage();
        java.lang.String str29 = locale26.getDisplayVariant(locale27);
        java.util.Locale locale30 = java.util.Locale.KOREA;
        java.lang.String str31 = locale26.getDisplayName(locale30);
        java.lang.String str32 = locale30.getLanguage();
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker(locale30);
        java.lang.String str34 = locale30.getDisplayName();
        java.lang.String str35 = locale24.getDisplayScript(locale30);
        java.util.Set<java.lang.Character> charSet36 = locale30.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "italien" + "'", str28, "italien");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str31 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str31, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "ko" + "'", str32, "ko");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str34, "cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "" + "'", str35, "");
        org.junit.Assert.assertNotNull(charSet36);
    }

    @Test
    public void test2350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2350");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.removeUnicodeLocaleAttribute("ita");
        java.util.Locale locale11 = java.util.Locale.ITALIAN;
        java.lang.String str12 = locale11.getDisplayLanguage();
        java.util.Locale locale14 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale15 = java.util.Locale.KOREAN;
        java.lang.String str16 = locale14.getDisplayName(locale15);
        java.util.Locale locale17 = java.util.Locale.ITALY;
        java.util.Locale locale18 = locale17.stripExtensions();
        java.lang.String str19 = locale18.getISO3Country();
        java.lang.String str20 = locale18.getISO3Country();
        java.util.Locale locale22 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale23 = java.util.Locale.KOREAN;
        java.lang.String str24 = locale22.getDisplayName(locale23);
        java.lang.String str25 = locale18.getDisplayVariant(locale22);
        java.lang.String str26 = locale14.getDisplayScript(locale22);
        java.util.Locale locale29 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str30 = locale14.getDisplayScript(locale29);
        java.lang.String str31 = locale29.toLanguageTag();
        java.lang.String str32 = locale29.toLanguageTag();
        java.util.Locale.Builder builder33 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder35 = builder33.setRegion("");
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale locale38 = builder37.build();
        java.lang.String str39 = locale29.getDisplayName(locale38);
        java.lang.String str40 = locale11.getDisplayCountry(locale29);
        java.lang.String str42 = locale29.getExtension('x');
        java.util.Locale locale43 = java.util.Locale.JAPANESE;
        java.util.Locale locale46 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.util.Set<java.lang.Character> charSet56 = locale48.getExtensionKeys();
        java.lang.String str57 = locale48.getISO3Country();
        java.lang.String str58 = locale48.getISO3Language();
        java.lang.String str59 = locale46.getDisplayCountry(locale48);
        java.lang.String str60 = locale43.getDisplayLanguage(locale48);
        com.github.javafaker.Faker faker61 = new com.github.javafaker.Faker(locale43);
        java.lang.String str62 = locale29.getDisplayCountry(locale43);
        java.util.Locale.Builder builder63 = builder5.setLocale(locale43);
        java.util.Locale locale64 = builder63.build();
        java.util.Locale.Builder builder65 = builder63.clearExtensions();
        java.util.Locale.Builder builder67 = builder63.setLanguage("inglese");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder70 = builder67.setExtension(' ', "ITA");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key:   [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "allemand (Allemagne)" + "'", str7, "allemand (Allemagne)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "italien" + "'", str12, "italien");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "ITA" + "'", str19, "ITA");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals(locale29.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "" + "'", str30, "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "und" + "'", str31, "und");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "und" + "'", str32, "und");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "fr_fr (FR_FR)" + "'", str39, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertNull(str42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "ja");
        org.junit.Assert.assertEquals(locale46.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertNotNull(charSet56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "ITA" + "'", str57, "ITA");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ita" + "'", str58, "ita");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Francia" + "'", str59, "Francia");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "giapponese" + "'", str60, "giapponese");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "FR_FR" + "'", str62, "FR_FR");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(locale64);
        org.junit.Assert.assertEquals(locale64.toString(), "ja");
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
    }

    @Test
    public void test2351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2351");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\u4e2d\u6587");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test2352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2352");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Random random4 = new java.util.Random();
        boolean boolean5 = random4.nextBoolean();
        boolean boolean6 = random4.nextBoolean();
        java.util.stream.LongStream longStream7 = random4.longs();
        double double8 = random4.nextGaussian();
        double double9 = random4.nextDouble();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(locale0, random4);
        boolean boolean11 = random4.nextBoolean();
        int int12 = random4.nextInt();
        double double13 = random4.nextDouble();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "italien" + "'", str2, "italien");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
// flaky:         org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(longStream7);
// flaky:         org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.29952471262061126d + "'", double8 == 0.29952471262061126d);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.5526952193383408d + "'", double9 == 0.5526952193383408d);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1422576273 + "'", int12 == 1422576273);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.09481958741951901d + "'", double13 == 0.09481958741951901d);
    }

    @Test
    public void test2353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2353");
        java.util.Locale locale0 = java.util.Locale.JAPANESE;
        java.util.Locale locale3 = new java.util.Locale("Chinese", "fr");
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.util.Set<java.lang.Character> charSet13 = locale5.getExtensionKeys();
        java.lang.String str14 = locale5.getISO3Country();
        java.lang.String str15 = locale5.getISO3Language();
        java.lang.String str16 = locale3.getDisplayCountry(locale5);
        java.lang.String str17 = locale0.getDisplayLanguage(locale5);
        java.util.Set<java.lang.String> strSet18 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str19 = locale0.getScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ja");
        org.junit.Assert.assertEquals(locale3.toString(), "chinese_FR");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ita" + "'", str15, "ita");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Francia" + "'", str16, "Francia");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "giapponese" + "'", str17, "giapponese");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
    }

    @Test
    public void test2354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2354");
        java.util.Locale locale3 = new java.util.Locale("Italiano", "fr_fr_FR_FR", "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\ud55c\uad6d\uc5b4\ub300\ud55c\ubbfc\uad6d)");
    }

    @Test
    public void test2355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2355");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str9 = locale4.getExtension('a');
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String str15 = locale13.getISO3Country();
        java.lang.String str16 = locale13.getLanguage();
        java.util.Locale.Builder builder17 = builder2.setLocale(locale13);
        java.util.Locale.Builder builder19 = builder17.setVariant("");
        java.util.Locale.Builder builder21 = builder19.setLanguageTag("Italian");
        java.util.Locale.Builder builder23 = builder19.removeUnicodeLocaleAttribute("twn");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test2356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2356");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Code code7 = faker1.code();
        com.github.javafaker.Name name8 = faker1.name();
        com.github.javafaker.Options options9 = faker1.options();
        com.github.javafaker.Internet internet10 = faker1.internet();
        com.github.javafaker.Finance finance11 = faker1.finance();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(name8);
        org.junit.Assert.assertNotNull(options9);
        org.junit.Assert.assertNotNull(internet10);
        org.junit.Assert.assertNotNull(finance11);
    }

    @Test
    public void test2357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2357");
        java.util.Locale locale3 = new java.util.Locale("usa", "FR", "English");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getVariant();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getISO3Country();
        java.lang.String str10 = locale7.getLanguage();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.lang.String str17 = locale7.getDisplayVariant();
        java.lang.String str18 = locale4.getDisplayVariant(locale7);
        java.lang.String str19 = locale7.getVariant();
        java.lang.String str20 = locale3.getDisplayLanguage(locale7);
        org.junit.Assert.assertEquals(locale3.toString(), "usa_FR_English");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italiano" + "'", str16, "italiano");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "usa" + "'", str20, "usa");
    }

    @Test
    public void test2358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2358");
        java.util.Locale locale0 = java.util.Locale.CANADA;
        java.util.Locale locale2 = new java.util.Locale("IT");
        java.lang.String str3 = locale0.getDisplayVariant(locale2);
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.util.Locale locale5 = java.util.Locale.KOREAN;
        java.lang.String str6 = locale4.getDisplayCountry(locale5);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale4.getDisplayCountry(locale7);
        java.util.Locale.setDefault(locale4);
        java.lang.String str11 = locale2.getDisplayCountry(locale4);
        java.lang.String str12 = locale2.getDisplayScript();
        java.util.Locale locale13 = java.util.Locale.CANADA;
        java.util.Locale locale15 = new java.util.Locale("IT");
        java.lang.String str16 = locale13.getDisplayVariant(locale15);
        java.lang.String str17 = locale15.getDisplayLanguage();
        java.lang.String str18 = locale2.getDisplayCountry(locale15);
        java.util.Locale.Category category19 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale21 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale22 = java.util.Locale.KOREAN;
        java.lang.String str23 = locale21.getDisplayName(locale22);
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale25.getISO3Country();
        java.lang.String str27 = locale25.getISO3Country();
        java.util.Locale locale29 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale30 = java.util.Locale.KOREAN;
        java.lang.String str31 = locale29.getDisplayName(locale30);
        java.lang.String str32 = locale25.getDisplayVariant(locale29);
        java.lang.String str33 = locale21.getDisplayScript(locale29);
        java.util.Locale locale36 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str37 = locale21.getDisplayScript(locale36);
        java.util.Locale.setDefault(category19, locale36);
        java.util.Locale locale39 = java.util.Locale.PRC;
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.lang.String str41 = locale40.getDisplayLanguage();
        java.lang.String str42 = locale39.getDisplayVariant(locale40);
        java.util.Locale.setDefault(category19, locale40);
        java.util.Locale locale44 = java.util.Locale.KOREAN;
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayCountry(locale45);
        java.lang.String str47 = locale45.toLanguageTag();
        java.util.Locale.setDefault(category19, locale45);
        java.util.Set<java.lang.Character> charSet49 = locale45.getExtensionKeys();
        java.lang.String str50 = locale2.getDisplayScript(locale45);
        java.lang.String str51 = locale45.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale2.toString(), "it");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale15.toString(), "it");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str17, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertTrue("'" + category19 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category19.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ITA" + "'", str26, "ITA");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ITA" + "'", str27, "ITA");
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "" + "'", str32, "");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals(locale36.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
        org.junit.Assert.assertNotNull(locale39);
        org.junit.Assert.assertEquals(locale39.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Italian" + "'", str41, "Italian");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "" + "'", str42, "");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "ko");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "ko" + "'", str47, "ko");
        org.junit.Assert.assertNotNull(charSet49);
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "" + "'", str51, "");
    }

    @Test
    public void test2359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2359");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str4 = locale0.getDisplayName(locale3);
        java.util.Locale.setDefault(locale3);
        java.lang.String str6 = locale3.getVariant();
        java.lang.String str7 = locale3.getVariant();
        java.util.Locale.Category category8 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = java.util.Locale.getDefault(category8);
        java.util.Locale locale10 = java.util.Locale.getDefault(category8);
        java.util.Locale locale12 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.ITALY;
        java.util.Locale locale15 = locale14.stripExtensions();
        java.lang.String str16 = locale15.getISO3Country();
        java.lang.String str17 = locale15.getISO3Country();
        boolean boolean18 = locale15.hasExtensions();
        java.lang.String str19 = locale12.getDisplayVariant(locale15);
        java.util.Locale.setDefault(category8, locale15);
        java.lang.String str21 = locale3.getDisplayVariant(locale15);
        java.lang.String str22 = locale3.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Taiwan)" + "'", str4, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertTrue("'" + category8 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category8.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_FR_FR");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_FR_FR");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it_FR_FR" + "'", str22, "it_FR_FR");
    }

    @Test
    public void test2360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2360");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        boolean boolean4 = locale1.hasExtensions();
        java.lang.String str5 = locale1.getScript();
        java.lang.String str6 = locale1.getISO3Country();
        java.lang.String str7 = locale1.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it_IT" + "'", str7, "it_IT");
    }

    @Test
    public void test2361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2361");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        java.util.Random random17 = new java.util.Random();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random17.nextBytes(byteArray24);
        random0.nextBytes(byteArray24);
        java.util.stream.IntStream intStream29 = random0.ints((-1086029816), (-664244362));
        double double30 = random0.nextGaussian();
        int int31 = random0.nextInt();
        java.util.stream.IntStream intStream32 = random0.ints();
        int int34 = random0.nextInt(1110708842);
        long long35 = random0.nextLong();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[45, 37, -46, 12, -36, -36]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.104852110512785d + "'", double14 == 0.104852110512785d);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[117, -112, -20, -72, -127, 92]");
        org.junit.Assert.assertNotNull(intStream29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.08470966878718585d + "'", double30 == 0.08470966878718585d);
// flaky:         org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1839085544 + "'", int31 == 1839085544);
        org.junit.Assert.assertNotNull(intStream32);
// flaky:         org.junit.Assert.assertTrue("'" + int34 + "' != '" + 692168980 + "'", int34 == 692168980);
// flaky:         org.junit.Assert.assertTrue("'" + long35 + "' != '" + (-3019626502450509465L) + "'", long35 == (-3019626502450509465L));
    }

    @Test
    public void test2362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2362");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.IntStream intStream10 = random0.ints(0L);
        java.util.stream.IntStream intStream13 = random0.ints((int) (short) 10, (int) '4');
        java.util.stream.DoubleStream doubleStream15 = random0.doubles((long) 273070545);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-118, -24, 96, -51, -89, -106]");
        org.junit.Assert.assertNotNull(intStream10);
        org.junit.Assert.assertNotNull(intStream13);
        org.junit.Assert.assertNotNull(doubleStream15);
    }

    @Test
    public void test2363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2363");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.CANADA;
        java.util.Locale locale6 = new java.util.Locale("IT");
        java.lang.String str7 = locale4.getDisplayVariant(locale6);
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale8.getDisplayCountry(locale11);
        java.util.Locale.setDefault(locale8);
        java.lang.String str15 = locale6.getDisplayCountry(locale8);
        java.lang.String str16 = locale0.getDisplayVariant(locale8);
        java.lang.String str17 = locale0.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "italiano" + "'", str2, "italiano");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale6.toString(), "it");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "zh" + "'", str17, "zh");
    }

    @Test
    public void test2364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2364");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        java.util.stream.DoubleStream doubleStream16 = random0.doubles(0.4582760166551051d, (double) 100);
        byte[] byteArray19 = new byte[] { (byte) -1, (byte) 0 };
        random0.nextBytes(byteArray19);
        random0.setSeed((long) 1080234799);
        float float23 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream26 = random0.doubles((-1.152229759117048d), 0.9359228496308857d);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[110, 110, 70, 122, -86, 7]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.6135881052992382d + "'", double9 == 1.6135881052992382d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1160611436) + "'", int11 == (-1160611436));
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(byteArray19);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray19), "[-5, -94]");
        org.junit.Assert.assertTrue("'" + float23 + "' != '" + 0.8614682f + "'", float23 == 0.8614682f);
        org.junit.Assert.assertNotNull(doubleStream26);
    }

    @Test
    public void test2365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2365");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.lang.String str6 = locale4.getLanguage();
        java.util.Random random7 = new java.util.Random();
        boolean boolean8 = random7.nextBoolean();
        java.util.stream.LongStream longStream12 = random7.longs((long) 'a', (long) 'a', (long) 'u');
        java.util.stream.DoubleStream doubleStream13 = random7.doubles();
        java.util.stream.DoubleStream doubleStream16 = random7.doubles((double) 0.15157121f, (double) 0.89793515f);
        java.util.stream.LongStream longStream19 = random7.longs((long) (byte) 0, (long) 1790365215);
        java.util.stream.DoubleStream doubleStream21 = random7.doubles(100L);
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(locale4, random7);
        random7.setSeed((long) (-664244362));
        java.util.stream.DoubleStream doubleStream25 = random7.doubles();
        int int27 = random7.nextInt(1);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str2, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(doubleStream25);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 0 + "'", int27 == 0);
    }

    @Test
    public void test2366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2366");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale.Builder builder13 = builder10.setLanguage("Chinese");
        java.util.Locale.Builder builder15 = builder10.removeUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder17 = builder10.addUnicodeLocaleAttribute("zho");
        java.util.Locale.Builder builder18 = builder10.clear();
        java.util.Locale.Builder builder20 = builder10.setVariant("Germania");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder22 = builder10.setLanguageTag("\u4e2d\u6587\u4e2d\u570b)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test2367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2367");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale1.getDisplayVariant(locale5);
        java.util.Set<java.lang.Character> charSet9 = locale1.getExtensionKeys();
        java.lang.String str10 = locale1.getISO3Country();
        java.util.Locale locale12 = new java.util.Locale("hi! (ITALIANO)");
        java.lang.String str13 = locale1.getDisplayName(locale12);
        java.util.Locale locale15 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale16 = java.util.Locale.KOREAN;
        java.lang.String str17 = locale15.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale19.getISO3Country();
        java.util.Locale locale23 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale24 = java.util.Locale.KOREAN;
        java.lang.String str25 = locale23.getDisplayName(locale24);
        java.lang.String str26 = locale19.getDisplayVariant(locale23);
        java.lang.String str27 = locale15.getDisplayScript(locale23);
        java.util.Locale locale30 = new java.util.Locale("fr_FR", "fr_FR");
        java.util.Locale locale33 = new java.util.Locale("hi!", "italiano");
        java.lang.String str34 = locale30.getDisplayScript(locale33);
        java.util.Locale.Builder builder35 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder37 = builder35.setRegion("");
        java.util.Locale.Builder builder38 = builder35.clearExtensions();
        java.util.Locale.Builder builder40 = builder38.setLanguageTag("Italian");
        java.util.Locale.Builder builder42 = builder38.setRegion("");
        java.util.Locale.Builder builder44 = builder38.setLanguageTag("fr");
        java.util.Locale locale46 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str47 = locale46.getISO3Country();
        java.util.Locale locale48 = java.util.Locale.ITALY;
        java.util.Locale locale49 = locale48.stripExtensions();
        java.lang.String str50 = locale49.getISO3Country();
        java.lang.String str51 = locale49.getISO3Country();
        boolean boolean52 = locale49.hasExtensions();
        java.lang.String str53 = locale46.getDisplayVariant(locale49);
        java.util.Locale.Builder builder54 = builder38.setLocale(locale46);
        java.lang.String str55 = locale33.getDisplayVariant(locale46);
        java.lang.String str56 = locale15.getDisplayLanguage(locale46);
        java.lang.String str57 = locale15.getDisplayScript();
        java.lang.String str58 = locale12.getDisplayLanguage(locale15);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals(locale12.toString(), "hi! (italiano)");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Italian (Italy)" + "'", str13, "Italian (Italy)");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ITA" + "'", str21, "ITA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "" + "'", str25, "");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals(locale30.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals(locale33.toString(), "hi!_ITALIANO");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertEquals("'" + str51 + "' != '" + "ITA" + "'", str51, "ITA");
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "" + "'", str57, "");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "hi! (italiano)" + "'", str58, "hi! (italiano)");
    }

    @Test
    public void test2368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2368");
        java.util.Locale locale3 = new java.util.Locale("Italian (Italy)", "Italie", "tedesco");
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale3);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message: italian (italy)_ITALIE_tedesco could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "italian (italy)_ITALIE_tedesco");
    }

    @Test
    public void test2369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2369");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.util.Locale locale7 = locale5.stripExtensions();
        java.lang.String str8 = locale5.getDisplayCountry();
        java.util.Random random9 = new java.util.Random();
        boolean boolean10 = random9.nextBoolean();
        boolean boolean11 = random9.nextBoolean();
        double double12 = random9.nextDouble();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(locale5, random9);
        java.util.stream.IntStream intStream16 = random9.ints((-1187459325), 11398631);
        java.util.stream.DoubleStream doubleStream20 = random9.doubles((long) 203628591, (double) 0.09811783f, (double) 0.82086015f);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italia" + "'", str6, "Italia");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc774\ud0c8\ub9ac\uc544" + "'", str8, "\uc774\ud0c8\ub9ac\uc544");
// flaky:         org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
// flaky:         org.junit.Assert.assertTrue("'" + double12 + "' != '" + 0.2813741038143214d + "'", double12 == 0.2813741038143214d);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(doubleStream20);
    }

    @Test
    public void test2370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2370");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.stream.DoubleStream doubleStream11 = random0.doubles((long) 494295214);
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(random0);
        double double13 = random0.nextGaussian();
        java.util.stream.LongStream longStream17 = random0.longs((long) 1202573797, (-6694390248211326612L), (long) 1002980205);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream21 = random0.longs((-8908121981742280681L), (long) 111445387, (long) 817978834);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[21, 113, -24, -16, 125, 38]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream11);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 0.22657134280268468d + "'", double13 == 0.22657134280268468d);
        org.junit.Assert.assertNotNull(longStream17);
    }

    @Test
    public void test2371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2371");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Set<java.lang.String> strSet3 = locale1.getUnicodeLocaleKeys();
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale1.getDisplayCountry(locale5);
        java.util.Set<java.lang.String> strSet7 = locale5.getUnicodeLocaleAttributes();
        java.lang.String str9 = locale5.getUnicodeLocaleType("fr");
        java.lang.String str10 = locale5.getDisplayVariant();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(strSet3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italia" + "'", str6, "Italia");
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
    }

    @Test
    public void test2372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2372");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale2 = java.util.Locale.KOREAN;
        java.lang.String str3 = locale1.getDisplayName(locale2);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.lang.String str13 = locale1.getDisplayScript(locale9);
        java.util.Locale locale16 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str17 = locale1.getDisplayScript(locale16);
        java.lang.String str19 = locale16.getUnicodeLocaleType("fr");
        java.lang.String str20 = locale16.getVariant();
        java.lang.String str21 = locale16.getDisplayVariant();
        java.lang.String str22 = locale16.toString();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals(locale16.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "fr_fr_FR_FR" + "'", str22, "fr_fr_FR_FR");
    }

    @Test
    public void test2373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2373");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.ITALY;
        java.util.Locale locale4 = locale3.stripExtensions();
        java.lang.String str5 = locale4.getISO3Country();
        java.lang.String str6 = locale4.getISO3Country();
        boolean boolean7 = locale4.hasExtensions();
        java.lang.String str9 = locale4.getExtension('a');
        java.util.Locale locale10 = locale4.stripExtensions();
        java.util.Locale.Builder builder11 = builder2.setLocale(locale10);
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.lang.String str15 = locale13.getISO3Country();
        java.lang.String str16 = locale13.getLanguage();
        java.util.Locale.Builder builder17 = builder2.setLocale(locale13);
        java.util.Locale.Builder builder19 = builder2.setLanguageTag("tedesco");
        java.util.Locale.Builder builder21 = builder2.setLanguageTag("italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder23 = builder21.setLanguageTag("\u5fb7\u6587\u5fb7\u56fd)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: ?? (??) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(str9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "it" + "'", str16, "it");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test2374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2374");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("kor");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getExtension(' ');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key:  ");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "kor");
    }

    @Test
    public void test2375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2375");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        int int10 = random0.nextInt((int) 'u');
        double double11 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles();
        com.github.javafaker.Faker faker13 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.PhoneNumber phoneNumber14 = faker13.phoneNumber();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-28, -105, -111, 120, 47, -65]");
// flaky:         org.junit.Assert.assertTrue("'" + int10 + "' != '" + 40 + "'", int10 == 40);
// flaky:         org.junit.Assert.assertTrue("'" + double11 + "' != '" + (-0.26457097133143237d) + "'", double11 == (-0.26457097133143237d));
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(phoneNumber14);
    }

    @Test
    public void test2376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2376");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        int int12 = random0.nextInt();
        int int13 = random0.nextInt();
        java.util.stream.LongStream longStream14 = random0.longs();
        int int16 = random0.nextInt(522952910);
        int int17 = random0.nextInt();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[35, -7, 60, -122, -101, 30]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.1657266344727539d + "'", double9 == 0.1657266344727539d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 835576485 + "'", int11 == 835576485);
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1146052837 + "'", int12 == 1146052837);
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 643956712 + "'", int13 == 643956712);
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 41555947 + "'", int16 == 41555947);
// flaky:         org.junit.Assert.assertTrue("'" + int17 + "' != '" + (-1183735421) + "'", int17 == (-1183735421));
    }

    @Test
    public void test2377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2377");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.lang.String str1 = locale0.getISO3Country();
        java.util.Set<java.lang.Character> charSet2 = locale0.getExtensionKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "TWN" + "'", str1, "TWN");
        org.junit.Assert.assertNotNull(charSet2);
    }

    @Test
    public void test2378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2378");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale0.getDisplayCountry(locale2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-CN" + "'", str1, "zh-CN");
    }

    @Test
    public void test2379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2379");
        java.util.Locale locale2 = new java.util.Locale("fr_fr (FR_FR)", "zho");
        java.lang.String str3 = locale2.getLanguage();
        java.util.Set<java.lang.Character> charSet4 = locale2.getExtensionKeys();
        boolean boolean6 = locale2.equals((java.lang.Object) 0.5767402f);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_fr (fr_fr)_ZHO");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "fr_fr (fr_fr)" + "'", str3, "fr_fr (fr_fr)");
        org.junit.Assert.assertNotNull(charSet4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test2380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2380");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        java.util.Random random17 = new java.util.Random();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random17.nextBytes(byteArray24);
        random0.nextBytes(byteArray24);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream29 = random0.longs((long) 2070567786, (long) (-1028652108));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[104, 56, -98, 99, -93, -59]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + (-0.11897435329411983d) + "'", double14 == (-0.11897435329411983d));
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[71, -60, 11, 94, -117, -123]");
    }

    @Test
    public void test2381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2381");
        java.util.Locale locale3 = new java.util.Locale("Italian", "IT", "Italia");
        java.lang.String str4 = locale3.toString();
        org.junit.Assert.assertEquals(locale3.toString(), "italian_IT_Italia");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italian_IT_Italia" + "'", str4, "italian_IT_Italia");
    }

    @Test
    public void test2382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2382");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random0.doubles((-1.3525503855396068d), (double) 0.0f);
        float float4 = random0.nextFloat();
        java.util.stream.IntStream intStream5 = random0.ints();
        org.junit.Assert.assertNotNull(doubleStream3);
// flaky:         org.junit.Assert.assertTrue("'" + float4 + "' != '" + 0.0766269f + "'", float4 == 0.0766269f);
        org.junit.Assert.assertNotNull(intStream5);
    }

    @Test
    public void test2383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2383");
        java.util.Locale locale3 = new java.util.Locale("zho", "zho", "und");
        java.util.Locale locale4 = java.util.Locale.KOREAN;
        java.lang.String str5 = locale4.getVariant();
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getISO3Country();
        java.lang.String str10 = locale7.getLanguage();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.lang.String str17 = locale7.getDisplayVariant();
        java.lang.String str18 = locale4.getDisplayVariant(locale7);
        java.lang.String str19 = locale3.getDisplayName(locale7);
        java.lang.String str20 = locale7.getDisplayVariant();
        java.lang.String str21 = locale7.getDisplayScript();
        java.util.Random random22 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream24 = random22.doubles((long) 1);
        java.util.Random random25 = new java.util.Random();
        byte[] byteArray32 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random25.nextBytes(byteArray32);
        random22.nextBytes(byteArray32);
        double double35 = random22.nextGaussian();
        java.util.stream.LongStream longStream38 = random22.longs((-3792336259741422992L), (long) (-1989047807));
        java.util.stream.LongStream longStream40 = random22.longs((long) 1785693086);
        com.github.javafaker.Faker faker41 = new com.github.javafaker.Faker(locale7, random22);
        org.junit.Assert.assertEquals(locale3.toString(), "zho_ZHO_und");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italiano" + "'", str16, "italiano");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "zho (ZHO,und)" + "'", str19, "zho (ZHO,und)");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertNotNull(doubleStream24);
        org.junit.Assert.assertNotNull(byteArray32);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray32), "[-28, -114, 4, -50, -34, -2]");
// flaky:         org.junit.Assert.assertTrue("'" + double35 + "' != '" + 0.3876906607817795d + "'", double35 == 0.3876906607817795d);
        org.junit.Assert.assertNotNull(longStream38);
        org.junit.Assert.assertNotNull(longStream40);
    }

    @Test
    public void test2384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2384");
        java.util.Locale locale2 = new java.util.Locale("\u97d3\u6587", "ja");
        java.util.Locale locale3 = java.util.Locale.FRENCH;
        java.lang.String str4 = locale3.getDisplayScript();
        java.lang.String str5 = locale3.getISO3Country();
        java.lang.String str6 = locale3.getDisplayLanguage();
        java.lang.String str7 = locale2.getDisplayScript(locale3);
        org.junit.Assert.assertEquals(locale2.toString(), "\u97d3\u6587_JA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "fr");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
// flaky:         org.junit.Assert.assertEquals("'" + str6 + "' != '" + "French" + "'", str6, "French");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
    }

    @Test
    public void test2385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2385");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.setLanguage("TWN");
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.setLanguage("fr_fr_FR_FR");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: fr_fr_FR_FR [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "twn");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2386");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.getDefault(category0);
        java.util.Locale locale3 = java.util.Locale.PRC;
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.lang.String str5 = locale4.getDisplayLanguage();
        java.lang.String str6 = locale3.getDisplayVariant(locale4);
        java.util.Locale locale7 = java.util.Locale.KOREA;
        java.lang.String str8 = locale3.getDisplayName(locale7);
        java.lang.String str9 = locale7.getLanguage();
        java.util.Locale.setDefault(category0, locale7);
        java.util.Random random11 = new java.util.Random();
        byte[] byteArray18 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random11.nextBytes(byteArray18);
        java.util.stream.DoubleStream doubleStream20 = random11.doubles();
        java.util.stream.DoubleStream doubleStream22 = random11.doubles((long) 348768006);
        boolean boolean23 = random11.nextBoolean();
        int int25 = random11.nextInt(522952910);
        com.github.javafaker.Faker faker26 = new com.github.javafaker.Faker(locale7, random11);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
// flaky:         org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale2);
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "italiano" + "'", str5, "italiano");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "" + "'", str6, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str8 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str8, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ko" + "'", str9, "ko");
        org.junit.Assert.assertNotNull(byteArray18);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray18), "[-63, -28, 33, 64, -10, -39]");
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertNotNull(doubleStream22);
// flaky:         org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
// flaky:         org.junit.Assert.assertTrue("'" + int25 + "' != '" + 257103200 + "'", int25 == 257103200);
    }

    @Test
    public void test2387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2387");
        java.util.Locale locale3 = new java.util.Locale("", "en", "French");
        java.util.Locale locale4 = null;
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str5 = locale3.getDisplayCountry(locale4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals(locale3.toString(), "_EN_French");
    }

    @Test
    public void test2388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2388");
        java.util.Locale locale0 = java.util.Locale.ENGLISH;
        java.util.Random random1 = new java.util.Random();
        byte[] byteArray8 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random1.nextBytes(byteArray8);
        java.util.stream.LongStream longStream10 = random1.longs();
        float float11 = random1.nextFloat();
        float float12 = random1.nextFloat();
        java.util.stream.DoubleStream doubleStream14 = random1.doubles(100L);
        java.util.stream.LongStream longStream15 = random1.longs();
        int int16 = random1.nextInt();
        java.util.stream.DoubleStream doubleStream18 = random1.doubles((long) 819227471);
        boolean boolean19 = locale0.equals((java.lang.Object) 819227471);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "en");
        org.junit.Assert.assertNotNull(byteArray8);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray8), "[60, 78, -56, 77, -7, 15]");
        org.junit.Assert.assertNotNull(longStream10);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.37483913f + "'", float11 == 0.37483913f);
// flaky:         org.junit.Assert.assertTrue("'" + float12 + "' != '" + 0.39695942f + "'", float12 == 0.39695942f);
        org.junit.Assert.assertNotNull(doubleStream14);
        org.junit.Assert.assertNotNull(longStream15);
// flaky:         org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1417921219 + "'", int16 == 1417921219);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2389");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.stream.DoubleStream doubleStream11 = random0.doubles((long) 494295214);
        com.github.javafaker.Faker faker12 = new com.github.javafaker.Faker(random0);
        double double13 = random0.nextGaussian();
        java.util.stream.LongStream longStream14 = random0.longs();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-126, 127, -16, 48, -103, -53]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(doubleStream11);
// flaky:         org.junit.Assert.assertTrue("'" + double13 + "' != '" + 1.4028767522932912d + "'", double13 == 1.4028767522932912d);
        org.junit.Assert.assertNotNull(longStream14);
    }

    @Test
    public void test2390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2390");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Business business20 = faker19.business();
        com.github.javafaker.Finance finance21 = faker19.finance();
        com.github.javafaker.Book book22 = faker19.book();
        com.github.javafaker.DateAndTime dateAndTime23 = faker19.date();
        com.github.javafaker.Book book24 = faker19.book();
        com.github.javafaker.Code code25 = faker19.code();
        com.github.javafaker.Company company26 = faker19.company();
        java.lang.String str28 = faker19.numerify("cor\351en (Cor\351e du Sud)");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[85, -15, -94, 78, 0, -85]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.9422626f + "'", float15 == 0.9422626f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.33357894f + "'", float16 == 0.33357894f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(business20);
        org.junit.Assert.assertNotNull(finance21);
        org.junit.Assert.assertNotNull(book22);
        org.junit.Assert.assertNotNull(dateAndTime23);
        org.junit.Assert.assertNotNull(book24);
        org.junit.Assert.assertNotNull(code25);
        org.junit.Assert.assertNotNull(company26);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "cor\351en (Cor\351e du Sud)" + "'", str28, "cor\351en (Cor\351e du Sud)");
    }

    @Test
    public void test2391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2391");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        float float14 = random0.nextFloat();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-79, -73, 99, -48, -86, 84]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.2865960633170616d) + "'", double9 == (-0.2865960633170616d));
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-759431264) + "'", int11 == (-759431264));
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + float14 + "' != '" + 0.53771186f + "'", float14 == 0.53771186f);
    }

    @Test
    public void test2392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2392");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.setLanguage("IT");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category7);
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale17);
        java.util.Locale.Builder builder21 = builder19.setScript("");
        java.util.Locale.Builder builder23 = builder21.addUnicodeLocaleAttribute("CHN");
        java.util.Locale.Builder builder24 = builder21.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder26 = builder21.setLanguageTag("Chinese (China)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Invalid subtag: Chinese (China) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois" + "'", str15, "chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u53f0\u7063" + "'", str18, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test2393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2393");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("italiano");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = locale1.getUnicodeLocaleType("it_IT");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed Unicode locale key: it_IT");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "italiano");
    }

    @Test
    public void test2394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2394");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale1 = java.util.Locale.getDefault(category0);
        java.util.Locale locale2 = java.util.Locale.CANADA;
        java.util.Locale locale4 = new java.util.Locale("IT");
        java.lang.String str5 = locale2.getDisplayVariant(locale4);
        java.util.Locale.setDefault(category0, locale2);
        java.util.Locale locale7 = java.util.Locale.getDefault(category0);
        java.util.Locale locale8 = java.util.Locale.getDefault(category0);
        java.util.Locale locale9 = java.util.Locale.getDefault(category0);
        java.util.Random random10 = new java.util.Random();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random10.nextBytes(byteArray17);
        java.util.stream.LongStream longStream19 = random10.longs();
        float float20 = random10.nextFloat();
        java.util.stream.DoubleStream doubleStream22 = random10.doubles((long) (short) 10);
        double double23 = random10.nextDouble();
        java.util.Random random24 = new java.util.Random();
        byte[] byteArray31 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random24.nextBytes(byteArray31);
        double double33 = random24.nextGaussian();
        java.util.stream.DoubleStream doubleStream34 = random24.doubles();
        int int35 = random24.nextInt();
        java.util.stream.DoubleStream doubleStream37 = random24.doubles((long) (byte) 10);
        double double38 = random24.nextGaussian();
        java.util.Random random39 = new java.util.Random();
        byte[] byteArray46 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random39.nextBytes(byteArray46);
        random24.nextBytes(byteArray46);
        random10.nextBytes(byteArray46);
        java.util.stream.DoubleStream doubleStream50 = random10.doubles();
        com.github.javafaker.Faker faker51 = new com.github.javafaker.Faker(locale9, random10);
        java.lang.String str53 = faker51.bothify("\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "en_CA");
        org.junit.Assert.assertEquals(locale4.toString(), "it");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "en_CA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "en_CA");
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[-50, -63, -92, -121, -53, -120]");
        org.junit.Assert.assertNotNull(longStream19);
// flaky:         org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.020161808f + "'", float20 == 0.020161808f);
        org.junit.Assert.assertNotNull(doubleStream22);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.32247139733946595d + "'", double23 == 0.32247139733946595d);
        org.junit.Assert.assertNotNull(byteArray31);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray31), "[-27, 27, 92, -1, -9, -21]");
// flaky:         org.junit.Assert.assertTrue("'" + double33 + "' != '" + (-0.054653628753207215d) + "'", double33 == (-0.054653628753207215d));
        org.junit.Assert.assertNotNull(doubleStream34);
// flaky:         org.junit.Assert.assertTrue("'" + int35 + "' != '" + 666127910 + "'", int35 == 666127910);
        org.junit.Assert.assertNotNull(doubleStream37);
// flaky:         org.junit.Assert.assertTrue("'" + double38 + "' != '" + 0.6133464455401422d + "'", double38 == 0.6133464455401422d);
        org.junit.Assert.assertNotNull(byteArray46);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray46), "[-40, -101, 39, 46, -44, 103]");
        org.junit.Assert.assertNotNull(doubleStream50);
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)" + "'", str53, "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
    }

    @Test
    public void test2395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2395");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        random0.setSeed((long) '#');
        java.util.stream.DoubleStream doubleStream15 = random0.doubles(10L);
        int int16 = random0.nextInt();
        int int18 = random0.nextInt(1297162715);
        java.util.stream.IntStream intStream19 = random0.ints();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream23 = random0.longs((long) 37, (long) 2120155997, (-5108187057464061899L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-75, 108, -115, 65, 49, 6]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.24082977f + "'", float10 == 0.24082977f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.24734199f + "'", float11 == 0.24734199f);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1167411792) + "'", int16 == (-1167411792));
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 368164043 + "'", int18 == 368164043);
        org.junit.Assert.assertNotNull(intStream19);
    }

    @Test
    public void test2396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2396");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        long long14 = random0.nextLong();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) (short) 10);
        double double17 = random0.nextDouble();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream20 = random0.longs((long) 223630106, (long) 17);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[72, -114, 123, 56, 101, -118]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-0.4734542509965153d) + "'", double9 == (-0.4734542509965153d));
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-2068793637) + "'", int11 == (-2068793637));
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 7736590228892362481L + "'", long14 == 7736590228892362481L);
        org.junit.Assert.assertNotNull(doubleStream16);
// flaky:         org.junit.Assert.assertTrue("'" + double17 + "' != '" + 0.7371849147612782d + "'", double17 == 0.7371849147612782d);
    }

    @Test
    public void test2397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2397");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("ja_JP", 1.2200566870364447d);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: weight=1.2200566870364447");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2398");
        java.util.Locale locale2 = new java.util.Locale("twn", "\ud55c\uad6d\uc5b4,US)");
// flaky:         org.junit.Assert.assertEquals(locale2.toString(), "\ud55c\uad6d\uc5b4,US)");
    }

    @Test
    public void test2399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2399");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u82f1\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=??");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2400");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Options options5 = faker1.options();
        com.github.javafaker.Name name6 = faker1.name();
        java.lang.String str8 = faker1.bothify("FR_FR");
        com.github.javafaker.DateAndTime dateAndTime9 = faker1.date();
        com.github.javafaker.Company company10 = faker1.company();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "FR_FR" + "'", str8, "FR_FR");
        org.junit.Assert.assertNotNull(dateAndTime9);
        org.junit.Assert.assertNotNull(company10);
    }

    @Test
    public void test2401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2401");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        long long14 = random0.nextLong();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 273070545);
        java.util.stream.DoubleStream doubleStream17 = random0.doubles();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-14, 35, -35, 96, 117, -34]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.3447759413468934d) + "'", double9 == (-1.3447759413468934d));
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 445425590 + "'", int11 == 445425590);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 4663416173721111738L + "'", long14 == 4663416173721111738L);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(doubleStream17);
    }

    @Test
    public void test2402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2402");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder9 = builder8.clearExtensions();
        java.util.Locale.Builder builder12 = builder8.setExtension('x', "en");
        java.util.Locale.Builder builder13 = builder8.clearExtensions();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test2403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2403");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        int int12 = random0.nextInt();
        int int13 = random0.nextInt();
        long long14 = random0.nextLong();
        boolean boolean15 = random0.nextBoolean();
        java.util.stream.LongStream longStream19 = random0.longs(2628356612630464886L, (-1L), (long) 19522795);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream22 = random0.longs((long) 345510603, (-823830250151761400L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-68, -63, -98, -75, -81, -45]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + (-1.09824255771408d) + "'", double9 == (-1.09824255771408d));
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + (-1684673123) + "'", int11 == (-1684673123));
// flaky:         org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1088985166) + "'", int12 == (-1088985166));
// flaky:         org.junit.Assert.assertTrue("'" + int13 + "' != '" + 335800196 + "'", int13 == 335800196);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 3625305177907291500L + "'", long14 == 3625305177907291500L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(longStream19);
    }

    @Test
    public void test2404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2404");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("Stati Uniti");
        java.lang.String str2 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2405");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        java.util.stream.LongStream longStream5 = random0.longs((long) 'a', (long) 'a', (long) 'u');
        double double6 = random0.nextDouble();
        int int8 = random0.nextInt(74);
        java.util.stream.IntStream intStream9 = random0.ints();
        com.github.javafaker.Faker faker10 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Lorem lorem11 = faker10.lorem();
        com.github.javafaker.Lorem lorem12 = faker10.lorem();
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + false + "'", boolean1 == false);
        org.junit.Assert.assertNotNull(longStream5);
// flaky:         org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.9422216520038506d + "'", double6 == 0.9422216520038506d);
// flaky:         org.junit.Assert.assertTrue("'" + int8 + "' != '" + 15 + "'", int8 == 15);
        org.junit.Assert.assertNotNull(intStream9);
        org.junit.Assert.assertNotNull(lorem11);
        org.junit.Assert.assertNotNull(lorem12);
    }

    @Test
    public void test2406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2406");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.DoubleStream doubleStream9 = random0.doubles();
        java.util.Random random10 = new java.util.Random();
        byte[] byteArray17 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random10.nextBytes(byteArray17);
        double double19 = random10.nextGaussian();
        java.util.stream.DoubleStream doubleStream20 = random10.doubles();
        int int21 = random10.nextInt();
        java.util.stream.DoubleStream doubleStream23 = random10.doubles(0L);
        java.util.stream.DoubleStream doubleStream26 = random10.doubles(0.4582760166551051d, (double) 100);
        byte[] byteArray29 = new byte[] { (byte) -1, (byte) 0 };
        random10.nextBytes(byteArray29);
        random0.nextBytes(byteArray29);
        double double32 = random0.nextGaussian();
        int int33 = random0.nextInt();
        double double34 = random0.nextGaussian();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[112, 28, 12, -6, 66, 84]");
        org.junit.Assert.assertNotNull(doubleStream9);
        org.junit.Assert.assertNotNull(byteArray17);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray17), "[89, -84, 111, -111, 82, 106]");
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 1.3841443797239656d + "'", double19 == 1.3841443797239656d);
        org.junit.Assert.assertNotNull(doubleStream20);
// flaky:         org.junit.Assert.assertTrue("'" + int21 + "' != '" + 83601483 + "'", int21 == 83601483);
        org.junit.Assert.assertNotNull(doubleStream23);
        org.junit.Assert.assertNotNull(doubleStream26);
        org.junit.Assert.assertNotNull(byteArray29);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray29), "[-104, 39]");
// flaky:         org.junit.Assert.assertTrue("'" + double32 + "' != '" + 0.9306491671305506d + "'", double32 == 0.9306491671305506d);
// flaky:         org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1382831896) + "'", int33 == (-1382831896));
// flaky:         org.junit.Assert.assertTrue("'" + double34 + "' != '" + 0.9585058713290954d + "'", double34 == 0.9585058713290954d);
    }

    @Test
    public void test2407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2407");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.LongStream longStream13 = random0.longs((long) (byte) 1);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random0);
        java.util.stream.IntStream intStream16 = random0.ints((long) 1790365215);
        java.util.stream.DoubleStream doubleStream18 = random0.doubles(6591000923523946964L);
        double double19 = random0.nextDouble();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[12, 17, 46, -39, 46, -98]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.7554419f + "'", float10 == 0.7554419f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.6525861f + "'", float11 == 0.6525861f);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(intStream16);
        org.junit.Assert.assertNotNull(doubleStream18);
// flaky:         org.junit.Assert.assertTrue("'" + double19 + "' != '" + 0.23610719762185373d + "'", double19 == 0.23610719762185373d);
    }

    @Test
    public void test2408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2408");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        java.util.stream.LongStream longStream14 = random0.longs();
        int int15 = random0.nextInt();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream17 = random0.longs((long) (-559341648));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-61, -126, -61, -100, -98, 3]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.812835f + "'", float10 == 0.812835f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.6430493f + "'", float11 == 0.6430493f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + int15 + "' != '" + (-994386925) + "'", int15 == (-994386925));
    }

    @Test
    public void test2409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2409");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        java.lang.String str14 = locale2.getDisplayScript(locale10);
        java.util.Locale locale17 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str18 = locale2.getDisplayScript(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getISO3Country();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale32.getDisplayVariant(locale36);
        java.util.Set<java.lang.Character> charSet40 = locale32.getExtensionKeys();
        java.lang.String str41 = locale32.getISO3Country();
        java.lang.String str42 = locale32.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = locale44.getDisplayScript(locale52);
        java.util.Locale locale59 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str60 = locale44.getDisplayScript(locale59);
        java.lang.String str61 = locale59.getDisplayName();
        boolean boolean62 = locale59.hasExtensions();
        java.lang.String str63 = locale32.getDisplayScript(locale59);
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(category0, locale32);
        java.lang.String str66 = locale32.getDisplayName();
        java.lang.String str67 = locale32.getDisplayName();
        java.util.Locale locale68 = locale32.stripExtensions();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ITA" + "'", str33, "ITA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ITA" + "'", str34, "ITA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ITA" + "'", str41, "ITA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ita" + "'", str42, "ita");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale59.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr_fr (FR_FR)" + "'", str61, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "italiano (Italia)" + "'", str66, "italiano (Italia)");
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "italiano (Italia)" + "'", str67, "italiano (Italia)");
        org.junit.Assert.assertNotNull(locale68);
        org.junit.Assert.assertEquals(locale68.toString(), "it_IT");
    }

    @Test
    public void test2410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2410");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getLanguage();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale1);
        com.github.javafaker.Number number6 = faker5.number();
        com.github.javafaker.Color color7 = faker5.color();
        java.lang.String str9 = faker5.letterify("cinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertNotNull(number6);
        org.junit.Assert.assertNotNull(color7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "cinese (Taiwan)" + "'", str9, "cinese (Taiwan)");
    }

    @Test
    public void test2411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2411");
        java.util.Locale locale1 = new java.util.Locale("");
        java.lang.String str3 = locale1.getExtension('a');
        java.util.Set<java.lang.String> strSet4 = locale1.getUnicodeLocaleAttributes();
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Set<java.lang.String> strSet9 = locale6.getUnicodeLocaleKeys();
        boolean boolean10 = locale1.equals((java.lang.Object) strSet9);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertNull(str3);
        org.junit.Assert.assertNotNull(strSet4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
    }

    @Test
    public void test2412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2412");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Locale locale6 = java.util.Locale.forLanguageTag("");
        java.lang.String str7 = locale3.getDisplayLanguage(locale6);
        java.lang.String str8 = locale3.getISO3Language();
        java.util.Locale locale12 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str13 = locale3.getDisplayVariant(locale12);
        java.lang.String str14 = locale12.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "Chinese" + "'", str7, "Chinese");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "zho" + "'", str8, "zho");
        org.junit.Assert.assertEquals(locale12.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "cinese (taiwan) (fr)" + "'", str14, "cinese (taiwan) (fr)");
    }

    @Test
    public void test2413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2413");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        random0.setSeed((-687730097483691497L));
        boolean boolean19 = random0.nextBoolean();
        java.util.stream.LongStream longStream23 = random0.longs((long) 1215506122, (-5886521208700854189L), 3366384030408394606L);
        java.util.stream.LongStream longStream26 = random0.longs((long) (-2047701541), (long) (-2024664919));
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-85, 89, 113, 31, -103, 40]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.4148742868752293d + "'", double14 == 0.4148742868752293d);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNotNull(longStream23);
        org.junit.Assert.assertNotNull(longStream26);
    }

    @Test
    public void test2414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2414");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        java.lang.String str14 = locale2.getDisplayScript(locale10);
        java.util.Locale locale17 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str18 = locale2.getDisplayScript(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getISO3Country();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale32.getDisplayVariant(locale36);
        java.util.Set<java.lang.Character> charSet40 = locale32.getExtensionKeys();
        java.lang.String str41 = locale32.getISO3Country();
        java.lang.String str42 = locale32.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = locale44.getDisplayScript(locale52);
        java.util.Locale locale59 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str60 = locale44.getDisplayScript(locale59);
        java.lang.String str61 = locale59.getDisplayName();
        boolean boolean62 = locale59.hasExtensions();
        java.lang.String str63 = locale32.getDisplayScript(locale59);
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(category0, locale32);
        java.lang.String str66 = locale32.getVariant();
        java.util.Set<java.lang.Character> charSet67 = locale32.getExtensionKeys();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ITA" + "'", str33, "ITA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ITA" + "'", str34, "ITA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ITA" + "'", str41, "ITA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ita" + "'", str42, "ita");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale59.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr_fr (FR_FR)" + "'", str61, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertEquals("'" + str66 + "' != '" + "" + "'", str66, "");
        org.junit.Assert.assertNotNull(charSet67);
    }

    @Test
    public void test2415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2415");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale4 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category0, locale4);
        java.util.Locale locale6 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale7 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str8 = locale6.getDisplayLanguage(locale7);
        java.util.Locale.setDefault(category0, locale6);
        java.util.Locale locale12 = new java.util.Locale("fr_FR", "it");
        java.util.Locale.setDefault(category0, locale12);
        java.lang.String str14 = locale12.getDisplayScript();
        java.lang.String str15 = locale12.getDisplayVariant();
        java.util.Locale locale16 = java.util.Locale.ITALY;
        java.util.Locale locale17 = locale16.stripExtensions();
        java.lang.String str18 = locale17.getISO3Country();
        java.util.Locale locale19 = java.util.Locale.TAIWAN;
        java.lang.String str20 = locale17.getDisplayScript(locale19);
        java.util.Random random21 = new java.util.Random();
        byte[] byteArray28 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random21.nextBytes(byteArray28);
        java.util.stream.LongStream longStream30 = random21.longs();
        float float31 = random21.nextFloat();
        float float32 = random21.nextFloat();
        java.util.stream.DoubleStream doubleStream34 = random21.doubles(100L);
        com.github.javafaker.Faker faker35 = new com.github.javafaker.Faker(locale19, random21);
        com.github.javafaker.Faker faker36 = new com.github.javafaker.Faker(locale19);
        java.lang.String str37 = locale12.getDisplayVariant(locale19);
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale4.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "chinois" + "'", str8, "chinois");
        org.junit.Assert.assertEquals(locale12.toString(), "fr_fr_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ITA" + "'", str18, "ITA");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertNotNull(byteArray28);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray28), "[-22, -99, -91, -113, 78, 83]");
        org.junit.Assert.assertNotNull(longStream30);
// flaky:         org.junit.Assert.assertTrue("'" + float31 + "' != '" + 0.2845798f + "'", float31 == 0.2845798f);
// flaky:         org.junit.Assert.assertTrue("'" + float32 + "' != '" + 0.33286393f + "'", float32 == 0.33286393f);
        org.junit.Assert.assertNotNull(doubleStream34);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "" + "'", str37, "");
    }

    @Test
    public void test2416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2416");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale.Builder builder11 = builder3.setVariant("");
        java.util.Locale.Builder builder12 = builder3.clear();
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getISO3Country();
        java.lang.String str17 = locale14.toLanguageTag();
        java.util.Locale.Category category18 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category18, locale22);
        java.lang.String str24 = locale14.getDisplayCountry(locale22);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.lang.String str26 = locale25.getVariant();
        java.lang.String str27 = locale25.getVariant();
        boolean boolean28 = locale25.hasExtensions();
        java.lang.String str29 = locale22.getDisplayName(locale25);
        com.github.javafaker.Faker faker30 = new com.github.javafaker.Faker(locale25);
        java.util.Locale.Builder builder31 = builder3.setLocale(locale25);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder33 = builder3.removeUnicodeLocaleAttribute("United States");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: United States [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "it-IT" + "'", str17, "it-IT");
        org.junit.Assert.assertTrue("'" + category18 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category18.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale22.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "Italy" + "'", str24, "Italy");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "hi! (ITA)" + "'", str29, "hi! (ITA)");
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test2417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2417");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("German (Germany)");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
    }

    @Test
    public void test2418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2418");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.getLanguage();
        com.github.javafaker.Faker faker5 = new com.github.javafaker.Faker(locale1);
        com.github.javafaker.Number number6 = faker5.number();
        com.github.javafaker.Finance finance7 = faker5.finance();
        com.github.javafaker.PhoneNumber phoneNumber8 = faker5.phoneNumber();
        java.lang.String str10 = faker5.letterify("hi!");
        com.github.javafaker.Number number11 = faker5.number();
        com.github.javafaker.Code code12 = faker5.code();
        java.lang.Class<?> wildcardClass13 = code12.getClass();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertNotNull(number6);
        org.junit.Assert.assertNotNull(finance7);
        org.junit.Assert.assertNotNull(phoneNumber8);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "hi!" + "'", str10, "hi!");
        org.junit.Assert.assertNotNull(number11);
        org.junit.Assert.assertNotNull(code12);
        org.junit.Assert.assertNotNull(wildcardClass13);
    }

    @Test
    public void test2419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2419");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (short) 0);
        boolean boolean4 = languageRange2.equals((java.lang.Object) 984970940);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test2420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2420");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.util.Locale locale1 = java.util.Locale.KOREAN;
        java.lang.String str2 = locale0.getDisplayCountry(locale1);
        java.util.Locale locale3 = locale0.stripExtensions();
        java.lang.String str4 = locale3.getISO3Country();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
    }

    @Test
    public void test2421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2421");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("fr_fr (fr_fr)", (double) 0.7302126f);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=fr_fr (fr_fr)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2422");
        java.util.Locale locale2 = new java.util.Locale("IT", "Koreanisch");
        java.util.Set<java.lang.String> strSet3 = locale2.getUnicodeLocaleAttributes();
        org.junit.Assert.assertEquals(locale2.toString(), "it_KOREANISCH");
        org.junit.Assert.assertNotNull(strSet3);
    }

    @Test
    public void test2423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2423");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Finance finance5 = faker1.finance();
        com.github.javafaker.Lorem lorem6 = faker1.lorem();
        java.lang.String str8 = faker1.letterify("fr");
        java.lang.String str10 = faker1.numerify("Chinese");
        com.github.javafaker.Address address11 = faker1.address();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(finance5);
        org.junit.Assert.assertNotNull(lorem6);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "fr" + "'", str8, "fr");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Chinese" + "'", str10, "Chinese");
        org.junit.Assert.assertNotNull(address11);
    }

    @Test
    public void test2424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2424");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Internet internet4 = faker1.internet();
        com.github.javafaker.Code code5 = faker1.code();
        java.lang.String str7 = faker1.numerify("zho (ZHO,und)");
        java.lang.String str9 = faker1.bothify("hi!__ita");
        com.github.javafaker.Options options10 = faker1.options();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(internet4);
        org.junit.Assert.assertNotNull(code5);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "zho (ZHO,und)" + "'", str7, "zho (ZHO,und)");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "hi!__ita" + "'", str9, "hi!__ita");
        org.junit.Assert.assertNotNull(options10);
    }

    @Test
    public void test2425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2425");
        java.util.Random random1 = new java.util.Random((long) (-720507519));
        java.util.stream.IntStream intStream4 = random1.ints(0, 282464450);
        java.util.stream.LongStream longStream5 = random1.longs();
        java.util.stream.LongStream longStream7 = random1.longs((long) 273070545);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream11 = random1.longs((long) (-867821353), (long) 1417921219, (long) 1155099827);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(longStream5);
        org.junit.Assert.assertNotNull(longStream7);
    }

    @Test
    public void test2426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2426");
        java.util.Locale locale0 = java.util.Locale.SIMPLIFIED_CHINESE;
        java.lang.String str1 = locale0.toLanguageTag();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale2.getDisplayName();
        com.github.javafaker.Faker faker4 = new com.github.javafaker.Faker(locale2);
        java.lang.String str5 = locale0.getDisplayScript(locale2);
        java.util.Locale locale6 = locale0.stripExtensions();
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getCountry();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "zh-CN" + "'", str1, "zh-CN");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "German (Germany)" + "'", str3, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "zh_CN");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "CN" + "'", str8, "CN");
    }

    @Test
    public void test2427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2427");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        random0.setSeed((-687730097483691497L));
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.DoubleStream doubleStream22 = random0.doubles((long) (-1866363753), (double) 7811262224509581703L, (double) (-1513669189));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-43, 120, -17, 36, -113, -84]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.3602500572512468d + "'", double14 == 1.3602500572512468d);
        org.junit.Assert.assertNotNull(doubleStream16);
    }

    @Test
    public void test2428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2428");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale1.getDisplayVariant(locale5);
        java.util.Set<java.lang.String> strSet9 = locale5.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(strSet9);
    }

    @Test
    public void test2429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2429");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale3 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str4 = locale0.getDisplayName(locale3);
        java.lang.String str5 = locale0.getDisplayName();
        java.util.Locale.Builder builder6 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder8 = builder6.setRegion("");
        java.util.Locale.Builder builder9 = builder6.clearExtensions();
        java.util.Locale.Builder builder11 = builder6.setLanguage("Italy");
        java.util.Locale locale12 = java.util.Locale.ITALY;
        java.util.Locale locale13 = locale12.stripExtensions();
        java.lang.String str14 = locale13.getISO3Country();
        java.util.Locale locale15 = java.util.Locale.TAIWAN;
        java.lang.String str16 = locale13.getDisplayScript(locale15);
        java.lang.String str17 = locale13.getDisplayScript();
        java.lang.String str18 = locale13.getISO3Language();
        java.util.Locale.Builder builder19 = builder11.setLocale(locale13);
        java.lang.String str20 = locale13.getDisplayName();
        java.lang.String str21 = locale0.getDisplayLanguage(locale13);
        java.lang.String str22 = locale0.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale3.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "cinese (Taiwan)" + "'", str4, "cinese (Taiwan)");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "Chinese (Taiwan)" + "'", str5, "Chinese (Taiwan)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "ita" + "'", str18, "ita");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Italian (Italy)" + "'", str20, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "cinese" + "'", str21, "cinese");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "zh_TW" + "'", str22, "zh_TW");
    }

    @Test
    public void test2430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2430");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Options options4 = faker1.options();
        com.github.javafaker.Company company5 = faker1.company();
        com.github.javafaker.PhoneNumber phoneNumber6 = faker1.phoneNumber();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(options4);
        org.junit.Assert.assertNotNull(company5);
        org.junit.Assert.assertNotNull(phoneNumber6);
    }

    @Test
    public void test2431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2431");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("\u610f\u5927\u5229\u6587");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=????");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test2432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2432");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder7.clearExtensions();
        java.util.Locale.Builder builder9 = builder7.clear();
        java.util.Locale.Builder builder11 = builder7.removeUnicodeLocaleAttribute("DEU");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test2433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2433");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.numerify("Italian");
        java.lang.String str6 = faker1.bothify("italiano");
        com.github.javafaker.Code code7 = faker1.code();
        com.github.javafaker.Color color8 = faker1.color();
        com.github.javafaker.Company company9 = faker1.company();
        com.github.javafaker.Code code10 = faker1.code();
        java.lang.String str12 = faker1.bothify("\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        com.github.javafaker.Number number13 = faker1.number();
        com.github.javafaker.Color color14 = faker1.color();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Italian" + "'", str4, "Italian");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "italiano" + "'", str6, "italiano");
        org.junit.Assert.assertNotNull(code7);
        org.junit.Assert.assertNotNull(color8);
        org.junit.Assert.assertNotNull(company9);
        org.junit.Assert.assertNotNull(code10);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str12, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(number13);
        org.junit.Assert.assertNotNull(color14);
    }

    @Test
    public void test2434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2434");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder9 = builder3.setLanguageTag("fr");
        java.util.Locale.Builder builder10 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder12 = builder10.setRegion("");
        java.util.Locale.Builder builder13 = builder10.clearExtensions();
        java.util.Locale.Builder builder15 = builder10.setVariant("Italian");
        java.util.Locale locale16 = java.util.Locale.GERMANY;
        java.lang.String str17 = locale16.getDisplayName();
        java.util.Locale.Builder builder18 = builder15.setLocale(locale16);
        java.util.Locale locale19 = builder18.build();
        java.util.Locale.Builder builder20 = builder3.setLocale(locale19);
        java.util.Locale.Category category21 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale22 = java.util.Locale.getDefault(category21);
        java.util.Locale locale23 = java.util.Locale.getDefault(category21);
        java.util.Locale locale24 = java.util.Locale.getDefault(category21);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.getISO3Country();
        java.util.Set<java.lang.String> strSet28 = locale26.getUnicodeLocaleKeys();
        boolean boolean29 = locale26.hasExtensions();
        java.util.Locale.setDefault(category21, locale26);
        boolean boolean31 = locale26.hasExtensions();
        java.lang.String str32 = locale19.getDisplayCountry(locale26);
        com.github.javafaker.Faker faker33 = new com.github.javafaker.Faker(locale19);
        com.github.javafaker.Internet internet34 = faker33.internet();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "German (Germany)" + "'", str17, "German (Germany)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "de_DE");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + category21 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category21.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ITA" + "'", str27, "ITA");
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Germania" + "'", str32, "Germania");
        org.junit.Assert.assertNotNull(internet34);
    }

    @Test
    public void test2435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2435");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale8.getDisplayCountry(locale11);
        java.lang.String str14 = locale11.getCountry();
        java.lang.String str15 = locale1.getDisplayScript(locale11);
        java.util.Set<java.lang.String> strSet16 = locale1.getUnicodeLocaleAttributes();
        boolean boolean17 = locale1.hasExtensions();
        java.lang.String str18 = locale1.getDisplayCountry();
        java.lang.String str19 = locale1.getLanguage();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it-IT" + "'", str7, "it-IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "IT" + "'", str14, "IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(strSet16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italia" + "'", str18, "Italia");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "it" + "'", str19, "it");
    }

    @Test
    public void test2436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2436");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.DoubleStream doubleStream21 = random5.doubles((long) (byte) 1);
        java.util.stream.IntStream intStream23 = random5.ints(0L);
        java.util.stream.DoubleStream doubleStream24 = random5.doubles();
        double double25 = random5.nextDouble();
        boolean boolean26 = random5.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream29 = random5.longs((long) (-1403966851), (long) (-1545810632));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: bound must be greater than origin");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-17, 81, -43, -39, 68, 106]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.004013598f + "'", float15 == 0.004013598f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.9755305f + "'", float16 == 0.9755305f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(intStream23);
        org.junit.Assert.assertNotNull(doubleStream24);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + 0.2489370073175322d + "'", double25 == 0.2489370073175322d);
// flaky:         org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
    }

    @Test
    public void test2437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2437");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder8 = builder4.setScript("hi! (TWN)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: hi! (TWN) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
    }

    @Test
    public void test2438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2438");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Company company20 = faker19.company();
        com.github.javafaker.Book book21 = faker19.book();
        java.lang.String str23 = faker19.bothify("Deutschland");
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-21, -22, 63, -54, -31, 65]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.42795533f + "'", float15 == 0.42795533f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.1271925f + "'", float16 == 0.1271925f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(company20);
        org.junit.Assert.assertNotNull(book21);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "Deutschland" + "'", str23, "Deutschland");
    }

    @Test
    public void test2439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2439");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream12 = random0.doubles((long) (short) 10);
        java.util.stream.LongStream longStream13 = random0.longs();
        java.util.stream.DoubleStream doubleStream17 = random0.doubles(6448421598433570082L, (double) 0.28971082f, (double) 0.31204516f);
        long long18 = random0.nextLong();
        boolean boolean19 = random0.nextBoolean();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[60, -84, -2, -51, -62, 67]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.15616173f + "'", float10 == 0.15616173f);
        org.junit.Assert.assertNotNull(doubleStream12);
        org.junit.Assert.assertNotNull(longStream13);
        org.junit.Assert.assertNotNull(doubleStream17);
// flaky:         org.junit.Assert.assertTrue("'" + long18 + "' != '" + 7681277107117141509L + "'", long18 == 7681277107117141509L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test2440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2440");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder7 = builder5.addUnicodeLocaleAttribute("\u97d3\u6587");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ?? [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test2441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2441");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        random0.setSeed((-687730097483691497L));
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(random0);
        java.lang.Class<?> wildcardClass20 = faker19.getClass();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[69, 91, 6, 44, -34, 99]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 0.21343866111569526d + "'", double14 == 0.21343866111569526d);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(wildcardClass20);
    }

    @Test
    public void test2442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2442");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        random0.setSeed((long) '#');
        java.util.stream.DoubleStream doubleStream15 = random0.doubles(10L);
        int int16 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream20 = random0.doubles((long) (byte) 0, 0.137189618552387d, (double) 0.9698521f);
        java.util.stream.DoubleStream doubleStream21 = random0.doubles();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-60, 85, -107, -88, -102, -90]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.20763493f + "'", float10 == 0.20763493f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.834785f + "'", float11 == 0.834785f);
        org.junit.Assert.assertNotNull(doubleStream15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + (-1167411792) + "'", int16 == (-1167411792));
        org.junit.Assert.assertNotNull(doubleStream20);
        org.junit.Assert.assertNotNull(doubleStream21);
    }

    @Test
    public void test2443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2443");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        java.lang.String str14 = locale2.getDisplayScript(locale10);
        java.util.Locale locale17 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str18 = locale2.getDisplayScript(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale25 = java.util.Locale.KOREAN;
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayCountry(locale26);
        java.lang.String str28 = locale26.toLanguageTag();
        java.util.Locale.setDefault(category0, locale26);
        java.util.Locale locale30 = java.util.Locale.getDefault(category0);
        java.util.Locale locale31 = java.util.Locale.ITALY;
        java.util.Locale locale32 = locale31.stripExtensions();
        java.lang.String str33 = locale32.getISO3Country();
        java.lang.String str34 = locale32.getISO3Country();
        java.util.Locale locale36 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale37 = java.util.Locale.KOREAN;
        java.lang.String str38 = locale36.getDisplayName(locale37);
        java.lang.String str39 = locale32.getDisplayVariant(locale36);
        java.util.Set<java.lang.Character> charSet40 = locale32.getExtensionKeys();
        java.lang.String str41 = locale32.getISO3Country();
        java.lang.String str42 = locale32.getISO3Language();
        java.util.Locale locale44 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale45 = java.util.Locale.KOREAN;
        java.lang.String str46 = locale44.getDisplayName(locale45);
        java.util.Locale locale47 = java.util.Locale.ITALY;
        java.util.Locale locale48 = locale47.stripExtensions();
        java.lang.String str49 = locale48.getISO3Country();
        java.lang.String str50 = locale48.getISO3Country();
        java.util.Locale locale52 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale53 = java.util.Locale.KOREAN;
        java.lang.String str54 = locale52.getDisplayName(locale53);
        java.lang.String str55 = locale48.getDisplayVariant(locale52);
        java.lang.String str56 = locale44.getDisplayScript(locale52);
        java.util.Locale locale59 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str60 = locale44.getDisplayScript(locale59);
        java.lang.String str61 = locale59.getDisplayName();
        boolean boolean62 = locale59.hasExtensions();
        java.lang.String str63 = locale32.getDisplayScript(locale59);
        java.util.Locale.setDefault(locale32);
        java.util.Locale.setDefault(category0, locale32);
        java.util.Locale locale66 = java.util.Locale.getDefault(category0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str68 = locale66.getExtension('4');
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: Ill-formed extension key: 4");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "ko");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "ko" + "'", str28, "ko");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "ko");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ITA" + "'", str33, "ITA");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "ITA" + "'", str34, "ITA");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "");
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(charSet40);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ITA" + "'", str41, "ITA");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ita" + "'", str42, "ita");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale47);
        org.junit.Assert.assertEquals(locale47.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "ITA" + "'", str49, "ITA");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "ITA" + "'", str50, "ITA");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "");
        org.junit.Assert.assertNotNull(locale53);
        org.junit.Assert.assertEquals(locale53.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "" + "'", str55, "");
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
        org.junit.Assert.assertEquals(locale59.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "" + "'", str60, "");
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "fr_fr (FR_FR)" + "'", str61, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
        org.junit.Assert.assertNotNull(locale66);
        org.junit.Assert.assertEquals(locale66.toString(), "it_IT");
    }

    @Test
    public void test2444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2444");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random0);
        java.lang.String str16 = faker14.bothify("zho");
        com.github.javafaker.Code code17 = faker14.code();
        java.lang.String str19 = faker14.numerify("Deutschland");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = faker14.resolve("zh");
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-35, -1, 28, 112, 70, -26]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.17116827f + "'", float10 == 0.17116827f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.37058038f + "'", float11 == 0.37058038f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "zho" + "'", str16, "zho");
        org.junit.Assert.assertNotNull(code17);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "Deutschland" + "'", str19, "Deutschland");
    }

    @Test
    public void test2445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2445");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream11 = random0.longs((long) 10, (long) 'a');
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(1L);
        double double14 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream16 = random0.doubles((long) 0);
        java.util.Random random17 = new java.util.Random();
        byte[] byteArray24 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random17.nextBytes(byteArray24);
        random0.nextBytes(byteArray24);
        java.util.stream.IntStream intStream29 = random0.ints((-1086029816), (-664244362));
        double double30 = random0.nextDouble();
        java.util.stream.DoubleStream doubleStream33 = random0.doubles((double) (-609722428), (double) 0.9769582f);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-96, -31, 86, 109, -78, 28]");
        org.junit.Assert.assertNotNull(longStream11);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + double14 + "' != '" + 1.5329963961641586d + "'", double14 == 1.5329963961641586d);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(byteArray24);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray24), "[-25, -54, 124, -1, 80, 127]");
        org.junit.Assert.assertNotNull(intStream29);
// flaky:         org.junit.Assert.assertTrue("'" + double30 + "' != '" + 0.30864743710910447d + "'", double30 == 0.30864743710910447d);
        org.junit.Assert.assertNotNull(doubleStream33);
    }

    @Test
    public void test2446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2446");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.stream.DoubleStream doubleStream3 = random0.doubles();
        java.util.stream.IntStream intStream5 = random0.ints(0L);
        int int6 = random0.nextInt();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(intStream5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1785637004) + "'", int6 == (-1785637004));
    }

    @Test
    public void test2447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2447");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Number number3 = faker1.number();
        com.github.javafaker.Color color4 = faker1.color();
        com.github.javafaker.Options options5 = faker1.options();
        com.github.javafaker.Internet internet6 = faker1.internet();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(number3);
        org.junit.Assert.assertNotNull(color4);
        org.junit.Assert.assertNotNull(options5);
        org.junit.Assert.assertNotNull(internet6);
    }

    @Test
    public void test2448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2448");
        java.util.Locale locale1 = java.util.Locale.forLanguageTag("\ud55c\uad6d\uc5b4");
        java.lang.String str2 = locale1.getCountry();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker3 = new com.github.javafaker.Faker(locale1);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message:  could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
    }

    @Test
    public void test2449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2449");
        java.util.Random random1 = new java.util.Random(100L);
        java.util.stream.LongStream longStream2 = random1.longs();
        org.junit.Assert.assertNotNull(longStream2);
    }

    @Test
    public void test2450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2450");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Random random7 = new java.util.Random();
        byte[] byteArray14 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random7.nextBytes(byteArray14);
        java.util.stream.LongStream longStream16 = random7.longs();
        float float17 = random7.nextFloat();
        java.util.stream.LongStream longStream19 = random7.longs((long) 0);
        java.util.stream.LongStream longStream20 = random7.longs();
        boolean boolean21 = random7.nextBoolean();
        boolean boolean22 = random7.nextBoolean();
        // The following exception was thrown during execution in test generation
        try {
            com.github.javafaker.Faker faker23 = new com.github.javafaker.Faker(locale6, random7);
            org.junit.Assert.fail("Expected exception of type com.github.javafaker.service.LocaleDoesNotExistException; message:  could not be found, does not have a corresponding yaml file");
        } catch (com.github.javafaker.service.LocaleDoesNotExistException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(byteArray14);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray14), "[-12, 27, 67, -37, -112, -27]");
        org.junit.Assert.assertNotNull(longStream16);
// flaky:         org.junit.Assert.assertTrue("'" + float17 + "' != '" + 0.6744114f + "'", float17 == 0.6744114f);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(longStream20);
// flaky:         org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
// flaky:         org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test2451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2451");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale locale3 = java.util.Locale.getDefault();
        java.util.Locale.Builder builder4 = builder0.setLocale(locale3);
        java.util.Locale locale5 = builder0.build();
        java.util.Locale.Builder builder7 = builder0.setLanguage("IT");
        java.util.Locale.Builder builder8 = builder7.clear();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder10 = builder8.addUnicodeLocaleAttribute("Chinese (Taiwan)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: Chinese (Taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test2452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2452");
        java.util.Locale.LanguageRange languageRange1 = new java.util.Locale.LanguageRange("US");
    }

    @Test
    public void test2453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2453");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale.Category category5 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale9 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category5, locale9);
        java.lang.String str11 = locale1.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.KOREAN;
        java.lang.String str13 = locale12.getVariant();
        java.lang.String str14 = locale12.getVariant();
        boolean boolean15 = locale12.hasExtensions();
        java.lang.String str16 = locale9.getDisplayName(locale12);
        com.github.javafaker.Faker faker17 = new com.github.javafaker.Faker(locale12);
        com.github.javafaker.Color color18 = faker17.color();
        java.lang.String str20 = faker17.letterify("ITALY");
        com.github.javafaker.Internet internet21 = faker17.internet();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertTrue("'" + category5 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category5.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale9.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "Italy" + "'", str11, "Italy");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "hi! (ITA)" + "'", str16, "hi! (ITA)");
        org.junit.Assert.assertNotNull(color18);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITALY" + "'", str20, "ITALY");
        org.junit.Assert.assertNotNull(internet21);
    }

    @Test
    public void test2454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2454");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.GERMANY;
        java.lang.String str3 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale4 = java.util.Locale.ITALY;
        java.util.Locale locale5 = locale4.stripExtensions();
        java.lang.String str6 = locale5.getISO3Country();
        java.lang.String str7 = locale5.getISO3Country();
        java.util.Locale locale9 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale10 = java.util.Locale.KOREAN;
        java.lang.String str11 = locale9.getDisplayName(locale10);
        java.lang.String str12 = locale5.getDisplayVariant(locale9);
        java.util.Set<java.lang.Character> charSet13 = locale5.getExtensionKeys();
        java.lang.String str14 = locale5.getISO3Country();
        java.lang.String str15 = locale5.getISO3Language();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale21.getDisplayVariant(locale25);
        java.lang.String str29 = locale17.getDisplayScript(locale25);
        java.util.Locale locale32 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str33 = locale17.getDisplayScript(locale32);
        java.lang.String str34 = locale32.getDisplayName();
        boolean boolean35 = locale32.hasExtensions();
        java.lang.String str36 = locale5.getDisplayScript(locale32);
        java.util.Locale.setDefault(locale5);
        java.lang.String str38 = locale5.getLanguage();
        java.lang.String str39 = locale0.getDisplayName(locale5);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "Koreanisch" + "'", str3, "Koreanisch");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ITA" + "'", str6, "ITA");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(charSet13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "ITA" + "'", str14, "ITA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ita" + "'", str15, "ita");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ITA" + "'", str23, "ITA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale32.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr_fr (FR_FR)" + "'", str34, "fr_fr (FR_FR)");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "it" + "'", str38, "it");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "coreano" + "'", str39, "coreano");
    }

    @Test
    public void test2455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2455");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        java.util.stream.LongStream longStream3 = random0.longs((long) (byte) 1);
        boolean boolean4 = random0.nextBoolean();
        java.util.stream.LongStream longStream8 = random0.longs((long) 103, (long) (-1866363753), (long) (-1167411792));
        java.util.stream.IntStream intStream10 = random0.ints((long) 1196066542);
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(longStream3);
// flaky:         org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(longStream8);
        org.junit.Assert.assertNotNull(intStream10);
    }

    @Test
    public void test2456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2456");
        java.util.Random random0 = new java.util.Random();
        boolean boolean1 = random0.nextBoolean();
        java.util.stream.LongStream longStream3 = random0.longs((long) (byte) 1);
        // The following exception was thrown during execution in test generation
        try {
            java.util.stream.LongStream longStream5 = random0.longs((-4434234201614357539L));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: size must be non-negative");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + boolean1 + "' != '" + true + "'", boolean1 == true);
        org.junit.Assert.assertNotNull(longStream3);
    }

    @Test
    public void test2457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2457");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random0.doubles((-1.3525503855396068d), (double) 0.0f);
        java.util.stream.IntStream intStream4 = random0.ints();
        java.util.stream.LongStream longStream5 = random0.longs();
        float float6 = random0.nextFloat();
        java.util.stream.IntStream intStream8 = random0.ints((long) 93);
        double double9 = random0.nextGaussian();
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(intStream4);
        org.junit.Assert.assertNotNull(longStream5);
// flaky:         org.junit.Assert.assertTrue("'" + float6 + "' != '" + 0.3878771f + "'", float6 == 0.3878771f);
        org.junit.Assert.assertNotNull(intStream8);
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 1.1669444422257784d + "'", double9 == 1.1669444422257784d);
    }

    @Test
    public void test2458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2458");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (short) 0);
        double double3 = languageRange2.getWeight();
        java.util.Locale.LanguageRange[] languageRangeArray4 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList5 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean6 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList5, languageRangeArray4);
        java.lang.String[] strArray11 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList12 = new java.util.ArrayList<java.lang.String>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList12, strArray11);
        java.util.List<java.lang.String> strList14 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList12);
        java.util.Collection<java.lang.String> strCollection15 = null;
        java.util.List<java.lang.String> strList16 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, strCollection15);
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.FilteringMode filteringMode28 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList5, (java.util.Collection<java.lang.String>) strList27, filteringMode28);
        boolean boolean30 = languageRange2.equals((java.lang.Object) strList27);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertNotNull(languageRangeArray4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(strArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strList14);
        org.junit.Assert.assertNotNull(strList16);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertTrue("'" + filteringMode28 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode28.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test2459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2459");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder5.setVariant("");
        java.util.Locale locale8 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet9 = locale8.getExtensionKeys();
        java.util.Locale.Builder builder10 = builder5.setLocale(locale8);
        java.util.Locale.Builder builder11 = builder10.clear();
        java.util.Locale locale12 = builder10.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder15 = builder10.setExtension('4', "\uc911\uad6d\uc5b4");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed extension key: 4 [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "");
    }

    @Test
    public void test2460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2460");
        java.util.Locale.LanguageRange languageRange2 = new java.util.Locale.LanguageRange("IT", (double) (short) 0);
        double double3 = languageRange2.getWeight();
        java.lang.String str4 = languageRange2.getRange();
        double double5 = languageRange2.getWeight();
        double double6 = languageRange2.getWeight();
        double double7 = languageRange2.getWeight();
        double double8 = languageRange2.getWeight();
        java.lang.String str9 = languageRange2.getRange();
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.0d + "'", double3 == 0.0d);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it" + "'", str4, "it");
        org.junit.Assert.assertTrue("'" + double5 + "' != '" + 0.0d + "'", double5 == 0.0d);
        org.junit.Assert.assertTrue("'" + double6 + "' != '" + 0.0d + "'", double6 == 0.0d);
        org.junit.Assert.assertTrue("'" + double7 + "' != '" + 0.0d + "'", double7 == 0.0d);
        org.junit.Assert.assertTrue("'" + double8 + "' != '" + 0.0d + "'", double8 == 0.0d);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "it" + "'", str9, "it");
    }

    @Test
    public void test2461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2461");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Country();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str28 = locale23.getExtension('a');
        java.util.Locale locale29 = locale23.stripExtensions();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale29);
        java.util.Locale.Builder builder31 = builder4.setLocale(locale29);
        java.util.Locale locale32 = java.util.Locale.FRANCE;
        java.lang.String str33 = locale32.getVariant();
        java.util.Locale.Builder builder34 = builder31.setLocale(locale32);
        java.util.Locale locale35 = java.util.Locale.ITALY;
        java.util.Locale locale36 = locale35.stripExtensions();
        java.lang.String str37 = locale36.getISO3Country();
        java.util.Locale locale38 = java.util.Locale.TAIWAN;
        java.lang.String str39 = locale36.getDisplayScript(locale38);
        java.lang.String str40 = locale36.getDisplayScript();
        java.lang.String str41 = locale36.getISO3Language();
        java.util.Locale locale42 = java.util.Locale.ITALY;
        java.util.Locale locale43 = locale42.stripExtensions();
        java.lang.String str44 = locale43.getISO3Country();
        java.util.Locale locale45 = java.util.Locale.TAIWAN;
        java.lang.String str46 = locale43.getDisplayScript(locale45);
        java.util.Locale locale48 = java.util.Locale.forLanguageTag("");
        java.lang.String str49 = locale45.getDisplayLanguage(locale48);
        java.lang.String str50 = locale36.getDisplayVariant(locale45);
        java.util.Locale.Builder builder51 = builder31.setLocale(locale45);
        java.util.Locale locale52 = builder51.build();
        java.util.Locale locale56 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str57 = locale56.toLanguageTag();
        java.lang.String str58 = locale56.getScript();
        java.lang.String str59 = locale56.getDisplayName();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder60 = builder51.setLocale(locale56);
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: cinese (taiwan) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(locale35);
        org.junit.Assert.assertEquals(locale35.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale36);
        org.junit.Assert.assertEquals(locale36.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "ITA" + "'", str37, "ITA");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "" + "'", str40, "");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "ita" + "'", str41, "ita");
        org.junit.Assert.assertNotNull(locale42);
        org.junit.Assert.assertEquals(locale42.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "ITA" + "'", str44, "ITA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "" + "'", str46, "");
        org.junit.Assert.assertNotNull(locale48);
        org.junit.Assert.assertEquals(locale48.toString(), "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "Chinese" + "'", str49, "Chinese");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale56.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "x-lvariant-fr" + "'", str57, "x-lvariant-fr");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "cinese (taiwan) (fr)" + "'", str59, "cinese (taiwan) (fr)");
    }

    @Test
    public void test2462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2462");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Collection<java.util.Locale> localeCollection11 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList13 = java.util.Locale.LanguageRange.parse("deu");
        java.util.Locale locale14 = java.util.Locale.ITALIAN;
        java.lang.String str15 = locale14.getDisplayLanguage();
        java.util.Locale locale17 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale18 = java.util.Locale.KOREAN;
        java.lang.String str19 = locale17.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale26 = java.util.Locale.KOREAN;
        java.lang.String str27 = locale25.getDisplayName(locale26);
        java.lang.String str28 = locale21.getDisplayVariant(locale25);
        java.lang.String str29 = locale17.getDisplayScript(locale25);
        java.util.Locale locale32 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str33 = locale17.getDisplayScript(locale32);
        java.lang.String str34 = locale32.toLanguageTag();
        java.lang.String str35 = locale32.toLanguageTag();
        java.util.Locale.Builder builder36 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder38 = builder36.setRegion("");
        java.util.Locale.Builder builder40 = builder38.setRegion("");
        java.util.Locale locale41 = builder40.build();
        java.lang.String str42 = locale32.getDisplayName(locale41);
        java.lang.String str43 = locale14.getDisplayCountry(locale32);
        java.util.Set<java.lang.String> strSet44 = locale32.getUnicodeLocaleAttributes();
        java.util.Locale.LanguageRange[] languageRangeArray45 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList46 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList46, languageRangeArray45);
        java.lang.String[] strArray52 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList53 = new java.util.ArrayList<java.lang.String>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList53, strArray52);
        java.util.List<java.lang.String> strList55 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList53);
        java.util.Locale.LanguageRange[] languageRangeArray56 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList57 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean58 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList57, languageRangeArray56);
        java.lang.String[] strArray63 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList64 = new java.util.ArrayList<java.lang.String>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList64, strArray63);
        java.util.List<java.lang.String> strList66 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, (java.util.Collection<java.lang.String>) strList64);
        java.util.Collection<java.lang.String> strCollection67 = null;
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList57, strCollection67);
        java.lang.String str69 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, strCollection67);
        java.util.Locale.LanguageRange[] languageRangeArray70 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList71 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList71, languageRangeArray70);
        java.lang.String[] strArray77 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList78 = new java.util.ArrayList<java.lang.String>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList78, strArray77);
        java.util.List<java.lang.String> strList80 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, (java.util.Collection<java.lang.String>) strList78);
        java.util.Collection<java.lang.String> strCollection81 = null;
        java.util.List<java.lang.String> strList82 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList71, strCollection81);
        java.util.List<java.lang.String> strList83 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, (java.util.Collection<java.lang.String>) strList82);
        java.util.Collection<java.util.Locale> localeCollection84 = null;
        java.util.Locale.FilteringMode filteringMode85 = java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList86 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList46, localeCollection84, filteringMode85);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags(languageRangeList13, (java.util.Collection<java.lang.String>) strSet44, filteringMode85);
        java.util.List<java.util.Locale> localeList88 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection11, filteringMode85);
        java.util.Collection<java.lang.String> strCollection89 = null;
        java.util.List<java.lang.String> strList90 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection89);
        java.util.Locale locale91 = java.util.Locale.ITALY;
        java.util.Locale locale92 = locale91.stripExtensions();
        java.lang.String str93 = locale92.getISO3Country();
        java.util.Set<java.lang.String> strSet94 = locale92.getUnicodeLocaleKeys();
        java.util.Locale locale95 = java.util.Locale.ITALY;
        java.util.Locale locale96 = locale95.stripExtensions();
        java.lang.String str97 = locale92.getDisplayCountry(locale96);
        java.util.Set<java.lang.String> strSet98 = locale96.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strSet98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeList13);
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it");
// flaky:         org.junit.Assert.assertEquals("'" + str15 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str15, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "" + "'", str19, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ITA" + "'", str23, "ITA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertEquals(locale32.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "und" + "'", str34, "und");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "und" + "'", str35, "und");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "fr_fr (FR_FR)" + "'", str42, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "" + "'", str43, "");
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(languageRangeArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + true + "'", boolean54 == true);
        org.junit.Assert.assertNotNull(strList55);
        org.junit.Assert.assertNotNull(languageRangeArray56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(strArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + true + "'", boolean65 == true);
        org.junit.Assert.assertNotNull(strList66);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNull(str69);
        org.junit.Assert.assertNotNull(languageRangeArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(strArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + true + "'", boolean79 == true);
        org.junit.Assert.assertNotNull(strList80);
        org.junit.Assert.assertNotNull(strList82);
        org.junit.Assert.assertNotNull(strList83);
        org.junit.Assert.assertTrue("'" + filteringMode85 + "' != '" + java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES + "'", filteringMode85.equals(java.util.Locale.FilteringMode.MAP_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList86);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertNotNull(localeList88);
        org.junit.Assert.assertNotNull(strList90);
        org.junit.Assert.assertNotNull(locale91);
        org.junit.Assert.assertEquals(locale91.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale92);
        org.junit.Assert.assertEquals(locale92.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str93 + "' != '" + "ITA" + "'", str93, "ITA");
        org.junit.Assert.assertNotNull(strSet94);
        org.junit.Assert.assertNotNull(locale95);
        org.junit.Assert.assertEquals(locale95.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale96);
        org.junit.Assert.assertEquals(locale96.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str97 + "' != '" + "Italia" + "'", str97, "Italia");
        org.junit.Assert.assertNotNull(strSet98);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test2463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2463");
        java.util.Locale locale0 = java.util.Locale.GERMANY;
        java.util.Set<java.lang.Character> charSet1 = locale0.getExtensionKeys();
        java.util.Locale locale2 = java.util.Locale.FRANCE;
        java.lang.String str3 = locale2.getVariant();
        java.lang.String str4 = locale2.getLanguage();
        java.lang.String str5 = locale2.getISO3Language();
        java.lang.String str6 = locale0.getDisplayLanguage(locale2);
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.lang.String str10 = locale8.getISO3Country();
        java.lang.String str11 = locale8.toLanguageTag();
        java.util.Locale.Category category12 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale16 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category12, locale16);
        java.lang.String str18 = locale8.getDisplayCountry(locale16);
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale19.getVariant();
        java.lang.String str21 = locale19.getVariant();
        boolean boolean22 = locale19.hasExtensions();
        java.lang.String str23 = locale16.getDisplayName(locale19);
        java.lang.String str24 = locale16.getCountry();
        java.lang.String str25 = locale0.getDisplayName(locale16);
        java.lang.String str26 = locale0.getISO3Language();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "de_DE");
        org.junit.Assert.assertNotNull(charSet1);
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "fr_FR");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "fr" + "'", str4, "fr");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "fra" + "'", str5, "fra");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "allemand" + "'", str6, "allemand");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "it-IT" + "'", str11, "it-IT");
        org.junit.Assert.assertTrue("'" + category12 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category12.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale16.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italy" + "'", str18, "Italy");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "hi! (ITA)" + "'", str23, "hi! (ITA)");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "German (Germany)" + "'", str25, "German (Germany)");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "deu" + "'", str26, "deu");
    }

    @Test
    public void test2464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2464");
        java.util.Locale.LanguageRange[] languageRangeArray0 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList1 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean2 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList1, languageRangeArray0);
        java.lang.String[] strArray7 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList8 = new java.util.ArrayList<java.lang.String>();
        boolean boolean9 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList8, strArray7);
        java.util.List<java.lang.String> strList10 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList8);
        java.util.Locale.LanguageRange[] languageRangeArray11 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList12 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean13 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList12, languageRangeArray11);
        java.lang.String[] strArray18 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList19 = new java.util.ArrayList<java.lang.String>();
        boolean boolean20 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList19, strArray18);
        java.util.List<java.lang.String> strList21 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, (java.util.Collection<java.lang.String>) strList19);
        java.util.Collection<java.lang.String> strCollection22 = null;
        java.util.List<java.lang.String> strList23 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList12, strCollection22);
        java.lang.String str24 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strCollection22);
        java.util.Locale.LanguageRange[] languageRangeArray25 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList26 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean27 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList26, languageRangeArray25);
        java.lang.String[] strArray32 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList33 = new java.util.ArrayList<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList33, strArray32);
        java.util.List<java.lang.String> strList35 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList26, (java.util.Collection<java.lang.String>) strList33);
        java.util.Locale.FilteringMode filteringMode36 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList37 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, (java.util.Collection<java.lang.String>) strList33, filteringMode36);
        java.util.Locale.LanguageRange[] languageRangeArray38 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList39 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList39, languageRangeArray38);
        java.lang.String[] strArray45 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList46 = new java.util.ArrayList<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList46, strArray45);
        java.util.List<java.lang.String> strList48 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, (java.util.Collection<java.lang.String>) strList46);
        java.util.Collection<java.lang.String> strCollection49 = null;
        java.util.List<java.lang.String> strList50 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, strCollection49);
        java.util.Collection<java.util.Locale> localeCollection51 = null;
        java.util.Locale.LanguageRange[] languageRangeArray52 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList53 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean54 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList53, languageRangeArray52);
        java.lang.String[] strArray59 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList60 = new java.util.ArrayList<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList60, strArray59);
        java.util.List<java.lang.String> strList62 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList60);
        java.util.Locale.LanguageRange[] languageRangeArray63 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList64 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean65 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList64, languageRangeArray63);
        java.lang.String[] strArray70 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList71 = new java.util.ArrayList<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList71, strArray70);
        java.util.List<java.lang.String> strList73 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, (java.util.Collection<java.lang.String>) strList71);
        java.util.Collection<java.lang.String> strCollection74 = null;
        java.util.List<java.lang.String> strList75 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList64, strCollection74);
        java.lang.String str76 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, strCollection74);
        java.util.Locale.LanguageRange[] languageRangeArray77 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList78 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean79 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList78, languageRangeArray77);
        java.lang.String[] strArray84 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList85 = new java.util.ArrayList<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList85, strArray84);
        java.util.List<java.lang.String> strList87 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList78, (java.util.Collection<java.lang.String>) strList85);
        java.util.Locale.FilteringMode filteringMode88 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList89 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList53, (java.util.Collection<java.lang.String>) strList85, filteringMode88);
        java.util.List<java.util.Locale> localeList90 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList39, localeCollection51, filteringMode88);
        java.util.Locale locale91 = java.util.Locale.lookup((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, localeCollection51);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap92 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList93 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap92);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap94 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList95 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList1, strMap94);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap96 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList97 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList95, strMap96);
        java.util.Collection<java.lang.String> strCollection98 = null;
        java.util.List<java.lang.String> strList99 = java.util.Locale.filterTags(languageRangeList95, strCollection98);
        org.junit.Assert.assertNotNull(languageRangeArray0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strArray7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNotNull(strList10);
        org.junit.Assert.assertNotNull(languageRangeArray11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(strArray18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
        org.junit.Assert.assertNotNull(strList21);
        org.junit.Assert.assertNotNull(strList23);
        org.junit.Assert.assertNull(str24);
        org.junit.Assert.assertNotNull(languageRangeArray25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(strList35);
        org.junit.Assert.assertTrue("'" + filteringMode36 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode36.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList37);
        org.junit.Assert.assertNotNull(languageRangeArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(strList48);
        org.junit.Assert.assertNotNull(strList50);
        org.junit.Assert.assertNotNull(languageRangeArray52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(strList62);
        org.junit.Assert.assertNotNull(languageRangeArray63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(strList73);
        org.junit.Assert.assertNotNull(strList75);
        org.junit.Assert.assertNull(str76);
        org.junit.Assert.assertNotNull(languageRangeArray77);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(strList87);
        org.junit.Assert.assertTrue("'" + filteringMode88 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode88.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList89);
        org.junit.Assert.assertNotNull(localeList90);
        org.junit.Assert.assertNull(locale91);
        org.junit.Assert.assertNotNull(languageRangeList93);
        org.junit.Assert.assertNotNull(languageRangeList95);
        org.junit.Assert.assertNotNull(languageRangeList97);
        org.junit.Assert.assertNotNull(strList99);
    }

    @Test
    public void test2465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2465");
        java.util.Locale locale0 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Random random1 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream3 = random1.doubles((long) 1);
        java.util.Random random4 = new java.util.Random();
        byte[] byteArray11 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random4.nextBytes(byteArray11);
        random1.nextBytes(byteArray11);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(locale0, random1);
        com.github.javafaker.DateAndTime dateAndTime15 = faker14.date();
        com.github.javafaker.Company company16 = faker14.company();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(doubleStream3);
        org.junit.Assert.assertNotNull(byteArray11);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray11), "[-80, -63, 21, -103, -83, -70]");
        org.junit.Assert.assertNotNull(dateAndTime15);
        org.junit.Assert.assertNotNull(company16);
    }

    @Test
    public void test2466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2466");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random0);
        java.lang.String str16 = faker14.letterify("Italia");
        com.github.javafaker.Lorem lorem17 = faker14.lorem();
        com.github.javafaker.Finance finance18 = faker14.finance();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[42, -107, -53, -48, 41, -95]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.8808198f + "'", float10 == 0.8808198f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.8847483f + "'", float11 == 0.8847483f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italia" + "'", str16, "Italia");
        org.junit.Assert.assertNotNull(lorem17);
        org.junit.Assert.assertNotNull(finance18);
    }

    @Test
    public void test2467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2467");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("IT", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList11);
        java.util.Collection<java.lang.String> strCollection14 = null;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strCollection14);
        java.util.Collection<java.util.Locale> localeCollection16 = null;
        java.util.Locale.LanguageRange[] languageRangeArray17 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList18 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean19 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList18, languageRangeArray17);
        java.lang.String[] strArray24 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList25 = new java.util.ArrayList<java.lang.String>();
        boolean boolean26 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList25, strArray24);
        java.util.List<java.lang.String> strList27 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList25);
        java.util.Locale.LanguageRange[] languageRangeArray28 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList29 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean30 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList29, languageRangeArray28);
        java.lang.String[] strArray35 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.util.List<java.lang.String> strList38 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, (java.util.Collection<java.lang.String>) strList36);
        java.util.Collection<java.lang.String> strCollection39 = null;
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList29, strCollection39);
        java.lang.String str41 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, strCollection39);
        java.util.Locale.LanguageRange[] languageRangeArray42 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList43 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean44 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList43, languageRangeArray42);
        java.lang.String[] strArray49 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList50 = new java.util.ArrayList<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList50, strArray49);
        java.util.List<java.lang.String> strList52 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList43, (java.util.Collection<java.lang.String>) strList50);
        java.util.Locale.FilteringMode filteringMode53 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList18, (java.util.Collection<java.lang.String>) strList50, filteringMode53);
        java.util.List<java.util.Locale> localeList55 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, localeCollection16, filteringMode53);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap56 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList57 = java.util.Locale.LanguageRange.mapEquivalents((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strMap56);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap58 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList59 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList57, strMap58);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap60 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList61 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList59, strMap60);
        java.util.Locale locale65 = new java.util.Locale("hi!", "", "ITA");
        boolean boolean66 = locale65.hasExtensions();
        java.util.Set<java.lang.String> strSet67 = locale65.getUnicodeLocaleAttributes();
        java.util.List<java.lang.String> strList68 = java.util.Locale.filterTags(languageRangeList59, (java.util.Collection<java.lang.String>) strSet67);
        java.util.List<java.lang.String> strList69 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList68);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap70 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList71 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap70);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap72 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList73 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap72);
        java.util.Locale locale74 = java.util.Locale.KOREAN;
        java.lang.String str75 = locale74.getVariant();
        java.util.Locale locale76 = java.util.Locale.GERMANY;
        java.lang.String str77 = locale74.getDisplayLanguage(locale76);
        java.util.Set<java.lang.String> strSet78 = locale76.getUnicodeLocaleKeys();
        java.util.Locale locale79 = locale76.stripExtensions();
        java.lang.String str80 = locale76.getISO3Language();
        java.util.Locale locale82 = java.util.Locale.forLanguageTag("hi!");
        java.lang.String str83 = locale82.getISO3Country();
        java.util.Locale locale84 = java.util.Locale.ITALY;
        java.util.Locale locale85 = locale84.stripExtensions();
        java.lang.String str86 = locale85.getISO3Country();
        java.lang.String str87 = locale85.getISO3Country();
        boolean boolean88 = locale85.hasExtensions();
        java.lang.String str89 = locale82.getDisplayVariant(locale85);
        java.lang.String str90 = locale76.getDisplayVariant(locale85);
        java.util.Set<java.lang.String> strSet91 = locale76.getUnicodeLocaleKeys();
        java.lang.String str92 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet91);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(strArray24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(strList27);
        org.junit.Assert.assertNotNull(languageRangeArray28);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNotNull(strList38);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNull(str41);
        org.junit.Assert.assertNotNull(languageRangeArray42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(strList52);
        org.junit.Assert.assertTrue("'" + filteringMode53 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode53.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertNotNull(localeList55);
        org.junit.Assert.assertNotNull(languageRangeList57);
        org.junit.Assert.assertNotNull(languageRangeList59);
        org.junit.Assert.assertNotNull(languageRangeList61);
        org.junit.Assert.assertEquals(locale65.toString(), "hi!__ITA");
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(strSet67);
        org.junit.Assert.assertNotNull(strList68);
        org.junit.Assert.assertNotNull(strList69);
        org.junit.Assert.assertNotNull(languageRangeList71);
        org.junit.Assert.assertNotNull(languageRangeList73);
        org.junit.Assert.assertNotNull(locale74);
        org.junit.Assert.assertEquals(locale74.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str75 + "' != '" + "" + "'", str75, "");
        org.junit.Assert.assertNotNull(locale76);
        org.junit.Assert.assertEquals(locale76.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str77 + "' != '" + "Koreanisch" + "'", str77, "Koreanisch");
        org.junit.Assert.assertNotNull(strSet78);
        org.junit.Assert.assertNotNull(locale79);
        org.junit.Assert.assertEquals(locale79.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str80 + "' != '" + "deu" + "'", str80, "deu");
        org.junit.Assert.assertNotNull(locale82);
        org.junit.Assert.assertEquals(locale82.toString(), "");
        org.junit.Assert.assertEquals("'" + str83 + "' != '" + "" + "'", str83, "");
        org.junit.Assert.assertNotNull(locale84);
        org.junit.Assert.assertEquals(locale84.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale85);
        org.junit.Assert.assertEquals(locale85.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str86 + "' != '" + "ITA" + "'", str86, "ITA");
        org.junit.Assert.assertEquals("'" + str87 + "' != '" + "ITA" + "'", str87, "ITA");
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
        org.junit.Assert.assertEquals("'" + str89 + "' != '" + "" + "'", str89, "");
        org.junit.Assert.assertEquals("'" + str90 + "' != '" + "" + "'", str90, "");
        org.junit.Assert.assertNotNull(strSet91);
        org.junit.Assert.assertNull(str92);
    }

    @Test
    public void test2468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2468");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.lang.String str8 = locale1.getDisplayVariant(locale5);
        java.util.Locale locale9 = java.util.Locale.GERMANY;
        java.lang.String str10 = locale9.getDisplayScript();
        java.lang.String str11 = locale5.getDisplayCountry(locale9);
        java.util.Locale locale12 = java.util.Locale.PRC;
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.lang.String str14 = locale13.getDisplayLanguage();
        java.lang.String str15 = locale12.getDisplayVariant(locale13);
        java.util.Locale locale16 = java.util.Locale.KOREA;
        java.lang.String str17 = locale12.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.JAPANESE;
        java.lang.String str19 = locale12.getDisplayName(locale18);
        java.util.Locale locale20 = java.util.Locale.ITALY;
        java.util.Locale locale21 = locale20.stripExtensions();
        java.lang.String str22 = locale21.getISO3Country();
        java.lang.String str23 = locale21.getISO3Country();
        java.lang.String str24 = locale21.toLanguageTag();
        java.util.Locale.Category category25 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale29 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category25, locale29);
        java.lang.String str31 = locale21.getDisplayCountry(locale29);
        java.lang.String str32 = locale18.getDisplayName(locale21);
        java.lang.String str33 = locale21.getCountry();
        java.lang.String str34 = locale21.getLanguage();
        java.util.Set<java.lang.Character> charSet35 = locale21.getExtensionKeys();
        java.lang.String str36 = locale9.getDisplayScript(locale21);
        java.lang.String str37 = locale21.toString();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Italian" + "'", str14, "Italian");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str17 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str17, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "ja");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)" + "'", str19, "\u4e2d\u56fd\u8a9e\u4e2d\u83ef\u4eba\u6c11\u5171\u548c\u56fd)");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "ITA" + "'", str22, "ITA");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "ITA" + "'", str23, "ITA");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "it-IT" + "'", str24, "it-IT");
        org.junit.Assert.assertTrue("'" + category25 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category25.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale29.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Italy" + "'", str31, "Italy");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "giapponese" + "'", str32, "giapponese");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "IT" + "'", str33, "IT");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "it" + "'", str34, "it");
        org.junit.Assert.assertNotNull(charSet35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "" + "'", str36, "");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "it_IT" + "'", str37, "it_IT");
    }

    @Test
    public void test2469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2469");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale locale6 = java.util.Locale.GERMANY;
        java.lang.String str7 = locale6.getDisplayName();
        java.util.Locale.Builder builder8 = builder5.setLocale(locale6);
        java.util.Locale.Builder builder10 = builder5.addUnicodeLocaleAttribute("ITA");
        java.util.Locale.Builder builder11 = builder10.clearExtensions();
        java.util.Locale.Builder builder12 = builder11.clear();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "German (Germany)" + "'", str7, "German (Germany)");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test2470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2470");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.util.Locale locale4 = java.util.Locale.KOREA;
        java.lang.String str5 = locale0.getDisplayName(locale4);
        java.lang.String str6 = locale4.getLanguage();
        java.util.Random random7 = new java.util.Random();
        boolean boolean8 = random7.nextBoolean();
        java.util.stream.LongStream longStream12 = random7.longs((long) 'a', (long) 'a', (long) 'u');
        java.util.stream.DoubleStream doubleStream13 = random7.doubles();
        java.util.stream.DoubleStream doubleStream16 = random7.doubles((double) 0.15157121f, (double) 0.89793515f);
        java.util.stream.LongStream longStream19 = random7.longs((long) (byte) 0, (long) 1790365215);
        java.util.stream.DoubleStream doubleStream21 = random7.doubles(100L);
        com.github.javafaker.Faker faker22 = new com.github.javafaker.Faker(locale4, random7);
        double double23 = random7.nextGaussian();
        java.util.stream.LongStream longStream25 = random7.longs((long) 10647274);
        java.util.stream.LongStream longStream26 = random7.longs();
        com.github.javafaker.Faker faker27 = new com.github.javafaker.Faker(random7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "Italian" + "'", str2, "Italian");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "ko_KR");
// flaky:         org.junit.Assert.assertEquals("'" + str5 + "' != '" + "\uc911\uad6d\uc5b4\uc911\uad6d)" + "'", str5, "\uc911\uad6d\uc5b4\uc911\uad6d)");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "ko" + "'", str6, "ko");
// flaky:         org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(longStream12);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertNotNull(doubleStream16);
        org.junit.Assert.assertNotNull(longStream19);
        org.junit.Assert.assertNotNull(doubleStream21);
// flaky:         org.junit.Assert.assertTrue("'" + double23 + "' != '" + 0.2244775542572039d + "'", double23 == 0.2244775542572039d);
        org.junit.Assert.assertNotNull(longStream25);
        org.junit.Assert.assertNotNull(longStream26);
    }

    @Test
    public void test2471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2471");
        java.util.Locale locale2 = new java.util.Locale("fr_FR", "fr_FR");
        java.util.Locale locale3 = java.util.Locale.JAPAN;
        java.util.Locale locale5 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale6 = java.util.Locale.KOREAN;
        java.lang.String str7 = locale5.getDisplayName(locale6);
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale5.getDisplayScript(locale13);
        java.util.Locale locale20 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str21 = locale5.getDisplayScript(locale20);
        java.lang.String str22 = locale20.toLanguageTag();
        java.lang.String str23 = locale20.toLanguageTag();
        java.util.Locale.Builder builder24 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder26 = builder24.setRegion("");
        java.util.Locale.Builder builder28 = builder26.setRegion("");
        java.util.Locale locale29 = builder28.build();
        java.lang.String str30 = locale20.getDisplayName(locale29);
        java.lang.String str31 = locale20.getDisplayCountry();
        java.lang.String str32 = locale3.getDisplayName(locale20);
        java.lang.String str33 = locale2.getDisplayLanguage(locale20);
        java.lang.String str34 = locale20.getLanguage();
        org.junit.Assert.assertEquals(locale2.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ja_JP");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertEquals(locale20.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "und" + "'", str22, "und");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "und" + "'", str23, "und");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "fr_fr (FR_FR)" + "'", str30, "fr_fr (FR_FR)");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "FR_FR" + "'", str31, "FR_FR");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Japanese (Japan)" + "'", str32, "Japanese (Japan)");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "fr_fr" + "'", str33, "fr_fr");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "fr_fr" + "'", str34, "fr_fr");
    }

    @Test
    public void test2472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2472");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale locale6 = builder3.build();
        java.util.Locale.Builder builder9 = builder3.setExtension('x', "allemand");
        java.util.Locale.Builder builder11 = builder3.addUnicodeLocaleAttribute("francese");
        java.util.Locale.Builder builder12 = builder11.clearExtensions();
        java.util.Locale.Builder builder14 = builder11.setLanguageTag("ITALIE");
        java.util.Locale.Builder builder16 = builder11.setVariant("ITALY");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder18 = builder11.setLanguage("\ub3c5\uc77c\uc5b4\ub3c5\uc77c)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed language: ???????? (??????) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "italian");
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test2473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2473");
        java.util.Locale locale0 = java.util.Locale.FRENCH;
        java.util.Set<java.lang.String> strSet1 = locale0.getUnicodeLocaleAttributes();
        java.lang.String str2 = locale0.getVariant();
        java.lang.String str3 = locale0.getScript();
        java.util.Set<java.lang.String> strSet4 = locale0.getUnicodeLocaleKeys();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr");
        org.junit.Assert.assertNotNull(strSet1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "" + "'", str2, "");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertNotNull(strSet4);
    }

    @Test
    public void test2474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2474");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        java.util.stream.DoubleStream doubleStream21 = random5.doubles((long) (byte) 1);
        java.util.stream.IntStream intStream23 = random5.ints(0L);
        long long24 = random5.nextLong();
        double double25 = random5.nextGaussian();
        java.util.stream.LongStream longStream29 = random5.longs(40573351318251656L, (-4914409682272832738L), (long) (-1612933616));
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[80, -27, -76, 64, -19, 2]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.95856535f + "'", float15 == 0.95856535f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.2932158f + "'", float16 == 0.2932158f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(doubleStream21);
        org.junit.Assert.assertNotNull(intStream23);
// flaky:         org.junit.Assert.assertTrue("'" + long24 + "' != '" + 3807445971355978576L + "'", long24 == 3807445971355978576L);
// flaky:         org.junit.Assert.assertTrue("'" + double25 + "' != '" + (-0.374230444048437d) + "'", double25 == (-0.374230444048437d));
        org.junit.Assert.assertNotNull(longStream29);
    }

    @Test
    public void test2475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2475");
        java.util.Locale locale0 = java.util.Locale.CANADA_FRENCH;
        java.util.Locale locale1 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale4 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str5 = locale1.getDisplayName(locale4);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.lang.String str9 = locale7.getISO3Country();
        java.lang.String str10 = locale7.getLanguage();
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale12.getISO3Country();
        java.util.Locale locale14 = java.util.Locale.TAIWAN;
        java.lang.String str15 = locale12.getDisplayScript(locale14);
        java.lang.String str16 = locale7.getDisplayLanguage(locale12);
        java.lang.String str17 = locale4.getDisplayVariant(locale7);
        java.util.Locale locale18 = java.util.Locale.PRC;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.getDisplayLanguage();
        java.lang.String str21 = locale7.getDisplayLanguage(locale19);
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.util.Locale locale25 = java.util.Locale.TAIWAN;
        java.lang.String str26 = locale23.getDisplayScript(locale25);
        java.lang.String str27 = locale23.getDisplayName();
        java.lang.String str28 = locale7.getDisplayName(locale23);
        java.lang.String str29 = locale0.getDisplayName(locale7);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "fr_CA");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale4.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "cinese (Taiwan)" + "'", str5, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "it" + "'", str10, "it");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "ITA" + "'", str13, "ITA");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "italiano" + "'", str16, "italiano");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "" + "'", str17, "");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "zh_CN");
// flaky:         org.junit.Assert.assertEquals("'" + str20 + "' != '" + "\uc911\uad6d\uc5b4" + "'", str20, "\uc911\uad6d\uc5b4");
// flaky:         org.junit.Assert.assertEquals("'" + str21 + "' != '" + "\u610f\u5927\u5229\u6587" + "'", str21, "\u610f\u5927\u5229\u6587");
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "" + "'", str26, "");
// flaky:         org.junit.Assert.assertEquals("'" + str27 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)" + "'", str27, "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "italiano (Italia)" + "'", str28, "italiano (Italia)");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "francese (Canada)" + "'", str29, "francese (Canada)");
    }

    @Test
    public void test2476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2476");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale.Builder builder8 = builder5.setExtension('u', "");
        java.util.Locale.Builder builder9 = builder5.clearExtensions();
        java.util.Locale locale10 = java.util.Locale.ITALY;
        java.util.Locale locale11 = locale10.stripExtensions();
        java.lang.String str12 = locale11.getISO3Country();
        java.util.Set<java.lang.String> strSet13 = locale11.getUnicodeLocaleKeys();
        java.util.Locale locale17 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str18 = locale11.getDisplayCountry(locale17);
        java.lang.String str19 = locale11.getDisplayLanguage();
        java.util.Locale.Builder builder20 = builder9.setLocale(locale11);
        java.util.Locale.Builder builder21 = builder9.clearExtensions();
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Country();
        java.lang.String str26 = locale23.getLanguage();
        java.util.Locale locale27 = java.util.Locale.ITALY;
        java.util.Locale locale28 = locale27.stripExtensions();
        java.lang.String str29 = locale28.getISO3Country();
        java.util.Locale locale30 = java.util.Locale.TAIWAN;
        java.lang.String str31 = locale28.getDisplayScript(locale30);
        java.lang.String str32 = locale23.getDisplayLanguage(locale28);
        java.lang.String str33 = locale23.getISO3Language();
        java.util.Locale locale34 = java.util.Locale.ITALY;
        java.lang.String str35 = locale34.getDisplayLanguage();
        java.util.Locale locale39 = new java.util.Locale("hi!", "", "ITA");
        java.lang.String str40 = locale34.getDisplayLanguage(locale39);
        java.lang.String str41 = locale39.getScript();
        boolean boolean42 = locale39.hasExtensions();
        java.lang.String str44 = locale39.getUnicodeLocaleType("zh");
        java.lang.String str45 = locale39.getDisplayScript();
        java.util.Locale locale49 = new java.util.Locale("hi!__ITA", "fr", "hi!");
        java.lang.String str50 = locale39.getDisplayCountry(locale49);
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getISO3Country();
        java.lang.String str55 = locale52.toLanguageTag();
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = locale52.getDisplayName(locale56);
        java.util.Locale locale58 = java.util.Locale.GERMAN;
        java.lang.String str59 = locale56.getDisplayCountry(locale58);
        boolean boolean60 = locale58.hasExtensions();
        java.lang.String str61 = locale49.getDisplayScript(locale58);
        java.lang.String str62 = locale23.getDisplayScript(locale58);
        java.util.Locale.Builder builder63 = builder21.setLocale(locale23);
        java.util.Locale.Builder builder64 = builder63.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder66 = builder64.setScript("Taiwan");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed script: Taiwan [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "ITA" + "'", str12, "ITA");
        org.junit.Assert.assertNotNull(strSet13);
        org.junit.Assert.assertEquals(locale17.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "Italy" + "'", str18, "Italy");
// flaky:         org.junit.Assert.assertEquals("'" + str19 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str19, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "it" + "'", str26, "it");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "ITA" + "'", str29, "ITA");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "" + "'", str31, "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "italiano" + "'", str32, "italiano");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "ita" + "'", str33, "ita");
        org.junit.Assert.assertNotNull(locale34);
        org.junit.Assert.assertEquals(locale34.toString(), "it_IT");
// flaky:         org.junit.Assert.assertEquals("'" + str35 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4" + "'", str35, "\uc774\ud0c8\ub9ac\uc544\uc5b4");
        org.junit.Assert.assertEquals(locale39.toString(), "hi!__ITA");
        org.junit.Assert.assertEquals("'" + str40 + "' != '" + "Italian" + "'", str40, "Italian");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "" + "'", str41, "");
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNull(str44);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals(locale49.toString(), "hi!__ita_FR_hi!");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "" + "'", str50, "");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ITA" + "'", str53, "ITA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ITA" + "'", str54, "ITA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it-IT" + "'", str55, "it-IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italienisch (Italien)" + "'", str57, "Italienisch (Italien)");
        org.junit.Assert.assertNotNull(locale58);
        org.junit.Assert.assertEquals(locale58.toString(), "de");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "Deutschland" + "'", str59, "Deutschland");
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertEquals("'" + str61 + "' != '" + "" + "'", str61, "");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test2477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2477");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        double double9 = random0.nextGaussian();
        java.util.stream.DoubleStream doubleStream10 = random0.doubles();
        int int11 = random0.nextInt();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(0L);
        long long14 = random0.nextLong();
        boolean boolean15 = random0.nextBoolean();
        boolean boolean16 = random0.nextBoolean();
        java.util.stream.DoubleStream doubleStream19 = random0.doubles((-0.7863578845175063d), (double) 111445387);
        float float20 = random0.nextFloat();
        java.util.stream.LongStream longStream22 = random0.longs((long) 11986013);
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[-24, 78, 51, -77, -59, -110]");
// flaky:         org.junit.Assert.assertTrue("'" + double9 + "' != '" + 0.3901587537508743d + "'", double9 == 0.3901587537508743d);
        org.junit.Assert.assertNotNull(doubleStream10);
// flaky:         org.junit.Assert.assertTrue("'" + int11 + "' != '" + 129562333 + "'", int11 == 129562333);
        org.junit.Assert.assertNotNull(doubleStream13);
// flaky:         org.junit.Assert.assertTrue("'" + long14 + "' != '" + 6289953078559833753L + "'", long14 == 6289953078559833753L);
// flaky:         org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
// flaky:         org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(doubleStream19);
// flaky:         org.junit.Assert.assertTrue("'" + float20 + "' != '" + 0.20491976f + "'", float20 == 0.20491976f);
        org.junit.Assert.assertNotNull(longStream22);
    }

    @Test
    public void test2478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2478");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale.Builder builder6 = builder2.setLanguage("IT");
        java.util.Locale.Category category7 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale11 = new java.util.Locale("hi!", "", "ITA");
        java.util.Locale.setDefault(category7, locale11);
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale14 = java.util.Locale.CANADA_FRENCH;
        java.lang.String str15 = locale13.getDisplayLanguage(locale14);
        java.util.Locale.setDefault(category7, locale13);
        java.util.Locale locale17 = java.util.Locale.getDefault(category7);
        java.lang.String str18 = locale17.getDisplayCountry();
        java.util.Locale.Builder builder19 = builder2.setLocale(locale17);
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(locale17);
        java.lang.String str22 = faker20.numerify("de-DE");
        java.lang.String str24 = faker20.letterify("fr_fr (fr_fr)");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + category7 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category7.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertEquals(locale11.toString(), "hi!__ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "fr_CA");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "chinois" + "'", str15, "chinois");
        org.junit.Assert.assertNotNull(locale17);
        org.junit.Assert.assertEquals(locale17.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "\u53f0\u7063" + "'", str18, "\u53f0\u7063");
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "de-DE" + "'", str22, "de-DE");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "fr_fr (fr_fr)" + "'", str24, "fr_fr (fr_fr)");
    }

    @Test
    public void test2479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2479");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder4 = builder0.clear();
        java.util.Locale.Builder builder6 = builder0.setLanguage("TWN");
        java.util.Locale locale7 = builder0.build();
        java.util.Locale.Builder builder8 = builder0.clearExtensions();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.util.Locale locale13 = java.util.Locale.ITALY;
        java.util.Locale locale14 = locale13.stripExtensions();
        java.lang.String str15 = locale14.getISO3Country();
        java.lang.String str16 = locale14.getISO3Country();
        java.util.Locale locale18 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale19 = java.util.Locale.KOREAN;
        java.lang.String str20 = locale18.getDisplayName(locale19);
        java.lang.String str21 = locale14.getDisplayVariant(locale18);
        java.lang.String str22 = locale10.getDisplayScript(locale18);
        java.lang.String str23 = locale10.getLanguage();
        java.util.Locale locale24 = java.util.Locale.ITALY;
        java.util.Locale locale25 = locale24.stripExtensions();
        java.lang.String str26 = locale25.getISO3Country();
        java.util.Locale locale27 = java.util.Locale.TAIWAN;
        java.lang.String str28 = locale25.getDisplayScript(locale27);
        java.util.Locale locale30 = java.util.Locale.forLanguageTag("");
        java.lang.String str31 = locale27.getDisplayLanguage(locale30);
        java.lang.String str32 = locale27.getISO3Language();
        java.lang.String str33 = locale10.getDisplayCountry(locale27);
        java.lang.String str34 = locale27.getVariant();
        java.util.Locale.Category category35 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale37 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale38 = java.util.Locale.KOREAN;
        java.lang.String str39 = locale37.getDisplayName(locale38);
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.getISO3Country();
        java.lang.String str43 = locale41.getISO3Country();
        java.util.Locale locale45 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale46 = java.util.Locale.KOREAN;
        java.lang.String str47 = locale45.getDisplayName(locale46);
        java.lang.String str48 = locale41.getDisplayVariant(locale45);
        java.lang.String str49 = locale37.getDisplayScript(locale45);
        java.util.Locale locale52 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str53 = locale37.getDisplayScript(locale52);
        java.util.Locale.setDefault(category35, locale52);
        java.util.Locale locale55 = java.util.Locale.PRC;
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.lang.String str57 = locale56.getDisplayLanguage();
        java.lang.String str58 = locale55.getDisplayVariant(locale56);
        java.util.Locale.setDefault(category35, locale56);
        java.util.Locale locale60 = java.util.Locale.KOREAN;
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale60.getDisplayCountry(locale61);
        java.lang.String str63 = locale61.toLanguageTag();
        java.util.Locale.setDefault(category35, locale61);
        java.util.Set<java.lang.String> strSet65 = locale61.getUnicodeLocaleKeys();
        java.lang.String str66 = locale27.getDisplayName(locale61);
        java.util.Locale.Builder builder67 = builder8.setLocale(locale27);
        java.util.Locale.Builder builder69 = builder8.removeUnicodeLocaleAttribute("deu");
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "twn");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "ITA" + "'", str15, "ITA");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ITA" + "'", str16, "ITA");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "" + "'", str20, "");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "" + "'", str21, "");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "ITA" + "'", str26, "ITA");
        org.junit.Assert.assertNotNull(locale27);
        org.junit.Assert.assertEquals(locale27.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "" + "'", str28, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "");
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "Chinese" + "'", str31, "Chinese");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "zho" + "'", str32, "zho");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "" + "'", str33, "");
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "" + "'", str34, "");
        org.junit.Assert.assertTrue("'" + category35 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category35.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale37);
        org.junit.Assert.assertEquals(locale37.toString(), "");
        org.junit.Assert.assertNotNull(locale38);
        org.junit.Assert.assertEquals(locale38.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ITA" + "'", str42, "ITA");
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "ITA" + "'", str43, "ITA");
        org.junit.Assert.assertNotNull(locale45);
        org.junit.Assert.assertEquals(locale45.toString(), "");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "" + "'", str48, "");
        org.junit.Assert.assertEquals("'" + str49 + "' != '" + "" + "'", str49, "");
        org.junit.Assert.assertEquals(locale52.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "" + "'", str53, "");
        org.junit.Assert.assertNotNull(locale55);
        org.junit.Assert.assertEquals(locale55.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italian" + "'", str57, "Italian");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "" + "'", str58, "");
        org.junit.Assert.assertNotNull(locale60);
        org.junit.Assert.assertEquals(locale60.toString(), "ko");
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "ko" + "'", str63, "ko");
        org.junit.Assert.assertNotNull(strSet65);
// flaky:         org.junit.Assert.assertEquals("'" + str66 + "' != '" + "\uc911\uad6d\uc5b4\ub300\ub9cc)" + "'", str66, "\uc911\uad6d\uc5b4\ub300\ub9cc)");
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
    }

    @Test
    public void test2480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2480");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.lang.String str3 = locale1.getISO3Country();
        java.lang.String str4 = locale1.toLanguageTag();
        java.util.Locale locale5 = java.util.Locale.GERMANY;
        java.lang.String str6 = locale1.getDisplayName(locale5);
        java.lang.String str7 = locale1.toLanguageTag();
        java.util.Locale locale8 = java.util.Locale.KOREAN;
        java.util.Locale locale9 = java.util.Locale.KOREAN;
        java.lang.String str10 = locale8.getDisplayCountry(locale9);
        java.util.Locale locale11 = java.util.Locale.ITALY;
        java.util.Locale locale12 = locale11.stripExtensions();
        java.lang.String str13 = locale8.getDisplayCountry(locale11);
        java.lang.String str14 = locale11.getCountry();
        java.lang.String str15 = locale1.getDisplayScript(locale11);
        java.lang.String str16 = locale11.getDisplayName();
        java.util.Locale.setDefault(locale11);
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "ITA" + "'", str3, "ITA");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "it-IT" + "'", str4, "it-IT");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "Italienisch (Italien)" + "'", str6, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "it-IT" + "'", str7, "it-IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "ko");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale12);
        org.junit.Assert.assertEquals(locale12.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "IT" + "'", str14, "IT");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
// flaky:         org.junit.Assert.assertEquals("'" + str16 + "' != '" + "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)" + "'", str16, "\uc774\ud0c8\ub9ac\uc544\uc5b4\uc774\ud0c8\ub9ac\uc544)");
    }

    @Test
    public void test2481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2481");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("italiano");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList4 = java.util.Locale.LanguageRange.parse("Italia");
        java.util.Locale.LanguageRange[] languageRangeArray5 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList6 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean7 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList6, languageRangeArray5);
        java.lang.String[] strArray12 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList13 = new java.util.ArrayList<java.lang.String>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList13, strArray12);
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, (java.util.Collection<java.lang.String>) strList13);
        java.util.Collection<java.lang.String> strCollection16 = null;
        java.util.List<java.lang.String> strList17 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, strCollection16);
        java.util.Collection<java.util.Locale> localeCollection18 = null;
        java.util.Locale.LanguageRange[] languageRangeArray19 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList20 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean21 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList20, languageRangeArray19);
        java.lang.String[] strArray26 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList27 = new java.util.ArrayList<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList27, strArray26);
        java.util.List<java.lang.String> strList29 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList27);
        java.util.Locale.LanguageRange[] languageRangeArray30 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList31 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean32 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList31, languageRangeArray30);
        java.lang.String[] strArray37 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList38 = new java.util.ArrayList<java.lang.String>();
        boolean boolean39 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList38, strArray37);
        java.util.List<java.lang.String> strList40 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, (java.util.Collection<java.lang.String>) strList38);
        java.util.Collection<java.lang.String> strCollection41 = null;
        java.util.List<java.lang.String> strList42 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList31, strCollection41);
        java.lang.String str43 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, strCollection41);
        java.util.Locale.LanguageRange[] languageRangeArray44 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList45 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean46 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList45, languageRangeArray44);
        java.lang.String[] strArray51 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList52 = new java.util.ArrayList<java.lang.String>();
        boolean boolean53 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList52, strArray51);
        java.util.List<java.lang.String> strList54 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList45, (java.util.Collection<java.lang.String>) strList52);
        java.util.Locale.FilteringMode filteringMode55 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList56 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList20, (java.util.Collection<java.lang.String>) strList52, filteringMode55);
        java.util.List<java.util.Locale> localeList57 = java.util.Locale.filter((java.util.List<java.util.Locale.LanguageRange>) languageRangeList6, localeCollection18, filteringMode55);
        java.util.Locale.FilteringMode filteringMode58 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.util.Locale> localeList59 = java.util.Locale.filter(languageRangeList4, (java.util.Collection<java.util.Locale>) localeList57, filteringMode58);
        java.util.List<java.util.Locale> localeList60 = java.util.Locale.filter(languageRangeList2, (java.util.Collection<java.util.Locale>) localeList57);
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale locale61 = java.util.Locale.lookup(languageRangeList0, (java.util.Collection<java.util.Locale>) localeList57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeList4);
        org.junit.Assert.assertNotNull(languageRangeArray5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(strArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(strList17);
        org.junit.Assert.assertNotNull(languageRangeArray19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(strList29);
        org.junit.Assert.assertNotNull(languageRangeArray30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strArray37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertNotNull(strList40);
        org.junit.Assert.assertNotNull(strList42);
        org.junit.Assert.assertNull(str43);
        org.junit.Assert.assertNotNull(languageRangeArray44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(strArray51);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + true + "'", boolean53 == true);
        org.junit.Assert.assertNotNull(strList54);
        org.junit.Assert.assertTrue("'" + filteringMode55 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode55.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList56);
        org.junit.Assert.assertNotNull(localeList57);
        org.junit.Assert.assertTrue("'" + filteringMode58 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode58.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(localeList59);
        org.junit.Assert.assertNotNull(localeList60);
    }

    @Test
    public void test2482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2482");
        java.util.Locale.Category category0 = java.util.Locale.Category.DISPLAY;
        java.util.Locale locale2 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale3 = java.util.Locale.KOREAN;
        java.lang.String str4 = locale2.getDisplayName(locale3);
        java.util.Locale locale5 = java.util.Locale.ITALY;
        java.util.Locale locale6 = locale5.stripExtensions();
        java.lang.String str7 = locale6.getISO3Country();
        java.lang.String str8 = locale6.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale11 = java.util.Locale.KOREAN;
        java.lang.String str12 = locale10.getDisplayName(locale11);
        java.lang.String str13 = locale6.getDisplayVariant(locale10);
        java.lang.String str14 = locale2.getDisplayScript(locale10);
        java.util.Locale locale17 = new java.util.Locale("fr_FR", "fr_FR");
        java.lang.String str18 = locale2.getDisplayScript(locale17);
        java.util.Locale.setDefault(category0, locale17);
        java.util.Locale locale20 = java.util.Locale.PRC;
        java.util.Locale locale21 = java.util.Locale.ITALY;
        java.lang.String str22 = locale21.getDisplayLanguage();
        java.lang.String str23 = locale20.getDisplayVariant(locale21);
        java.util.Locale.setDefault(category0, locale21);
        java.util.Locale locale25 = java.util.Locale.ITALY;
        java.util.Locale locale26 = locale25.stripExtensions();
        java.lang.String str27 = locale26.getISO3Country();
        java.util.Locale locale28 = java.util.Locale.TAIWAN;
        java.lang.String str29 = locale26.getDisplayScript(locale28);
        java.util.Locale locale31 = java.util.Locale.forLanguageTag("");
        java.lang.String str32 = locale28.getDisplayLanguage(locale31);
        java.lang.String str33 = locale28.getISO3Language();
        java.util.Locale locale37 = new java.util.Locale("cinese (Taiwan)", "", "fr");
        java.lang.String str38 = locale28.getDisplayVariant(locale37);
        java.util.Set<java.lang.String> strSet39 = locale37.getUnicodeLocaleAttributes();
        java.util.Locale locale40 = java.util.Locale.ITALY;
        java.util.Locale locale41 = locale40.stripExtensions();
        java.lang.String str42 = locale41.getISO3Country();
        java.util.Locale locale43 = java.util.Locale.TAIWAN;
        java.lang.String str44 = locale41.getDisplayScript(locale43);
        java.lang.String str45 = locale41.getDisplayScript();
        java.lang.String str46 = locale41.getLanguage();
        java.lang.String str47 = locale37.getDisplayVariant(locale41);
        java.lang.String str48 = locale37.getLanguage();
        java.util.Locale.setDefault(category0, locale37);
        java.util.Locale locale50 = java.util.Locale.getDefault(category0);
        java.util.Locale locale51 = java.util.Locale.ITALY;
        java.util.Locale locale52 = locale51.stripExtensions();
        java.lang.String str53 = locale52.getISO3Country();
        java.lang.String str54 = locale52.getISO3Country();
        java.lang.String str55 = locale52.toLanguageTag();
        java.util.Locale locale56 = java.util.Locale.GERMANY;
        java.lang.String str57 = locale52.getDisplayName(locale56);
        java.lang.String str58 = locale52.toLanguageTag();
        java.lang.String str59 = locale52.getISO3Language();
        java.util.Set<java.lang.Character> charSet60 = locale52.getExtensionKeys();
        java.util.Locale.setDefault(category0, locale52);
        java.util.Locale locale62 = java.util.Locale.getDefault(category0);
        java.lang.String str63 = locale62.getVariant();
        org.junit.Assert.assertTrue("'" + category0 + "' != '" + java.util.Locale.Category.DISPLAY + "'", category0.equals(java.util.Locale.Category.DISPLAY));
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "ITA" + "'", str7, "ITA");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "");
        org.junit.Assert.assertNotNull(locale11);
        org.junit.Assert.assertEquals(locale11.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertEquals(locale17.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "" + "'", str18, "");
        org.junit.Assert.assertNotNull(locale20);
        org.junit.Assert.assertEquals(locale20.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale21);
        org.junit.Assert.assertEquals(locale21.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "Italian" + "'", str22, "Italian");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "" + "'", str23, "");
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "ITA" + "'", str27, "ITA");
        org.junit.Assert.assertNotNull(locale28);
        org.junit.Assert.assertEquals(locale28.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale31);
        org.junit.Assert.assertEquals(locale31.toString(), "");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Chinese" + "'", str32, "Chinese");
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "zho" + "'", str33, "zho");
        org.junit.Assert.assertEquals(locale37.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "" + "'", str38, "");
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(locale40);
        org.junit.Assert.assertEquals(locale40.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale41);
        org.junit.Assert.assertEquals(locale41.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str42 + "' != '" + "ITA" + "'", str42, "ITA");
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "" + "'", str44, "");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "" + "'", str45, "");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "it" + "'", str46, "it");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "fr" + "'", str47, "fr");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "cinese (taiwan)" + "'", str48, "cinese (taiwan)");
        org.junit.Assert.assertNotNull(locale50);
        org.junit.Assert.assertEquals(locale50.toString(), "cinese (taiwan)__fr");
        org.junit.Assert.assertNotNull(locale51);
        org.junit.Assert.assertEquals(locale51.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale52);
        org.junit.Assert.assertEquals(locale52.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str53 + "' != '" + "ITA" + "'", str53, "ITA");
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "ITA" + "'", str54, "ITA");
        org.junit.Assert.assertEquals("'" + str55 + "' != '" + "it-IT" + "'", str55, "it-IT");
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "Italienisch (Italien)" + "'", str57, "Italienisch (Italien)");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "it-IT" + "'", str58, "it-IT");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "ita" + "'", str59, "ita");
        org.junit.Assert.assertNotNull(charSet60);
        org.junit.Assert.assertNotNull(locale62);
        org.junit.Assert.assertEquals(locale62.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str63 + "' != '" + "" + "'", str63, "");
    }

    @Test
    public void test2483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2483");
        java.util.Random random0 = new java.util.Random();
        java.util.stream.DoubleStream doubleStream2 = random0.doubles((long) 1);
        java.util.stream.IntStream intStream3 = random0.ints();
        java.util.stream.DoubleStream doubleStream4 = random0.doubles();
        java.util.stream.LongStream longStream5 = random0.longs();
        int int6 = random0.nextInt();
        org.junit.Assert.assertNotNull(doubleStream2);
        org.junit.Assert.assertNotNull(intStream3);
        org.junit.Assert.assertNotNull(doubleStream4);
        org.junit.Assert.assertNotNull(longStream5);
// flaky:         org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-366792461) + "'", int6 == (-366792461));
    }

    @Test
    public void test2484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2484");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder3.setLanguageTag("Italian");
        java.util.Locale.Builder builder7 = builder3.setRegion("");
        java.util.Locale.Builder builder8 = builder3.clear();
        java.util.Locale.Builder builder9 = builder3.clearExtensions();
        java.util.Locale.Builder builder11 = builder3.setLanguageTag("Chinese");
        java.util.Locale.Builder builder12 = builder3.clearExtensions();
        java.util.Locale locale13 = java.util.Locale.TRADITIONAL_CHINESE;
        java.util.Locale locale16 = new java.util.Locale("IT", "fr_FR");
        java.lang.String str17 = locale13.getDisplayName(locale16);
        java.util.Locale locale18 = java.util.Locale.ITALY;
        java.util.Locale locale19 = locale18.stripExtensions();
        java.lang.String str20 = locale19.getISO3Country();
        java.lang.String str21 = locale19.getISO3Country();
        java.lang.String str22 = locale19.getLanguage();
        java.util.Locale locale23 = java.util.Locale.ITALY;
        java.util.Locale locale24 = locale23.stripExtensions();
        java.lang.String str25 = locale24.getISO3Country();
        java.util.Locale locale26 = java.util.Locale.TAIWAN;
        java.lang.String str27 = locale24.getDisplayScript(locale26);
        java.lang.String str28 = locale19.getDisplayLanguage(locale24);
        java.lang.String str29 = locale16.getDisplayVariant(locale19);
        java.util.Locale locale30 = java.util.Locale.CHINESE;
        java.util.Set<java.lang.Character> charSet31 = locale30.getExtensionKeys();
        java.lang.String str32 = locale30.getDisplayName();
        java.lang.String str33 = locale16.getDisplayName(locale30);
        java.util.Set<java.lang.String> strSet34 = locale30.getUnicodeLocaleKeys();
        java.util.Locale.Builder builder35 = builder3.setLocale(locale30);
        java.lang.String str37 = locale30.getExtension('x');
        java.lang.Object obj38 = locale30.clone();
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "zh_TW");
        org.junit.Assert.assertEquals(locale16.toString(), "it_FR_FR");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "cinese (Taiwan)" + "'", str17, "cinese (Taiwan)");
        org.junit.Assert.assertNotNull(locale18);
        org.junit.Assert.assertEquals(locale18.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale19);
        org.junit.Assert.assertEquals(locale19.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "ITA" + "'", str20, "ITA");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "ITA" + "'", str21, "ITA");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "it" + "'", str22, "it");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale24);
        org.junit.Assert.assertEquals(locale24.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertNotNull(locale26);
        org.junit.Assert.assertEquals(locale26.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "italiano" + "'", str28, "italiano");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "" + "'", str29, "");
        org.junit.Assert.assertNotNull(locale30);
        org.junit.Assert.assertEquals(locale30.toString(), "zh");
        org.junit.Assert.assertNotNull(charSet31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "cinese" + "'", str32, "cinese");
// flaky:         org.junit.Assert.assertEquals("'" + str33 + "' != '" + "\u610f\u5927\u5229\u6587 (FR_FR)" + "'", str33, "\u610f\u5927\u5229\u6587 (FR_FR)");
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(str37);
        org.junit.Assert.assertNotNull(obj38);
        org.junit.Assert.assertEquals(obj38.toString(), "zh");
        org.junit.Assert.assertEquals(java.lang.String.valueOf(obj38), "zh");
        org.junit.Assert.assertEquals(java.util.Objects.toString(obj38), "zh");
    }

    @Test
    public void test2485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2485");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder3 = builder0.clearExtensions();
        java.util.Locale.Builder builder5 = builder0.setVariant("Italian");
        java.util.Locale.Builder builder7 = builder0.setLanguage("Englisch");
        java.util.Locale locale8 = builder7.build();
        java.util.Locale.Builder builder10 = builder7.setVariant("Italy");
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder12 = builder7.removeUnicodeLocaleAttribute("hi!_TWN");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: hi!_TWN [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "englisch__Italian");
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test2486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2486");
        java.util.List<java.util.Locale.LanguageRange> languageRangeList0 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("Italia");
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.lang.String[] strArray10 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList11 = new java.util.ArrayList<java.lang.String>();
        boolean boolean12 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList11, strArray10);
        java.util.List<java.lang.String> strList13 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList11);
        java.util.Collection<java.lang.String> strCollection14 = null;
        java.util.List<java.lang.String> strList15 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, strCollection14);
        java.util.Locale.LanguageRange[] languageRangeArray16 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList17 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean18 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList17, languageRangeArray16);
        java.lang.String[] strArray23 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList24 = new java.util.ArrayList<java.lang.String>();
        boolean boolean25 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList24, strArray23);
        java.util.List<java.lang.String> strList26 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList17, (java.util.Collection<java.lang.String>) strList24);
        java.util.Locale.FilteringMode filteringMode27 = java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES;
        java.util.List<java.lang.String> strList28 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strList26, filteringMode27);
        java.util.Locale.FilteringMode filteringMode29 = java.util.Locale.FilteringMode.AUTOSELECT_FILTERING;
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strList28, filteringMode29);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str31 = java.util.Locale.lookupTag(languageRangeList0, (java.util.Collection<java.lang.String>) strList28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(strArray10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strList13);
        org.junit.Assert.assertNotNull(strList15);
        org.junit.Assert.assertNotNull(languageRangeArray16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strArray23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strList26);
        org.junit.Assert.assertTrue("'" + filteringMode27 + "' != '" + java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES + "'", filteringMode27.equals(java.util.Locale.FilteringMode.REJECT_EXTENDED_RANGES));
        org.junit.Assert.assertNotNull(strList28);
        org.junit.Assert.assertTrue("'" + filteringMode29 + "' != '" + java.util.Locale.FilteringMode.AUTOSELECT_FILTERING + "'", filteringMode29.equals(java.util.Locale.FilteringMode.AUTOSELECT_FILTERING));
        org.junit.Assert.assertNotNull(strList30);
    }

    @Test
    public void test2487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2487");
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap1 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList2 = java.util.Locale.LanguageRange.parse("und", strMap1);
        java.util.Locale.LanguageRange[] languageRangeArray3 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList4 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean5 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList4, languageRangeArray3);
        java.util.Locale locale6 = java.util.Locale.ITALY;
        java.util.Locale locale7 = locale6.stripExtensions();
        java.lang.String str8 = locale7.getISO3Country();
        java.util.Set<java.lang.String> strSet9 = locale7.getUnicodeLocaleKeys();
        java.lang.String str10 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList4, (java.util.Collection<java.lang.String>) strSet9);
        java.lang.String str11 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet9);
        java.util.Locale.LanguageRange[] languageRangeArray12 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList13 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean14 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList13, languageRangeArray12);
        java.util.Locale locale15 = java.util.Locale.ITALY;
        java.util.Locale locale16 = locale15.stripExtensions();
        java.lang.String str17 = locale16.getISO3Country();
        java.util.Set<java.lang.String> strSet18 = locale16.getUnicodeLocaleKeys();
        java.lang.String str19 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strSet18);
        java.util.Locale.LanguageRange[] languageRangeArray20 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList21 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean22 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList21, languageRangeArray20);
        java.lang.String[] strArray27 = new java.lang.String[] { "", "", "", "Italian" };
        java.util.ArrayList<java.lang.String> strList28 = new java.util.ArrayList<java.lang.String>();
        boolean boolean29 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList28, strArray27);
        java.util.List<java.lang.String> strList30 = java.util.Locale.filterTags((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList28);
        java.lang.String[] strArray35 = new java.lang.String[] { "ITA", "Italian", "fr_FR", "hi!" };
        java.util.ArrayList<java.lang.String> strList36 = new java.util.ArrayList<java.lang.String>();
        boolean boolean37 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strList36, strArray35);
        java.lang.String str38 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList21, (java.util.Collection<java.lang.String>) strList36);
        java.lang.String str39 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList13, (java.util.Collection<java.lang.String>) strList36);
        java.lang.String str40 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strList36);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap41 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList42 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap41);
        java.util.Locale locale43 = java.util.Locale.ITALY;
        java.util.Locale locale44 = locale43.stripExtensions();
        java.lang.String str45 = locale44.getISO3Country();
        java.util.Locale locale46 = java.util.Locale.TAIWAN;
        java.lang.String str47 = locale44.getDisplayScript(locale46);
        java.util.Locale locale49 = java.util.Locale.forLanguageTag("");
        java.lang.String str50 = locale46.getDisplayLanguage(locale49);
        java.util.Set<java.lang.String> strSet51 = locale46.getUnicodeLocaleKeys();
        java.lang.String str52 = java.util.Locale.lookupTag(languageRangeList2, (java.util.Collection<java.lang.String>) strSet51);
        java.util.Locale.LanguageRange[] languageRangeArray53 = new java.util.Locale.LanguageRange[] {};
        java.util.ArrayList<java.util.Locale.LanguageRange> languageRangeList54 = new java.util.ArrayList<java.util.Locale.LanguageRange>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.util.Locale.LanguageRange>) languageRangeList54, languageRangeArray53);
        java.util.Locale locale56 = java.util.Locale.ITALY;
        java.util.Locale locale57 = locale56.stripExtensions();
        java.lang.String str58 = locale57.getISO3Country();
        java.util.Set<java.lang.String> strSet59 = locale57.getUnicodeLocaleKeys();
        java.lang.String str60 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strSet59);
        java.util.Locale locale61 = java.util.Locale.KOREAN;
        java.lang.String str62 = locale61.getVariant();
        java.util.Locale locale63 = java.util.Locale.GERMANY;
        java.lang.String str64 = locale61.getDisplayLanguage(locale63);
        java.util.Set<java.lang.String> strSet65 = locale63.getUnicodeLocaleKeys();
        java.lang.String str66 = java.util.Locale.lookupTag((java.util.List<java.util.Locale.LanguageRange>) languageRangeList54, (java.util.Collection<java.lang.String>) strSet65);
        java.util.List<java.lang.String> strList67 = java.util.Locale.filterTags(languageRangeList2, (java.util.Collection<java.lang.String>) strSet65);
        java.util.Map<java.lang.String, java.util.List<java.lang.String>> strMap68 = null;
        java.util.List<java.util.Locale.LanguageRange> languageRangeList69 = java.util.Locale.LanguageRange.mapEquivalents(languageRangeList2, strMap68);
        org.junit.Assert.assertNotNull(languageRangeList2);
        org.junit.Assert.assertNotNull(languageRangeArray3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "ITA" + "'", str8, "ITA");
        org.junit.Assert.assertNotNull(strSet9);
        org.junit.Assert.assertNull(str10);
        org.junit.Assert.assertNull(str11);
        org.junit.Assert.assertNotNull(languageRangeArray12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale16);
        org.junit.Assert.assertEquals(locale16.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "ITA" + "'", str17, "ITA");
        org.junit.Assert.assertNotNull(strSet18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(languageRangeArray20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(strArray27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertNotNull(strList30);
        org.junit.Assert.assertNotNull(strArray35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + true + "'", boolean37 == true);
        org.junit.Assert.assertNull(str38);
        org.junit.Assert.assertNull(str39);
        org.junit.Assert.assertNull(str40);
        org.junit.Assert.assertNotNull(languageRangeList42);
        org.junit.Assert.assertNotNull(locale43);
        org.junit.Assert.assertEquals(locale43.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale44);
        org.junit.Assert.assertEquals(locale44.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "ITA" + "'", str45, "ITA");
        org.junit.Assert.assertNotNull(locale46);
        org.junit.Assert.assertEquals(locale46.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "" + "'", str47, "");
        org.junit.Assert.assertNotNull(locale49);
        org.junit.Assert.assertEquals(locale49.toString(), "");
        org.junit.Assert.assertEquals("'" + str50 + "' != '" + "Chinese" + "'", str50, "Chinese");
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNull(str52);
        org.junit.Assert.assertNotNull(languageRangeArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(locale56);
        org.junit.Assert.assertEquals(locale56.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale57);
        org.junit.Assert.assertEquals(locale57.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "ITA" + "'", str58, "ITA");
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNull(str60);
        org.junit.Assert.assertNotNull(locale61);
        org.junit.Assert.assertEquals(locale61.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str62 + "' != '" + "" + "'", str62, "");
        org.junit.Assert.assertNotNull(locale63);
        org.junit.Assert.assertEquals(locale63.toString(), "de_DE");
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "Koreanisch" + "'", str64, "Koreanisch");
        org.junit.Assert.assertNotNull(strSet65);
        org.junit.Assert.assertNull(str66);
        org.junit.Assert.assertNotNull(strList67);
        org.junit.Assert.assertNotNull(languageRangeList69);
    }

    @Test
    public void test2488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2488");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        java.lang.String str4 = faker1.letterify("\ud55c\uad6d\uc5b4");
        java.lang.String str6 = faker1.numerify("\u4e2d\u6587\u4e2d\u570b)");
        com.github.javafaker.Name name7 = faker1.name();
        com.github.javafaker.Options options8 = faker1.options();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "\ud55c\uad6d\uc5b4" + "'", str4, "\ud55c\uad6d\uc5b4");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "\u4e2d\u6587\u4e2d\u570b)" + "'", str6, "\u4e2d\u6587\u4e2d\u570b)");
        org.junit.Assert.assertNotNull(name7);
        org.junit.Assert.assertNotNull(options8);
    }

    @Test
    public void test2489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2489");
        java.util.Random random0 = null;
        com.github.javafaker.Faker faker1 = new com.github.javafaker.Faker(random0);
        com.github.javafaker.Options options2 = faker1.options();
        com.github.javafaker.Name name3 = faker1.name();
        com.github.javafaker.Business business4 = faker1.business();
        com.github.javafaker.DateAndTime dateAndTime5 = faker1.date();
        com.github.javafaker.Name name6 = faker1.name();
        com.github.javafaker.DateAndTime dateAndTime7 = faker1.date();
        org.junit.Assert.assertNotNull(options2);
        org.junit.Assert.assertNotNull(name3);
        org.junit.Assert.assertNotNull(business4);
        org.junit.Assert.assertNotNull(dateAndTime5);
        org.junit.Assert.assertNotNull(name6);
        org.junit.Assert.assertNotNull(dateAndTime7);
    }

    @Test
    public void test2490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2490");
        java.util.Locale locale0 = java.util.Locale.PRC;
        java.util.Locale locale1 = java.util.Locale.ITALY;
        java.lang.String str2 = locale1.getDisplayLanguage();
        java.lang.String str3 = locale0.getDisplayVariant(locale1);
        java.lang.String str4 = locale1.getDisplayName();
        java.lang.String str6 = locale1.getUnicodeLocaleType("CA");
        java.lang.String str7 = locale1.getDisplayName();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "zh_CN");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "italiano" + "'", str2, "italiano");
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "" + "'", str3, "");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "italiano (Italia)" + "'", str4, "italiano (Italia)");
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "italiano (Italia)" + "'", str7, "italiano (Italia)");
    }

    @Test
    public void test2491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2491");
        java.util.Locale locale3 = new java.util.Locale("italien (Italie)", "fr-fr", "\uc774\ud0c8\ub9ac\uc544\uc5b4 (FR_FR)");
// flaky:         org.junit.Assert.assertEquals(locale3.toString(), "\uc774\ud0c8\ub9ac\uc544\uc5b4 (FR_FR)");
    }

    @Test
    public void test2492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2492");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale3 = java.util.Locale.TAIWAN;
        java.lang.String str4 = locale1.getDisplayScript(locale3);
        java.util.Random random5 = new java.util.Random();
        byte[] byteArray12 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random5.nextBytes(byteArray12);
        java.util.stream.LongStream longStream14 = random5.longs();
        float float15 = random5.nextFloat();
        float float16 = random5.nextFloat();
        java.util.stream.DoubleStream doubleStream18 = random5.doubles(100L);
        com.github.javafaker.Faker faker19 = new com.github.javafaker.Faker(locale3, random5);
        com.github.javafaker.Faker faker20 = new com.github.javafaker.Faker(random5);
        com.github.javafaker.Business business21 = faker20.business();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertNotNull(byteArray12);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray12), "[-63, 5, 76, -50, 37, -117]");
        org.junit.Assert.assertNotNull(longStream14);
// flaky:         org.junit.Assert.assertTrue("'" + float15 + "' != '" + 0.3445183f + "'", float15 == 0.3445183f);
// flaky:         org.junit.Assert.assertTrue("'" + float16 + "' != '" + 0.60974157f + "'", float16 == 0.60974157f);
        org.junit.Assert.assertNotNull(doubleStream18);
        org.junit.Assert.assertNotNull(business21);
    }

    @Test
    public void test2493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2493");
        java.util.Locale locale0 = java.util.Locale.ITALY;
        java.util.Locale locale1 = locale0.stripExtensions();
        java.lang.String str2 = locale1.getISO3Country();
        java.util.Locale locale5 = new java.util.Locale("fr_FR", "fr_FR");
        java.util.Locale locale8 = new java.util.Locale("hi!", "italiano");
        java.lang.String str9 = locale5.getDisplayScript(locale8);
        java.lang.String str10 = locale1.getDisplayName(locale8);
        java.lang.String str11 = locale1.getDisplayScript();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale1);
        org.junit.Assert.assertEquals(locale1.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "ITA" + "'", str2, "ITA");
        org.junit.Assert.assertEquals(locale5.toString(), "fr_fr_FR_FR");
        org.junit.Assert.assertEquals(locale8.toString(), "hi!_ITALIANO");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "" + "'", str9, "");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "Italian (Italy)" + "'", str10, "Italian (Italy)");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
    }

    @Test
    public void test2494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2494");
        java.util.Random random0 = new java.util.Random();
        byte[] byteArray7 = new byte[] { (byte) 1, (byte) 0, (byte) -1, (byte) -1, (byte) 10, (byte) 100 };
        random0.nextBytes(byteArray7);
        java.util.stream.LongStream longStream9 = random0.longs();
        float float10 = random0.nextFloat();
        float float11 = random0.nextFloat();
        java.util.stream.DoubleStream doubleStream13 = random0.doubles(100L);
        com.github.javafaker.Faker faker14 = new com.github.javafaker.Faker(random0);
        java.lang.String str16 = faker14.letterify("Italia");
        com.github.javafaker.Lorem lorem17 = faker14.lorem();
        com.github.javafaker.PhoneNumber phoneNumber18 = faker14.phoneNumber();
        com.github.javafaker.DateAndTime dateAndTime19 = faker14.date();
        com.github.javafaker.Lorem lorem20 = faker14.lorem();
        org.junit.Assert.assertNotNull(byteArray7);
// flaky:         org.junit.Assert.assertEquals(java.util.Arrays.toString(byteArray7), "[39, -120, -77, 45, -22, -55]");
        org.junit.Assert.assertNotNull(longStream9);
// flaky:         org.junit.Assert.assertTrue("'" + float10 + "' != '" + 0.44403f + "'", float10 == 0.44403f);
// flaky:         org.junit.Assert.assertTrue("'" + float11 + "' != '" + 0.84911007f + "'", float11 == 0.84911007f);
        org.junit.Assert.assertNotNull(doubleStream13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Italia" + "'", str16, "Italia");
        org.junit.Assert.assertNotNull(lorem17);
        org.junit.Assert.assertNotNull(phoneNumber18);
        org.junit.Assert.assertNotNull(dateAndTime19);
        org.junit.Assert.assertNotNull(lorem20);
    }

    @Test
    public void test2495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2495");
        java.util.Random random1 = new java.util.Random((long) (-720507519));
        java.util.stream.IntStream intStream2 = random1.ints();
        double double3 = random1.nextGaussian();
        org.junit.Assert.assertNotNull(intStream2);
        org.junit.Assert.assertTrue("'" + double3 + "' != '" + 0.25182001998538855d + "'", double3 == 0.25182001998538855d);
    }

    @Test
    public void test2496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2496");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder1 = builder0.clear();
        java.util.Locale.Builder builder3 = builder1.setLanguage("allemand");
        java.util.Locale locale4 = builder3.build();
        java.lang.String str5 = locale4.toString();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(locale4);
        org.junit.Assert.assertEquals(locale4.toString(), "allemand");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "allemand" + "'", str5, "allemand");
    }

    @Test
    public void test2497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2497");
        java.util.Locale locale0 = java.util.Locale.KOREAN;
        java.lang.String str1 = locale0.getVariant();
        java.util.Locale locale2 = java.util.Locale.ITALY;
        java.util.Locale locale3 = locale2.stripExtensions();
        java.lang.String str4 = locale3.getISO3Country();
        java.lang.String str5 = locale3.getISO3Country();
        java.lang.String str6 = locale3.getLanguage();
        java.util.Locale locale7 = java.util.Locale.ITALY;
        java.util.Locale locale8 = locale7.stripExtensions();
        java.lang.String str9 = locale8.getISO3Country();
        java.util.Locale locale10 = java.util.Locale.TAIWAN;
        java.lang.String str11 = locale8.getDisplayScript(locale10);
        java.lang.String str12 = locale3.getDisplayLanguage(locale8);
        java.lang.String str13 = locale3.getDisplayVariant();
        java.lang.String str14 = locale0.getDisplayVariant(locale3);
        java.util.Locale locale15 = locale0.stripExtensions();
        java.lang.String str16 = locale0.toLanguageTag();
        org.junit.Assert.assertNotNull(locale0);
        org.junit.Assert.assertEquals(locale0.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str1 + "' != '" + "" + "'", str1, "");
        org.junit.Assert.assertNotNull(locale2);
        org.junit.Assert.assertEquals(locale2.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale3);
        org.junit.Assert.assertEquals(locale3.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "ITA" + "'", str4, "ITA");
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "ITA" + "'", str5, "ITA");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "it" + "'", str6, "it");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "ITA" + "'", str9, "ITA");
        org.junit.Assert.assertNotNull(locale10);
        org.junit.Assert.assertEquals(locale10.toString(), "zh_TW");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "italiano" + "'", str12, "italiano");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "" + "'", str13, "");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
        org.junit.Assert.assertNotNull(locale15);
        org.junit.Assert.assertEquals(locale15.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "ko" + "'", str16, "ko");
    }

    @Test
    public void test2498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2498");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale.Builder builder22 = builder19.clearExtensions();
        java.util.Locale.Builder builder24 = builder22.setLanguageTag("Italian");
        java.util.Locale locale25 = builder22.build();
        java.util.Locale.Builder builder26 = builder18.setLocale(locale25);
        java.util.Locale.Builder builder27 = builder18.clearExtensions();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder29 = builder27.setRegion("twn");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed region: twn [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(locale25);
        org.junit.Assert.assertEquals(locale25.toString(), "italian");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test2499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2499");
        java.util.Locale.Builder builder0 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder2 = builder0.setRegion("");
        java.util.Locale.Builder builder4 = builder2.setRegion("");
        java.util.Locale locale5 = builder4.build();
        java.util.Locale locale6 = builder4.build();
        java.util.Locale locale7 = java.util.Locale.US;
        java.util.Locale locale8 = java.util.Locale.ITALY;
        java.util.Locale locale9 = locale8.stripExtensions();
        java.lang.String str10 = locale9.getISO3Country();
        java.lang.String str11 = locale9.getISO3Country();
        java.util.Locale locale13 = java.util.Locale.forLanguageTag("");
        java.util.Locale locale14 = java.util.Locale.KOREAN;
        java.lang.String str15 = locale13.getDisplayName(locale14);
        java.lang.String str16 = locale9.getDisplayVariant(locale13);
        java.lang.String str17 = locale7.getDisplayName(locale9);
        java.util.Locale.Builder builder18 = builder4.setLocale(locale7);
        java.util.Locale.Builder builder19 = new java.util.Locale.Builder();
        java.util.Locale.Builder builder21 = builder19.setRegion("");
        java.util.Locale locale22 = java.util.Locale.ITALY;
        java.util.Locale locale23 = locale22.stripExtensions();
        java.lang.String str24 = locale23.getISO3Country();
        java.lang.String str25 = locale23.getISO3Country();
        boolean boolean26 = locale23.hasExtensions();
        java.lang.String str28 = locale23.getExtension('a');
        java.util.Locale locale29 = locale23.stripExtensions();
        java.util.Locale.Builder builder30 = builder21.setLocale(locale29);
        java.util.Locale.Builder builder31 = builder4.setLocale(locale29);
        java.util.Locale locale32 = builder31.build();
        // The following exception was thrown during execution in test generation
        try {
            java.util.Locale.Builder builder34 = builder31.addUnicodeLocaleAttribute("\u610f\u5927\u5229\u6587 (FR_FR)");
            org.junit.Assert.fail("Expected exception of type java.util.IllformedLocaleException; message: Ill-formed Unicode locale attribute: ???? (FR_FR) [at index 0]");
        } catch (java.util.IllformedLocaleException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(locale5);
        org.junit.Assert.assertEquals(locale5.toString(), "");
        org.junit.Assert.assertNotNull(locale6);
        org.junit.Assert.assertEquals(locale6.toString(), "");
        org.junit.Assert.assertNotNull(locale7);
        org.junit.Assert.assertEquals(locale7.toString(), "en_US");
        org.junit.Assert.assertNotNull(locale8);
        org.junit.Assert.assertEquals(locale8.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale9);
        org.junit.Assert.assertEquals(locale9.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "ITA" + "'", str10, "ITA");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "ITA" + "'", str11, "ITA");
        org.junit.Assert.assertNotNull(locale13);
        org.junit.Assert.assertEquals(locale13.toString(), "");
        org.junit.Assert.assertNotNull(locale14);
        org.junit.Assert.assertEquals(locale14.toString(), "ko");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "" + "'", str16, "");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "inglese (Stati Uniti)" + "'", str17, "inglese (Stati Uniti)");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(locale22);
        org.junit.Assert.assertEquals(locale22.toString(), "it_IT");
        org.junit.Assert.assertNotNull(locale23);
        org.junit.Assert.assertEquals(locale23.toString(), "it_IT");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "ITA" + "'", str24, "ITA");
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "ITA" + "'", str25, "ITA");
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNull(str28);
        org.junit.Assert.assertNotNull(locale29);
        org.junit.Assert.assertEquals(locale29.toString(), "it_IT");
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(locale32);
        org.junit.Assert.assertEquals(locale32.toString(), "it_IT");
    }

    @Test
    public void test2500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest4.test2500");
        // The following exception was thrown during execution in test generation
        try {
            java.util.List<java.util.Locale.LanguageRange> languageRangeList1 = java.util.Locale.LanguageRange.parse("Korean (South Korea)");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: range=korean(southkorea)");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }
}
