/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 10 09:31:48 GMT 2021
 */

package com.github.javafaker;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.github.javafaker.Business;
import com.github.javafaker.Company;
import com.github.javafaker.Faker;
import com.github.javafaker.Finance;
import com.github.javafaker.Options;
import com.github.javafaker.SerializedObjectSupporter;
import com.github.javafaker.service.FakeValuesServiceInterface;
import java.lang.reflect.Proxy;
import java.util.Locale;
import java.util.Random;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockRandom;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Faker_ESTest extends Faker_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      Locale locale0 = null;
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      FakeValuesServiceInterface fakeValuesServiceInterface0 = null;
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesServiceInterface0, fakeValuesServiceInterface0);
      assertNotNull(proxy0);
      
      Faker faker0 = new Faker();
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Faker faker0 = new Faker(mockRandom0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      Faker faker0 = new Faker();
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = "}<5";
      Locale locale0 = new Locale(string0);
      assertEquals("", locale0.getISO3Country());
      assertEquals("}<5", locale0.getISO3Language());
      assertEquals("}<5", locale0.getLanguage());
      assertEquals("}<5", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertNotNull(locale0);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // }<5 could not be found, does not have a corresponding yaml file
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Finance finance0 = serializedObjectSupporter0.deserializeObjectFinance53();
      assertNull(finance0);
      
      Random random0 = serializedObjectSupporter0.deserializeObjectRandom2();
      assertNotNull(random0);
      
      Faker faker0 = new Faker(random0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Faker faker0 = serializedObjectSupporter0.deserializeObjectFaker91();
      assertNull(faker0);
      
      Locale locale0 = serializedObjectSupporter0.deserializeObjectLocale9();
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("en", locale0.toString());
      assertNotNull(locale0);
      
      Options options0 = serializedObjectSupporter0.deserializeObjectOptions12();
      assertNotNull(options0);
      
      Random random0 = serializedObjectSupporter0.deserializeObjectRandom2();
      assertNotNull(random0);
      
      Business business0 = serializedObjectSupporter0.deserializeObjectBusiness47();
      assertNull(business0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Faker faker1 = new Faker(locale0, random0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      FakeValuesServiceInterface fakeValuesServiceInterface0 = null;
      Proxy proxy0 = (Proxy)Faker.createProxiedFakeValuesService(fakeValuesServiceInterface0, fakeValuesServiceInterface0);
      assertNotNull(proxy0);
      
      Faker faker0 = new Faker();
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Faker faker0 = serializedObjectSupporter0.deserializeObjectFaker91();
      assertNull(faker0);
      
      Locale locale0 = Locale.JAPAN;
      assertEquals("", locale0.getVariant());
      assertEquals("JPN", locale0.getISO3Country());
      assertEquals("ja_JP", locale0.toString());
      assertEquals("jpn", locale0.getISO3Language());
      assertEquals("ja", locale0.getLanguage());
      assertEquals("JP", locale0.getCountry());
      assertNotNull(locale0);
      
      Options options0 = serializedObjectSupporter0.deserializeObjectOptions12();
      assertNotNull(options0);
      
      Random random0 = serializedObjectSupporter0.deserializeObjectRandom2();
      assertNotNull(random0);
      
      Business business0 = serializedObjectSupporter0.deserializeObjectBusiness47();
      assertNull(business0);
      
      String[] stringArray0 = Locale.getISOLanguages();
      assertNotNull(stringArray0);
      assertEquals(188, stringArray0.length);
      
      Faker faker1 = new Faker(locale0, random0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Locale locale0 = Locale.ITALIAN;
      assertEquals("it", locale0.getLanguage());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("", locale0.getISO3Country());
      assertEquals("it", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      String[] stringArray0 = Locale.getISOCountries();
      assertNotNull(stringArray0);
      assertEquals(250, stringArray0.length);
      
      Faker faker0 = new Faker(locale0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      Locale locale0 = null;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      MockRandom mockRandom0 = new MockRandom();
      assertNotNull(mockRandom0);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0, mockRandom0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      Locale locale0 = Locale.ROOT;
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("", locale0.getLanguage());
      assertEquals("", locale0.getISO3Language());
      assertNotNull(locale0);
      
      long long0 = 0L;
      MockRandom mockRandom0 = new MockRandom(long0);
      assertNotNull(mockRandom0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)66;
      byteArray0[0] = byte0;
      byte byte1 = (byte)83;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      mockRandom0.nextBytes(byteArray0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(3, byteArray0.length);
      
      Faker faker0 = null;
      try {
        faker0 = new Faker(locale0, mockRandom0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         //  could not be found, does not have a corresponding yaml file
         //
         verifyException("com.github.javafaker.service.FakeValuesService", e);
      }
  }
}
