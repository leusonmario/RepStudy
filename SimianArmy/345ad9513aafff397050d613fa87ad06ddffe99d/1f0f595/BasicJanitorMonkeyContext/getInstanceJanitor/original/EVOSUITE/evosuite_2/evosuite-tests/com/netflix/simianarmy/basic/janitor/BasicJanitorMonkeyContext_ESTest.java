/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 01:49:17 GMT 2021
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.aws.SimpleDBRecorder;
import com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker;
import com.netflix.simianarmy.aws.janitor.crawler.ASGJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.EBSSnapshotJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.basic.BasicCalendar;
import com.netflix.simianarmy.basic.BasicChaosMonkeyContext;
import com.netflix.simianarmy.basic.LocalDbRecorder;
import com.netflix.simianarmy.basic.conformity.BasicConformityMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkey;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.basic.janitor.BasicVolumeTaggingMonkeyContext;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorMonkey;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import java.util.List;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext1 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext1);
      assertEquals("us-west-1", basicJanitorMonkeyContext1.region());
      assertFalse(basicJanitorMonkeyContext1.equals((Object)basicJanitorMonkeyContext0));
      
      BasicJanitorMonkey basicJanitorMonkey0 = new BasicJanitorMonkey(basicJanitorMonkeyContext1);
      assertNotNull(basicJanitorMonkey0);
      assertEquals("us-west-1", basicJanitorMonkeyContext1.region());
      assertEquals(JanitorMonkey.Type.JANITOR, basicJanitorMonkey0.type());
      assertFalse(basicJanitorMonkeyContext1.equals((Object)basicJanitorMonkeyContext0));
      
      String string0 = "/#Z";
      String string1 = "simianarmy.janitor.rule.untaggedRule.retentionDaysWithOwner";
      String string2 = null;
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext1.exportCredentials(string1, string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      
      String string0 = "";
      JanitorRuleEngine janitorRuleEngine0 = null;
      JanitorCrawler janitorCrawler0 = null;
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      assertNotNull(basicConformityMonkeyContext0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      assertNotNull(monkeyRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, janitorRuleEngine0, janitorCrawler0, janitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyRecorder monkeyRecorder1 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNotNull(monkeyRecorder1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertSame(monkeyRecorder0, monkeyRecorder1);
      assertSame(monkeyRecorder1, monkeyRecorder0);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = null;
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      int int0 = 0;
      int int1 = 0;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(int1, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.TimeZone", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context1 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotSame(janitorEmailNotifier_Context1, janitorEmailNotifier_Context0);
      assertFalse(janitorEmailNotifier_Context1.equals((Object)janitorEmailNotifier_Context0));
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "F}za=4";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      ASGJanitorCrawler aSGJanitorCrawler0 = new ASGJanitorCrawler(aWSClient0);
      assertNotNull(aSGJanitorCrawler0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      assertNotNull(basicConformityMonkeyContext0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, aSGJanitorCrawler0.ASG_FIELD_INSTANCES);
      assertNotNull(simpleDBRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, aSGJanitorCrawler0, janitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, simpleDBRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("F}za=4", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      String string1 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNotNull(string1);
      assertEquals("F}za=4", string1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("F}za=4", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertSame(string0, string1);
      assertSame(string1, string0);
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      JanitorRuleEngine janitorRuleEngine0 = null;
      AWSClient aWSClient0 = new AWSClient(string0);
      assertNotNull(aWSClient0);
      assertEquals("", aWSClient0.region());
      
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      assertNotNull(instanceJanitorCrawler0);
      assertEquals("", aWSClient0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicChaosMonkeyContext basicChaosMonkeyContext0 = new BasicChaosMonkeyContext();
      assertNotNull(basicChaosMonkeyContext0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicChaosMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      assertNotNull(basicCalendar0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(9, basicCalendar0.openHour());
      assertEquals(15, basicCalendar0.closeHour());
      
      MonkeyRecorder monkeyRecorder0 = null;
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, janitorRuleEngine0, instanceJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("", aWSClient0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(9, basicCalendar0.openHour());
      assertEquals(15, basicCalendar0.closeHour());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorRuleEngine janitorRuleEngine1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(janitorRuleEngine1);
      assertEquals("", aWSClient0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(9, basicCalendar0.openHour());
      assertEquals(15, basicCalendar0.closeHour());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      String string0 = "n$/F#UI?zt<eR1{#.";
      JanitorRuleEngine janitorRuleEngine0 = null;
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      EBSSnapshotJanitorCrawler eBSSnapshotJanitorCrawler0 = new EBSSnapshotJanitorCrawler(aWSClient0);
      assertNotNull(eBSSnapshotJanitorCrawler0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, string0);
      assertNotNull(simpleDBJanitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      assertNotNull(basicCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals(11, basicCalendar0.closeHour());
      
      LocalDbRecorder localDbRecorder0 = new LocalDbRecorder(monkeyConfiguration0);
      assertNotNull(localDbRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, janitorRuleEngine0, eBSSnapshotJanitorCrawler0, simpleDBJanitorResourceTracker0, basicCalendar0, monkeyConfiguration0, localDbRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals("n$/F#UI?zt<eR1{#.", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNotNull(monkeyConfiguration1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals("n$/F#UI?zt<eR1{#.", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertSame(monkeyConfiguration0, monkeyConfiguration1);
      assertSame(monkeyConfiguration1, monkeyConfiguration0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "$w%\"Q*X_4`kO";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      JanitorCrawler janitorCrawler0 = null;
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      
      BasicChaosMonkeyContext basicChaosMonkeyContext0 = new BasicChaosMonkeyContext();
      assertNotNull(basicChaosMonkeyContext0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicChaosMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration1 = null;
      LocalDbRecorder localDbRecorder0 = new LocalDbRecorder(monkeyConfiguration1);
      assertNotNull(localDbRecorder0);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, janitorCrawler0, janitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, localDbRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals("$w%\"Q*X_4`kO", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorCrawler janitorCrawler1 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(janitorCrawler1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals("$w%\"Q*X_4`kO", basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = "n(Nz!MZ1t3cb~Lc3BPY";
      JanitorRuleEngine janitorRuleEngine0 = null;
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      assertNotNull(instanceJanitorCrawler0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicChaosMonkeyContext basicChaosMonkeyContext0 = new BasicChaosMonkeyContext();
      assertNotNull(basicChaosMonkeyContext0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicChaosMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      assertNotNull(basicCalendar0);
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(15, basicCalendar0.closeHour());
      assertEquals(9, basicCalendar0.openHour());
      
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, instanceJanitorCrawler0.INSTANCE_FIELD_ASG_NAME);
      assertNotNull(simpleDBRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, janitorRuleEngine0, instanceJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, simpleDBRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(15, basicCalendar0.closeHour());
      assertEquals(9, basicCalendar0.openHour());
      assertEquals("n(Nz!MZ1t3cb~Lc3BPY", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(15, basicCalendar0.closeHour());
      assertEquals(9, basicCalendar0.openHour());
      assertEquals("n(Nz!MZ1t3cb~Lc3BPY", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals(9, monkeyCalendar0.openHour());
      assertEquals(15, monkeyCalendar0.closeHour());
      assertSame(basicCalendar0, monkeyCalendar0);
      assertSame(monkeyCalendar0, basicCalendar0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "DhcpOptionsIds: ";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      ASGJanitorCrawler aSGJanitorCrawler0 = new ASGJanitorCrawler(aWSClient0);
      assertNotNull(aSGJanitorCrawler0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, aSGJanitorCrawler0.ASG_FIELD_MAX_SIZE);
      assertNotNull(simpleDBJanitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      MonkeyCalendar monkeyCalendar0 = null;
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      assertNotNull(basicVolumeTaggingMonkeyContext0);
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicVolumeTaggingMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = null;
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, aSGJanitorCrawler0, simpleDBJanitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("DhcpOptionsIds: ", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("DhcpOptionsIds: ", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertSame(simpleDBJanitorResourceTracker0, janitorResourceTracker0);
      assertSame(janitorResourceTracker0, simpleDBJanitorResourceTracker0);
  }
}
