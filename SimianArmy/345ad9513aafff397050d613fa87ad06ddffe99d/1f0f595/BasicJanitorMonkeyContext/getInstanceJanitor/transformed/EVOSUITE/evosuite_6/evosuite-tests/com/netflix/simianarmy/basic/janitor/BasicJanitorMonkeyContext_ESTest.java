/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 04:17:54 GMT 2021
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.services.elastictranscoder.model.VideoParameters;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.MonkeyType;
import com.netflix.simianarmy.aws.SimpleDBRecorder;
import com.netflix.simianarmy.aws.janitor.ASGJanitor;
import com.netflix.simianarmy.aws.janitor.EBSSnapshotJanitor;
import com.netflix.simianarmy.aws.janitor.EBSVolumeJanitor;
import com.netflix.simianarmy.aws.janitor.InstanceJanitor;
import com.netflix.simianarmy.aws.janitor.LaunchConfigJanitor;
import com.netflix.simianarmy.aws.janitor.VolumeTaggingMonkey;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.basic.BasicCalendar;
import com.netflix.simianarmy.basic.LocalDbRecorder;
import com.netflix.simianarmy.basic.janitor.BasicJanitorEmailBuilder;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.basic.janitor.BasicVolumeTaggingMonkeyContext;
import com.netflix.simianarmy.chaos.ChaosMonkey;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.client.edda.EddaClient;
import com.netflix.simianarmy.conformity.ConformityMonkey;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailBuilder;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorMonkey;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import java.time.Instant;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      Set<String> set0 = basicJanitorMonkeyContext0.getPropertySet(basicJanitorMonkeyContext0.defaultEmail);
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      String string0 = "";
      Set<String> set0 = basicJanitorMonkeyContext0.getPropertySet(string0);
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertFalse(set0.contains(string0));
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(janitorRuleEngine0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      
      InstanceJanitor instanceJanitor1 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor1);
      assertFalse(instanceJanitor1.equals((Object)instanceJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(instanceJanitor1, instanceJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor1.getRegion());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorResourceTracker janitorResourceTracker1 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker1);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertSame(janitorResourceTracker1, janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      String string0 = "com.google.inject.Stage";
      Set<String> set1 = basicJanitorMonkeyContext0.getPropertySet(string0);
      assertNotNull(set1);
      assertFalse(set1.equals((Object)set0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(set1, set0);
      assertFalse(set1.contains(string0));
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getPropertySet(basicJanitorMonkeyContext_BasicJanitorContext0.region);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(janitorRuleEngine0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list0 = null;
      basicJanitorMonkeyContext0.janitors = list0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNull(string0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorResourceTracker janitorResourceTracker1 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker1);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertSame(janitorResourceTracker1, janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list1 = basicJanitorMonkeyContext0.janitors();
      assertNull(list1);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      
      EBSSnapshotJanitor eBSSnapshotJanitor1 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor1);
      assertFalse(eBSSnapshotJanitor1.equals((Object)eBSSnapshotJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(eBSSnapshotJanitor1, eBSSnapshotJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor1.getRegion());
      
      EBSSnapshotJanitor eBSSnapshotJanitor2 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor2);
      assertFalse(eBSSnapshotJanitor2.equals((Object)eBSSnapshotJanitor0));
      assertFalse(eBSSnapshotJanitor2.equals((Object)eBSSnapshotJanitor1));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(eBSSnapshotJanitor2, eBSSnapshotJanitor0);
      assertNotSame(eBSSnapshotJanitor2, eBSSnapshotJanitor1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor2.getRegion());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(monkeyRecorder0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      ASGJanitor aSGJanitor1 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor1);
      assertFalse(aSGJanitor1.equals((Object)aSGJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(aSGJanitor1, aSGJanitor0);
      assertEquals("us-west-1", aSGJanitor1.getRegion());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNull(monkeyCalendar0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(janitorCrawler0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNull(string0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNull(monkeyConfiguration0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      
      InstanceJanitor instanceJanitor1 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor1);
      assertFalse(instanceJanitor1.equals((Object)instanceJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(instanceJanitor1, instanceJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor1.getRegion());
      
      basicJanitorMonkeyContext0.janitorResourceTracker = basicJanitorMonkeyContext_BasicJanitorContext0.resourceTracker;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context1 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context1);
      assertFalse(janitorEmailNotifier_Context1.equals((Object)janitorEmailNotifier_Context0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(janitorEmailNotifier_Context1, janitorEmailNotifier_Context0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      JanitorCrawler janitorCrawler0 = null;
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      assertNotNull(monkeyRecorder0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(basicJanitorMonkeyContext0.defaultEmail, basicJanitorRuleEngine0, janitorCrawler0, basicJanitorMonkeyContext0.janitorResourceTracker, basicJanitorMonkeyContext0.monkeyCalendar, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNotNull(janitorRuleEngine0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertSame(basicJanitorRuleEngine0, janitorRuleEngine0);
      assertSame(janitorRuleEngine0, basicJanitorRuleEngine0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(monkeyRecorder0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNull(monkeyConfiguration0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNull(janitorResourceTracker0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      basicJanitorMonkeyContext0.monkeyRegion = basicJanitorMonkeyContext_BasicJanitorContext0.region;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getLaunchConfigJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      
      String string0 = basicJanitorMonkeyContext0.getEventReport();
      assertEquals("", string0);
      assertNotNull(string0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      String string1 = "simianarmy.janitor.rule.orphanedInstanceRule.retentionDaysWithoutOwner";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      assertNotNull(instanceJanitorCrawler0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      assertNotNull(basicVolumeTaggingMonkeyContext0);
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicVolumeTaggingMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, basicJanitorMonkeyContext0.ownerEmailDomain);
      assertNotNull(simpleDBRecorder0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string1, basicJanitorRuleEngine0, instanceJanitorCrawler0, basicJanitorMonkeyContext0.janitorResourceTracker, basicJanitorMonkeyContext0.monkeyCalendar, monkeyConfiguration0, simpleDBRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("simianarmy.janitor.rule.orphanedInstanceRule.retentionDaysWithoutOwner", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      String string2 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertEquals("simianarmy.janitor.rule.orphanedInstanceRule.retentionDaysWithoutOwner", string2);
      assertNotNull(string2);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("simianarmy.janitor.rule.orphanedInstanceRule.retentionDaysWithoutOwner", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNotNull(monkeyConfiguration1);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(monkeyConfiguration0, monkeyConfiguration1);
      assertSame(monkeyConfiguration1, monkeyConfiguration0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("simianarmy.janitor.rule.orphanedInstanceRule.retentionDaysWithoutOwner", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      InstanceJanitor instanceJanitor1 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor1);
      assertFalse(instanceJanitor1.equals((Object)instanceJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(instanceJanitor1, instanceJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor1.getRegion());
      
      Set<String> set0 = basicJanitorMonkeyContext0.getPropertySet(string2);
      assertNotNull(set0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(monkeyConfiguration0, monkeyConfiguration1);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertFalse(set0.contains(string2));
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("simianarmy.janitor.rule.orphanedInstanceRule.retentionDaysWithoutOwner", basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(janitorRuleEngine0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      basicJanitorMonkeyContext0.monkeyRegion = basicJanitorMonkeyContext_BasicJanitorContext0.region;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      assertNotNull(basicCalendar0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals(11, basicCalendar0.openHour());
      
      basicJanitorMonkeyContext0.monkeyCalendar = (MonkeyCalendar) basicCalendar0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals(11, basicJanitorMonkeyContext0.monkeyCalendar.closeHour());
      assertEquals(11, basicJanitorMonkeyContext0.monkeyCalendar.openHour());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(janitorCrawler0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(janitorRuleEngine0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      
      Calendar calendar0 = basicCalendar0.now();
      assertNotNull(calendar0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals("org.evosuite.runtime.mock.java.util.MockGregorianCalendar[time=1392409281320,areFieldsSet=true,areAllFieldsSet=true,lenient=true,zone=sun.util.calendar.ZoneInfo[id=\"America/Los_Angeles\",offset=-28800000,dstSavings=3600000,useDaylight=true,transitions=185,lastRule=java.util.SimpleTimeZone[id=America/Los_Angeles,offset=-28800000,dstSavings=3600000,useDaylight=true,startYear=0,startMode=3,startMonth=2,startDay=8,startDayOfWeek=1,startTime=7200000,startTimeMode=0,endMode=3,endMonth=10,endDay=1,endDayOfWeek=1,endTime=7200000,endTimeMode=0]],firstDayOfWeek=1,minimalDaysInFirstWeek=1,ERA=1,YEAR=2014,MONTH=1,WEEK_OF_YEAR=7,WEEK_OF_MONTH=3,DAY_OF_MONTH=14,DAY_OF_YEAR=45,DAY_OF_WEEK=6,DAY_OF_WEEK_IN_MONTH=2,AM_PM=1,HOUR=0,HOUR_OF_DAY=12,MINUTE=21,SECOND=21,MILLISECOND=320,ZONE_OFFSET=-28800000,DST_OFFSET=0]", calendar0.toString());
      assertEquals(1, calendar0.getMinimalDaysInFirstWeek());
      assertTrue(calendar0.isLenient());
      assertEquals(1, calendar0.getFirstDayOfWeek());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(monkeyRecorder0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      String string0 = null;
      basicJanitorMonkeyContext0.monkeyRegion = string0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getInstanceJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = null;
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      
      basicJanitorMonkeyContext0.monkeyCalendar = monkeyCalendar0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSVolumeJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      
      ASGJanitor aSGJanitor1 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor1);
      assertFalse(aSGJanitor1.equals((Object)aSGJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(aSGJanitor1, aSGJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor1.getRegion());
      
      Vector<AbstractJanitor> vector0 = new Vector<AbstractJanitor>();
      assertNotNull(vector0);
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      
      String string0 = "OR{F;f%pUw/F&%}M";
      Set<String> set0 = basicJanitorMonkeyContext0.getPropertySet(string0);
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertFalse(set0.contains(string0));
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/.aws/credentials");
      boolean boolean0 = true;
      boolean boolean1 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean0);
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      
      basicJanitorMonkeyContext0.janitors = (List<AbstractJanitor>) vector0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, basicJanitorMonkeyContext0.janitors.size());
      assertTrue(basicJanitorMonkeyContext0.janitors.isEmpty());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      basicJanitorMonkeyContext0.janitorResourceTracker = janitorResourceTracker0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      LaunchConfigJanitor launchConfigJanitor1 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertNotNull(launchConfigJanitor1);
      assertFalse(launchConfigJanitor1.equals((Object)launchConfigJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(launchConfigJanitor1, launchConfigJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor1.getRegion());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(monkeyRecorder0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      ASGJanitor aSGJanitor2 = basicJanitorMonkeyContext0.getASGJanitor();
      assertNotNull(aSGJanitor2);
      assertFalse(aSGJanitor2.equals((Object)aSGJanitor1));
      assertFalse(aSGJanitor2.equals((Object)aSGJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(aSGJanitor2, aSGJanitor1);
      assertNotSame(aSGJanitor2, aSGJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor2.getRegion());
      
      String string1 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNull(string1);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getPropertySet(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, basicJanitorMonkeyContext0.sourceEmail);
      assertFalse(boolean0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      String string0 = null;
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      
      basicJanitorMonkeyContext0.monkeyRegion = string0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      basicJanitorMonkeyContext0.resetEventReport();
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getASGJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = null;
      basicJanitorMonkeyContext0.emailNotifier = janitorEmailNotifier0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNull(monkeyConfiguration0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(janitorRuleEngine0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(monkeyRecorder0);
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      EBSVolumeJanitor eBSVolumeJanitor1 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertNotNull(eBSVolumeJanitor1);
      assertFalse(eBSVolumeJanitor1.equals((Object)eBSVolumeJanitor0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertNotSame(eBSVolumeJanitor1, eBSVolumeJanitor0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor1.getRegion());
      
      JanitorEmailNotifier janitorEmailNotifier1 = basicJanitorMonkeyContext0.emailNotifier();
      assertNull(janitorEmailNotifier1);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }
}
