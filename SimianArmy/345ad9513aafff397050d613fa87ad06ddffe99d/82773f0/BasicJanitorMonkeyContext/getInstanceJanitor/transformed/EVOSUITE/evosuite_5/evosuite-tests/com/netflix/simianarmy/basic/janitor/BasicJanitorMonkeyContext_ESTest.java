/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 04:12:31 GMT 2021
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.amazonaws.ClientConfiguration;
import com.amazonaws.Protocol;
import com.amazonaws.auth.WebIdentityFederationSessionCredentialsProvider;
import com.amazonaws.regions.RegionMetadata;
import com.amazonaws.regions.RegionUtils;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.aws.SimpleDBRecorder;
import com.netflix.simianarmy.aws.janitor.ASGJanitor;
import com.netflix.simianarmy.aws.janitor.EBSSnapshotJanitor;
import com.netflix.simianarmy.aws.janitor.EBSVolumeJanitor;
import com.netflix.simianarmy.aws.janitor.InstanceJanitor;
import com.netflix.simianarmy.aws.janitor.LaunchConfigJanitor;
import com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.LaunchConfigJanitorCrawler;
import com.netflix.simianarmy.basic.BasicCalendar;
import com.netflix.simianarmy.basic.BasicConfiguration;
import com.netflix.simianarmy.basic.BasicSimianArmyContext;
import com.netflix.simianarmy.basic.LocalDbRecorder;
import com.netflix.simianarmy.basic.janitor.BasicJanitorEmailBuilder;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.basic.janitor.BasicVolumeTaggingMonkeyContext;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.client.edda.EddaClient;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailBuilder;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import java.util.List;
import java.util.Set;
import java.util.SimpleTimeZone;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(5, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicJanitorEmailBuilder basicJanitorEmailBuilder0 = (BasicJanitorEmailBuilder)basicJanitorMonkeyContext0.janitorEmailBuilder;
      assertNotNull(basicJanitorEmailBuilder0);
      
      basicJanitorMonkeyContext0.janitorEmailBuilder = (JanitorEmailBuilder) basicJanitorEmailBuilder0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertFalse(set0.isEmpty());
      assertEquals(5, set0.size());
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      String string0 = basicJanitorMonkeyContext0.getEventReport();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorCrawler0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      RegionMetadata regionMetadata0 = mock(RegionMetadata.class, new ViolatedAssumptionAnswer());
      RegionUtils.initializeWithMetadata(regionMetadata0);
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(5, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      Set<String> set1 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(set1.isEmpty());
      assertEquals(5, set1.size());
      assertNotNull(set1);
      assertTrue(set1.equals((Object)set0));
      assertNotSame(set1, set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EddaClient eddaClient1 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(eddaClient1);
      assertFalse(eddaClient1.equals((Object)eddaClient0));
      assertNotSame(eddaClient1, eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getInstanceJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorResourceTracker0);
      
      String string0 = basicJanitorMonkeyContext0.getEventReport();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailBuilder janitorEmailBuilder0 = null;
      basicJanitorMonkeyContext0.janitorEmailBuilder = janitorEmailBuilder0;
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyCalendar0);
      
      basicJanitorMonkeyContext0.janitors = list0;
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(5, basicJanitorMonkeyContext0.janitors.size());
      assertFalse(basicJanitorMonkeyContext0.janitors.isEmpty());
      
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyCalendar1);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(5, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor1 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor1.getRegion());
      assertNotNull(eBSVolumeJanitor1);
      assertFalse(eBSVolumeJanitor1.equals((Object)eBSVolumeJanitor0));
      assertNotSame(eBSVolumeJanitor1, eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicSimianArmyContext.GLOBAL_OWNER_TAGKEY = basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getImageJanitor();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Image Janitor only works when Edda is enabled.
         //
         verifyException("com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyRecorder0);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorResourceTracker0);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorCrawler0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor1 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor1.getRegion());
      assertNotNull(eBSVolumeJanitor1);
      assertFalse(eBSVolumeJanitor1.equals((Object)eBSVolumeJanitor0));
      assertNotSame(eBSVolumeJanitor1, eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext1 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext1.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext1);
      assertFalse(basicJanitorMonkeyContext_BasicJanitorContext1.equals((Object)basicJanitorMonkeyContext_BasicJanitorContext0));
      
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext1.region();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext1.region());
      assertNull(string0);
      assertFalse(basicJanitorMonkeyContext_BasicJanitorContext1.equals((Object)basicJanitorMonkeyContext_BasicJanitorContext0));
      assertNotSame(basicJanitorMonkeyContext_BasicJanitorContext1, basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext1.janitorCrawler();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext1.region());
      assertNull(janitorCrawler0);
      assertFalse(basicJanitorMonkeyContext_BasicJanitorContext1.equals((Object)basicJanitorMonkeyContext_BasicJanitorContext0));
      assertNotSame(basicJanitorMonkeyContext_BasicJanitorContext1, basicJanitorMonkeyContext_BasicJanitorContext0);
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorResourceTracker0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors;
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      
      basicJanitorMonkeyContext0.janitors = list0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(basicJanitorMonkeyContext0.janitors.isEmpty());
      assertEquals(5, basicJanitorMonkeyContext0.janitors.size());
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyConfiguration0);
      
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyConfiguration1);
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker1 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(janitorResourceTracker1);
      assertSame(janitorResourceTracker1, janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorRuleEngine0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      List<AbstractJanitor> list0 = null;
      basicJanitorMonkeyContext0.janitors = list0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      List<AbstractJanitor> list1 = basicJanitorMonkeyContext0.janitors();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNull(list1);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      String string0 = "";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertNotNull(aWSClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      LaunchConfigJanitorCrawler launchConfigJanitorCrawler0 = new LaunchConfigJanitorCrawler(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertNotNull(launchConfigJanitorCrawler0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = (SimpleDBJanitorResourceTracker)basicJanitorMonkeyContext0.janitorResourceTracker;
      assertNotNull(simpleDBJanitorResourceTracker0);
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertNotNull(xMLDSigRI0);
      
      BasicConfiguration basicConfiguration0 = new BasicConfiguration(xMLDSigRI0);
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertNotNull(basicConfiguration0);
      
      String string1 = "4iU1M~\"8foWU";
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, string1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertNotNull(simpleDBRecorder0);
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, launchConfigJanitorCrawler0, simpleDBJanitorResourceTracker0, basicJanitorMonkeyContext0.monkeyCalendar, basicConfiguration0, simpleDBRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(janitorCrawler0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(launchConfigJanitorCrawler0, janitorCrawler0);
      assertNotSame(string1, string0);
      assertSame(janitorCrawler0, launchConfigJanitorCrawler0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorCrawler0);
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      Vector<AbstractJanitor> vector0 = new Vector<AbstractJanitor>();
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertNotNull(vector0);
      
      basicJanitorMonkeyContext0.janitors = (List<AbstractJanitor>) vector0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertTrue(vector0.isEmpty());
      assertEquals("[]", vector0.toString());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      assertTrue(basicJanitorMonkeyContext0.janitors.isEmpty());
      assertEquals(0, basicJanitorMonkeyContext0.janitors.size());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      String string0 = null;
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      WebIdentityFederationSessionCredentialsProvider webIdentityFederationSessionCredentialsProvider0 = new WebIdentityFederationSessionCredentialsProvider(basicJanitorMonkeyContext0.sourceEmail, basicJanitorMonkeyContext0.monkeyRegion, string0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(3600, webIdentityFederationSessionCredentialsProvider0.getSessionDuration());
      assertEquals(500, webIdentityFederationSessionCredentialsProvider0.getRefreshThreshold());
      assertNull(webIdentityFederationSessionCredentialsProvider0.getSubjectFromWIF());
      assertNotNull(webIdentityFederationSessionCredentialsProvider0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals(500, WebIdentityFederationSessionCredentialsProvider.DEFAULT_THRESHOLD_SECONDS);
      assertEquals(3600, WebIdentityFederationSessionCredentialsProvider.DEFAULT_DURATION_SECONDS);
      
      ClientConfiguration clientConfiguration0 = new ClientConfiguration();
      assertEquals(50, clientConfiguration0.getMaxConnections());
      assertNull(clientConfiguration0.getSignerOverride());
      assertEquals((-1), clientConfiguration0.getProxyPort());
      assertEquals(50, clientConfiguration0.getResponseMetadataCacheSize());
      assertTrue(clientConfiguration0.useReaper());
      assertEquals(50000, clientConfiguration0.getSocketTimeout());
      assertEquals((-1L), clientConfiguration0.getConnectionTTL());
      assertNull(clientConfiguration0.getProxyPassword());
      assertNull(clientConfiguration0.getProxyWorkstation());
      assertFalse(clientConfiguration0.useGzip());
      assertFalse(clientConfiguration0.isPreemptiveBasicProxyAuth());
      assertEquals(Protocol.HTTPS, clientConfiguration0.getProtocol());
      assertEquals((-1), clientConfiguration0.getMaxErrorRetry());
      assertNull(clientConfiguration0.getProxyDomain());
      assertEquals("aws-sdk-java/1.10.5.1 Linux/5.4.0-74-generic Java_HotSpot(TM)_64-Bit_Server_VM/25.291-b10/1.8.0_291", clientConfiguration0.getUserAgent());
      assertNull(clientConfiguration0.getProxyUsername());
      assertFalse(clientConfiguration0.useTcpKeepAlive());
      assertEquals(50000, clientConfiguration0.getConnectionTimeout());
      assertNull(clientConfiguration0.getProxyHost());
      assertNotNull(clientConfiguration0);
      assertFalse(ClientConfiguration.DEFAULT_USE_GZIP);
      assertEquals((-1L), ClientConfiguration.DEFAULT_CONNECTION_TTL);
      assertEquals(50, ClientConfiguration.DEFAULT_RESPONSE_METADATA_CACHE_SIZE);
      assertEquals(50000, ClientConfiguration.DEFAULT_CONNECTION_TIMEOUT);
      assertFalse(ClientConfiguration.DEFAULT_TCP_KEEP_ALIVE);
      assertEquals(50000, ClientConfiguration.DEFAULT_SOCKET_TIMEOUT);
      assertEquals(50, ClientConfiguration.DEFAULT_MAX_CONNECTIONS);
      assertTrue(ClientConfiguration.DEFAULT_USE_REAPER);
      
      AWSClient aWSClient0 = new AWSClient(string0, webIdentityFederationSessionCredentialsProvider0, clientConfiguration0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(3600, webIdentityFederationSessionCredentialsProvider0.getSessionDuration());
      assertEquals(500, webIdentityFederationSessionCredentialsProvider0.getRefreshThreshold());
      assertNull(webIdentityFederationSessionCredentialsProvider0.getSubjectFromWIF());
      assertEquals(50, clientConfiguration0.getMaxConnections());
      assertNull(clientConfiguration0.getSignerOverride());
      assertEquals((-1), clientConfiguration0.getProxyPort());
      assertEquals(50, clientConfiguration0.getResponseMetadataCacheSize());
      assertTrue(clientConfiguration0.useReaper());
      assertEquals(50000, clientConfiguration0.getSocketTimeout());
      assertEquals((-1L), clientConfiguration0.getConnectionTTL());
      assertNull(clientConfiguration0.getProxyPassword());
      assertNull(clientConfiguration0.getProxyWorkstation());
      assertFalse(clientConfiguration0.useGzip());
      assertFalse(clientConfiguration0.isPreemptiveBasicProxyAuth());
      assertEquals(Protocol.HTTPS, clientConfiguration0.getProtocol());
      assertEquals((-1), clientConfiguration0.getMaxErrorRetry());
      assertNull(clientConfiguration0.getProxyDomain());
      assertEquals("aws-sdk-java/1.10.5.1 Linux/5.4.0-74-generic Java_HotSpot(TM)_64-Bit_Server_VM/25.291-b10/1.8.0_291", clientConfiguration0.getUserAgent());
      assertNull(clientConfiguration0.getProxyUsername());
      assertFalse(clientConfiguration0.useTcpKeepAlive());
      assertEquals(50000, clientConfiguration0.getConnectionTimeout());
      assertNull(clientConfiguration0.getProxyHost());
      assertNull(aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertNotNull(aWSClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals(500, WebIdentityFederationSessionCredentialsProvider.DEFAULT_THRESHOLD_SECONDS);
      assertEquals(3600, WebIdentityFederationSessionCredentialsProvider.DEFAULT_DURATION_SECONDS);
      assertFalse(ClientConfiguration.DEFAULT_USE_GZIP);
      assertEquals((-1L), ClientConfiguration.DEFAULT_CONNECTION_TTL);
      assertEquals(50, ClientConfiguration.DEFAULT_RESPONSE_METADATA_CACHE_SIZE);
      assertEquals(50000, ClientConfiguration.DEFAULT_CONNECTION_TIMEOUT);
      assertFalse(ClientConfiguration.DEFAULT_TCP_KEEP_ALIVE);
      assertEquals(50000, ClientConfiguration.DEFAULT_SOCKET_TIMEOUT);
      assertEquals(50, ClientConfiguration.DEFAULT_MAX_CONNECTIONS);
      assertTrue(ClientConfiguration.DEFAULT_USE_REAPER);
      
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(3600, webIdentityFederationSessionCredentialsProvider0.getSessionDuration());
      assertEquals(500, webIdentityFederationSessionCredentialsProvider0.getRefreshThreshold());
      assertNull(webIdentityFederationSessionCredentialsProvider0.getSubjectFromWIF());
      assertEquals(50, clientConfiguration0.getMaxConnections());
      assertNull(clientConfiguration0.getSignerOverride());
      assertEquals((-1), clientConfiguration0.getProxyPort());
      assertEquals(50, clientConfiguration0.getResponseMetadataCacheSize());
      assertTrue(clientConfiguration0.useReaper());
      assertEquals(50000, clientConfiguration0.getSocketTimeout());
      assertEquals((-1L), clientConfiguration0.getConnectionTTL());
      assertNull(clientConfiguration0.getProxyPassword());
      assertNull(clientConfiguration0.getProxyWorkstation());
      assertFalse(clientConfiguration0.useGzip());
      assertFalse(clientConfiguration0.isPreemptiveBasicProxyAuth());
      assertEquals(Protocol.HTTPS, clientConfiguration0.getProtocol());
      assertEquals((-1), clientConfiguration0.getMaxErrorRetry());
      assertNull(clientConfiguration0.getProxyDomain());
      assertEquals("aws-sdk-java/1.10.5.1 Linux/5.4.0-74-generic Java_HotSpot(TM)_64-Bit_Server_VM/25.291-b10/1.8.0_291", clientConfiguration0.getUserAgent());
      assertNull(clientConfiguration0.getProxyUsername());
      assertFalse(clientConfiguration0.useTcpKeepAlive());
      assertEquals(50000, clientConfiguration0.getConnectionTimeout());
      assertNull(clientConfiguration0.getProxyHost());
      assertNull(aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertNotNull(instanceJanitorCrawler0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      assertEquals(500, WebIdentityFederationSessionCredentialsProvider.DEFAULT_THRESHOLD_SECONDS);
      assertEquals(3600, WebIdentityFederationSessionCredentialsProvider.DEFAULT_DURATION_SECONDS);
      assertFalse(ClientConfiguration.DEFAULT_USE_GZIP);
      assertEquals((-1L), ClientConfiguration.DEFAULT_CONNECTION_TTL);
      assertEquals(50, ClientConfiguration.DEFAULT_RESPONSE_METADATA_CACHE_SIZE);
      assertEquals(50000, ClientConfiguration.DEFAULT_CONNECTION_TIMEOUT);
      assertFalse(ClientConfiguration.DEFAULT_TCP_KEEP_ALIVE);
      assertEquals(50000, ClientConfiguration.DEFAULT_SOCKET_TIMEOUT);
      assertEquals(50, ClientConfiguration.DEFAULT_MAX_CONNECTIONS);
      assertTrue(ClientConfiguration.DEFAULT_USE_REAPER);
      
      int int0 = (-171);
      int int1 = (-1807);
      int int2 = 0;
      int int3 = (-1576);
      int int4 = 0;
      int int5 = 2320;
      SimpleTimeZone simpleTimeZone0 = null;
      try {
        simpleTimeZone0 = new SimpleTimeZone(webIdentityFederationSessionCredentialsProvider0.DEFAULT_THRESHOLD_SECONDS, basicJanitorMonkeyContext0.defaultEmail, int1, int2, int1, clientConfiguration0.DEFAULT_MAX_CONNECTIONS, webIdentityFederationSessionCredentialsProvider0.DEFAULT_THRESHOLD_SECONDS, int3, int4, int5, int5);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal end month 500
         //
         verifyException("java.util.SimpleTimeZone", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyCalendar0);
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier1 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier1);
      assertSame(janitorEmailNotifier1, janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyRecorder0);
      
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyCalendar1);
      
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(string0);
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyConfiguration0);
      
      JanitorEmailNotifier janitorEmailNotifier2 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier2);
      assertSame(janitorEmailNotifier2, janitorEmailNotifier0);
      assertSame(janitorEmailNotifier2, janitorEmailNotifier1);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getLaunchConfigJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      String string0 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(string0);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorResourceTracker0);
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyRecorder0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorCrawler0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      Set<String> set0 = basicJanitorMonkeyContext0.getEnabledResourceSet();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(5, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyRecorder0);
      
      MonkeyRecorder.Event monkeyRecorder_Event0 = null;
      basicJanitorMonkeyContext0.reportEvent(monkeyRecorder_Event0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorRuleEngine0);
      
      EBSVolumeJanitor eBSVolumeJanitor1 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", eBSVolumeJanitor1.getRegion());
      assertNotNull(eBSVolumeJanitor1);
      assertFalse(eBSVolumeJanitor1.equals((Object)eBSVolumeJanitor0));
      assertNotSame(eBSVolumeJanitor1, eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertNotNull(list0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      basicJanitorMonkeyContext0.janitors = list0;
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      assertFalse(basicJanitorMonkeyContext0.janitors.isEmpty());
      assertEquals(5, basicJanitorMonkeyContext0.janitors.size());
      
      basicJanitorMonkeyContext0.monkeyCalendar = basicJanitorMonkeyContext_BasicJanitorContext0.calendar;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSVolumeJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyRecorder0);
      
      MonkeyRecorder monkeyRecorder1 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(monkeyRecorder1);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      String string0 = null;
      basicJanitorMonkeyContext0.janitorResourceTracker = basicJanitorMonkeyContext_BasicJanitorContext0.resourceTracker;
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      BasicSimianArmyContext.GLOBAL_OWNER_TAGKEY = string0;
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertNull(janitorResourceTracker0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getEBSVolumeJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      basicJanitorMonkeyContext0.resetEventReport();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EvoSuiteFile evoSuiteFile0 = new EvoSuiteFile("/home/CIN/lmps2/.aws/config");
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertTrue(boolean0);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNull(janitorCrawler0);
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSSnapshotJanitor eBSSnapshotJanitor1 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor1.getRegion());
      assertNotNull(eBSSnapshotJanitor1);
      assertFalse(eBSSnapshotJanitor1.equals((Object)eBSSnapshotJanitor0));
      assertNotSame(eBSSnapshotJanitor1, eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSSnapshotJanitor eBSSnapshotJanitor2 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor2.getRegion());
      assertNotNull(eBSSnapshotJanitor2);
      assertFalse(eBSSnapshotJanitor2.equals((Object)eBSSnapshotJanitor1));
      assertFalse(eBSSnapshotJanitor2.equals((Object)eBSSnapshotJanitor0));
      assertNotSame(eBSSnapshotJanitor2, eBSSnapshotJanitor1);
      assertNotSame(eBSSnapshotJanitor2, eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      MonkeyCalendar monkeyCalendar0 = null;
      basicJanitorMonkeyContext0.monkeyCalendar = monkeyCalendar0;
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      EddaClient eddaClient0 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(janitorEmailNotifier0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EddaClient eddaClient1 = basicJanitorMonkeyContext0.createEddaClient();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(eddaClient1);
      assertFalse(eddaClient1.equals((Object)eddaClient0));
      assertNotSame(eddaClient1, eddaClient0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      // Undeclared exception!
      try { 
        basicJanitorMonkeyContext0.getASGJanitor();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // The validated object is null
         //
         verifyException("org.apache.commons.lang.Validate", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSSnapshotJanitor eBSSnapshotJanitor0 = basicJanitorMonkeyContext0.getEBSSnapshotJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSSnapshotJanitor0.getRegion());
      assertNotNull(eBSSnapshotJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      basicJanitorMonkeyContext0.resetEventReport();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext();
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      
      ASGJanitor aSGJanitor0 = basicJanitorMonkeyContext0.getASGJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aSGJanitor0.getRegion());
      assertNotNull(aSGJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier;
      assertNotNull(janitorEmailNotifier0);
      
      basicJanitorMonkeyContext0.emailNotifier = janitorEmailNotifier0;
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier1 = null;
      basicJanitorMonkeyContext0.emailNotifier = janitorEmailNotifier1;
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      InstanceJanitor instanceJanitor0 = basicJanitorMonkeyContext0.getInstanceJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", instanceJanitor0.getRegion());
      assertNotNull(instanceJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      JanitorEmailNotifier janitorEmailNotifier2 = basicJanitorMonkeyContext0.emailNotifier();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertNull(janitorEmailNotifier2);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      LaunchConfigJanitor launchConfigJanitor0 = basicJanitorMonkeyContext0.getLaunchConfigJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", launchConfigJanitor0.getRegion());
      assertNotNull(launchConfigJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
      
      EBSVolumeJanitor eBSVolumeJanitor0 = basicJanitorMonkeyContext0.getEBSVolumeJanitor();
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", eBSVolumeJanitor0.getRegion());
      assertNotNull(eBSVolumeJanitor0);
      assertEquals(2, basicJanitorMonkeyContext0.daysBeforeTermination);
  }
}
