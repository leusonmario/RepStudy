/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 01:43:50 GMT 2021
 */

package com.netflix.simianarmy.basic.janitor;

import org.junit.Test;
import static org.junit.Assert.*;
import com.amazonaws.auth.SystemPropertiesCredentialsProvider;
import com.netflix.simianarmy.MonkeyCalendar;
import com.netflix.simianarmy.MonkeyConfiguration;
import com.netflix.simianarmy.MonkeyRecorder;
import com.netflix.simianarmy.aws.SimpleDBRecorder;
import com.netflix.simianarmy.aws.janitor.SimpleDBJanitorResourceTracker;
import com.netflix.simianarmy.aws.janitor.crawler.ASGJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.EBSSnapshotJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.EBSVolumeJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.InstanceJanitorCrawler;
import com.netflix.simianarmy.aws.janitor.crawler.LaunchConfigJanitorCrawler;
import com.netflix.simianarmy.basic.BasicCalendar;
import com.netflix.simianarmy.basic.BasicChaosMonkeyContext;
import com.netflix.simianarmy.basic.BasicConfiguration;
import com.netflix.simianarmy.basic.LocalDbRecorder;
import com.netflix.simianarmy.basic.conformity.BasicConformityMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorMonkeyContext;
import com.netflix.simianarmy.basic.janitor.BasicJanitorRuleEngine;
import com.netflix.simianarmy.basic.janitor.BasicVolumeTaggingMonkeyContext;
import com.netflix.simianarmy.client.aws.AWSClient;
import com.netflix.simianarmy.janitor.AbstractJanitor;
import com.netflix.simianarmy.janitor.JanitorCrawler;
import com.netflix.simianarmy.janitor.JanitorEmailNotifier;
import com.netflix.simianarmy.janitor.JanitorResourceTracker;
import com.netflix.simianarmy.janitor.JanitorRuleEngine;
import java.util.List;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jcp.xml.dsig.internal.dom.XMLDSigRI;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BasicJanitorMonkeyContext_ESTest extends BasicJanitorMonkeyContext_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier.Context janitorEmailNotifier_Context0 = basicJanitorMonkeyContext0.getJanitorEmailNotifierContext();
      assertNotNull(janitorEmailNotifier_Context0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorRuleEngine janitorRuleEngine0 = null;
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      InstanceJanitorCrawler instanceJanitorCrawler0 = new InstanceJanitorCrawler(aWSClient0);
      assertNotNull(instanceJanitorCrawler0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      assertNotNull(basicCalendar0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals(11, basicCalendar0.openHour());
      
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      assertNotNull(basicConformityMonkeyContext0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      
      MonkeyConfiguration monkeyConfiguration1 = basicConformityMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration1);
      assertNotSame(monkeyConfiguration1, monkeyConfiguration0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertFalse(monkeyConfiguration1.equals((Object)monkeyConfiguration0));
      
      LocalDbRecorder localDbRecorder0 = new LocalDbRecorder(monkeyConfiguration1);
      assertNotNull(localDbRecorder0);
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertFalse(monkeyConfiguration1.equals((Object)monkeyConfiguration0));
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(basicJanitorMonkeyContext0.GLOBAL_OWNER_TAGKEY, janitorRuleEngine0, instanceJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, localDbRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals("owner", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(monkeyConfiguration0.equals((Object)monkeyConfiguration1));
      assertFalse(monkeyConfiguration1.equals((Object)monkeyConfiguration0));
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext_BasicJanitorContext0.recorder();
      assertNotNull(monkeyRecorder0);
      assertNotSame(monkeyConfiguration0, monkeyConfiguration1);
      assertNotSame(monkeyConfiguration1, monkeyConfiguration0);
      assertSame(localDbRecorder0, monkeyRecorder0);
      assertSame(monkeyRecorder0, localDbRecorder0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals(11, basicCalendar0.closeHour());
      assertEquals(11, basicCalendar0.openHour());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals("owner", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(monkeyConfiguration0.equals((Object)monkeyConfiguration1));
      assertFalse(monkeyConfiguration1.equals((Object)monkeyConfiguration0));
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      JanitorEmailNotifier janitorEmailNotifier0 = basicJanitorMonkeyContext0.emailNotifier();
      assertNotNull(janitorEmailNotifier0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      String string0 = ", att key:";
      basicJanitorMonkeyContext0.exportCredentials(string0, string0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertFalse(list0.isEmpty());
      assertEquals(5, list0.size());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = null;
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      ASGJanitorCrawler aSGJanitorCrawler0 = new ASGJanitorCrawler(aWSClient0);
      assertNotNull(aSGJanitorCrawler0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      
      XMLDSigRI xMLDSigRI0 = new XMLDSigRI();
      assertNotNull(xMLDSigRI0);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      BasicConfiguration basicConfiguration0 = new BasicConfiguration(xMLDSigRI0);
      assertNotNull(basicConfiguration0);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      LocalDbRecorder localDbRecorder0 = new LocalDbRecorder(basicConfiguration0);
      assertNotNull(localDbRecorder0);
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, aSGJanitorCrawler0, janitorResourceTracker0, monkeyCalendar0, basicConfiguration0, localDbRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals("XMLDSig version 1.8", xMLDSigRI0.toString());
      assertFalse(xMLDSigRI0.isEmpty());
      assertEquals("XMLDSig (DOM XMLSignatureFactory; DOM KeyInfoFactory; C14N 1.0, C14N 1.1, Exclusive C14N, Base64, Enveloped, XPath, XPath2, XSLT TransformServices)", xMLDSigRI0.getInfo());
      assertEquals(37, xMLDSigRI0.size());
      assertEquals(1.8, xMLDSigRI0.getVersion(), 0.01);
      assertEquals("XMLDSig", xMLDSigRI0.getName());
      assertNull(basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      AWSClient aWSClient0 = new AWSClient(string0);
      assertNotNull(aWSClient0);
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      EBSVolumeJanitorCrawler eBSVolumeJanitorCrawler0 = new EBSVolumeJanitorCrawler(aWSClient0);
      assertNotNull(eBSVolumeJanitorCrawler0);
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      assertNotNull(basicVolumeTaggingMonkeyContext0);
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicVolumeTaggingMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      assertNotNull(monkeyRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSVolumeJanitorCrawler0, janitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      MonkeyCalendar monkeyCalendar1 = basicJanitorMonkeyContext_BasicJanitorContext0.calendar();
      assertNotNull(monkeyCalendar1);
      assertSame(monkeyCalendar0, monkeyCalendar1);
      assertSame(monkeyCalendar1, monkeyCalendar0);
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals(11, monkeyCalendar1.openHour());
      assertEquals(11, monkeyCalendar1.closeHour());
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      List<AbstractJanitor> list0 = basicJanitorMonkeyContext0.janitors();
      assertNotNull(list0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(5, list0.size());
      assertFalse(list0.isEmpty());
      
      String string0 = "BXo@\"}x%{jZ";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      String string1 = "";
      AWSClient aWSClient0 = new AWSClient(string1);
      assertNotNull(aWSClient0);
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertFalse(string1.equals((Object)string0));
      
      LaunchConfigJanitorCrawler launchConfigJanitorCrawler0 = new LaunchConfigJanitorCrawler(aWSClient0);
      assertNotNull(launchConfigJanitorCrawler0);
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertFalse(string1.equals((Object)string0));
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      assertNotNull(basicConformityMonkeyContext0);
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      
      BasicCalendar basicCalendar0 = new BasicCalendar(monkeyConfiguration0);
      assertNotNull(basicCalendar0);
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals(24, basicCalendar0.closeHour());
      assertEquals(0, basicCalendar0.openHour());
      
      MonkeyRecorder monkeyRecorder0 = basicJanitorMonkeyContext0.recorder();
      assertNotNull(monkeyRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, launchConfigJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals(24, basicCalendar0.closeHour());
      assertEquals(0, basicCalendar0.openHour());
      assertEquals("BXo@\"}x%{jZ", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      String string2 = basicJanitorMonkeyContext_BasicJanitorContext0.region();
      assertNotNull(string2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(string2, string0);
      assertNotSame(string2, string1);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals(24, basicCalendar0.closeHour());
      assertEquals(0, basicCalendar0.openHour());
      assertEquals("BXo@\"}x%{jZ", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertEquals("BXo@\"}x%{jZ", string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "})>d";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      SystemPropertiesCredentialsProvider systemPropertiesCredentialsProvider0 = new SystemPropertiesCredentialsProvider();
      assertNotNull(systemPropertiesCredentialsProvider0);
      
      AWSClient aWSClient0 = new AWSClient(string0, systemPropertiesCredentialsProvider0);
      assertNotNull(aWSClient0);
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("})>d", aWSClient0.region());
      
      LaunchConfigJanitorCrawler launchConfigJanitorCrawler0 = new LaunchConfigJanitorCrawler(aWSClient0);
      assertNotNull(launchConfigJanitorCrawler0);
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("})>d", aWSClient0.region());
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      int int0 = 1;
      TimeZone timeZone0 = null;
      BasicCalendar basicCalendar0 = new BasicCalendar(int0, int0, timeZone0);
      assertNotNull(basicCalendar0);
      assertEquals(1, basicCalendar0.closeHour());
      assertEquals(1, basicCalendar0.openHour());
      
      MonkeyConfiguration monkeyConfiguration0 = basicJanitorMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      LocalDbRecorder localDbRecorder0 = new LocalDbRecorder(monkeyConfiguration0);
      assertNotNull(localDbRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, launchConfigJanitorCrawler0, janitorResourceTracker0, basicCalendar0, monkeyConfiguration0, localDbRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("})>d", aWSClient0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(1, basicCalendar0.closeHour());
      assertEquals(1, basicCalendar0.openHour());
      assertEquals("})>d", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      
      JanitorCrawler janitorCrawler0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorCrawler();
      assertNotNull(janitorCrawler0);
      assertSame(launchConfigJanitorCrawler0, janitorCrawler0);
      assertSame(janitorCrawler0, launchConfigJanitorCrawler0);
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("})>d", aWSClient0.region());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(1, basicCalendar0.closeHour());
      assertEquals(1, basicCalendar0.openHour());
      assertEquals("})>d", basicJanitorMonkeyContext_BasicJanitorContext0.region());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      String string0 = ".r.v$4C\"w[$ad-qN";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      
      EBSSnapshotJanitorCrawler eBSSnapshotJanitorCrawler0 = new EBSSnapshotJanitorCrawler(aWSClient0);
      assertNotNull(eBSSnapshotJanitorCrawler0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      
      String string1 = "e";
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, string1);
      assertNotNull(simpleDBJanitorResourceTracker0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertFalse(string1.equals((Object)string0));
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      
      BasicChaosMonkeyContext basicChaosMonkeyContext0 = new BasicChaosMonkeyContext();
      assertNotNull(basicChaosMonkeyContext0);
      assertEquals("default", basicChaosMonkeyContext0.accountName());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      MonkeyConfiguration monkeyConfiguration0 = basicChaosMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("default", basicChaosMonkeyContext0.accountName());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      
      MonkeyRecorder monkeyRecorder0 = null;
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSSnapshotJanitorCrawler0, simpleDBJanitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, monkeyRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("default", basicChaosMonkeyContext0.accountName());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(".r.v$4C\"w[$ad-qN", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorResourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(simpleDBJanitorResourceTracker0, janitorResourceTracker0);
      assertSame(janitorResourceTracker0, simpleDBJanitorResourceTracker0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("default", basicChaosMonkeyContext0.accountName());
      assertEquals("us-west-1", basicChaosMonkeyContext0.region());
      assertEquals(".r.v$4C\"w[$ad-qN", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      String string0 = "com.vmware.vim25.VmConfigInfo";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      AWSClient aWSClient0 = new AWSClient(string0);
      assertNotNull(aWSClient0);
      assertEquals("com.vmware.vim25.VmConfigInfo", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      EBSSnapshotJanitorCrawler eBSSnapshotJanitorCrawler0 = new EBSSnapshotJanitorCrawler(aWSClient0);
      assertNotNull(eBSSnapshotJanitorCrawler0);
      assertEquals("com.vmware.vim25.VmConfigInfo", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      String string1 = "";
      SimpleDBJanitorResourceTracker simpleDBJanitorResourceTracker0 = new SimpleDBJanitorResourceTracker(aWSClient0, string1);
      assertNotNull(simpleDBJanitorResourceTracker0);
      assertEquals("com.vmware.vim25.VmConfigInfo", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      
      BasicVolumeTaggingMonkeyContext basicVolumeTaggingMonkeyContext0 = new BasicVolumeTaggingMonkeyContext();
      assertNotNull(basicVolumeTaggingMonkeyContext0);
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      
      MonkeyConfiguration monkeyConfiguration0 = basicVolumeTaggingMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      
      String string2 = "";
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, string2);
      assertNotNull(simpleDBRecorder0);
      assertEquals("com.vmware.vim25.VmConfigInfo", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, eBSSnapshotJanitorCrawler0, simpleDBJanitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, simpleDBRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("com.vmware.vim25.VmConfigInfo", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      assertEquals("com.vmware.vim25.VmConfigInfo", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
      
      JanitorRuleEngine janitorRuleEngine0 = basicJanitorMonkeyContext_BasicJanitorContext0.janitorRuleEngine();
      assertNotNull(janitorRuleEngine0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(basicJanitorRuleEngine0, janitorRuleEngine0);
      assertNotSame(string1, string0);
      assertSame(string1, string2);
      assertNotSame(string2, string0);
      assertSame(string2, string1);
      assertSame(janitorRuleEngine0, basicJanitorRuleEngine0);
      assertEquals("com.vmware.vim25.VmConfigInfo", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals(11, monkeyCalendar0.openHour());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals("us-west-1", basicVolumeTaggingMonkeyContext0.region());
      assertEquals("default", basicVolumeTaggingMonkeyContext0.accountName());
      assertEquals("com.vmware.vim25.VmConfigInfo", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string0));
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      String string0 = "`A`{N{/LlK%";
      BasicJanitorRuleEngine basicJanitorRuleEngine0 = new BasicJanitorRuleEngine();
      assertNotNull(basicJanitorRuleEngine0);
      
      BasicJanitorMonkeyContext basicJanitorMonkeyContext0 = new BasicJanitorMonkeyContext();
      assertNotNull(basicJanitorMonkeyContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      AWSClient aWSClient0 = basicJanitorMonkeyContext0.awsClient();
      assertNotNull(aWSClient0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      LaunchConfigJanitorCrawler launchConfigJanitorCrawler0 = new LaunchConfigJanitorCrawler(aWSClient0);
      assertNotNull(launchConfigJanitorCrawler0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      
      JanitorResourceTracker janitorResourceTracker0 = basicJanitorMonkeyContext0.resourceTracker();
      assertNotNull(janitorResourceTracker0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      
      MonkeyCalendar monkeyCalendar0 = basicJanitorMonkeyContext0.calendar();
      assertNotNull(monkeyCalendar0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      
      BasicConformityMonkeyContext basicConformityMonkeyContext0 = new BasicConformityMonkeyContext();
      assertNotNull(basicConformityMonkeyContext0);
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      
      MonkeyConfiguration monkeyConfiguration0 = basicConformityMonkeyContext0.configuration();
      assertNotNull(monkeyConfiguration0);
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      
      String string1 = "";
      SimpleDBRecorder simpleDBRecorder0 = new SimpleDBRecorder(aWSClient0, string1);
      assertNotNull(simpleDBRecorder0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertFalse(string1.equals((Object)string0));
      
      BasicJanitorMonkeyContext.BasicJanitorContext basicJanitorMonkeyContext_BasicJanitorContext0 = new BasicJanitorMonkeyContext.BasicJanitorContext(string0, basicJanitorRuleEngine0, launchConfigJanitorCrawler0, janitorResourceTracker0, monkeyCalendar0, monkeyConfiguration0, simpleDBRecorder0);
      assertNotNull(basicJanitorMonkeyContext_BasicJanitorContext0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals("`A`{N{/LlK%", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      MonkeyConfiguration monkeyConfiguration1 = basicJanitorMonkeyContext_BasicJanitorContext0.configuration();
      assertNotNull(monkeyConfiguration1);
      assertNotSame(string0, string1);
      assertSame(monkeyConfiguration0, monkeyConfiguration1);
      assertNotSame(string1, string0);
      assertSame(monkeyConfiguration1, monkeyConfiguration0);
      assertEquals("us-west-1", basicJanitorMonkeyContext0.region());
      assertEquals("default", basicJanitorMonkeyContext0.accountName());
      assertEquals("us-west-1", aWSClient0.region());
      assertEquals("Default", aWSClient0.accountName());
      assertEquals(11, monkeyCalendar0.closeHour());
      assertEquals(11, monkeyCalendar0.openHour());
      assertTrue(basicConformityMonkeyContext0.isLeashed());
      assertEquals("us-west-1", basicConformityMonkeyContext0.region());
      assertEquals("default", basicConformityMonkeyContext0.accountName());
      assertEquals("`A`{N{/LlK%", basicJanitorMonkeyContext_BasicJanitorContext0.region());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
  }
}
