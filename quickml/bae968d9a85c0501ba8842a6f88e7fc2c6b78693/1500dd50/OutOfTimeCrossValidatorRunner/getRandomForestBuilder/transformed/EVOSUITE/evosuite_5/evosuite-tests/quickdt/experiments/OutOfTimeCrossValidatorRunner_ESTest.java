/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 05:36:28 GMT 2021
 */

package quickdt.experiments;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.List;
import java.util.ListIterator;
import java.util.Stack;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;
import quickdt.data.AbstractInstance;
import quickdt.data.HashMapAttributes;
import quickdt.data.Instance;
import quickdt.experiments.OutOfTimeCrossValidatorRunner;
import quickdt.predictiveModels.PredictiveModelBuilder;
import quickdt.predictiveModels.randomForest.RandomForest;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class OutOfTimeCrossValidatorRunner_ESTest extends OutOfTimeCrossValidatorRunner_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 4;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      assertNotNull(predictiveModelBuilder0);
      
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      assertNotNull(stack0);
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertTrue(stack0.empty());
      assertEquals(0, stack0.size());
      assertEquals(10, stack0.capacity());
      
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // We must have at least one tree
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      assertNotNull(outOfTimeCrossValidatorRunner0);
      
      String[] stringArray0 = new String[5];
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      Vector<AbstractInstance> vector0 = new Vector<AbstractInstance>();
      assertNotNull(vector0);
      assertEquals("[]", vector0.toString());
      assertTrue(vector0.isEmpty());
      assertEquals(0, vector0.size());
      assertEquals(10, vector0.capacity());
      
      int int0 = 1000;
      int int1 = (-4148);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(vector0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String[] stringArray0 = null;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 3221;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      assertNotNull(predictiveModelBuilder0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      List<AbstractInstance> list0 = null;
      int int0 = 0;
      int int1 = (-1334);
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.base.Preconditions", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      assertNotNull(outOfTimeCrossValidatorRunner0);
      
      List<AbstractInstance> list0 = null;
      int int0 = 1715;
      // Undeclared exception!
      try { 
        OutOfTimeCrossValidatorRunner.getRandomForest(list0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.google.common.collect.Iterables", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = (-1577);
      int int1 = 1498;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(predictiveModelBuilder0);
      
      String[] stringArray0 = new String[5];
      String string0 = "5#UL";
      stringArray0[0] = string0;
      String string1 = "f iXs|?6c$GsyN([]\\Z";
      stringArray0[1] = string1;
      String string2 = "";
      stringArray0[2] = string2;
      String string3 = "Y( l_8RN!kGGK_OAef";
      stringArray0[3] = string3;
      String string4 = "user_iq";
      stringArray0[4] = string4;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.main(stringArray0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      HashMapAttributes hashMapAttributes0 = new HashMapAttributes();
      assertNotNull(hashMapAttributes0);
      assertTrue(hashMapAttributes0.isEmpty());
      assertEquals(0, hashMapAttributes0.size());
      
      double double0 = 1285.1846;
      Instance instance0 = new Instance(hashMapAttributes0, hashMapAttributes0, double0);
      assertNotNull(instance0);
      assertTrue(hashMapAttributes0.isEmpty());
      assertEquals(0, hashMapAttributes0.size());
      assertEquals(1285.1846, instance0.getWeight(), 0.01);
      assertEquals(0, instance0.index);
      
      boolean boolean0 = arrayList0.add((AbstractInstance) instance0);
      assertTrue(boolean0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertTrue(hashMapAttributes0.isEmpty());
      assertEquals(0, hashMapAttributes0.size());
      assertEquals(1285.1846, instance0.getWeight(), 0.01);
      assertEquals(0, instance0.index);
      
      int int0 = 3;
      RandomForest randomForest0 = OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int0, int0);
      assertNotNull(randomForest0);
      assertEquals(1, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      assertNotNull(outOfTimeCrossValidatorRunner0);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      ArrayList<AbstractInstance> arrayList0 = new ArrayList<AbstractInstance>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      int int0 = 0;
      AbstractInstance abstractInstance0 = null;
      boolean boolean0 = arrayList0.add(abstractInstance0);
      assertTrue(boolean0);
      assertFalse(arrayList0.isEmpty());
      assertEquals(1, arrayList0.size());
      
      int int1 = Integer.MAX_VALUE;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(arrayList0, int0, int1);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      OutOfTimeCrossValidatorRunner outOfTimeCrossValidatorRunner0 = new OutOfTimeCrossValidatorRunner();
      assertNotNull(outOfTimeCrossValidatorRunner0);
      
      int int0 = 0;
      PredictiveModelBuilder predictiveModelBuilder0 = OutOfTimeCrossValidatorRunner.getRandomForestBuilder(int0, int0);
      assertNotNull(predictiveModelBuilder0);
      
      Stack<AbstractInstance> stack0 = new Stack<AbstractInstance>();
      assertNotNull(stack0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      
      ListIterator<AbstractInstance> listIterator0 = stack0.listIterator();
      assertNotNull(listIterator0);
      assertEquals(0, stack0.size());
      assertTrue(stack0.empty());
      assertEquals("[]", stack0.toString());
      assertTrue(stack0.isEmpty());
      assertEquals(10, stack0.capacity());
      assertFalse(listIterator0.hasNext());
      assertFalse(listIterator0.hasPrevious());
      
      int int1 = (-3102);
      int int2 = 40100;
      // Undeclared exception!
      OutOfTimeCrossValidatorRunner.getRandomForest(stack0, int1, int2);
  }
}
