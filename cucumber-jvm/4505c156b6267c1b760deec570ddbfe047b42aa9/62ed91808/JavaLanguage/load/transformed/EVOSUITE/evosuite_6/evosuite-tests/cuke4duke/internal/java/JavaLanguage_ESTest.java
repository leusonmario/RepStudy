/*
 * This file was automatically generated by EvoSuite
 * Sun Nov 07 15:53:36 GMT 2021
 */

package cuke4duke.internal.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cuke4duke.internal.groovy.GroovyLanguage;
import cuke4duke.internal.groovy.GroovyStepDefinition;
import cuke4duke.internal.java.JavaLanguage;
import cuke4duke.internal.java.ObjectFactory;
import cuke4duke.internal.java.PicoFactory;
import cuke4duke.internal.java.SpringFactory;
import cuke4duke.internal.language.LanguageMixin;
import cuke4duke.internal.language.StepDefinition;
import java.lang.reflect.Method;
import java.util.regex.Pattern;
import org.codehaus.groovy.runtime.IteratorClosureAdapter;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaLanguage_ESTest extends JavaLanguage_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "Qc$YfG5cfI'i/34N&6I";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: Qc$YfG5cfI'i/34N&6I
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        javaLanguage0.getTarget(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      JavaLanguage javaLanguage0 = null;
      try {
        javaLanguage0 = new JavaLanguage(languageMixin0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing system property: cuke4duke.objectFactory
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      Class<PicoFactory> class0 = PicoFactory.class;
      javaLanguage0.registerStepDefinitionsFor(class0);
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.begin_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      LanguageMixin languageMixin0 = null;
      JavaLanguage javaLanguage0 = null;
      try {
        javaLanguage0 = new JavaLanguage(languageMixin0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing system property: cuke4duke.objectFactory
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = ">S!r;0~KjiIM*{Y[";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: >S!r;0~KjiIM*{Y[
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "9h1B.";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: 9h1B.
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "q?5g/jg6*=0'";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: q?5g/jg6*=0'
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        javaLanguage0.begin_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "jruby.backtrace.style";
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: jruby.backtrace.style
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      Class<String> class0 = String.class;
      javaLanguage0.registerStepDefinitionsFor(class0);
      String string0 = "^wCvaI tq<;cj";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: ^wCvaI tq<;cj
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      PicoFactory picoFactory0 = new PicoFactory();
      assertNotNull(picoFactory0);
      
      javaLanguage0.objectFactory = (ObjectFactory) picoFactory0;
      PicoFactory picoFactory1 = new PicoFactory();
      assertNotNull(picoFactory1);
      assertFalse(picoFactory1.equals((Object)picoFactory0));
      
      javaLanguage0.objectFactory = (ObjectFactory) picoFactory1;
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        javaLanguage0.begin_scenario();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/picocontainer/PicoBuilder
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      javaLanguage0.languageMixin = languageMixin0;
      Method method0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerAfterMaybe(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      PicoFactory picoFactory0 = new PicoFactory();
      assertNotNull(picoFactory0);
      
      javaLanguage0.objectFactory = (ObjectFactory) picoFactory0;
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      javaLanguage0.languageMixin = languageMixin0;
      Class<PicoFactory> class0 = PicoFactory.class;
      Class<PicoFactory> class1 = PicoFactory.class;
      picoFactory0.addClass(class1);
      assertSame(class1, class0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.getTarget(class0);
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/picocontainer/MutablePicoContainer
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      Method method0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerBeforeMaybe(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      javaLanguage0.languageMixin = languageMixin0;
      PicoFactory picoFactory0 = new PicoFactory();
      assertNotNull(picoFactory0);
      
      javaLanguage0.objectFactory = (ObjectFactory) picoFactory0;
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: NoClassDefFoundError");
      
      } catch(NoClassDefFoundError e) {
         //
         // org/picocontainer/MutablePicoContainer
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = "org.jruby.internal.runtime.methods.JavaMethod$JavaMethodZeroBlock";
      Class<?> class0 = javaLanguage0.loadClass(string0);
      assertNotNull(class0);
      assertFalse(class0.isAnnotation());
      assertEquals(1033, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertEquals("class org.jruby.internal.runtime.methods.JavaMethod$JavaMethodZero", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      
      String string1 = "`>- 10kV}aw:GdIZ2";
      String string2 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.load(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      Class<PicoFactory> class0 = PicoFactory.class;
      javaLanguage0.registerStepDefinitionsFor(class0);
      Method method0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerStepDefinitionMaybe(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      String string0 = " is not a class/module";
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file:  is not a class/module
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Class<Object> class0 = Object.class;
      Class<Object> class1 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerStepDefinitionsFor(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      Class<String> class0 = String.class;
      String string0 = "(aa\"sd&UkD!.thg)dt!";
      Class<SpringFactory> class1 = SpringFactory.class;
      Class<Integer> class2 = Integer.class;
      String string1 = "";
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      JavaLanguage javaLanguage0 = null;
      try {
        javaLanguage0 = new JavaLanguage(languageMixin0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing system property: cuke4duke.objectFactory
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      JavaLanguage javaLanguage0 = new JavaLanguage();
      assertNotNull(javaLanguage0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      String string0 = "org.jruby.RubyString$i_method_0_0$RUBYINVOKER$strip_bang";
      // Undeclared exception!
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }
}
