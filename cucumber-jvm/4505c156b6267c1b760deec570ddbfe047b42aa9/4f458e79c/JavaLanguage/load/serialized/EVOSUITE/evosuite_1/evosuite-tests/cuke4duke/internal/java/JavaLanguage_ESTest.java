/*
 * This file was automatically generated by EvoSuite
 * Fri Dec 10 12:48:33 GMT 2021
 */

package cuke4duke.internal.java;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import cuke4duke.internal.java.JavaLanguage;
import cuke4duke.internal.java.ObjectFactory;
import cuke4duke.internal.java.PicoFactory;
import cuke4duke.internal.java.SerializedObjectSupporter;
import cuke4duke.internal.java.SpringFactory;
import cuke4duke.internal.language.LanguageMixin;
import cuke4duke.internal.language.StepDefinition;
import java.lang.annotation.Annotation;
import java.lang.reflect.Method;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;
import org.picocontainer.injectors.ProviderAdapter;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class JavaLanguage_ESTest extends JavaLanguage_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      ObjectFactory objectFactory0 = javaLanguage0.getobjectFactory();
      assertNotNull(objectFactory0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString2();
      assertNotNull(string0);
      assertEquals("foo/java/lang/Strix.java", string0);
      
      javaLanguage0.begin_scenario();
      LanguageMixin languageMixin0 = javaLanguage0.getlanguageMixin();
      assertNull(languageMixin0);
      
      String string1 = serializedObjectSupporter0.deserializeObjectString2();
      assertNotNull(string1);
      assertEquals("foo/java/lang/Strix.java", string1);
      assertTrue(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      javaLanguage0.end_scenario();
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        javaLanguage0.getTarget(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Couldn't find object for type interface java.lang.annotation.Annotation
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      List<StepDefinition> list0 = javaLanguage0.step_definitions_for(string0);
      assertNotNull(list0);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      javaLanguage0.begin_scenario();
      Class<Object> class0 = Object.class;
      Object object0 = javaLanguage0.getTarget(class0);
      assertNotNull(object0);
      assertEquals("", object0);
      assertFalse(object0.equals((Object)string0));
      assertNotSame(object0, string0);
      
      javaLanguage0.load(string0);
      assertFalse(string0.equals((Object)object0));
      assertNotSame(string0, object0);
      
      String string1 = "D]frBQWFNe\\";
      try { 
        javaLanguage0.loadClass(string1);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: D]frBQWFNe\\
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      LanguageMixin languageMixin0 = mock(LanguageMixin.class, new ViolatedAssumptionAnswer());
      JavaLanguage javaLanguage0 = null;
      try {
        javaLanguage0 = new JavaLanguage(languageMixin0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing system property: cuke4duke.objectFactory
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      Class<Object> class0 = Object.class;
      // Undeclared exception!
      try { 
        javaLanguage0.getTarget(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      LanguageMixin languageMixin0 = null;
      JavaLanguage javaLanguage0 = null;
      try {
        javaLanguage0 = new JavaLanguage(languageMixin0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Missing system property: cuke4duke.objectFactory
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      JavaLanguage javaLanguage2 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage2);
      assertFalse(javaLanguage2.equals((Object)javaLanguage1));
      assertFalse(javaLanguage2.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage2, javaLanguage1);
      assertNotSame(javaLanguage2, javaLanguage0);
      
      javaLanguage0.serializedObjectSupporter = serializedObjectSupporter0;
      String string0 = serializedObjectSupporter0.deserializeObjectString2();
      assertNotNull(string0);
      assertEquals("foo/java/lang/Strix.java", string0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      LanguageMixin languageMixin0 = javaLanguage0.getlanguageMixin();
      assertNull(languageMixin0);
      
      // Undeclared exception!
      try { 
        serializedObjectSupporter0.deserializeObjectComparator1();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String
         //
         verifyException("cuke4duke.internal.java.SerializedObjectSupporter", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      Class<String> class0 = String.class;
      // Undeclared exception!
      try { 
        javaLanguage0.getTarget(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      LanguageMixin languageMixin0 = javaLanguage0.getlanguageMixin();
      assertNull(languageMixin0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      javaLanguage0.begin_scenario();
      javaLanguage0.begin_scenario();
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      Class<String> class0 = String.class;
      javaLanguage0.registerStepDefinitionsFor(class0);
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      Method method0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerStepDefinitionMaybe(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      String string0 = "03oMh(R";
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: 03oMh(R
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory1();
      assertNotNull(picoFactory0);
      
      String string0 = ".";
      String string1 = serializedObjectSupporter0.deserializeObjectString2();
      assertNotNull(string1);
      assertEquals("foo/java/lang/Strix.java", string1);
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string1, string0);
      
      PicoFactory picoFactory1 = serializedObjectSupporter0.deserializeObjectObjectFactory1();
      assertNotNull(picoFactory1);
      assertFalse(picoFactory1.equals((Object)picoFactory0));
      assertNotSame(picoFactory1, picoFactory0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      String string1 = "";
      // Undeclared exception!
      try { 
        javaLanguage0.load(string1);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      javaLanguage0.begin_scenario();
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      String string0 = "SO_SECURITY_ENCRYPTION_TRANSPORT";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: SO_SECURITY_ENCRYPTION_TRANSPORT
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      Method method0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerAfterMaybe(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      javaLanguage0.begin_scenario();
      String string0 = "e/p";
      // Undeclared exception!
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      StepDefinition stepDefinition0 = null;
      javaLanguage1.addStepDefinition(stepDefinition0);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      ObjectFactory objectFactory0 = javaLanguage1.getobjectFactory();
      assertNotNull(objectFactory0);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      javaLanguage1.begin_scenario();
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      javaLanguage1.end_scenario();
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      Class<Annotation> class0 = Annotation.class;
      // Undeclared exception!
      try { 
        javaLanguage1.getTarget(class0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Couldn't find object for type interface java.lang.annotation.Annotation
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      javaLanguage0.begin_scenario();
      String string0 = ")/u{;jH[Ci'qSu1x0";
      ObjectFactory objectFactory0 = javaLanguage0.getobjectFactory();
      assertNotNull(objectFactory0);
      
      javaLanguage0.begin_scenario();
      LanguageMixin languageMixin0 = javaLanguage0.getlanguageMixin();
      assertNull(languageMixin0);
      
      Class<Object> class0 = Object.class;
      javaLanguage0.registerStepDefinitionsFor(class0);
      Class<Annotation> class1 = Annotation.class;
      // Undeclared exception!
      try { 
        javaLanguage0.getTarget(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Couldn't find object for type interface java.lang.annotation.Annotation
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      String string0 = "bz;Y</?VIY,`";
      try { 
        javaLanguage0.load(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: bz;Y</?VIY,`
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = new PicoFactory();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      javaLanguage0.begin_scenario();
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      String string0 = "SO_SmCURITY_ENCRYPTION_TRANSPORT";
      String string1 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.load(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      List<StepDefinition> list0 = javaLanguage0.step_definitions_for(string0);
      assertNotNull(list0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      javaLanguage0.begin_scenario();
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      PicoFactory picoFactory1 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory1);
      assertFalse(picoFactory1.equals((Object)picoFactory0));
      assertNotSame(picoFactory1, picoFactory0);
      
      String string1 = null;
      javaLanguage1.begin_scenario();
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      Class<Object> class0 = Object.class;
      Object object0 = javaLanguage0.getTarget(class0);
      assertNotNull(object0);
      assertEquals("", object0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertFalse(object0.equals((Object)string0));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertNotSame(object0, string0);
      
      javaLanguage0.end_scenario();
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      // Undeclared exception!
      try { 
        serializedObjectSupporter0.deserializeObjectComparator1();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.String$CaseInsensitiveComparator cannot be cast to java.lang.String
         //
         verifyException("cuke4duke.internal.java.SerializedObjectSupporter", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      String string0 = "Wz/Nm";
      Method method0 = null;
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.registerBeforeMaybe(method0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString2();
      assertNotNull(string0);
      assertEquals("foo/java/lang/Strix.java", string0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory1();
      assertNotNull(picoFactory0);
      
      Class<Annotation> class0 = Annotation.class;
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      String string1 = "2|6_;SP&";
      try { 
        javaLanguage0.loadClass(string0);
        fail("Expecting exception: ClassNotFoundException");
      
      } catch(ClassNotFoundException e) {
         //
         // Couldn't determine class from file: foo/java/lang/Strix.java
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      javaLanguage0.begin_scenario();
      String string0 = ")/u{;jH[Ci'qSu1x0";
      ObjectFactory objectFactory0 = javaLanguage0.getobjectFactory();
      assertNotNull(objectFactory0);
      
      javaLanguage0.begin_scenario();
      LanguageMixin languageMixin0 = javaLanguage0.getlanguageMixin();
      assertNull(languageMixin0);
      
      Class<Object> class0 = Object.class;
      Class<Object> class1 = null;
      // Undeclared exception!
      try { 
        javaLanguage0.registerStepDefinitionsFor(class1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      List<StepDefinition> list0 = javaLanguage0.step_definitions_for(string0);
      assertNotNull(list0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      javaLanguage0.begin_scenario();
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      PicoFactory picoFactory1 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory1);
      assertFalse(picoFactory1.equals((Object)picoFactory0));
      assertNotSame(picoFactory1, picoFactory0);
      
      String string1 = null;
      javaLanguage0.end_scenario();
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      javaLanguage1.begin_scenario();
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      Class<Object> class0 = Object.class;
      Object object0 = javaLanguage0.getTarget(class0);
      assertNotNull(object0);
      assertEquals("", object0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertFalse(object0.equals((Object)string0));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertNotSame(object0, string0);
      
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Cannot stop.  Current container state was: DISPOSED
         //
         verifyException("org.picocontainer.lifecycle.DefaultLifecycleState", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      List<StepDefinition> list0 = javaLanguage0.step_definitions_for(string0);
      assertNotNull(list0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      PicoFactory picoFactory1 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory1);
      assertFalse(picoFactory1.equals((Object)picoFactory0));
      assertNotSame(picoFactory1, picoFactory0);
      
      String string1 = null;
      javaLanguage1.begin_scenario();
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      Class<Object> class0 = Object.class;
      javaLanguage0.load(string0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      javaLanguage0.registerStepDefinitionsFor(class0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      
      // Undeclared exception!
      try { 
        javaLanguage0.loadClass(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.JavaLanguage", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      PicoFactory picoFactory0 = serializedObjectSupporter0.deserializeObjectObjectFactory2();
      assertNotNull(picoFactory0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      JavaLanguage javaLanguage1 = serializedObjectSupporter0.deserializeObjectJavaLanguage2();
      assertNotNull(javaLanguage1);
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      List<StepDefinition> list0 = javaLanguage0.step_definitions_for(string0);
      assertNotNull(list0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      
      javaLanguage1.begin_scenario();
      assertFalse(javaLanguage1.equals((Object)javaLanguage0));
      assertNotSame(javaLanguage1, javaLanguage0);
      
      Class class0 = javaLanguage0.loadClass(string0);
      assertNotNull(class0);
      assertFalse(javaLanguage0.equals((Object)javaLanguage1));
      assertNotSame(javaLanguage0, javaLanguage1);
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      
      // Undeclared exception!
      try { 
        javaLanguage0.end_scenario();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("cuke4duke.internal.java.PicoFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      JavaLanguage javaLanguage0 = serializedObjectSupporter0.deserializeObjectJavaLanguage1();
      assertNotNull(javaLanguage0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString1();
      assertNotNull(string0);
      assertEquals("foo/java/lang/String.java", string0);
      
      javaLanguage0.begin_scenario();
      javaLanguage0.load(string0);
      javaLanguage0.end_scenario();
      Class<Integer> class0 = Integer.class;
      javaLanguage0.registerStepDefinitionsFor(class0);
      javaLanguage0.load(string0);
      // Undeclared exception!
      try { 
        javaLanguage0.begin_scenario();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Duplicate Keys not allowed. Duplicate for 'class java.lang.String'
         //
         verifyException("org.picocontainer.DefaultPicoContainer", e);
      }
  }
}
