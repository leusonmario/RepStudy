/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 09:43:42 GMT 2021
 */

package org.activiti.engine.impl.bpmn.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.time.Instant;
import java.util.Date;
import java.util.List;
import org.activiti.bpmn.model.SendTask;
import org.activiti.bpmn.model.SequenceFlow;
import org.activiti.bpmn.model.ServiceTask;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.delegate.Expression;
import org.activiti.engine.impl.bpmn.behavior.BpmnActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.IntermediateCatchEventActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.MailActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.ParallelMultiInstanceBehavior;
import org.activiti.engine.impl.bpmn.behavior.ShellActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
import org.activiti.engine.impl.el.JuelExpression;
import org.activiti.engine.impl.form.DefaultTaskFormHandler;
import org.activiti.engine.impl.form.TaskElContext;
import org.activiti.engine.impl.javax.el.ValueExpression;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.HistoricActivityInstanceEntity;
import org.activiti.engine.impl.persistence.entity.HistoricDetailAssignmentEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.runtime.AtomicOperation;
import org.activiti.engine.impl.pvm.runtime.AtomicOperationTransitionNotifyListenerTake;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.task.TaskDefinition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskActivityBehavior_ESTest extends UserTaskActivityBehavior_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getOwner());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getParentTaskId());
      
      ExecutionEntity executionEntity0 = taskEntity0.getExecution();
      assertNull(executionEntity0);
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getOwner());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getParentTaskId());
      
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition0);
      
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(taskEntity0.DELETE_REASON_DELETED);
      assertNotNull(list0);
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getOwner());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, taskEntity0.DELETE_REASON_COMPLETED, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.isEnded());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      
      byte byte0 = (byte)125;
      int int0 = Short.toUnsignedInt(byte0);
      assertEquals(125, int0);
      
      MockDate mockDate0 = new MockDate(byte0, byte0, byte0, int0, byte0, byte0);
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertNotNull(taskEntity0);
      assertEquals("Mon Oct 08 07:07:05 GMT 2035", mockDate0.toString());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      
      String string0 = "deleteByteArrayNoRevisionCheck";
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      ServiceTask serviceTask0 = new ServiceTask();
      assertNotNull(serviceTask0);
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getType());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertNull(serviceTask0.getName());
      assertNull(serviceTask0.getImplementationType());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertNull(serviceTask0.getId());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isNotExclusive());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getDocumentation());
      
      ShellActivityBehavior shellActivityBehavior0 = new ShellActivityBehavior();
      assertNotNull(shellActivityBehavior0);
      
      Expression expression0 = shellActivityBehavior0.arg3;
      assertNull(expression0);
      
      taskDefinition0.addCandidateGroupIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isScope());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      
      byte byte0 = (byte)107;
      MockDate mockDate0 = new MockDate(byte0, byte0, byte0, byte0, byte0, byte0);
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      ShellActivityBehavior shellActivityBehavior0 = new ShellActivityBehavior();
      assertNotNull(shellActivityBehavior0);
      
      Expression expression0 = shellActivityBehavior0.arg3;
      assertNull(expression0);
      
      taskDefinition0.addCandidateGroupIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      boolean boolean0 = true;
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.isEnded());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.isEnded());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isConcurrent());
      
      String string0 = "_";
      byte byte0 = (byte)125;
      int int0 = Short.toUnsignedInt(byte0);
      assertEquals(125, int0);
      
      MockDate mockDate0 = new MockDate(byte0, byte0, byte0, int0, byte0);
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertNotNull(taskEntity0);
      assertEquals("Mon Oct 08 07:05:00 GMT 2035", mockDate0.toString());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionEntity0);
      assertNotNull(activityImpl0);
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      
      ActivityImpl activityImpl1 = AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionEntity0, activityImpl0);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNotNull(activityImpl1);
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      
      IntermediateCatchEventActivityBehavior intermediateCatchEventActivityBehavior0 = new IntermediateCatchEventActivityBehavior();
      assertNotNull(intermediateCatchEventActivityBehavior0);
      
      int int1 = (-757);
      ParallelMultiInstanceBehavior parallelMultiInstanceBehavior0 = new ParallelMultiInstanceBehavior(activityImpl1, intermediateCatchEventActivityBehavior0);
      assertNotNull(parallelMultiInstanceBehavior0);
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      assertNull(parallelMultiInstanceBehavior0.getCollectionElementVariable());
      assertNull(parallelMultiInstanceBehavior0.getCollectionVariable());
      assertEquals("loopCounter", parallelMultiInstanceBehavior0.getCollectionElementIndexVariable());
      
      Expression expression0 = parallelMultiInstanceBehavior0.getCompletionConditionExpression();
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNull(expression0);
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      assertNull(parallelMultiInstanceBehavior0.getCollectionElementVariable());
      assertNull(parallelMultiInstanceBehavior0.getCollectionVariable());
      assertEquals("loopCounter", parallelMultiInstanceBehavior0.getCollectionElementIndexVariable());
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      assertNull(parallelMultiInstanceBehavior0.getCollectionElementVariable());
      assertNull(parallelMultiInstanceBehavior0.getCollectionVariable());
      assertEquals("loopCounter", parallelMultiInstanceBehavior0.getCollectionElementIndexVariable());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      SendTask sendTask0 = new SendTask();
      assertNotNull(sendTask0);
      assertFalse(sendTask0.isAsynchronous());
      assertNull(sendTask0.getType());
      assertNull(sendTask0.getImplementationType());
      assertNull(sendTask0.getOperationRef());
      assertNull(sendTask0.getName());
      assertEquals(0, sendTask0.getXmlColumnNumber());
      assertFalse(sendTask0.isNotExclusive());
      assertNull(sendTask0.getId());
      assertEquals(0, sendTask0.getXmlRowNumber());
      assertNull(sendTask0.getDefaultFlow());
      assertFalse(sendTask0.isForCompensation());
      assertNull(sendTask0.getDocumentation());
      
      MailActivityBehavior mailActivityBehavior0 = defaultActivityBehaviorFactory0.createMailActivityBehavior(sendTask0);
      assertNotNull(mailActivityBehavior0);
      assertFalse(sendTask0.isAsynchronous());
      assertNull(sendTask0.getType());
      assertNull(sendTask0.getImplementationType());
      assertNull(sendTask0.getOperationRef());
      assertNull(sendTask0.getName());
      assertEquals(0, sendTask0.getXmlColumnNumber());
      assertFalse(sendTask0.isNotExclusive());
      assertNull(sendTask0.getId());
      assertEquals(0, sendTask0.getXmlRowNumber());
      assertNull(sendTask0.getDefaultFlow());
      assertFalse(sendTask0.isForCompensation());
      assertNull(sendTask0.getDocumentation());
      
      Expression expression0 = mailActivityBehavior0.cc;
      assertNull(expression0);
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(sendTask0.isAsynchronous());
      assertNull(sendTask0.getType());
      assertNull(sendTask0.getImplementationType());
      assertNull(sendTask0.getOperationRef());
      assertNull(sendTask0.getName());
      assertEquals(0, sendTask0.getXmlColumnNumber());
      assertFalse(sendTask0.isNotExclusive());
      assertNull(sendTask0.getId());
      assertEquals(0, sendTask0.getXmlRowNumber());
      assertNull(sendTask0.getDefaultFlow());
      assertFalse(sendTask0.isForCompensation());
      assertNull(sendTask0.getDocumentation());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      HistoricDetailAssignmentEntity historicDetailAssignmentEntity0 = new HistoricDetailAssignmentEntity();
      assertNotNull(historicDetailAssignmentEntity0);
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      
      Date date0 = historicDetailAssignmentEntity0.getTime();
      assertNull(date0);
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isConcurrent());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertTrue(executionImpl0.isActive());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertNotNull(executionEntity0);
      assertEquals(1, executionEntity0.getRevision());
      assertFalse(executionEntity0.isConcurrent());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertNull(executionEntity0.getProcessInstanceId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getParentId());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getId());
      assertFalse(executionEntity0.isEventScope());
      assertNull(executionEntity0.getEventName());
      assertFalse(executionEntity0.isDeleteRoot());
      assertEquals("", executionEntity0.getTenantId());
      assertNull(executionEntity0.getCurrentActivityName());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getBusinessKey());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getActivityId());
      assertTrue(executionEntity0.isActive());
      assertFalse(executionEntity0.isEnded());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getDeleteReason());
      
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "aM$~.zOE?|5>lGr";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertTrue(list0.contains(string0));
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      BpmnActivityBehavior bpmnActivityBehavior0 = new BpmnActivityBehavior();
      assertNotNull(bpmnActivityBehavior0);
      
      userTaskActivityBehavior0.bpmnActivityBehavior = bpmnActivityBehavior0;
      String string0 = "";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertTrue(list0.contains(string0));
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isConcurrent());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      
      ExecutionImpl executionImpl1 = executionImpl0.findExecution(string0);
      assertNull(executionImpl1);
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isConcurrent());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      
      executionImpl0.setParent(executionImpl1);
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isConcurrent());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = null;
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertNotNull(executionEntity0);
      assertNull(executionEntity0.getProcessDefinitionId());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getBusinessKey());
      assertFalse(executionEntity0.isEventScope());
      assertNull(executionEntity0.getProcessInstanceId());
      assertFalse(executionEntity0.isDeleteRoot());
      assertNull(executionEntity0.getCurrentActivityName());
      assertEquals("", executionEntity0.getTenantId());
      assertEquals(1, executionEntity0.getRevision());
      assertNull(executionEntity0.getActivityId());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertTrue(executionEntity0.isActive());
      assertFalse(executionEntity0.isEnded());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getDeleteReason());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getParentId());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getId());
      assertNull(executionEntity0.getEventName());
      assertFalse(executionEntity0.isConcurrent());
      assertEquals(2, executionEntity0.getRevisionNext());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "#1QGl~7fG";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertTrue(list0.contains(string0));
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      HistoricActivityInstanceEntity historicActivityInstanceEntity0 = new HistoricActivityInstanceEntity();
      assertNotNull(historicActivityInstanceEntity0);
      assertNull(historicActivityInstanceEntity0.getTaskId());
      assertNull(historicActivityInstanceEntity0.getDurationInMillis());
      assertNull(historicActivityInstanceEntity0.getExecutionId());
      assertNull(historicActivityInstanceEntity0.getId());
      assertNull(historicActivityInstanceEntity0.getProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getAssignee());
      assertNull(historicActivityInstanceEntity0.getCalledProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getProcessDefinitionId());
      assertNull(historicActivityInstanceEntity0.getDeleteReason());
      assertNull(historicActivityInstanceEntity0.getActivityId());
      assertEquals("", historicActivityInstanceEntity0.getTenantId());
      assertNull(historicActivityInstanceEntity0.getActivityType());
      assertNull(historicActivityInstanceEntity0.getActivityName());
      
      Date date0 = historicActivityInstanceEntity0.getEndTime();
      assertNull(date0);
      assertNull(historicActivityInstanceEntity0.getTaskId());
      assertNull(historicActivityInstanceEntity0.getDurationInMillis());
      assertNull(historicActivityInstanceEntity0.getExecutionId());
      assertNull(historicActivityInstanceEntity0.getId());
      assertNull(historicActivityInstanceEntity0.getProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getAssignee());
      assertNull(historicActivityInstanceEntity0.getCalledProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getProcessDefinitionId());
      assertNull(historicActivityInstanceEntity0.getDeleteReason());
      assertNull(historicActivityInstanceEntity0.getActivityId());
      assertEquals("", historicActivityInstanceEntity0.getTenantId());
      assertNull(historicActivityInstanceEntity0.getActivityType());
      assertNull(historicActivityInstanceEntity0.getActivityName());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertNull(historicActivityInstanceEntity0.getTaskId());
      assertNull(historicActivityInstanceEntity0.getDurationInMillis());
      assertNull(historicActivityInstanceEntity0.getExecutionId());
      assertNull(historicActivityInstanceEntity0.getId());
      assertNull(historicActivityInstanceEntity0.getProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getAssignee());
      assertNull(historicActivityInstanceEntity0.getCalledProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getProcessDefinitionId());
      assertNull(historicActivityInstanceEntity0.getDeleteReason());
      assertNull(historicActivityInstanceEntity0.getActivityId());
      assertEquals("", historicActivityInstanceEntity0.getTenantId());
      assertNull(historicActivityInstanceEntity0.getActivityType());
      assertNull(historicActivityInstanceEntity0.getActivityName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      
      String string1 = "";
      historicActivityInstanceEntity0.setActivityType(string1);
      assertNotSame(string1, string0);
      assertFalse(string1.equals((Object)string0));
      assertNull(historicActivityInstanceEntity0.getTaskId());
      assertNull(historicActivityInstanceEntity0.getDurationInMillis());
      assertNull(historicActivityInstanceEntity0.getExecutionId());
      assertNull(historicActivityInstanceEntity0.getId());
      assertNull(historicActivityInstanceEntity0.getProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getAssignee());
      assertNull(historicActivityInstanceEntity0.getCalledProcessInstanceId());
      assertNull(historicActivityInstanceEntity0.getProcessDefinitionId());
      assertNull(historicActivityInstanceEntity0.getDeleteReason());
      assertNull(historicActivityInstanceEntity0.getActivityId());
      assertEquals("", historicActivityInstanceEntity0.getTenantId());
      assertEquals("", historicActivityInstanceEntity0.getActivityType());
      assertNull(historicActivityInstanceEntity0.getActivityName());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
      assertNotNull(taskDefinition1);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(taskDefinition1.getKey());
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      
      String string0 = "candidateGroups";
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionEntity0);
      assertNotNull(activityImpl0);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals("candidateGroups", activityImpl0.getId());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      
      ActivityImpl activityImpl1 = AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionEntity0, activityImpl0);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNotNull(activityImpl1);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals("candidateGroups", activityImpl0.getId());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals("candidateGroups", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertFalse(activityImpl1.isExclusive());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      
      ExecutionEntity executionEntity0 = new ExecutionEntity(activityImpl1);
      assertNotNull(executionEntity0);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals("candidateGroups", activityImpl0.getId());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals("candidateGroups", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertFalse(activityImpl1.isExclusive());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getParentId());
      assertTrue(executionEntity0.isActive());
      assertNull(executionEntity0.getActivityId());
      assertEquals(1, executionEntity0.getRevision());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getProcessInstanceId());
      assertNull(executionEntity0.getId());
      assertNull(executionEntity0.getBusinessKey());
      assertFalse(executionEntity0.isEnded());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getDeleteReason());
      assertFalse(executionEntity0.isEventScope());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertFalse(executionEntity0.isDeleteRoot());
      assertNull(executionEntity0.getCurrentActivityName());
      assertEquals("", executionEntity0.getTenantId());
      assertNull(executionEntity0.getEventName());
      assertNull(executionEntity0.getSuperExecutionId());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertFalse(executionEntity0.isConcurrent());
      
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertTrue(list0.contains(string0));
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertNotNull(executionEntity0);
      assertNull(executionEntity0.getCurrentActivityName());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertFalse(executionEntity0.isEventScope());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getSuperExecutionId());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getDeleteReason());
      assertFalse(executionEntity0.isEnded());
      assertNull(executionEntity0.getProcessInstanceId());
      assertNull(executionEntity0.getId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getBusinessKey());
      assertNull(executionEntity0.getParentId());
      assertEquals(1, executionEntity0.getRevision());
      assertNull(executionEntity0.getEventName());
      assertTrue(executionEntity0.isActive());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertNull(executionEntity0.getActivityId());
      assertEquals("", executionEntity0.getTenantId());
      assertFalse(executionEntity0.isDeleteRoot());
      assertFalse(executionEntity0.isConcurrent());
      
      String string1 = "V5=;9/ 0+5Q";
      double double0 = 0.0;
      Double double1 = new Double(double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertEquals(0.0, (double)double1, 0.01);
      assertNotNull(double1);
      
      double double2 = 0.0;
      double double3 = Double.max(double0, double2);
      assertEquals(double0, double2, 0.01);
      assertEquals(double2, double0, 0.01);
      assertEquals(double3, double0, 0.01);
      assertEquals(double3, double2, 0.01);
      assertEquals(0.0, double3, 0.01);
      
      BpmnActivityBehavior bpmnActivityBehavior0 = null;
      userTaskActivityBehavior0.bpmnActivityBehavior = bpmnActivityBehavior0;
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, string1, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.ExecutionEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getName());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getCategory());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      
      String string0 = null;
      userTask0.setDocumentation(string0);
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getName());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getCategory());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      
      long long0 = (-2408L);
      Instant instant0 = MockInstant.ofEpochSecond(long0, long0);
      assertNotNull(instant0);
      
      Date date0 = Date.from(instant0);
      assertNotNull(date0);
      assertEquals("Wed Dec 31 23:19:51 GMT 1969", date0.toString());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertEquals("Wed Dec 31 23:19:51 GMT 1969", date0.toString());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertNull(taskDefinition0);
      assertEquals("Wed Dec 31 23:19:51 GMT 1969", date0.toString());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      String string1 = taskEntity0.getDelegationStateString();
      assertNull(string1);
      assertEquals("Wed Dec 31 23:19:51 GMT 1969", date0.toString());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask0, taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getName());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getCategory());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertEquals("Wed Dec 31 23:19:51 GMT 1969", date0.toString());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition1);
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getName());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getCategory());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertEquals("Wed Dec 31 23:19:51 GMT 1969", date0.toString());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertNull(processDefinitionEntity0.getName());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getId());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getDescription());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      
      ActivityImpl activityImpl0 = null;
      // Undeclared exception!
      try { 
        AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionEntity0, activityImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.pvm.runtime.AtomicOperationTransitionNotifyListenerTake", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      String string0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.extractCandidates(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getCategory());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getFormKey());
      assertNull(userTask0.getName());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getId());
      assertFalse(userTask0.isForCompensation());
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask0, taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getCategory());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getFormKey());
      assertNull(userTask0.getName());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getId());
      assertFalse(userTask0.isForCompensation());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      HistoricDetailAssignmentEntity historicDetailAssignmentEntity0 = new HistoricDetailAssignmentEntity();
      assertNotNull(historicDetailAssignmentEntity0);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      
      Date date0 = historicDetailAssignmentEntity0.getTime();
      assertNull(date0);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      
      ActivityImpl activityImpl0 = new ActivityImpl(taskEntity0.DELETE_REASON_COMPLETED, processDefinitionEntity0);
      assertNotNull(activityImpl0);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals("completed", activityImpl0.getId());
      
      ActivityImpl activityImpl1 = AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionEntity0, activityImpl0);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNotNull(activityImpl1);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals("completed", activityImpl0.getId());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isExclusive());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("completed", activityImpl1.getId());
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl1);
      assertNotNull(executionImpl0);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals("completed", activityImpl0.getId());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isExclusive());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("completed", activityImpl1.getId());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      
      ExecutionImpl executionImpl1 = executionImpl0.createExecution();
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNotNull(executionImpl1);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals("completed", activityImpl0.getId());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isExclusive());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("completed", activityImpl1.getId());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl1.getCurrentActivityName());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertNull(executionImpl1.getEventName());
      assertFalse(executionImpl1.isDeleteRoot());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.hasVariables());
      assertNull(executionImpl1.getDeleteReason());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertTrue(executionImpl1.isScope());
      assertFalse(executionImpl1.isEnded());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getId());
      assertNull(executionImpl1.getCurrentActivityId());
      
      ExecutionImpl executionImpl2 = executionImpl1.getSubProcessInstance();
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(executionImpl2);
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals("completed", activityImpl0.getId());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isExclusive());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("completed", activityImpl1.getId());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl1.getCurrentActivityName());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertNull(executionImpl1.getEventName());
      assertFalse(executionImpl1.isDeleteRoot());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.hasVariables());
      assertNull(executionImpl1.getDeleteReason());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertTrue(executionImpl1.isScope());
      assertFalse(executionImpl1.isEnded());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getId());
      assertNull(executionImpl1.getCurrentActivityId());
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl2);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getCategory());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getFormKey());
      assertNull(userTask0.getName());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getDueDate());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getId());
      assertFalse(userTask0.isForCompensation());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(historicDetailAssignmentEntity0.getTaskId());
      assertNull(historicDetailAssignmentEntity0.getExecutionId());
      assertNull(historicDetailAssignmentEntity0.getActivityInstanceId());
      assertNull(historicDetailAssignmentEntity0.getProcessInstanceId());
      assertNull(historicDetailAssignmentEntity0.getId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals("completed", activityImpl0.getId());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isExclusive());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("completed", activityImpl1.getId());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl1.getCurrentActivityName());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertNull(executionImpl1.getEventName());
      assertFalse(executionImpl1.isDeleteRoot());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.hasVariables());
      assertNull(executionImpl1.getDeleteReason());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertTrue(executionImpl1.isScope());
      assertFalse(executionImpl1.isEnded());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getId());
      assertNull(executionImpl1.getCurrentActivityId());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      ActivityImpl activityImpl0 = null;
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl0);
      assertNotNull(executionImpl0);
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isScope());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityId());
      
      ExecutionImpl executionImpl1 = executionImpl0.getProcessInstance();
      assertNull(executionImpl1);
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isScope());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityId());
      
      String string0 = "";
      try { 
        userTaskActivityBehavior0.signal(executionImpl0, string0, activityImpl0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.activiti.engine.impl.pvm.runtime.ExecutionImpl cannot be cast to org.activiti.engine.impl.persistence.entity.ExecutionEntity
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isActive());
      
      String string0 = "Unable to retrieve transaction status";
      String string1 = "i\"~>A?$oJ";
      byte byte0 = (byte)125;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)125, (byte)byte1);
      assertNotNull(byte1);
      
      short short0 = (short) (-5185);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-5185), (short)short1);
      assertNotNull(short1);
      
      short short2 = (short)1;
      int int0 = Short.toUnsignedInt(short2);
      assertFalse(short2 == short0);
      assertEquals(1, int0);
      
      int int1 = (-1348);
      MockDate mockDate0 = new MockDate(short0, byte0, short0, int1, byte0, byte0);
      assertFalse(short0 == short2);
      assertFalse(int1 == int0);
      assertNotNull(mockDate0);
      
      long long0 = (-1488L);
      mockDate0.setTime(long0);
      assertFalse(short0 == short2);
      assertFalse(int1 == int0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertFalse(short0 == short2);
      assertFalse(int1 == int0);
      assertNotNull(taskEntity0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      String string2 = "deleteByteArrayNoRevisionCheck";
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(taskDefinition0.getKey());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      ServiceTask serviceTask0 = new ServiceTask();
      assertNotNull(serviceTask0);
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getResultVariableName());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getName());
      assertNull(serviceTask0.getImplementationType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getDefaultFlow());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      
      ShellActivityBehavior shellActivityBehavior0 = defaultActivityBehaviorFactory0.createShellActivityBehavior(serviceTask0);
      assertNotNull(shellActivityBehavior0);
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getResultVariableName());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getName());
      assertNull(serviceTask0.getImplementationType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getDefaultFlow());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      
      Expression expression0 = shellActivityBehavior0.arg3;
      assertNull(expression0);
      
      taskDefinition0.addCandidateGroupIdExpression(expression0);
      assertNull(taskDefinition0.getKey());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getResultVariableName());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getName());
      assertNull(serviceTask0.getImplementationType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getDefaultFlow());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean0, boolean1);
      assertFalse(boolean0 == boolean1);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(taskDefinition0.getKey());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.hasVariables());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.isEnded());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertTrue(executionImpl0.isActive());
      
      String string0 = "_";
      String string1 = "i\"~>A?$oJ";
      byte byte0 = (byte)125;
      Byte byte1 = new Byte(byte0);
      assertTrue(byte1.equals((Object)byte0));
      assertEquals((byte)125, (byte)byte1);
      assertNotNull(byte1);
      
      short short0 = (short) (-5185);
      Short short1 = new Short(short0);
      assertTrue(short1.equals((Object)short0));
      assertEquals((short) (-5185), (short)short1);
      assertNotNull(short1);
      
      short short2 = (short)1;
      int int0 = Short.toUnsignedInt(short2);
      assertFalse(short2 == short0);
      assertEquals(1, int0);
      
      int int1 = (-1348);
      MockDate mockDate0 = new MockDate(short0, byte0, short0, int1, byte0, byte0);
      assertFalse(short0 == short2);
      assertFalse(int1 == int0);
      assertNotNull(mockDate0);
      
      long long0 = (-1488L);
      mockDate0.setTime(long0);
      assertFalse(short0 == short2);
      assertFalse(int1 == int0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertFalse(short0 == short2);
      assertFalse(int1 == int0);
      assertNotNull(taskEntity0);
      assertEquals("Wed Dec 31 23:59:58 GMT 1969", mockDate0.toString());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      
      String string2 = "deleteByteArrayNoRevisionCheck";
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(taskDefinition0.getKey());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionEntity0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(activityImpl0);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertFalse(activityImpl0.isScope());
      
      ActivityImpl activityImpl1 = AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionEntity0, activityImpl0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(activityImpl1);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertFalse(activityImpl1.isExclusive());
      
      IntermediateCatchEventActivityBehavior intermediateCatchEventActivityBehavior0 = new IntermediateCatchEventActivityBehavior();
      assertNotNull(intermediateCatchEventActivityBehavior0);
      
      int int2 = (-757);
      Random.setNextRandom(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ParallelMultiInstanceBehavior parallelMultiInstanceBehavior0 = new ParallelMultiInstanceBehavior(activityImpl1, intermediateCatchEventActivityBehavior0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNotNull(parallelMultiInstanceBehavior0);
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertFalse(activityImpl1.isExclusive());
      assertNull(parallelMultiInstanceBehavior0.getCollectionElementVariable());
      assertNull(parallelMultiInstanceBehavior0.getCollectionVariable());
      assertEquals("loopCounter", parallelMultiInstanceBehavior0.getCollectionElementIndexVariable());
      
      Expression expression0 = parallelMultiInstanceBehavior0.completionConditionExpression;
      assertNull(expression0);
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertNull(taskDefinition0.getKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals("_", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertFalse(activityImpl0.isScope());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals("_", activityImpl1.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isScope());
      assertFalse(activityImpl1.isExclusive());
      assertNull(parallelMultiInstanceBehavior0.getCollectionElementVariable());
      assertNull(parallelMultiInstanceBehavior0.getCollectionVariable());
      assertEquals("loopCounter", parallelMultiInstanceBehavior0.getCollectionElementIndexVariable());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(taskDefinition0.getKey());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }
}
