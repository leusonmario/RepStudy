/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 11:46:51 GMT 2021
 */

package org.activiti.engine.impl.bpmn.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.List;
import org.activiti.engine.impl.HistoricProcessInstanceQueryImpl;
import org.activiti.engine.impl.bpmn.behavior.MultiInstanceActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.ParallelMultiInstanceBehavior;
import org.activiti.engine.impl.bpmn.behavior.SerializedObjectSupporter;
import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
import org.activiti.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.process.TransitionImpl;
import org.activiti.engine.impl.pvm.runtime.AtomicOperationTransitionNotifyListenerTake;
import org.activiti.engine.impl.task.TaskDefinition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskActivityBehavior_ESTest extends UserTaskActivityBehavior_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior1616();
      assertNotNull(userTaskActivityBehavior0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = userTaskActivityBehavior0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter1);
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getCategory());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getName());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals("", processDefinitionEntity0.getTenantId());
      
      ActivityImpl activityImpl0 = null;
      // Undeclared exception!
      try { 
        AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionEntity0, activityImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.pvm.runtime.AtomicOperationTransitionNotifyListenerTake", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior1422();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertNotNull(list0);
      assertTrue(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getParentTaskId());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity986();
      assertNull(executionEntity0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getParentTaskId());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior1511();
      assertNotNull(userTaskActivityBehavior0);
      
      ActivityExecution activityExecution0 = null;
      try { 
        userTaskActivityBehavior0.execute(activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior589();
      assertNotNull(userTaskActivityBehavior0);
      
      UserTaskActivityBehavior userTaskActivityBehavior1 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior1196();
      assertNotNull(userTaskActivityBehavior1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity760();
      assertNull(executionEntity0);
      
      String string0 = "";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertNotNull(list0);
      assertNotSame(userTaskActivityBehavior0, userTaskActivityBehavior1);
      assertFalse(userTaskActivityBehavior0.equals((Object)userTaskActivityBehavior1));
      assertTrue(list0.contains(string0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      ActivityExecution activityExecution0 = null;
      try { 
        userTaskActivityBehavior0.signal(activityExecution0, string0, list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior622();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity403();
      assertNull(executionEntity0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition0);
      assertEquals("theTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior1007();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition0);
      assertEquals("theTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity1462();
      assertNull(executionEntity0);
      
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior350();
      assertNotNull(userTaskActivityBehavior0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      TaskDefinition taskDefinition0 = serializedObjectSupporter1.deserializeObjectTaskDefinition390();
      assertNotNull(taskDefinition0);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertEquals("theTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter1.deserializeObjectExecutionEntity98();
      assertNull(executionEntity0);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior521();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.extractCandidates(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TaskDefinition taskDefinition0 = serializedObjectSupporter0.deserializeObjectTaskDefinition517();
      assertNotNull(taskDefinition0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("task", taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("task", taskDefinition0.getKey());
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior969();
      assertNotNull(userTaskActivityBehavior0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter1.deserializeObjectExecutionEntity1326();
      assertNull(executionEntity0);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      UserTaskActivityBehavior userTaskActivityBehavior1 = serializedObjectSupporter1.deserializeObjectUserTaskActivityBehavior1586();
      assertNotNull(userTaskActivityBehavior1);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl0 = new HistoricProcessInstanceQueryImpl();
      assertNotNull(historicProcessInstanceQueryImpl0);
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      
      Date date0 = historicProcessInstanceQueryImpl0.getStartedBefore();
      assertNull(date0);
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior1.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ActivityExecution activityExecution0 = null;
      String string0 = null;
      TaskEntity taskEntity0 = null;
      long long0 = 244L;
      Long long1 = new Long(long0);
      assertEquals(244L, (long)long1);
      assertNotNull(long1);
      assertTrue(long1.equals((Object)long0));
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior123();
      assertNotNull(userTaskActivityBehavior0);
      
      String string1 = "dY";
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition0);
      assertEquals("task1", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
  }
}
