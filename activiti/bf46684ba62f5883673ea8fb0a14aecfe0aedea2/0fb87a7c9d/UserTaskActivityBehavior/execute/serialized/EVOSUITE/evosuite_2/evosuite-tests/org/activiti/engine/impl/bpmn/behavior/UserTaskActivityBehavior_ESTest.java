/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 21:22:42 GMT 2021
 */

package org.activiti.engine.impl.bpmn.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.concurrent.LinkedBlockingDeque;
import org.activiti.bpmn.model.SendTask;
import org.activiti.engine.delegate.Expression;
import org.activiti.engine.impl.HistoricProcessInstanceQueryImpl;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.bpmn.behavior.BpmnActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.MailActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.SequentialMultiInstanceBehavior;
import org.activiti.engine.impl.bpmn.behavior.SerializedObjectSupporter;
import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
import org.activiti.engine.impl.task.TaskDefinition;
import org.apache.ibatis.session.SqlSessionManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskActivityBehavior_ESTest extends UserTaskActivityBehavior_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior682();
      assertNotNull(userTaskActivityBehavior0);
      
      UserTaskActivityBehavior userTaskActivityBehavior1 = new UserTaskActivityBehavior(userTaskActivityBehavior0.taskDefinition);
      assertNotNull(userTaskActivityBehavior1);
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      
      List<String> list0 = userTaskActivityBehavior1.extractCandidates(userTaskActivityBehavior0.taskDefinition.key);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotSame(userTaskActivityBehavior0, userTaskActivityBehavior1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertFalse(userTaskActivityBehavior0.equals((Object)userTaskActivityBehavior1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity687();
      assertNull(executionEntity0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior775();
      assertNotNull(userTaskActivityBehavior0);
      
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior253();
      assertNotNull(userTaskActivityBehavior0);
      
      ActivityExecution activityExecution0 = null;
      String string0 = "4bOiIsA)S";
      try { 
        userTaskActivityBehavior0.signal(activityExecution0, string0, serializedObjectSupporter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior558();
      assertNotNull(userTaskActivityBehavior0);
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertNotNull(taskEntity0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity17();
      assertNull(executionEntity0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior119();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity17();
      assertNull(executionEntity0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TaskDefinition taskDefinition0 = serializedObjectSupporter0.deserializeObjectTaskDefinition92();
      assertNotNull(taskDefinition0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("task2", taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior786();
      assertNotNull(userTaskActivityBehavior0);
      
      userTaskActivityBehavior0.serializedObjectSupporter = serializedObjectSupporter0;
      MailActivityBehavior mailActivityBehavior0 = new MailActivityBehavior();
      assertNotNull(mailActivityBehavior0);
      
      Expression expression0 = mailActivityBehavior0.htmlVar;
      assertNull(expression0);
      
      userTaskActivityBehavior0.taskDefinition.addCandidateUserIdExpression(expression0);
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl0 = new HistoricProcessInstanceQueryImpl();
      assertNotNull(historicProcessInstanceQueryImpl0);
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl1 = historicProcessInstanceQueryImpl0.processDefinitionId(taskDefinition0.key);
      assertNotNull(historicProcessInstanceQueryImpl1);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("task2", taskDefinition0.getKey());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("task2", historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl1.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl1.getOrderBy());
      assertEquals(1, historicProcessInstanceQueryImpl1.getFirstRow());
      assertNull(historicProcessInstanceQueryImpl1.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl1.getDatabaseType());
      assertFalse(historicProcessInstanceQueryImpl1.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getMaxResults());
      assertEquals("task2", historicProcessInstanceQueryImpl1.getProcessDefinitionId());
      assertEquals(0, historicProcessInstanceQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl1.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl1.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl1.getInvolvedUser());
      assertSame(historicProcessInstanceQueryImpl0, historicProcessInstanceQueryImpl1);
      assertSame(historicProcessInstanceQueryImpl1, historicProcessInstanceQueryImpl0);
      
      Date date0 = historicProcessInstanceQueryImpl1.getStartedBefore();
      assertNull(date0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("task2", taskDefinition0.getKey());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("task2", historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl1.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl1.getOrderBy());
      assertEquals(1, historicProcessInstanceQueryImpl1.getFirstRow());
      assertNull(historicProcessInstanceQueryImpl1.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl1.getDatabaseType());
      assertFalse(historicProcessInstanceQueryImpl1.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getMaxResults());
      assertEquals("task2", historicProcessInstanceQueryImpl1.getProcessDefinitionId());
      assertEquals(0, historicProcessInstanceQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl1.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl1.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl1.getInvolvedUser());
      assertSame(historicProcessInstanceQueryImpl0, historicProcessInstanceQueryImpl1);
      assertSame(historicProcessInstanceQueryImpl1, historicProcessInstanceQueryImpl0);
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("task2", taskDefinition0.getKey());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("task2", historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl1.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl1.getOrderBy());
      assertEquals(1, historicProcessInstanceQueryImpl1.getFirstRow());
      assertNull(historicProcessInstanceQueryImpl1.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl1.getDatabaseType());
      assertFalse(historicProcessInstanceQueryImpl1.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getMaxResults());
      assertEquals("task2", historicProcessInstanceQueryImpl1.getProcessDefinitionId());
      assertEquals(0, historicProcessInstanceQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl1.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl1.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl1.getInvolvedUser());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getEventName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertSame(historicProcessInstanceQueryImpl0, historicProcessInstanceQueryImpl1);
      assertSame(historicProcessInstanceQueryImpl1, historicProcessInstanceQueryImpl0);
      
      ExecutionEntity executionEntity0 = userTaskActivityBehavior0.serializedObjectSupporter.deserializeObjectExecutionEntity107();
      assertNull(executionEntity0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior786();
      assertNotNull(userTaskActivityBehavior0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      userTaskActivityBehavior0.serializedObjectSupporter = serializedObjectSupporter1;
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("theTask", taskDefinition0.getKey());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      
      MailActivityBehavior mailActivityBehavior0 = new MailActivityBehavior();
      assertNotNull(mailActivityBehavior0);
      
      Expression expression0 = mailActivityBehavior0.htmlVar;
      assertNull(expression0);
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("theTask", taskDefinition0.getKey());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl0 = new HistoricProcessInstanceQueryImpl();
      assertNotNull(historicProcessInstanceQueryImpl0);
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      
      Date date0 = historicProcessInstanceQueryImpl0.getStartedBefore();
      assertNull(date0);
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getExecutionId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      ExecutionEntity executionEntity0 = userTaskActivityBehavior0.serializedObjectSupporter.deserializeObjectExecutionEntity107();
      assertNull(executionEntity0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TaskDefinition taskDefinition0 = serializedObjectSupporter0.deserializeObjectTaskDefinition88();
      assertNotNull(taskDefinition0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("theTask", taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("theTask", taskDefinition0.getKey());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior652();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertTrue(list0.contains(string0));
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior550();
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity7();
      assertNull(executionEntity0);
      
      String string0 = "r{yy9oH:wxAWtT':";
      Integer integer0 = new Integer(executionEntity0.JOBS_STATE_BIT);
      assertNotNull(integer0);
      assertEquals(3, (int)integer0);
      
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, string0, integer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior591();
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity233();
      assertNull(executionEntity0);
      
      String string0 = "~c>`gQ";
      short short0 = (short)0;
      Short short1 = new Short(short0);
      assertNotNull(short1);
      assertEquals((short)0, (short)short1);
      assertTrue(short1.equals((Object)short0));
      
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, string0, short1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior87();
      assertNotNull(userTaskActivityBehavior0);
      
      BpmnActivityBehavior bpmnActivityBehavior0 = new BpmnActivityBehavior();
      assertNotNull(bpmnActivityBehavior0);
      
      userTaskActivityBehavior0.bpmnActivityBehavior = bpmnActivityBehavior0;
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("prepareAndShipTask", taskDefinition0.getKey());
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior150();
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity612();
      assertNull(executionEntity0);
      
      try { 
        userTaskActivityBehavior0.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior588();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.extractCandidates(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior634();
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity774();
      assertNull(executionEntity0);
      
      UserTaskActivityBehavior userTaskActivityBehavior1 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior54();
      assertNotNull(userTaskActivityBehavior1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      
      int int0 = 1;
      Integer integer0 = new Integer(int0);
      assertNotNull(integer0);
      assertEquals(1, (int)integer0);
      assertTrue(integer0.equals((Object)int0));
      
      String string0 = "}oP9t^> Au0";
      int int1 = (-32768);
      int int2 = 0;
      int int3 = Integer.min(int1, int2);
      assertEquals((-32768), int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertTrue(int3 == int1);
      
      Integer integer1 = Integer.getInteger(string0);
      assertNull(integer1);
      
      try { 
        userTaskActivityBehavior1.execute(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity830();
      assertNull(executionEntity0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior106();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getOwner());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      
      ActivityExecution activityExecution0 = null;
      userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getOwner());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition0);
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("theTask", taskDefinition0.getKey());
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getOwner());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      TaskDefinition taskDefinition0 = serializedObjectSupporter0.deserializeObjectTaskDefinition47();
      assertNotNull(taskDefinition0);
      assertEquals("boundaryTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertEquals("boundaryTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition1);
      assertEquals("boundaryTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("boundaryTask", taskDefinition1.getKey());
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity744();
      assertNull(executionEntity0);
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      SendTask sendTask0 = new SendTask();
      assertNotNull(sendTask0);
      assertNull(sendTask0.getDocumentation());
      assertNull(sendTask0.getType());
      assertNull(sendTask0.getName());
      assertFalse(sendTask0.isNotExclusive());
      assertEquals(0, sendTask0.getXmlRowNumber());
      assertEquals(0, sendTask0.getXmlColumnNumber());
      assertFalse(sendTask0.isAsynchronous());
      assertNull(sendTask0.getId());
      assertNull(sendTask0.getOperationRef());
      assertNull(sendTask0.getImplementationType());
      assertNull(sendTask0.getDefaultFlow());
      assertFalse(sendTask0.isForCompensation());
      assertNull(sendTask0.getFailedJobRetryTimeCycleValue());
      
      MailActivityBehavior mailActivityBehavior0 = defaultActivityBehaviorFactory0.createMailActivityBehavior(sendTask0);
      assertNotNull(mailActivityBehavior0);
      assertNull(sendTask0.getDocumentation());
      assertNull(sendTask0.getType());
      assertNull(sendTask0.getName());
      assertFalse(sendTask0.isNotExclusive());
      assertEquals(0, sendTask0.getXmlRowNumber());
      assertEquals(0, sendTask0.getXmlColumnNumber());
      assertFalse(sendTask0.isAsynchronous());
      assertNull(sendTask0.getId());
      assertNull(sendTask0.getOperationRef());
      assertNull(sendTask0.getImplementationType());
      assertNull(sendTask0.getDefaultFlow());
      assertFalse(sendTask0.isForCompensation());
      assertNull(sendTask0.getFailedJobRetryTimeCycleValue());
      
      Expression expression0 = mailActivityBehavior0.html;
      assertNull(expression0);
      
      taskDefinition1.setCategoryExpression(expression0);
      assertEquals("boundaryTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("boundaryTask", taskDefinition1.getKey());
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertNull(sendTask0.getDocumentation());
      assertNull(sendTask0.getType());
      assertNull(sendTask0.getName());
      assertFalse(sendTask0.isNotExclusive());
      assertEquals(0, sendTask0.getXmlRowNumber());
      assertEquals(0, sendTask0.getXmlColumnNumber());
      assertFalse(sendTask0.isAsynchronous());
      assertNull(sendTask0.getId());
      assertNull(sendTask0.getOperationRef());
      assertNull(sendTask0.getImplementationType());
      assertNull(sendTask0.getDefaultFlow());
      assertFalse(sendTask0.isForCompensation());
      assertNull(sendTask0.getFailedJobRetryTimeCycleValue());
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
      
      Object object0 = null;
      taskDefinition0.setNameExpression(taskDefinition1.dueDateExpression);
      assertEquals("boundaryTask", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      assertEquals("boundaryTask", taskDefinition1.getKey());
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.hasCompensationHandler(executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.AbstractBpmnActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior112();
      assertNotNull(userTaskActivityBehavior0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "MysqlIO.53";
      boolean boolean0 = FileSystemHandling.appendLineToFile(evoSuiteFile0, string0);
      assertFalse(boolean0);
      
      boolean boolean1 = false;
      boolean boolean2 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean1, boolean1, boolean1);
      assertFalse(boolean2);
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      TaskEntity taskEntity0 = null;
      boolean boolean3 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean3);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      
      ExecutionEntity executionEntity0 = serializedObjectSupporter0.deserializeObjectExecutionEntity232();
      assertNull(executionEntity0);
      
      boolean boolean4 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior126();
      assertNotNull(userTaskActivityBehavior0);
      
      TaskDefinition taskDefinition0 = serializedObjectSupporter0.deserializeObjectTaskDefinition92();
      assertNotNull(taskDefinition0);
      assertEquals("task2", taskDefinition0.getKey());
      assertEquals(1L, taskDefinition0.getserialVersionUID());
      
      UserTaskActivityBehavior userTaskActivityBehavior1 = serializedObjectSupporter0.deserializeObjectUserTaskActivityBehavior786();
      assertNotNull(userTaskActivityBehavior1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      userTaskActivityBehavior1.serializedObjectSupporter = serializedObjectSupporter1;
      TaskDefinition taskDefinition1 = userTaskActivityBehavior1.getTaskDefinition();
      assertNotNull(taskDefinition1);
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertEquals("theTask", taskDefinition1.getKey());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertNotSame(taskDefinition1, taskDefinition0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      assertFalse(taskDefinition1.equals((Object)taskDefinition0));
      
      MailActivityBehavior mailActivityBehavior0 = new MailActivityBehavior();
      assertNotNull(mailActivityBehavior0);
      
      Expression expression0 = mailActivityBehavior0.htmlVar;
      assertNull(expression0);
      
      taskDefinition1.addCandidateUserIdExpression(expression0);
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertEquals("theTask", taskDefinition1.getKey());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertNotSame(taskDefinition1, taskDefinition0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      assertFalse(taskDefinition1.equals((Object)taskDefinition0));
      
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl0 = new HistoricProcessInstanceQueryImpl();
      assertNotNull(historicProcessInstanceQueryImpl0);
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl1 = historicProcessInstanceQueryImpl0.processDefinitionId(taskDefinition1.key);
      assertNotNull(historicProcessInstanceQueryImpl1);
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertEquals("theTask", taskDefinition1.getKey());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals("theTask", historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl1.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl1.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl1.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl1.getProcessInstanceId());
      assertEquals(0, historicProcessInstanceQueryImpl1.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl1.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getDatabaseType());
      assertEquals("theTask", historicProcessInstanceQueryImpl1.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl1.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl1.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl1.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl1.getProcessDefinitionKey());
      assertEquals(1, historicProcessInstanceQueryImpl1.getFirstRow());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertNotSame(taskDefinition1, taskDefinition0);
      assertSame(historicProcessInstanceQueryImpl0, historicProcessInstanceQueryImpl1);
      assertSame(historicProcessInstanceQueryImpl1, historicProcessInstanceQueryImpl0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      assertFalse(taskDefinition1.equals((Object)taskDefinition0));
      
      Date date0 = historicProcessInstanceQueryImpl1.getStartedBefore();
      assertNull(date0);
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertEquals("theTask", taskDefinition1.getKey());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals("theTask", historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl1.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl1.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl1.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl1.getProcessInstanceId());
      assertEquals(0, historicProcessInstanceQueryImpl1.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl1.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getDatabaseType());
      assertEquals("theTask", historicProcessInstanceQueryImpl1.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl1.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl1.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl1.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl1.getProcessDefinitionKey());
      assertEquals(1, historicProcessInstanceQueryImpl1.getFirstRow());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertNotSame(taskDefinition1, taskDefinition0);
      assertSame(historicProcessInstanceQueryImpl0, historicProcessInstanceQueryImpl1);
      assertSame(historicProcessInstanceQueryImpl1, historicProcessInstanceQueryImpl0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      assertFalse(taskDefinition1.equals((Object)taskDefinition0));
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertEquals(1L, taskDefinition1.getserialVersionUID());
      assertEquals("theTask", taskDefinition1.getKey());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertEquals("theTask", historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl1.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl1.getBusinessKey());
      assertFalse(historicProcessInstanceQueryImpl1.isExcludeSubprocesses());
      assertNull(historicProcessInstanceQueryImpl1.getProcessInstanceId());
      assertEquals(0, historicProcessInstanceQueryImpl1.getFirstResult());
      assertNull(historicProcessInstanceQueryImpl1.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl1.getDatabaseType());
      assertEquals("theTask", historicProcessInstanceQueryImpl1.getProcessDefinitionId());
      assertFalse(historicProcessInstanceQueryImpl1.isOpen());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl1.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl1.getStartedBy());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl1.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl1.getProcessDefinitionKey());
      assertEquals(1, historicProcessInstanceQueryImpl1.getFirstRow());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getOwner());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getDelegationState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertNotSame(taskDefinition1, taskDefinition0);
      assertSame(historicProcessInstanceQueryImpl0, historicProcessInstanceQueryImpl1);
      assertSame(historicProcessInstanceQueryImpl1, historicProcessInstanceQueryImpl0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      assertFalse(taskDefinition1.equals((Object)taskDefinition0));
      
      ExecutionEntity executionEntity0 = userTaskActivityBehavior1.serializedObjectSupporter.deserializeObjectExecutionEntity107();
      assertNull(executionEntity0);
      assertNotSame(serializedObjectSupporter0, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1, userTaskActivityBehavior0);
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      assertSame(userTaskActivityBehavior1.serializedObjectSupporter, serializedObjectSupporter1);
      assertNotSame(userTaskActivityBehavior1.serializedObjectSupporter, serializedObjectSupporter0);
      assertFalse(serializedObjectSupporter0.equals((Object)serializedObjectSupporter1));
      assertFalse(userTaskActivityBehavior1.equals((Object)userTaskActivityBehavior0));
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertFalse(userTaskActivityBehavior1.serializedObjectSupporter.equals((Object)serializedObjectSupporter0));
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior1.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }
}
