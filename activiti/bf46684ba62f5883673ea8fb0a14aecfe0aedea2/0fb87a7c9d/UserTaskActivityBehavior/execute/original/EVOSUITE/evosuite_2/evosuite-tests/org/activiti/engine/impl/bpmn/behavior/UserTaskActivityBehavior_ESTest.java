/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 07:10:43 GMT 2021
 */

package org.activiti.engine.impl.bpmn.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.List;
import java.util.Map;
import org.activiti.bpmn.model.BpmnModel;
import org.activiti.bpmn.model.ItemDefinition;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.delegate.Expression;
import org.activiti.engine.impl.NativeHistoricProcessInstanceQueryImpl;
import org.activiti.engine.impl.bpmn.behavior.MailActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
import org.activiti.engine.impl.db.DbIdGenerator;
import org.activiti.engine.impl.el.ActivitiElContext;
import org.activiti.engine.impl.el.JuelExpression;
import org.activiti.engine.impl.form.DefaultStartFormHandler;
import org.activiti.engine.impl.form.DefaultTaskFormHandler;
import org.activiti.engine.impl.form.TaskFormHandler;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.javax.el.BeanELResolver;
import org.activiti.engine.impl.javax.el.ELContext;
import org.activiti.engine.impl.javax.el.ExpressionFactory;
import org.activiti.engine.impl.juel.ExpressionFactoryImpl;
import org.activiti.engine.impl.juel.TreeValueExpression;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl;
import org.activiti.engine.impl.pvm.process.TransitionImpl;
import org.activiti.engine.impl.pvm.runtime.AtomicOperationTransitionNotifyListenerTake;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.task.TaskDefinition;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskActivityBehavior_ESTest extends UserTaskActivityBehavior_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertNull(userTask0.getId());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getOwner());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getAssignee());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getFormKey());
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask0, taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(userTask0.getId());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getOwner());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getAssignee());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getFormKey());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition1);
      assertNull(userTask0.getId());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getOwner());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getAssignee());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getFormKey());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(taskDefinition1.getKey());
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
      
      ActivityExecution activityExecution0 = null;
      try { 
        userTaskActivityBehavior0.execute(activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      String string0 = "%14$9XaGFE@? 1aD\\'?";
      TaskEntity taskEntity0 = null;
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertNotNull(executionEntity0);
      assertFalse(executionEntity0.isEnded());
      assertNull(executionEntity0.getDeleteReason());
      assertFalse(executionEntity0.isDeleteRoot());
      assertEquals("", executionEntity0.getTenantId());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertFalse(executionEntity0.isEventScope());
      assertNull(executionEntity0.getEventName());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertNull(executionEntity0.getProcessInstanceId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getId());
      assertNull(executionEntity0.getBusinessKey());
      assertEquals(1, executionEntity0.getRevision());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getActivityId());
      assertNull(executionEntity0.getParentId());
      assertTrue(executionEntity0.isActive());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertNull(executionEntity0.getCurrentActivityName());
      assertFalse(executionEntity0.isConcurrent());
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(executionEntity0.isEnded());
      assertNull(executionEntity0.getDeleteReason());
      assertFalse(executionEntity0.isDeleteRoot());
      assertEquals("", executionEntity0.getTenantId());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertFalse(executionEntity0.isEventScope());
      assertNull(executionEntity0.getEventName());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertNull(executionEntity0.getProcessInstanceId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getId());
      assertNull(executionEntity0.getBusinessKey());
      assertEquals(1, executionEntity0.getRevision());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getActivityId());
      assertNull(executionEntity0.getParentId());
      assertTrue(executionEntity0.isActive());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertNull(executionEntity0.getCurrentActivityName());
      assertFalse(executionEntity0.isConcurrent());
      
      DbIdGenerator dbIdGenerator0 = new DbIdGenerator();
      assertNotNull(dbIdGenerator0);
      assertEquals(0, dbIdGenerator0.getIdBlockSize());
      
      CommandExecutor commandExecutor0 = dbIdGenerator0.getCommandExecutor();
      assertNull(commandExecutor0);
      assertEquals(0, dbIdGenerator0.getIdBlockSize());
      
      NativeHistoricProcessInstanceQueryImpl nativeHistoricProcessInstanceQueryImpl0 = new NativeHistoricProcessInstanceQueryImpl(commandExecutor0);
      assertNotNull(nativeHistoricProcessInstanceQueryImpl0);
      assertEquals(0, dbIdGenerator0.getIdBlockSize());
      
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, string0, nativeHistoricProcessInstanceQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.ExecutionEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      taskDefinition0.setOwnerExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      TaskEntity taskEntity0 = new TaskEntity(beanELResolver0.TYPE);
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getParentTaskId());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("type", taskEntity0.getId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.addCandidateUserIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getOwner());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.addCandidateUserIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      
      ActivityExecution activityExecution0 = null;
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(((ExpressionFactoryImpl) expressionFactory0).PROP_VAR_ARGS);
      assertNotNull(list0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver();
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDelegationState());
      
      ActivityExecution activityExecution0 = null;
      taskDefinition0.addCandidateGroupIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      
      ActivityExecution activityExecution0 = null;
      taskDefinition0.addCandidateGroupIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.setAssigneeExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertNull(taskDefinition0);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isConcurrent());
      
      Object object0 = null;
      try { 
        userTaskActivityBehavior0.signal(executionImpl0, taskEntity0.DELETE_REASON_DELETED, object0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.activiti.engine.impl.pvm.runtime.ExecutionImpl cannot be cast to org.activiti.engine.impl.persistence.entity.ExecutionEntity
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      String string0 = "";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertNotNull(list0);
      assertTrue(list0.contains(string0));
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertNull(userTask0.getDocumentation());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertFalse(userTask0.isAsynchronous());
      
      UserTask userTask1 = userTask0.clone();
      assertFalse(userTask1.equals((Object)userTask0));
      assertNotNull(userTask1);
      assertNull(userTask0.getDocumentation());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getName());
      assertFalse(userTask1.isNotExclusive());
      assertFalse(userTask1.isForCompensation());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getDueDate());
      assertFalse(userTask1.isAsynchronous());
      assertNull(userTask1.getId());
      assertNull(userTask1.getDocumentation());
      assertNull(userTask1.getDefaultFlow());
      assertNull(userTask1.getOwner());
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      int int0 = (-1474);
      int int1 = (-1);
      MockDate mockDate0 = new MockDate(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(taskEntity0);
      assertEquals("Sun Nov 29 00:00:00 GMT 425", mockDate0.toString());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(taskDefinition0);
      assertEquals("Sun Nov 29 00:00:00 GMT 425", mockDate0.toString());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask1, taskDefinition0);
      assertFalse(userTask0.equals((Object)userTask1));
      assertFalse(userTask1.equals((Object)userTask0));
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(userTask0.getDocumentation());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getName());
      assertFalse(userTask1.isNotExclusive());
      assertFalse(userTask1.isForCompensation());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getDueDate());
      assertFalse(userTask1.isAsynchronous());
      assertNull(userTask1.getId());
      assertNull(userTask1.getDocumentation());
      assertNull(userTask1.getDefaultFlow());
      assertNull(userTask1.getOwner());
      assertEquals("Sun Nov 29 00:00:00 GMT 425", mockDate0.toString());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isConcurrent());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      
      try { 
        userTaskActivityBehavior0.signal(executionImpl0, taskEntity0.DELETE_REASON_DELETED, taskEntity0.DELETE_REASON_COMPLETED);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.activiti.engine.impl.pvm.runtime.ExecutionImpl cannot be cast to org.activiti.engine.impl.persistence.entity.ExecutionEntity
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getAssignee());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDefaultFlow());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      
      UserTask userTask1 = userTask0.clone();
      assertFalse(userTask1.equals((Object)userTask0));
      assertNotNull(userTask1);
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getAssignee());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDefaultFlow());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertNull(userTask1.getDocumentation());
      assertFalse(userTask1.isForCompensation());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getDueDate());
      assertNull(userTask1.getName());
      assertFalse(userTask1.isAsynchronous());
      assertFalse(userTask1.isNotExclusive());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getDefaultFlow());
      assertNull(userTask1.getOwner());
      assertNull(userTask1.getId());
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      TaskDefinition taskDefinition0 = null;
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask1, taskDefinition0);
      assertFalse(userTask0.equals((Object)userTask1));
      assertFalse(userTask1.equals((Object)userTask0));
      assertNotNull(userTaskActivityBehavior0);
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getAssignee());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDefaultFlow());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertNull(userTask1.getDocumentation());
      assertFalse(userTask1.isForCompensation());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getDueDate());
      assertNull(userTask1.getName());
      assertFalse(userTask1.isAsynchronous());
      assertFalse(userTask1.isNotExclusive());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getDefaultFlow());
      assertNull(userTask1.getOwner());
      assertNull(userTask1.getId());
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getTenantId());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      String string0 = "*GchL <koC";
      ProcessDefinitionImpl processDefinitionImpl0 = new ProcessDefinitionImpl(string0);
      assertNotNull(processDefinitionImpl0);
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("*GchL <koC", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      
      String string1 = "TaXiIS(lk= /p4f";
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertEquals("", processDefinitionEntity0.getTenantId());
      
      ActivityImpl activityImpl0 = new ActivityImpl(string1, processDefinitionEntity0);
      assertFalse(string1.equals((Object)string0));
      assertNotNull(activityImpl0);
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals("TaXiIS(lk= /p4f", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getX());
      
      ActivityImpl activityImpl1 = AtomicOperationTransitionNotifyListenerTake.findNextScope(processDefinitionImpl0, activityImpl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(activityImpl1);
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("*GchL <koC", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals("TaXiIS(lk= /p4f", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertFalse(activityImpl1.isExclusive());
      assertEquals("TaXiIS(lk= /p4f", activityImpl1.getId());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      
      String string2 = "";
      defaultTaskFormHandler0.setDeploymentId(string2);
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", defaultTaskFormHandler0.getDeploymentId());
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertNotNull(executionImpl0);
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("*GchL <koC", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals("TaXiIS(lk= /p4f", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getX());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertFalse(activityImpl1.isExclusive());
      assertEquals("TaXiIS(lk= /p4f", activityImpl1.getId());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertTrue(executionImpl0.isActive());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      TaskFormHandler taskFormHandler0 = null;
      TaskDefinition taskDefinition0 = new TaskDefinition(taskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(taskDefinition0.getKey());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNotNull(taskDefinition1);
      assertNull(taskDefinition0.getKey());
      assertNull(taskDefinition1.getKey());
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TaskFormHandler taskFormHandler0 = null;
      TaskDefinition taskDefinition0 = new TaskDefinition(taskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(taskDefinition0.getKey());
      
      ActivityExecution activityExecution0 = null;
      String string0 = null;
      try { 
        userTaskActivityBehavior0.signal(activityExecution0, string0, string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDocumentation());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getDefaultFlow());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getAssignee());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getName());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertNull(userTask0.getId());
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask0, taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDocumentation());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getDefaultFlow());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getAssignee());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getName());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertNull(userTask0.getId());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      ActivityExecution activityExecution0 = null;
      userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDocumentation());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getDefaultFlow());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getAssignee());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getName());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getFormKey());
      assertNull(userTask0.getId());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "/iRX55m)L75&P|";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertNotNull(taskEntity0);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertEquals("/iRX55m)L75&P|", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertNull(taskDefinition0);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertEquals("/iRX55m)L75&P|", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertEquals("/iRX55m)L75&P|", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition1);
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertEquals("/iRX55m)L75&P|", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertNull(taskDefinition0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition1);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      
      String string0 = "";
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getKey());
      
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionEntity0);
      assertNotNull(activityImpl0);
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getKey());
      assertFalse(activityImpl0.isScope());
      assertEquals("", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      
      TransitionImpl transitionImpl0 = activityImpl0.createOutgoingTransition(taskEntity0.DELETE_REASON_COMPLETED);
      assertNotNull(transitionImpl0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getKey());
      assertFalse(activityImpl0.isScope());
      assertEquals("", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertEquals("completed", transitionImpl0.getId());
      
      ActivityImpl activityImpl1 = transitionImpl0.getSource();
      assertNotNull(activityImpl1);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getKey());
      assertFalse(activityImpl0.isScope());
      assertEquals("", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertEquals("completed", transitionImpl0.getId());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertEquals("", activityImpl1.getId());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl1);
      assertNotNull(executionImpl0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getKey());
      assertFalse(activityImpl0.isScope());
      assertEquals("", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertEquals("completed", transitionImpl0.getId());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertEquals("", activityImpl1.getId());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isActive());
      
      boolean boolean0 = false;
      executionImpl0.setEventScope(boolean0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getKey());
      assertFalse(activityImpl0.isScope());
      assertEquals("", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertEquals("completed", transitionImpl0.getId());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getWidth());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertEquals("", activityImpl1.getId());
      assertFalse(activityImpl1.isScope());
      assertEquals((-1), activityImpl1.getHeight());
      assertFalse(activityImpl1.isExclusive());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isActive());
      assertSame(activityImpl0, activityImpl1);
      assertSame(activityImpl1, activityImpl0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.addCandidateUserIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      Expression expression0 = null;
      taskDefinition0.setOwnerExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getName());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getDelegationState());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNotNull(userTask0);
      assertNull(userTask0.getDefaultFlow());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDueDate());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      
      UserTask userTask1 = userTask0.clone();
      assertFalse(userTask1.equals((Object)userTask0));
      assertNotNull(userTask1);
      assertNull(userTask0.getDefaultFlow());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getId());
      assertFalse(userTask0.isAsynchronous());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getDueDate());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask1.getOwner());
      assertNull(userTask1.getDefaultFlow());
      assertNull(userTask1.getId());
      assertNull(userTask1.getDocumentation());
      assertFalse(userTask1.isForCompensation());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getDueDate());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertNull(userTask1.getPriority());
      assertFalse(userTask1.isAsynchronous());
      assertFalse(userTask1.isNotExclusive());
      assertNull(userTask1.getName());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertNull(userTask1.getAssignee());
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = null;
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNotNull(executionImpl0);
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityName());
      
      ExecutionImpl executionImpl1 = executionImpl0.createExecution();
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNotNull(executionImpl1);
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl1.getId());
      assertNull(executionImpl1.getCurrentActivityName());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getCurrentActivityId());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.isDeleteRoot());
      assertFalse(executionImpl1.hasVariables());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertNull(executionImpl1.getEventName());
      assertFalse(executionImpl1.isConcurrent());
      assertNull(executionImpl1.getDeleteReason());
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl1);
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl1.getId());
      assertNull(executionImpl1.getCurrentActivityName());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getCurrentActivityId());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.isDeleteRoot());
      assertFalse(executionImpl1.hasVariables());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertNull(executionImpl1.getEventName());
      assertFalse(executionImpl1.isConcurrent());
      assertNull(executionImpl1.getDeleteReason());
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNotSame(executionImpl0, executionImpl1);
      
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertNotNull(executionEntity0);
      assertNull(executionEntity0.getEventName());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getActivityId());
      assertNull(executionEntity0.getDeleteReason());
      assertTrue(executionEntity0.isActive());
      assertEquals(1, executionEntity0.getRevision());
      assertEquals("", executionEntity0.getTenantId());
      assertFalse(executionEntity0.isEventScope());
      assertFalse(executionEntity0.isConcurrent());
      assertFalse(executionEntity0.isDeleteRoot());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertNull(executionEntity0.getBusinessKey());
      assertNull(executionEntity0.getCurrentActivityName());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertNull(executionEntity0.getCurrentActivityId());
      assertTrue(executionEntity0.isScope());
      assertFalse(executionEntity0.isEnded());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getParentId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getProcessInstanceId());
      assertNull(executionEntity0.getId());
      
      String string0 = " c&yUjy`'A";
      executionEntity0.setProcessDefinitionId(string0);
      assertNull(executionEntity0.getEventName());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getActivityId());
      assertNull(executionEntity0.getDeleteReason());
      assertTrue(executionEntity0.isActive());
      assertEquals(1, executionEntity0.getRevision());
      assertEquals(" c&yUjy`'A", executionEntity0.getProcessDefinitionId());
      assertEquals("", executionEntity0.getTenantId());
      assertFalse(executionEntity0.isEventScope());
      assertFalse(executionEntity0.isConcurrent());
      assertFalse(executionEntity0.isDeleteRoot());
      assertNull(executionEntity0.getBusinessKey());
      assertNull(executionEntity0.getCurrentActivityName());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertNull(executionEntity0.getCurrentActivityId());
      assertTrue(executionEntity0.isScope());
      assertFalse(executionEntity0.isEnded());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getParentId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNull(executionEntity0.getProcessInstanceId());
      assertNull(executionEntity0.getId());
      
      MailActivityBehavior mailActivityBehavior0 = new MailActivityBehavior();
      assertNotNull(mailActivityBehavior0);
      
      Expression expression0 = mailActivityBehavior0.text;
      assertNull(expression0);
      
      taskDefinition0.setPriorityExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      taskDefinition0.setKey(string0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertEquals(" c&yUjy`'A", taskDefinition0.getKey());
      
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertNotNull(list0);
      assertTrue(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertEquals(" c&yUjy`'A", taskDefinition0.getKey());
      
      String string1 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.extractCandidates(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.addCandidateUserIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      Expression expression0 = null;
      taskDefinition0.setOwnerExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getProcessInstanceId());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      
      ActivityExecution activityExecution0 = null;
      taskDefinition0.addCandidateGroupIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.addCandidateUserIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      taskDefinition0.setOwnerExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNotNull(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNotNull(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExpressionFactory expressionFactory0 = ExpressionFactory.newInstance();
      assertNotNull(expressionFactory0);
      
      boolean boolean0 = false;
      BeanELResolver beanELResolver0 = new BeanELResolver(boolean0);
      assertNotNull(beanELResolver0);
      
      ActivitiElContext activitiElContext0 = new ActivitiElContext(beanELResolver0);
      assertNotNull(activitiElContext0);
      assertFalse(activitiElContext0.isPropertyResolved());
      
      Class<String> class0 = String.class;
      TreeValueExpression treeValueExpression0 = (TreeValueExpression)expressionFactory0.createValueExpression((ELContext) activitiElContext0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME, (Class<?>) class0);
      assertNotNull(treeValueExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      
      JuelExpression juelExpression0 = new JuelExpression(treeValueExpression0, beanELResolver0.RESOLVABLE_AT_DESIGN_TIME);
      assertNotNull(juelExpression0);
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.addCandidateUserIdExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      taskDefinition0.setAssigneeExpression(juelExpression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertFalse(activitiElContext0.isPropertyResolved());
      assertFalse(treeValueExpression0.isDeferred());
      assertEquals("resolvableAtDesignTime", treeValueExpression0.getExpressionString());
      assertEquals("resolvableAtDesignTime", juelExpression0.getExpressionText());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      Expression expression0 = null;
      taskDefinition0.setOwnerExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNotNull(taskEntity0);
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.el.JuelExpression", e);
      }
  }
}
