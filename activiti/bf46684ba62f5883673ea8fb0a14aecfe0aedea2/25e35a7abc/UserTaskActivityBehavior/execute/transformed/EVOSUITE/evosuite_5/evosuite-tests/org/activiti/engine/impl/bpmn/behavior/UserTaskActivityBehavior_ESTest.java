/*
 * This file was automatically generated by EvoSuite
 * Sat Nov 06 09:37:59 GMT 2021
 */

package org.activiti.engine.impl.bpmn.behavior;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.util.List;
import org.activiti.bpmn.model.ActivitiListener;
import org.activiti.bpmn.model.ServiceTask;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.delegate.Expression;
import org.activiti.engine.impl.bpmn.behavior.BpmnActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.MailActivityBehavior;
import org.activiti.engine.impl.bpmn.behavior.ParallelMultiInstanceBehavior;
import org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior;
import org.activiti.engine.impl.bpmn.helper.ClassDelegate;
import org.activiti.engine.impl.bpmn.parser.factory.DefaultActivityBehaviorFactory;
import org.activiti.engine.impl.bpmn.parser.factory.DefaultListenerFactory;
import org.activiti.engine.impl.form.DefaultTaskFormHandler;
import org.activiti.engine.impl.form.TaskFormHandler;
import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.delegate.ActivityExecution;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.process.Lane;
import org.activiti.engine.impl.pvm.process.LaneSet;
import org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.task.TaskDefinition;
import org.apache.ibatis.session.SqlSessionManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class UserTaskActivityBehavior_ESTest extends UserTaskActivityBehavior_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getDeleteReason());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNotNull(executionImpl0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertNotNull(taskEntity0);
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      Expression expression0 = taskDefinition0.getDescriptionExpression();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(expression0);
      
      taskDefinition0.addCandidateGroupIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getParentId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getDeleteReason());
      assertNotNull(executionImpl0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNotNull(taskEntity0);
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      Expression expression0 = taskDefinition0.getDescriptionExpression();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(expression0);
      
      taskDefinition0.addCandidateGroupIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "";
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      ActivityExecution activityExecution0 = null;
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertTrue(list0.contains(string0));
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition0);
      
      try { 
        userTaskActivityBehavior0.signal(activityExecution0, string0, taskDefinition0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = ".";
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getId());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getOwner());
      assertNotNull(userTask0);
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask0, taskDefinition0);
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getId());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getOwner());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertEquals(".", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNotNull(taskEntity0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getEventName());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNotNull(executionImpl0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getFormKey());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getName());
      assertFalse(userTask0.isNotExclusive());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertNull(userTask0.getPriority());
      assertNull(userTask0.getId());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getOwner());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertEquals(".", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl0.getEventName());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getCurrentActivityName());
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = null;
      MailActivityBehavior mailActivityBehavior0 = new MailActivityBehavior();
      assertNotNull(mailActivityBehavior0);
      
      Expression expression0 = mailActivityBehavior0.html;
      assertNull(expression0);
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertEquals("", executionEntity0.getTenantId());
      assertFalse(executionEntity0.isEnded());
      assertFalse(executionEntity0.isDeleteRoot());
      assertNull(executionEntity0.getName());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getCurrentActivityName());
      assertNull(executionEntity0.getEventName());
      assertFalse(executionEntity0.isEventScope());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertFalse(executionEntity0.isConcurrent());
      assertEquals(1, executionEntity0.getRevision());
      assertTrue(executionEntity0.isActive());
      assertNull(executionEntity0.getParentId());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertNull(executionEntity0.getActivityId());
      assertNull(executionEntity0.getBusinessKey());
      assertNull(executionEntity0.getId());
      assertNull(executionEntity0.getProcessInstanceId());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getDeleteReason());
      assertNull(executionEntity0.getCurrentActivityId());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNotNull(executionEntity0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      TaskEntity taskEntity0 = null;
      int int0 = 24;
      TaskEntity taskEntity1 = new TaskEntity();
      assertNull(taskEntity1.getParentTaskId());
      assertNull(taskEntity1.getProcessInstanceId());
      assertEquals(0, taskEntity1.getRevision());
      assertFalse(taskEntity1.isDeleted());
      assertNull(taskEntity1.getTaskDefinitionKey());
      assertNull(taskEntity1.getDescription());
      assertNull(taskEntity1.getOwner());
      assertEquals(1, taskEntity1.getSuspensionState());
      assertNull(taskEntity1.getDelegationState());
      assertNull(taskEntity1.getFormKey());
      assertEquals(50, taskEntity1.getPriority());
      assertNull(taskEntity1.getProcessDefinitionId());
      assertNull(taskEntity1.getAssignee());
      assertNull(taskEntity1.getCategory());
      assertNull(taskEntity1.getExecutionId());
      assertNull(taskEntity1.getEventName());
      assertNull(taskEntity1.getName());
      assertEquals(1, taskEntity1.getRevisionNext());
      assertEquals("", taskEntity1.getTenantId());
      assertNull(taskEntity1.getId());
      assertNotNull(taskEntity1);
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      ServiceTask serviceTask0 = new ServiceTask();
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isForCompensation());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      assertNotNull(serviceTask0);
      
      MailActivityBehavior mailActivityBehavior0 = defaultActivityBehaviorFactory0.createMailActivityBehavior(serviceTask0);
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isForCompensation());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      assertNotNull(mailActivityBehavior0);
      
      Expression expression0 = mailActivityBehavior0.html;
      assertNull(expression0);
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isAsynchronous());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isForCompensation());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      
      ExecutionEntity executionEntity0 = taskEntity1.getExecution();
      assertNull(taskEntity1.getParentTaskId());
      assertNull(taskEntity1.getProcessInstanceId());
      assertEquals(0, taskEntity1.getRevision());
      assertFalse(taskEntity1.isDeleted());
      assertNull(taskEntity1.getTaskDefinitionKey());
      assertNull(taskEntity1.getDescription());
      assertNull(taskEntity1.getOwner());
      assertEquals(1, taskEntity1.getSuspensionState());
      assertNull(taskEntity1.getDelegationState());
      assertNull(taskEntity1.getFormKey());
      assertEquals(50, taskEntity1.getPriority());
      assertNull(taskEntity1.getProcessDefinitionId());
      assertNull(taskEntity1.getAssignee());
      assertNull(taskEntity1.getCategory());
      assertNull(taskEntity1.getExecutionId());
      assertNull(taskEntity1.getEventName());
      assertNull(taskEntity1.getName());
      assertEquals(1, taskEntity1.getRevisionNext());
      assertEquals("", taskEntity1.getTenantId());
      assertNull(taskEntity1.getId());
      assertNull(executionEntity0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "+";
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertTrue(list0.contains(string0));
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      TaskDefinition taskDefinition0 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition0);
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      TaskFormHandler taskFormHandler0 = null;
      TaskDefinition taskDefinition0 = new TaskDefinition(taskFormHandler0);
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "";
      String string1 = "Priority expression does not resolve to a number: ";
      DefaultListenerFactory defaultListenerFactory0 = new DefaultListenerFactory();
      assertNotNull(defaultListenerFactory0);
      
      ActivitiListener activitiListener0 = new ActivitiListener();
      assertEquals(0, activitiListener0.getXmlColumnNumber());
      assertNull(activitiListener0.getEvent());
      assertNull(activitiListener0.getImplementationType());
      assertNull(activitiListener0.getImplementation());
      assertEquals(0, activitiListener0.getXmlRowNumber());
      assertNull(activitiListener0.getId());
      assertNotNull(activitiListener0);
      
      ActivitiListener activitiListener1 = activitiListener0.clone();
      assertFalse(activitiListener1.equals((Object)activitiListener0));
      assertEquals(0, activitiListener0.getXmlColumnNumber());
      assertNull(activitiListener0.getEvent());
      assertNull(activitiListener0.getImplementationType());
      assertNull(activitiListener0.getImplementation());
      assertEquals(0, activitiListener0.getXmlRowNumber());
      assertNull(activitiListener0.getId());
      assertNull(activitiListener1.getId());
      assertEquals(0, activitiListener1.getXmlRowNumber());
      assertEquals(0, activitiListener1.getXmlColumnNumber());
      assertNull(activitiListener1.getEvent());
      assertNull(activitiListener1.getImplementationType());
      assertNull(activitiListener1.getImplementation());
      assertNotNull(activitiListener1);
      assertNotSame(activitiListener0, activitiListener1);
      assertNotSame(activitiListener1, activitiListener0);
      
      ClassDelegate classDelegate0 = (ClassDelegate)defaultListenerFactory0.createClassDelegateTaskListener(activitiListener1);
      assertFalse(activitiListener0.equals((Object)activitiListener1));
      assertFalse(activitiListener1.equals((Object)activitiListener0));
      assertEquals(0, activitiListener0.getXmlColumnNumber());
      assertNull(activitiListener0.getEvent());
      assertNull(activitiListener0.getImplementationType());
      assertNull(activitiListener0.getImplementation());
      assertEquals(0, activitiListener0.getXmlRowNumber());
      assertNull(activitiListener0.getId());
      assertNull(activitiListener1.getId());
      assertEquals(0, activitiListener1.getXmlRowNumber());
      assertEquals(0, activitiListener1.getXmlColumnNumber());
      assertNull(activitiListener1.getEvent());
      assertNull(activitiListener1.getImplementationType());
      assertNull(activitiListener1.getImplementation());
      assertNull(classDelegate0.getClassName());
      assertNotNull(classDelegate0);
      assertNotSame(activitiListener0, activitiListener1);
      assertNotSame(activitiListener1, activitiListener0);
      
      taskDefinition0.addTaskListener(string1, classDelegate0);
      assertFalse(string1.equals((Object)string0));
      assertFalse(activitiListener0.equals((Object)activitiListener1));
      assertFalse(activitiListener1.equals((Object)activitiListener0));
      assertNull(taskDefinition0.getKey());
      assertEquals(0, activitiListener0.getXmlColumnNumber());
      assertNull(activitiListener0.getEvent());
      assertNull(activitiListener0.getImplementationType());
      assertNull(activitiListener0.getImplementation());
      assertEquals(0, activitiListener0.getXmlRowNumber());
      assertNull(activitiListener0.getId());
      assertNull(activitiListener1.getId());
      assertEquals(0, activitiListener1.getXmlRowNumber());
      assertEquals(0, activitiListener1.getXmlColumnNumber());
      assertNull(activitiListener1.getEvent());
      assertNull(activitiListener1.getImplementationType());
      assertNull(activitiListener1.getImplementation());
      assertNull(classDelegate0.getClassName());
      assertNotSame(string1, string0);
      assertNotSame(activitiListener0, activitiListener1);
      assertNotSame(activitiListener1, activitiListener0);
      
      List<String> list0 = userTaskActivityBehavior0.extractCandidates(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(list0.contains(string1));
      assertTrue(list0.contains(string0));
      assertNull(taskDefinition0.getKey());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertNotSame(string0, string1);
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskDefinition0.getKey());
      assertNull(taskDefinition1.getKey());
      assertNotNull(taskDefinition1);
      assertSame(taskDefinition0, taskDefinition1);
      assertSame(taskDefinition1, taskDefinition0);
      
      List<String> list1 = userTaskActivityBehavior0.extractCandidates(string0);
      assertFalse(string0.equals((Object)string1));
      assertTrue(list1.equals((Object)list0));
      assertTrue(list1.contains(string0));
      assertFalse(list1.contains(string1));
      assertNull(taskDefinition0.getKey());
      assertFalse(list1.isEmpty());
      assertEquals(1, list1.size());
      assertNotNull(list1);
      assertSame(taskDefinition0, taskDefinition1);
      assertNotSame(string0, string1);
      assertNotSame(list1, list0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      TaskDefinition taskDefinition0 = null;
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionEntity executionEntity0 = new ExecutionEntity();
      assertFalse(executionEntity0.isConcurrent());
      assertNull(executionEntity0.getParentId());
      assertTrue(executionEntity0.isActive());
      assertEquals(1, executionEntity0.getRevision());
      assertNull(executionEntity0.getActivityId());
      assertEquals(2, executionEntity0.getRevisionNext());
      assertEquals(1, executionEntity0.getSuspensionState());
      assertFalse(executionEntity0.isEnded());
      assertEquals("", executionEntity0.getTenantId());
      assertFalse(executionEntity0.isEventScope());
      assertNull(executionEntity0.getName());
      assertFalse(executionEntity0.isDeleteRoot());
      assertTrue(executionEntity0.isScope());
      assertNull(executionEntity0.getSuperExecutionId());
      assertNull(executionEntity0.getCurrentActivityName());
      assertNull(executionEntity0.getBusinessKey());
      assertNull(executionEntity0.getEventName());
      assertNull(executionEntity0.getId());
      assertNull(executionEntity0.getProcessInstanceId());
      assertNull(executionEntity0.getCurrentActivityId());
      assertNull(executionEntity0.getProcessDefinitionId());
      assertTrue(executionEntity0.isProcessInstanceType());
      assertNull(executionEntity0.getDeleteReason());
      assertEquals(0, (int)executionEntity0.getExecutionListenerIndex());
      assertNotNull(executionEntity0);
      
      String string0 = "Priority expression does not resolve to a number: ";
      String string1 = "}Qz(#_ZC";
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, string0, string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.ExecutionEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      TaskEntity taskEntity0 = new TaskEntity();
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNotNull(taskEntity0);
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionEntity executionEntity0 = taskEntity0.getExecution();
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(0, taskEntity0.getRevision());
      assertFalse(taskEntity0.isDeleted());
      assertNull(executionEntity0);
      
      double double0 = 1339.6046146033;
      Double double1 = new Double(double0);
      assertEquals((double)double1, (double)double0, 0.01);
      assertNotNull(double1);
      assertEquals(1339.6046146033, (double)double1, 0.01);
      
      try { 
        userTaskActivityBehavior0.signal(executionEntity0, taskEntity0.DELETE_REASON_DELETED, double1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = ")a";
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNotNull(processDefinitionEntity0);
      
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionEntity0);
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertFalse(activityImpl0.isAsync());
      assertEquals(")a", activityImpl0.getId());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertNotNull(activityImpl0);
      
      ActivityImpl activityImpl1 = activityImpl0.createActivity();
      assertFalse(activityImpl1.equals((Object)activityImpl0));
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertFalse(activityImpl0.isAsync());
      assertEquals(")a", activityImpl0.getId());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isAsync());
      assertNull(activityImpl1.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertFalse(activityImpl1.isExclusive());
      assertFalse(activityImpl1.isScope());
      assertNotNull(activityImpl1);
      assertNotSame(activityImpl0, activityImpl1);
      assertNotSame(activityImpl1, activityImpl0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl1);
      assertFalse(activityImpl0.equals((Object)activityImpl1));
      assertFalse(activityImpl1.equals((Object)activityImpl0));
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertFalse(activityImpl0.isAsync());
      assertEquals(")a", activityImpl0.getId());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isAsync());
      assertNull(activityImpl1.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertFalse(activityImpl1.isExclusive());
      assertFalse(activityImpl1.isScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNotNull(executionImpl0);
      
      ExecutionImpl executionImpl1 = executionImpl0.createExecution();
      assertFalse(activityImpl0.equals((Object)activityImpl1));
      assertFalse(activityImpl1.equals((Object)activityImpl0));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(processDefinitionEntity0.getId());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getDescription());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertFalse(activityImpl0.isAsync());
      assertEquals(")a", activityImpl0.getId());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertEquals((-1), activityImpl0.getWidth());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl1.getX());
      assertEquals((-1), activityImpl1.getY());
      assertFalse(activityImpl1.isAsync());
      assertNull(activityImpl1.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertFalse(activityImpl1.isExclusive());
      assertFalse(activityImpl1.isScope());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariables());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertNull(executionImpl1.getDeleteReason());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.hasVariables());
      assertNull(executionImpl1.getCurrentActivityId());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertNull(executionImpl1.getCurrentActivityName());
      assertFalse(executionImpl1.isDeleteRoot());
      assertFalse(executionImpl1.isEventScope());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertNull(executionImpl1.getId());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getEventName());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertTrue(executionImpl1.isActive());
      assertNotNull(executionImpl1);
      assertNotSame(activityImpl0, activityImpl1);
      assertNotSame(activityImpl1, activityImpl0);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "ATe";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertEquals("ATe", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNotNull(taskEntity0);
      
      ActivityExecution activityExecution0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, activityExecution0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.isDeleteRoot());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.hasVariables());
      assertTrue(executionImpl0.isActive());
      assertNotNull(executionImpl0);
      
      try { 
        userTaskActivityBehavior0.execute(executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.entity.TaskEntity", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior();
      assertNotNull(userTaskActivityBehavior0);
      
      IdentityLinkEntity identityLinkEntity0 = new IdentityLinkEntity();
      assertNull(identityLinkEntity0.getProcessDefinitionId());
      assertNull(identityLinkEntity0.getId());
      assertFalse(identityLinkEntity0.isGroup());
      assertFalse(identityLinkEntity0.isUser());
      assertNull(identityLinkEntity0.getUserId());
      assertNull(identityLinkEntity0.getGroupId());
      assertNull(identityLinkEntity0.getProcessDefId());
      assertNull(identityLinkEntity0.getTaskId());
      assertNull(identityLinkEntity0.getType());
      assertNull(identityLinkEntity0.getProcessInstanceId());
      assertNotNull(identityLinkEntity0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(50, taskEntity0.getPriority());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNotNull(taskEntity0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isEnded());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNotNull(executionImpl0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      TaskDefinition taskDefinition0 = null;
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = "";
      String string1 = "h'M5,W[t)Q-nk6";
      ProcessDefinitionImpl processDefinitionImpl0 = new ProcessDefinitionImpl(string1);
      assertFalse(string1.equals((Object)string0));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertNotNull(processDefinitionImpl0);
      
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionImpl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertEquals("", activityImpl0.getId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertNotNull(activityImpl0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertEquals("", activityImpl0.getId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertNotNull(executionImpl0);
      
      LaneSet laneSet0 = new LaneSet();
      assertNull(laneSet0.getId());
      assertNull(laneSet0.getName());
      assertNotNull(laneSet0);
      
      String string2 = "";
      Lane lane0 = laneSet0.getLaneForId(string2);
      assertFalse(string2.equals((Object)string1));
      assertNull(laneSet0.getId());
      assertNull(laneSet0.getName());
      assertNull(lane0);
      assertNotSame(string2, string1);
      assertSame(string2, string0);
      
      processDefinitionImpl0.addLaneSet(laneSet0);
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertNull(laneSet0.getId());
      assertNull(laneSet0.getName());
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      
      ExecutionImpl executionImpl1 = executionImpl0.createExecution();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertEquals("", activityImpl0.getId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl1.getTenantId());
      assertNull(executionImpl1.getCurrentActivityId());
      assertFalse(executionImpl1.hasVariables());
      assertFalse(executionImpl1.isDeleteRoot());
      assertNull(executionImpl1.getDeleteReason());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getCurrentActivityName());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getId());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertNull(executionImpl1.getEventName());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertFalse(executionImpl1.isConcurrent());
      assertNotNull(executionImpl1);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      
      ActivityImpl activityImpl1 = processDefinitionImpl0.createActivity();
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(activityImpl1.equals((Object)activityImpl0));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertEquals((-1), activityImpl1.getHeight());
      assertEquals((-1), activityImpl1.getWidth());
      assertFalse(activityImpl1.isScope());
      assertNull(activityImpl1.getId());
      assertFalse(activityImpl1.isAsync());
      assertEquals((-1), activityImpl1.getY());
      assertEquals((-1), activityImpl1.getX());
      assertFalse(activityImpl1.isExclusive());
      assertNotNull(activityImpl1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(activityImpl1, activityImpl0);
      
      ExecutionImpl executionImpl2 = executionImpl1.getParent();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(activityImpl0.equals((Object)activityImpl1));
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertFalse(executionImpl2.equals((Object)executionImpl1));
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertEquals("h'M5,W[t)Q-nk6", processDefinitionImpl0.getId());
      assertEquals("", activityImpl0.getId());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isExclusive());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getY());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getCurrentActivityId());
      assertNull(executionImpl0.getDeleteReason());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl1.getTenantId());
      assertNull(executionImpl1.getCurrentActivityId());
      assertFalse(executionImpl1.hasVariables());
      assertFalse(executionImpl1.isDeleteRoot());
      assertNull(executionImpl1.getDeleteReason());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertFalse(executionImpl1.isEventScope());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getCurrentActivityName());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertNull(executionImpl1.getParentId());
      assertNull(executionImpl1.getId());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertNull(executionImpl1.getEventName());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl2.isEventScope());
      assertEquals(0, (int)executionImpl2.getExecutionListenerIndex());
      assertFalse(executionImpl2.hasVariables());
      assertTrue(executionImpl2.isScope());
      assertFalse(executionImpl2.isEnded());
      assertTrue(executionImpl2.isActive());
      assertNull(executionImpl2.getCurrentActivityId());
      assertNull(executionImpl2.getParentId());
      assertNull(executionImpl2.getCurrentActivityName());
      assertNull(executionImpl2.getId());
      assertFalse(executionImpl2.isConcurrent());
      assertFalse(executionImpl2.isDeleteRoot());
      assertNull(executionImpl2.getTenantId());
      assertNull(executionImpl2.getDeleteReason());
      assertFalse(executionImpl2.hasVariablesLocal());
      assertTrue(executionImpl2.isProcessInstanceType());
      assertNull(executionImpl2.getEventName());
      assertNotNull(executionImpl2);
      assertSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertNotSame(activityImpl0, activityImpl1);
      assertSame(executionImpl0, executionImpl2);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl2);
      assertNotSame(executionImpl1, executionImpl0);
      assertNotSame(executionImpl2, executionImpl1);
      assertSame(executionImpl2, executionImpl0);
      
      String string3 = "Hx5$GI}6hzQ_\"(FOqMd";
      try { 
        userTaskActivityBehavior0.signal(executionImpl2, string3, taskDefinition0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.activiti.engine.impl.pvm.runtime.ExecutionImpl cannot be cast to org.activiti.engine.impl.persistence.entity.ExecutionEntity
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.extractCandidates(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      String string0 = "type";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getCategory());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals("type", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNotNull(taskEntity0);
      
      TaskDefinition taskDefinition0 = taskEntity0.getTaskDefinition();
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getCategory());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals("type", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getCategory());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals("type", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNotNull(userTaskActivityBehavior0);
      
      TaskDefinition taskDefinition1 = userTaskActivityBehavior0.getTaskDefinition();
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getCategory());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals("type", taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getEventName());
      assertNull(taskDefinition1);
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      UserTask userTask0 = new UserTask();
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getPriority());
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getFormKey());
      assertNotNull(userTask0);
      
      UserTask userTask1 = userTask0.clone();
      assertFalse(userTask1.equals((Object)userTask0));
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getPriority());
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask1.isAsynchronous());
      assertFalse(userTask1.isForCompensation());
      assertNull(userTask1.getDocumentation());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertNull(userTask1.getName());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getDueDate());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertFalse(userTask1.isNotExclusive());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getOwner());
      assertNull(userTask1.getId());
      assertNull(userTask1.getDefaultFlow());
      assertNotNull(userTask1);
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = defaultActivityBehaviorFactory0.createUserTaskActivityBehavior(userTask1, taskDefinition0);
      assertFalse(userTask0.equals((Object)userTask1));
      assertFalse(userTask1.equals((Object)userTask0));
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getPriority());
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask1.isAsynchronous());
      assertFalse(userTask1.isForCompensation());
      assertNull(userTask1.getDocumentation());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertNull(userTask1.getName());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getDueDate());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertFalse(userTask1.isNotExclusive());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getOwner());
      assertNull(userTask1.getId());
      assertNull(userTask1.getDefaultFlow());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      
      TaskEntity taskEntity0 = new TaskEntity();
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getExecutionId());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getId());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNotNull(taskEntity0);
      
      String string0 = "3|uE";
      String string1 = "tfK.qw&}xWvD9C";
      IdentityLinkEntity identityLinkEntity0 = new IdentityLinkEntity();
      assertNull(identityLinkEntity0.getId());
      assertNull(identityLinkEntity0.getProcessInstanceId());
      assertNull(identityLinkEntity0.getProcessDefId());
      assertFalse(identityLinkEntity0.isGroup());
      assertFalse(identityLinkEntity0.isUser());
      assertNull(identityLinkEntity0.getProcessDefinitionId());
      assertNull(identityLinkEntity0.getType());
      assertNull(identityLinkEntity0.getTaskId());
      assertNull(identityLinkEntity0.getUserId());
      assertNull(identityLinkEntity0.getGroupId());
      assertNotNull(identityLinkEntity0);
      
      TaskEntity taskEntity1 = identityLinkEntity0.getTask();
      assertNull(identityLinkEntity0.getId());
      assertNull(identityLinkEntity0.getProcessInstanceId());
      assertNull(identityLinkEntity0.getProcessDefId());
      assertFalse(identityLinkEntity0.isGroup());
      assertFalse(identityLinkEntity0.isUser());
      assertNull(identityLinkEntity0.getProcessDefinitionId());
      assertNull(identityLinkEntity0.getType());
      assertNull(identityLinkEntity0.getTaskId());
      assertNull(identityLinkEntity0.getUserId());
      assertNull(identityLinkEntity0.getGroupId());
      assertNull(taskEntity1);
      
      String string2 = "<?R*G'0";
      ProcessDefinitionImpl processDefinitionImpl0 = new ProcessDefinitionImpl(string2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("<?R*G'0", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertNotNull(processDefinitionImpl0);
      
      ActivityImpl activityImpl0 = new ActivityImpl(string0, processDefinitionImpl0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("<?R*G'0", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals("3|uE", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertNotNull(activityImpl0);
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl0);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("<?R*G'0", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals("3|uE", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      assertNotNull(executionImpl0);
      
      ExecutionImpl executionImpl1 = executionImpl0.createExecution();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("<?R*G'0", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals("3|uE", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.isEventScope());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.isDeleteRoot());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getCurrentActivityId());
      assertNull(executionImpl1.getDeleteReason());
      assertNull(executionImpl1.getEventName());
      assertNull(executionImpl1.getCurrentActivityName());
      assertNull(executionImpl1.getId());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertNull(executionImpl1.getParentId());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertFalse(executionImpl1.hasVariables());
      assertNotNull(executionImpl1);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      
      ExecutionImpl executionImpl2 = executionImpl1.getReplacedBy();
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("<?R*G'0", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals("3|uE", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.isEventScope());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.isDeleteRoot());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getCurrentActivityId());
      assertNull(executionImpl1.getDeleteReason());
      assertNull(executionImpl1.getEventName());
      assertNull(executionImpl1.getCurrentActivityName());
      assertNull(executionImpl1.getId());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertNull(executionImpl1.getParentId());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertFalse(executionImpl1.hasVariables());
      assertNull(executionImpl2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
      
      userTaskActivityBehavior0.handleAssignments(taskEntity1, executionImpl2);
      assertFalse(userTask0.equals((Object)userTask1));
      assertFalse(userTask1.equals((Object)userTask0));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(executionImpl0.equals((Object)executionImpl1));
      assertFalse(executionImpl1.equals((Object)executionImpl0));
      assertNull(userTask0.getOwner());
      assertNull(userTask0.getName());
      assertEquals(0, userTask0.getXmlColumnNumber());
      assertEquals(0, userTask0.getXmlRowNumber());
      assertNull(userTask0.getDefaultFlow());
      assertNull(userTask0.getPriority());
      assertFalse(userTask0.isNotExclusive());
      assertFalse(userTask0.isAsynchronous());
      assertFalse(userTask0.isForCompensation());
      assertNull(userTask0.getDocumentation());
      assertNull(userTask0.getId());
      assertNull(userTask0.getAssignee());
      assertNull(userTask0.getCategory());
      assertNull(userTask0.getDueDate());
      assertNull(userTask0.getFormKey());
      assertFalse(userTask1.isAsynchronous());
      assertFalse(userTask1.isForCompensation());
      assertNull(userTask1.getDocumentation());
      assertNull(userTask1.getFormKey());
      assertEquals(0, userTask1.getXmlRowNumber());
      assertNull(userTask1.getName());
      assertNull(userTask1.getAssignee());
      assertNull(userTask1.getCategory());
      assertNull(userTask1.getDueDate());
      assertEquals(0, userTask1.getXmlColumnNumber());
      assertFalse(userTask1.isNotExclusive());
      assertNull(userTask1.getPriority());
      assertNull(userTask1.getOwner());
      assertNull(userTask1.getId());
      assertNull(userTask1.getDefaultFlow());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(identityLinkEntity0.getId());
      assertNull(identityLinkEntity0.getProcessInstanceId());
      assertNull(identityLinkEntity0.getProcessDefId());
      assertFalse(identityLinkEntity0.isGroup());
      assertFalse(identityLinkEntity0.isUser());
      assertNull(identityLinkEntity0.getProcessDefinitionId());
      assertNull(identityLinkEntity0.getType());
      assertNull(identityLinkEntity0.getTaskId());
      assertNull(identityLinkEntity0.getUserId());
      assertNull(identityLinkEntity0.getGroupId());
      assertNull(processDefinitionImpl0.getDiagramResourceName());
      assertEquals("<?R*G'0", processDefinitionImpl0.getId());
      assertNull(processDefinitionImpl0.getDeploymentId());
      assertNull(processDefinitionImpl0.getDescription());
      assertNull(processDefinitionImpl0.getKey());
      assertNull(processDefinitionImpl0.getName());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getHeight());
      assertFalse(activityImpl0.isAsync());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals("3|uE", activityImpl0.getId());
      assertEquals((-1), activityImpl0.getWidth());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertNull(executionImpl0.getParentId());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariables());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertTrue(executionImpl0.isActive());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityId());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getEventName());
      assertNull(executionImpl0.getCurrentActivityName());
      assertNull(executionImpl0.getId());
      assertFalse(executionImpl1.isConcurrent());
      assertFalse(executionImpl1.isEventScope());
      assertNull(executionImpl1.getTenantId());
      assertFalse(executionImpl1.isDeleteRoot());
      assertTrue(executionImpl1.isActive());
      assertNull(executionImpl1.getCurrentActivityId());
      assertNull(executionImpl1.getDeleteReason());
      assertNull(executionImpl1.getEventName());
      assertNull(executionImpl1.getCurrentActivityName());
      assertNull(executionImpl1.getId());
      assertFalse(executionImpl1.isProcessInstanceType());
      assertNull(executionImpl1.getParentId());
      assertFalse(executionImpl1.hasVariablesLocal());
      assertFalse(executionImpl1.isEnded());
      assertTrue(executionImpl1.isScope());
      assertEquals(0, (int)executionImpl1.getExecutionListenerIndex());
      assertFalse(executionImpl1.hasVariables());
      assertNotSame(userTask0, userTask1);
      assertNotSame(userTask1, userTask0);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(executionImpl0, executionImpl1);
      assertNotSame(executionImpl1, executionImpl0);
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      ExecutionImpl executionImpl0 = new ExecutionImpl();
      assertTrue(executionImpl0.isActive());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isEventScope());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getParentId());
      assertFalse(executionImpl0.isEnded());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getTenantId());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isConcurrent());
      assertNull(executionImpl0.getDeleteReason());
      assertNotNull(executionImpl0);
      
      String string0 = null;
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertEquals(1, taskEntity0.getRevisionNext());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDelegationState());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getProcessInstanceId());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNotNull(taskEntity0);
      
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      Expression expression0 = taskDefinition0.getDescriptionExpression();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(expression0);
      
      taskDefinition0.addCandidateGroupIdExpression(expression0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DefaultTaskFormHandler defaultTaskFormHandler0 = new DefaultTaskFormHandler();
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNotNull(defaultTaskFormHandler0);
      
      TaskDefinition taskDefinition0 = new TaskDefinition(defaultTaskFormHandler0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(taskDefinition0);
      
      UserTaskActivityBehavior userTaskActivityBehavior0 = new UserTaskActivityBehavior(taskDefinition0);
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNotNull(userTaskActivityBehavior0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte[] byteArray0 = new byte[2];
      byte byte0 = (byte)102;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-3);
      byteArray0[1] = byte1;
      boolean boolean0 = FileSystemHandling.appendDataToFile(evoSuiteFile0, byteArray0);
      assertEquals(2, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)102, (byte) (-3)}, byteArray0);
      assertFalse(boolean0);
      
      TaskEntity taskEntity0 = null;
      int int0 = (-1);
      MockDate mockDate0 = new MockDate(int0, int0, int0, int0, int0);
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity1 = TaskEntity.create(mockDate0);
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertNull(taskEntity1.getEventName());
      assertNull(taskEntity1.getExecutionId());
      assertEquals("", taskEntity1.getTenantId());
      assertNull(taskEntity1.getId());
      assertNull(taskEntity1.getProcessInstanceId());
      assertNull(taskEntity1.getFormKey());
      assertNull(taskEntity1.getCategory());
      assertNull(taskEntity1.getDelegationState());
      assertNull(taskEntity1.getDescription());
      assertNull(taskEntity1.getProcessDefinitionId());
      assertNull(taskEntity1.getAssignee());
      assertNull(taskEntity1.getParentTaskId());
      assertNull(taskEntity1.getName());
      assertEquals(1, taskEntity1.getRevisionNext());
      assertFalse(taskEntity1.isDeleted());
      assertNull(taskEntity1.getOwner());
      assertEquals(0, taskEntity1.getRevision());
      assertEquals(1, taskEntity1.getSuspensionState());
      assertEquals(50, taskEntity1.getPriority());
      assertNull(taskEntity1.getTaskDefinitionKey());
      assertNotNull(taskEntity1);
      
      DefaultActivityBehaviorFactory defaultActivityBehaviorFactory0 = new DefaultActivityBehaviorFactory();
      assertNotNull(defaultActivityBehaviorFactory0);
      
      ServiceTask serviceTask0 = new ServiceTask();
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isAsynchronous());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      assertNotNull(serviceTask0);
      
      ServiceTask serviceTask1 = serviceTask0.clone();
      assertFalse(serviceTask1.equals((Object)serviceTask0));
      assertNull(serviceTask1.getImplementationType());
      assertNull(serviceTask1.getDefaultFlow());
      assertNull(serviceTask1.getExtensionId());
      assertEquals(0, serviceTask1.getXmlColumnNumber());
      assertEquals(0, serviceTask1.getXmlRowNumber());
      assertNull(serviceTask1.getImplementation());
      assertNull(serviceTask1.getType());
      assertNull(serviceTask1.getName());
      assertFalse(serviceTask1.isAsynchronous());
      assertFalse(serviceTask1.isNotExclusive());
      assertNull(serviceTask1.getDocumentation());
      assertFalse(serviceTask1.isForCompensation());
      assertNull(serviceTask1.getResultVariableName());
      assertNull(serviceTask1.getId());
      assertNull(serviceTask1.getOperationRef());
      assertFalse(serviceTask1.isExtended());
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isAsynchronous());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      assertNotNull(serviceTask1);
      assertNotSame(serviceTask1, serviceTask0);
      assertNotSame(serviceTask0, serviceTask1);
      
      MailActivityBehavior mailActivityBehavior0 = defaultActivityBehaviorFactory0.createMailActivityBehavior(serviceTask1);
      assertFalse(serviceTask1.equals((Object)serviceTask0));
      assertFalse(serviceTask0.equals((Object)serviceTask1));
      assertNull(serviceTask1.getImplementationType());
      assertNull(serviceTask1.getDefaultFlow());
      assertNull(serviceTask1.getExtensionId());
      assertEquals(0, serviceTask1.getXmlColumnNumber());
      assertEquals(0, serviceTask1.getXmlRowNumber());
      assertNull(serviceTask1.getImplementation());
      assertNull(serviceTask1.getType());
      assertNull(serviceTask1.getName());
      assertFalse(serviceTask1.isAsynchronous());
      assertFalse(serviceTask1.isNotExclusive());
      assertNull(serviceTask1.getDocumentation());
      assertFalse(serviceTask1.isForCompensation());
      assertNull(serviceTask1.getResultVariableName());
      assertNull(serviceTask1.getId());
      assertNull(serviceTask1.getOperationRef());
      assertFalse(serviceTask1.isExtended());
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isAsynchronous());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      assertNotNull(mailActivityBehavior0);
      assertNotSame(serviceTask1, serviceTask0);
      assertNotSame(serviceTask0, serviceTask1);
      
      Expression expression0 = mailActivityBehavior0.html;
      assertNull(expression0);
      
      taskDefinition0.addCandidateUserIdExpression(expression0);
      assertFalse(serviceTask1.equals((Object)serviceTask0));
      assertFalse(serviceTask0.equals((Object)serviceTask1));
      assertNull(serviceTask1.getImplementationType());
      assertNull(serviceTask1.getDefaultFlow());
      assertNull(serviceTask1.getExtensionId());
      assertEquals(0, serviceTask1.getXmlColumnNumber());
      assertEquals(0, serviceTask1.getXmlRowNumber());
      assertNull(serviceTask1.getImplementation());
      assertNull(serviceTask1.getType());
      assertNull(serviceTask1.getName());
      assertFalse(serviceTask1.isAsynchronous());
      assertFalse(serviceTask1.isNotExclusive());
      assertNull(serviceTask1.getDocumentation());
      assertFalse(serviceTask1.isForCompensation());
      assertNull(serviceTask1.getResultVariableName());
      assertNull(serviceTask1.getId());
      assertNull(serviceTask1.getOperationRef());
      assertFalse(serviceTask1.isExtended());
      assertNull(defaultTaskFormHandler0.getDeploymentId());
      assertNull(taskDefinition0.getKey());
      assertNull(serviceTask0.getName());
      assertEquals(0, serviceTask0.getXmlColumnNumber());
      assertEquals(0, serviceTask0.getXmlRowNumber());
      assertNull(serviceTask0.getOperationRef());
      assertNull(serviceTask0.getId());
      assertNull(serviceTask0.getImplementation());
      assertNull(serviceTask0.getType());
      assertNull(serviceTask0.getExtensionId());
      assertNull(serviceTask0.getResultVariableName());
      assertFalse(serviceTask0.isForCompensation());
      assertFalse(serviceTask0.isAsynchronous());
      assertNull(serviceTask0.getDocumentation());
      assertFalse(serviceTask0.isNotExclusive());
      assertFalse(serviceTask0.isExtended());
      assertNull(serviceTask0.getDefaultFlow());
      assertNull(serviceTask0.getImplementationType());
      assertNotSame(serviceTask1, serviceTask0);
      assertNotSame(serviceTask0, serviceTask1);
      
      ExecutionEntity executionEntity0 = taskEntity1.getExecution();
      assertEquals("Mon Nov 28 22:59:00 GMT 1898", mockDate0.toString());
      assertNull(taskEntity1.getEventName());
      assertNull(taskEntity1.getExecutionId());
      assertEquals("", taskEntity1.getTenantId());
      assertNull(taskEntity1.getId());
      assertNull(taskEntity1.getProcessInstanceId());
      assertNull(taskEntity1.getFormKey());
      assertNull(taskEntity1.getCategory());
      assertNull(taskEntity1.getDelegationState());
      assertNull(taskEntity1.getDescription());
      assertNull(taskEntity1.getProcessDefinitionId());
      assertNull(taskEntity1.getAssignee());
      assertNull(taskEntity1.getParentTaskId());
      assertNull(taskEntity1.getName());
      assertEquals(1, taskEntity1.getRevisionNext());
      assertFalse(taskEntity1.isDeleted());
      assertNull(taskEntity1.getOwner());
      assertEquals(0, taskEntity1.getRevision());
      assertEquals(1, taskEntity1.getSuspensionState());
      assertEquals(50, taskEntity1.getPriority());
      assertNull(taskEntity1.getTaskDefinitionKey());
      assertNull(executionEntity0);
      
      // Undeclared exception!
      try { 
        userTaskActivityBehavior0.handleAssignments(taskEntity0, executionEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.bpmn.behavior.UserTaskActivityBehavior", e);
      }
  }
}
