/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 12:58:18 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.InputStream;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.script.Bindings;
import javax.script.ScriptEngineManager;
import javax.script.SimpleBindings;
import org.activiti.engine.delegate.VariableScope;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.Direction;
import org.activiti.engine.impl.HistoricProcessInstanceQueryProperty;
import org.activiti.engine.impl.NativeDeploymentQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.ProcessDefinitionQueryProperty;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.cfg.CommandExecutorImpl;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
import org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.TransactionPropagation;
import org.activiti.engine.impl.el.NoExecutionVariableScope;
import org.activiti.engine.impl.form.FormEngine;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandConfig;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandContextFactory;
import org.activiti.engine.impl.interceptor.CommandContextInterceptor;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.jobexecutor.DefaultJobExecutor;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.ModelEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.ResourceEntity;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.activiti.engine.impl.scripting.ResolverFactory;
import org.activiti.engine.impl.scripting.ScriptBindingsFactory;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFileInputStream;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertNull(deploymentEntity0.getName());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "vY";
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "Q{`X";
      deploymentEntityManager0.flush();
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      
      int int0 = (-841);
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals((-841), page0.getFirstResult());
      assertEquals((-841), page0.getMaxResults());
      
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      JtaProcessEngineConfiguration jtaProcessEngineConfiguration0 = new JtaProcessEngineConfiguration();
      assertNotNull(jtaProcessEngineConfiguration0);
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(jtaProcessEngineConfiguration0.DB_SCHEMA_UPDATE_CREATE_DROP);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(hashMap0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      SimpleBindings simpleBindings0 = new SimpleBindings();
      assertNotNull(simpleBindings0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(simpleBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      
      ProcessDefinitionQueryProperty processDefinitionQueryProperty0 = ProcessDefinitionQueryProperty.PROCESS_DEFINITION_ID;
      assertNotNull(processDefinitionQueryProperty0);
      assertEquals("RES.ID_", processDefinitionQueryProperty0.getName());
      
      DeploymentQueryImpl deploymentQueryImpl1 = (DeploymentQueryImpl)deploymentQueryImpl0.orderBy(processDefinitionQueryProperty0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("RES.ID_", processDefinitionQueryProperty0.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      
      String string0 = "";
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl0.deploymentTenantIdLike(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl2);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = null;
      int int0 = 1310;
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals(1310, page0.getMaxResults());
      assertEquals(1310, page0.getFirstResult());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      boolean boolean0 = false;
      CommandConfig commandConfig0 = new CommandConfig(boolean0);
      assertNotNull(commandConfig0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertFalse(commandConfig0.isContextReusePossible());
      
      CommandContextFactory commandContextFactory0 = new CommandContextFactory();
      assertNotNull(commandContextFactory0);
      
      StandaloneProcessEngineConfiguration standaloneProcessEngineConfiguration0 = new StandaloneProcessEngineConfiguration();
      assertNotNull(standaloneProcessEngineConfiguration0);
      assertEquals("activiti@localhost", standaloneProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(2500, standaloneProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getActivityFontName());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeTasks());
      assertTrue(standaloneProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(standaloneProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals(25, standaloneProcessEngineConfiguration0.getMailServerPort());
      assertTrue(standaloneProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseSchema());
      assertNull(standaloneProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(standaloneProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("sa", standaloneProcessEngineConfiguration0.getJdbcUsername());
      assertEquals("org.h2.Driver", standaloneProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(standaloneProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("false", standaloneProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseType());
      assertEquals("camelContext", standaloneProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(10, standaloneProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", standaloneProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("default", standaloneProcessEngineConfiguration0.getProcessEngineName());
      assertTrue(standaloneProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("", standaloneProcessEngineConfiguration0.getJdbcPassword());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", standaloneProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseTLS());
      assertNull(standaloneProcessEngineConfiguration0.getHistoryLevel());
      assertEquals("UTF-8", standaloneProcessEngineConfiguration0.getXmlEncoding());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(standaloneProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(standaloneProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getLabelFontName());
      assertEquals("audit", standaloneProcessEngineConfiguration0.getHistory());
      assertFalse(standaloneProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(standaloneProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", standaloneProcessEngineConfiguration0.getMailServerHost());
      assertFalse(standaloneProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals(10, standaloneProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(standaloneProcessEngineConfiguration0.getJdbcPingQuery());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxWaitTime());
      
      CommandContextInterceptor commandContextInterceptor0 = new CommandContextInterceptor(commandContextFactory0, standaloneProcessEngineConfiguration0);
      assertNotNull(commandContextInterceptor0);
      assertEquals("activiti@localhost", standaloneProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(2500, standaloneProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getActivityFontName());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeTasks());
      assertTrue(standaloneProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(standaloneProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals(25, standaloneProcessEngineConfiguration0.getMailServerPort());
      assertTrue(standaloneProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseSchema());
      assertNull(standaloneProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(standaloneProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("sa", standaloneProcessEngineConfiguration0.getJdbcUsername());
      assertEquals("org.h2.Driver", standaloneProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(standaloneProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("false", standaloneProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseType());
      assertEquals("camelContext", standaloneProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(10, standaloneProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", standaloneProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("default", standaloneProcessEngineConfiguration0.getProcessEngineName());
      assertTrue(standaloneProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("", standaloneProcessEngineConfiguration0.getJdbcPassword());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", standaloneProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseTLS());
      assertNull(standaloneProcessEngineConfiguration0.getHistoryLevel());
      assertEquals("UTF-8", standaloneProcessEngineConfiguration0.getXmlEncoding());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(standaloneProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(standaloneProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getLabelFontName());
      assertEquals("audit", standaloneProcessEngineConfiguration0.getHistory());
      assertFalse(standaloneProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(standaloneProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", standaloneProcessEngineConfiguration0.getMailServerHost());
      assertFalse(standaloneProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals(10, standaloneProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(standaloneProcessEngineConfiguration0.getJdbcPingQuery());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxWaitTime());
      
      CommandExecutorImpl commandExecutorImpl0 = new CommandExecutorImpl(commandConfig0, commandContextInterceptor0);
      assertNotNull(commandExecutorImpl0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertFalse(commandConfig0.isContextReusePossible());
      assertEquals("activiti@localhost", standaloneProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(2500, standaloneProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getActivityFontName());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeTasks());
      assertTrue(standaloneProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(standaloneProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals(25, standaloneProcessEngineConfiguration0.getMailServerPort());
      assertTrue(standaloneProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseSchema());
      assertNull(standaloneProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(standaloneProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("sa", standaloneProcessEngineConfiguration0.getJdbcUsername());
      assertEquals("org.h2.Driver", standaloneProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(standaloneProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("false", standaloneProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseType());
      assertEquals("camelContext", standaloneProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(10, standaloneProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", standaloneProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("default", standaloneProcessEngineConfiguration0.getProcessEngineName());
      assertTrue(standaloneProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("", standaloneProcessEngineConfiguration0.getJdbcPassword());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", standaloneProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseTLS());
      assertNull(standaloneProcessEngineConfiguration0.getHistoryLevel());
      assertEquals("UTF-8", standaloneProcessEngineConfiguration0.getXmlEncoding());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(standaloneProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(standaloneProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getLabelFontName());
      assertEquals("audit", standaloneProcessEngineConfiguration0.getHistory());
      assertFalse(standaloneProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(standaloneProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", standaloneProcessEngineConfiguration0.getMailServerHost());
      assertFalse(standaloneProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals(10, standaloneProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(standaloneProcessEngineConfiguration0.getJdbcPingQuery());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxWaitTime());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl(commandExecutorImpl0);
      assertNotNull(deploymentQueryImpl0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertFalse(commandConfig0.isContextReusePossible());
      assertEquals("activiti@localhost", standaloneProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(2500, standaloneProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getActivityFontName());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeTasks());
      assertTrue(standaloneProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(standaloneProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals(25, standaloneProcessEngineConfiguration0.getMailServerPort());
      assertTrue(standaloneProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseSchema());
      assertNull(standaloneProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(standaloneProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("sa", standaloneProcessEngineConfiguration0.getJdbcUsername());
      assertEquals("org.h2.Driver", standaloneProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(standaloneProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("false", standaloneProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseType());
      assertEquals("camelContext", standaloneProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(10, standaloneProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", standaloneProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("default", standaloneProcessEngineConfiguration0.getProcessEngineName());
      assertTrue(standaloneProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("", standaloneProcessEngineConfiguration0.getJdbcPassword());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", standaloneProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseTLS());
      assertNull(standaloneProcessEngineConfiguration0.getHistoryLevel());
      assertEquals("UTF-8", standaloneProcessEngineConfiguration0.getXmlEncoding());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(standaloneProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(standaloneProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getLabelFontName());
      assertEquals("audit", standaloneProcessEngineConfiguration0.getHistory());
      assertFalse(standaloneProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(standaloneProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", standaloneProcessEngineConfiguration0.getMailServerHost());
      assertFalse(standaloneProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals(10, standaloneProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(standaloneProcessEngineConfiguration0.getJdbcPingQuery());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentId(standaloneProcessEngineConfiguration0.DEFAULT_MYBATIS_MAPPING_FILE);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertFalse(commandConfig0.isContextReusePossible());
      assertEquals("activiti@localhost", standaloneProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(2500, standaloneProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getActivityFontName());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeTasks());
      assertTrue(standaloneProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(standaloneProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals(25, standaloneProcessEngineConfiguration0.getMailServerPort());
      assertTrue(standaloneProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseSchema());
      assertNull(standaloneProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(standaloneProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("sa", standaloneProcessEngineConfiguration0.getJdbcUsername());
      assertEquals("org.h2.Driver", standaloneProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(standaloneProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("false", standaloneProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseType());
      assertEquals("camelContext", standaloneProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(10, standaloneProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", standaloneProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("default", standaloneProcessEngineConfiguration0.getProcessEngineName());
      assertTrue(standaloneProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("", standaloneProcessEngineConfiguration0.getJdbcPassword());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", standaloneProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseTLS());
      assertNull(standaloneProcessEngineConfiguration0.getHistoryLevel());
      assertEquals("UTF-8", standaloneProcessEngineConfiguration0.getXmlEncoding());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(standaloneProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(standaloneProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getLabelFontName());
      assertEquals("audit", standaloneProcessEngineConfiguration0.getHistory());
      assertFalse(standaloneProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(standaloneProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", standaloneProcessEngineConfiguration0.getMailServerHost());
      assertFalse(standaloneProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals(10, standaloneProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(standaloneProcessEngineConfiguration0.getJdbcPingQuery());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("org/activiti/db/mapping/mappings.xml", deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("org/activiti/db/mapping/mappings.xml", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentCategory(standaloneProcessEngineConfiguration0.DB_SCHEMA_UPDATE_DROP_CREATE);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl2);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertFalse(commandConfig0.isContextReusePossible());
      assertEquals("activiti@localhost", standaloneProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals(2500, standaloneProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getActivityFontName());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeTasks());
      assertTrue(standaloneProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(standaloneProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals(25, standaloneProcessEngineConfiguration0.getMailServerPort());
      assertTrue(standaloneProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseSchema());
      assertNull(standaloneProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(standaloneProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals(25, standaloneProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertFalse(standaloneProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("sa", standaloneProcessEngineConfiguration0.getJdbcUsername());
      assertEquals("org.h2.Driver", standaloneProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(standaloneProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("false", standaloneProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(standaloneProcessEngineConfiguration0.getDatabaseType());
      assertEquals("camelContext", standaloneProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(10, standaloneProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", standaloneProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("default", standaloneProcessEngineConfiguration0.getProcessEngineName());
      assertTrue(standaloneProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("", standaloneProcessEngineConfiguration0.getJdbcPassword());
      assertEquals((-1), standaloneProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(standaloneProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", standaloneProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseTLS());
      assertNull(standaloneProcessEngineConfiguration0.getHistoryLevel());
      assertEquals("UTF-8", standaloneProcessEngineConfiguration0.getXmlEncoding());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", standaloneProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(standaloneProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(standaloneProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(standaloneProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("Arial", standaloneProcessEngineConfiguration0.getLabelFontName());
      assertEquals("audit", standaloneProcessEngineConfiguration0.getHistory());
      assertFalse(standaloneProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(standaloneProcessEngineConfiguration0.getDataSourceJndiName());
      assertEquals("localhost", standaloneProcessEngineConfiguration0.getMailServerHost());
      assertFalse(standaloneProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals(10, standaloneProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(standaloneProcessEngineConfiguration0.getJdbcPingQuery());
      assertNull(standaloneProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, standaloneProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertEquals("drop-create", deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("org/activiti/db/mapping/mappings.xml", deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("org/activiti/db/mapping/mappings.xml", deploymentQueryImpl1.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("drop-create", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("drop-create", deploymentQueryImpl2.getCategory());
      assertEquals("org/activiti/db/mapping/mappings.xml", deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      
      int int0 = 1822;
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals(1822, page0.getFirstResult());
      assertEquals(1822, page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl2, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "gY%0n17";
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getName());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = 0;
      int int1 = 580;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(hashMap0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getName());
      assertEquals("", deploymentEntity0.getTenantId());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      
      HashMap hashMap0 = (HashMap)deploymentEntity0.getPersistentState();
      assertNotNull(hashMap0);
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getName());
      assertEquals("", deploymentEntity0.getTenantId());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertFalse(hashMap0.isEmpty());
      assertEquals(2, hashMap0.size());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "`XPM4}0Bs";
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ScriptEngineManager scriptEngineManager0 = new ScriptEngineManager(classLoader0);
      assertNotNull(scriptEngineManager0);
      
      Bindings bindings0 = scriptEngineManager0.getBindings();
      assertNotNull(bindings0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(bindings0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "`5truzQ@";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "wPPc>LKp*h\\\\Y8qx";
      String string1 = "oGF;:?";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string1, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "; expected type PropertyNamingStrategy or Class<PropertyNamingStrategy> instead";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "mV*EBpnA=#YV1m";
      String string1 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      
      String string0 = "selectHistoricProcessInstanceByNativeQuery";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentCategory(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      
      int int0 = 0;
      deploymentQueryImpl1.setMaxResults(int0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(0, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(0, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getLastRow());
      
      String string1 = "";
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentName(string1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(0, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals("", deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(0, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("", deploymentQueryImpl1.getName());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl2.getLastRow());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl2.getCategory());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("", deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getMaxResults());
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl1.deploymentWithoutTenantId();
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl3);
      assertFalse(string0.equals((Object)string1));
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(0, deploymentQueryImpl0.getMaxResults());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals("", deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl0.getCategory());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(0, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("", deploymentQueryImpl1.getName());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(1, deploymentQueryImpl3.getLastRow());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl3.getName());
      assertEquals("selectHistoricProcessInstanceByNativeQuery", deploymentQueryImpl3.getCategory());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(0, deploymentQueryImpl3.getMaxResults());
      
      int int1 = (-4273);
      DefaultJobExecutor defaultJobExecutor0 = new DefaultJobExecutor();
      assertNotNull(defaultJobExecutor0);
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      
      CommandExecutor commandExecutor0 = defaultJobExecutor0.getCommandExecutor();
      assertNull(commandExecutor0);
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      
      NativeDeploymentQueryImpl nativeDeploymentQueryImpl0 = new NativeDeploymentQueryImpl(commandExecutor0);
      assertNotNull(nativeDeploymentQueryImpl0);
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      
      Map<String, Object> map0 = nativeDeploymentQueryImpl0.getParameters();
      assertNotNull(map0);
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
