/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 22:33:19 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.LinkedTransferQueue;
import javax.script.Bindings;
import javax.script.ScriptEngineManager;
import javax.script.SimpleBindings;
import org.activiti.engine.impl.AbstractQuery;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.FormServiceImpl;
import org.activiti.engine.impl.NativeDeploymentQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.ProcessInstanceQueryProperty;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.RuntimeServiceImpl;
import org.activiti.engine.impl.TaskServiceImpl;
import org.activiti.engine.impl.calendar.AdvancedCycleBusinessCalendar;
import org.activiti.engine.impl.cfg.CommandExecutorImpl;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.db.DbIdGenerator;
import org.activiti.engine.impl.form.StartFormHandler;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandConfig;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandContextFactory;
import org.activiti.engine.impl.interceptor.CommandContextInterceptor;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.jobexecutor.DefaultJobExecutor;
import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
import org.activiti.engine.impl.persistence.entity.ByteArrayEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.ModelEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.activiti.engine.repository.Deployment;
import org.activiti.engine.repository.DeploymentQuery;
import org.activiti.engine.runtime.ClockReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "activiti-intermdite-catch-event-invalid-eventdefinition";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertNull(deploymentEntity0.getName());
      assertNull(deploymentEntity0.getCategory());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      String string0 = "B5;HG93a0ym_";
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      
      int int0 = 2742;
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals(2742, page0.getFirstResult());
      assertEquals(2742, page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      int int0 = 1;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(hashMap0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      String string0 = "8%|o$fa";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "activiti-intermediate-catch-event-invalid-eventdefinition";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      RepositoryServiceImpl repositoryServiceImpl0 = new RepositoryServiceImpl();
      assertNotNull(repositoryServiceImpl0);
      
      DeploymentBuilderImpl deploymentBuilderImpl0 = new DeploymentBuilderImpl(repositoryServiceImpl0);
      assertNotNull(deploymentBuilderImpl0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      
      DeploymentEntity deploymentEntity0 = deploymentBuilderImpl0.getDeployment();
      assertNotNull(deploymentEntity0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getName());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getId());
      assertNull(deploymentEntity0.getCategory());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "9v0rrnJu!";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      SimpleBindings simpleBindings0 = new SimpleBindings();
      assertNotNull(simpleBindings0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(simpleBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      
      String string0 = "execution tenant id is null";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentTenantIdLike(string0);
      assertNotNull(deploymentQueryImpl1);
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("execution tenant id is null", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl1.getTenantIdLike());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentWithoutTenantId();
      assertNotNull(deploymentQueryImpl2);
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("execution tenant id is null", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl2.getTenantIdLike());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      
      String string1 = "oVi~m7Udw:s0";
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentCategoryNotEquals(string1);
      assertNotNull(deploymentQueryImpl3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("execution tenant id is null", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl3.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getCategory());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("execution tenant id is null", deploymentQueryImpl3.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      
      String string2 = "OrSYKySA7f6^'aK!'";
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl3.processDefinitionKeyLike(string2);
      assertNotNull(deploymentQueryImpl4);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("execution tenant id is null", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("execution tenant id is null", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl3.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getCategory());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("execution tenant id is null", deploymentQueryImpl3.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("oVi~m7Udw:s0", deploymentQueryImpl4.getCategoryNotEquals());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals("execution tenant id is null", deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl4.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertTrue(deploymentQueryImpl4.isWithoutTenantId());
      assertNull(deploymentQueryImpl4.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      
      int int0 = (-322);
      int int1 = 2192;
      Page page0 = new Page(int0, int1);
      assertNotNull(page0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-322), page0.getFirstResult());
      assertEquals(2192, page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl4, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      RepositoryServiceImpl repositoryServiceImpl0 = new RepositoryServiceImpl();
      assertNotNull(repositoryServiceImpl0);
      
      DeploymentBuilderImpl deploymentBuilderImpl0 = new DeploymentBuilderImpl(repositoryServiceImpl0);
      assertNotNull(deploymentBuilderImpl0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      
      ClassLoader classLoader0 = ClassLoader.getSystemClassLoader();
      assertNotNull(classLoader0);
      
      ScriptEngineManager scriptEngineManager0 = new ScriptEngineManager(classLoader0);
      assertNotNull(scriptEngineManager0);
      
      Bindings bindings0 = scriptEngineManager0.getBindings();
      assertNotNull(bindings0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(bindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      
      String string0 = "[I7j73v?4+";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentCategory(string0);
      assertNotNull(deploymentQueryImpl1);
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("[I7j73v?4+", deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("[I7j73v?4+", deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      
      String string1 = "bC)Ge,d";
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentNameLike(string1);
      assertNotNull(deploymentQueryImpl2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("bC)Ge,d", deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("[I7j73v?4+", deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("bC)Ge,d", deploymentQueryImpl1.getNameLike());
      assertEquals("[I7j73v?4+", deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("[I7j73v?4+", deploymentQueryImpl2.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("bC)Ge,d", deploymentQueryImpl2.getNameLike());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      
      ProcessInstanceQueryProperty processInstanceQueryProperty0 = ProcessInstanceQueryProperty.PROCESS_DEFINITION_KEY;
      assertNotNull(processInstanceQueryProperty0);
      assertEquals("ProcessDefinitionKey", processInstanceQueryProperty0.getName());
      
      DeploymentQueryImpl deploymentQueryImpl3 = (DeploymentQueryImpl)deploymentQueryImpl2.orderBy(processInstanceQueryProperty0);
      assertNotNull(deploymentQueryImpl3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("bC)Ge,d", deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("[I7j73v?4+", deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("bC)Ge,d", deploymentQueryImpl1.getNameLike());
      assertEquals("[I7j73v?4+", deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("[I7j73v?4+", deploymentQueryImpl2.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("bC)Ge,d", deploymentQueryImpl2.getNameLike());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals("ProcessDefinitionKey", processInstanceQueryProperty0.getName());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals("bC)Ge,d", deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals("[I7j73v?4+", deploymentQueryImpl3.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      
      Page page0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl2, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DbIdGenerator dbIdGenerator0 = new DbIdGenerator();
      assertNotNull(dbIdGenerator0);
      assertEquals(0, dbIdGenerator0.getIdBlockSize());
      
      CommandExecutor commandExecutor0 = dbIdGenerator0.getCommandExecutor();
      assertNull(commandExecutor0);
      assertEquals(0, dbIdGenerator0.getIdBlockSize());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl(commandExecutor0);
      assertNotNull(deploymentQueryImpl0);
      assertEquals(0, dbIdGenerator0.getIdBlockSize());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      CommandContext commandContext0 = null;
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl(commandContext0);
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentWithoutTenantId();
      assertNotNull(deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentTenantIdLike(deploymentQueryImpl0.SORTORDER_ASC);
      assertNotNull(deploymentQueryImpl2);
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("asc", deploymentQueryImpl0.getTenantIdLike());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("asc", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("asc", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentCategoryNotEquals(deploymentQueryImpl0.SORTORDER_DESC);
      assertNotNull(deploymentQueryImpl3);
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("desc", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("asc", deploymentQueryImpl0.getTenantIdLike());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("asc", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("desc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("asc", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals("desc", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals("desc", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals("asc", deploymentQueryImpl3.getTenantIdLike());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      
      String string0 = "r(=R/&`>Y+q/2!F1";
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl2.deploymentTenantIdLike(string0);
      assertNotNull(deploymentQueryImpl4);
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("desc", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl0.getTenantIdLike());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("desc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals("desc", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals("desc", deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertNull(deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getName());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertTrue(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl4.getTenantIdLike());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      
      String string1 = "m:";
      DeploymentQueryImpl deploymentQueryImpl5 = deploymentQueryImpl3.deploymentTenantId(string1);
      assertNotNull(deploymentQueryImpl5);
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("m:", deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("desc", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl0.getTenantIdLike());
      assertEquals("m:", deploymentQueryImpl1.getTenantId());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("desc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals("desc", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("m:", deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl3.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals("desc", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals("m:", deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertTrue(deploymentQueryImpl5.isWithoutTenantId());
      assertNull(deploymentQueryImpl5.getNameLike());
      assertEquals("m:", deploymentQueryImpl5.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertNull(deploymentQueryImpl5.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertNull(deploymentQueryImpl5.getName());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl5.getTenantIdLike());
      assertNull(deploymentQueryImpl5.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl5.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      
      DefaultJobExecutor defaultJobExecutor0 = new DefaultJobExecutor();
      assertNotNull(defaultJobExecutor0);
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      
      CommandExecutor commandExecutor0 = defaultJobExecutor0.getCommandExecutor();
      assertNull(commandExecutor0);
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      
      AbstractQuery<DeploymentQuery, Deployment> abstractQuery0 = deploymentQueryImpl5.setCommandExecutor(commandExecutor0);
      assertNotNull(abstractQuery0);
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("m:", deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("desc", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl0.getTenantIdLike());
      assertEquals("m:", deploymentQueryImpl1.getTenantId());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("desc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals("desc", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("m:", deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl3.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals("desc", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals("m:", deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertTrue(deploymentQueryImpl5.isWithoutTenantId());
      assertNull(deploymentQueryImpl5.getNameLike());
      assertEquals("m:", deploymentQueryImpl5.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertNull(deploymentQueryImpl5.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertNull(deploymentQueryImpl5.getName());
      assertEquals("r(=R/&`>Y+q/2!F1", deploymentQueryImpl5.getTenantIdLike());
      assertNull(deploymentQueryImpl5.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl5.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertEquals("RES.ID_ asc", abstractQuery0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, abstractQuery0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, abstractQuery0.getLastRow());
      assertNull(abstractQuery0.getDatabaseType());
      assertEquals(1, abstractQuery0.getFirstRow());
      assertEquals(0, abstractQuery0.getFirstResult());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, abstractQuery0);
      assertSame(deploymentQueryImpl1, abstractQuery0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, abstractQuery0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, abstractQuery0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl5, abstractQuery0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl5);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "org/activiti/icons/signal.png";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      String string0 = "8b|o$fa";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      FormServiceImpl formServiceImpl0 = new FormServiceImpl();
      assertNotNull(formServiceImpl0);
      
      CommandExecutor commandExecutor0 = formServiceImpl0.getCommandExecutor();
      assertNull(commandExecutor0);
      
      NativeDeploymentQueryImpl nativeDeploymentQueryImpl0 = new NativeDeploymentQueryImpl(commandExecutor0);
      assertNotNull(nativeDeploymentQueryImpl0);
      
      Map<String, Object> map0 = nativeDeploymentQueryImpl0.getParameters();
      assertNotNull(map0);
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "U:z,K!^OGst3JKiKI.";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertNotNull(taskEntity0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("U:z,K!^OGst3JKiKI.", taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
      
      Map<String, Object> map0 = taskEntity0.getProcessVariables();
      assertNotNull(map0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("U:z,K!^OGst3JKiKI.", taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      taskEntity0.setVariables(map0);
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getEventName());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getDelegationState());
      assertFalse(taskEntity0.isDeleted());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("U:z,K!^OGst3JKiKI.", taskEntity0.getId());
      assertEquals("", taskEntity0.getTenantId());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      int int0 = 25;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
