/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 08:17:21 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.fasterxml.jackson.core.util.BufferRecycler;
import java.io.PipedReader;
import java.io.Reader;
import java.util.Date;
import java.util.Map;
import java.util.Stack;
import javax.script.Bindings;
import javax.script.SimpleBindings;
import org.activiti.bpmn.model.UserTask;
import org.activiti.engine.delegate.VariableScope;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.HistoricProcessInstanceQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.bpmn.parser.BpmnParse;
import org.activiti.engine.impl.bpmn.parser.BpmnParser;
import org.activiti.engine.impl.cfg.CommandExecutorImpl;
import org.activiti.engine.impl.cfg.DefaultBpmnParseFactory;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.StandaloneProcessEngineConfiguration;
import org.activiti.engine.impl.el.NoExecutionVariableScope;
import org.activiti.engine.impl.history.parse.ProcessHistoryParseHandler;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandConfig;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.interceptor.CommandInvoker;
import org.activiti.engine.impl.persistence.entity.AttachmentEntity;
import org.activiti.engine.impl.persistence.entity.ByteArrayEntity;
import org.activiti.engine.impl.persistence.entity.CommentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.GroupEntity;
import org.activiti.engine.impl.persistence.entity.HistoricDetailVariableInstanceUpdateEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.SerializedObjectSupporter;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.activiti.engine.impl.scripting.ResolverFactory;
import org.activiti.engine.impl.scripting.ScriptBindingsFactory;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSessionFactory;
import org.apache.ibatis.session.SqlSessionManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager928();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager821();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "$@6f|c";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "Boolean920.xml";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager471();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "0Vz";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager162();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      NoExecutionVariableScope noExecutionVariableScope0 = new NoExecutionVariableScope();
      assertNotNull(noExecutionVariableScope0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      
      Map<String, Object> map0 = noExecutionVariableScope0.getVariables();
      assertNotNull(map0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = (-851);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager379();
      assertNotNull(deploymentEntityManager0);
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDescription());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      
      ActivityImpl activityImpl0 = processDefinitionEntity0.createActivity();
      assertNotNull(activityImpl0);
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDescription());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertNull(activityImpl0.getFailedJobRetryTimeCycleValue());
      assertFalse(activityImpl0.isAsync());
      assertNull(activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      
      Map<String, Object> map0 = activityImpl0.getVariables();
      assertNull(map0);
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertNull(processDefinitionEntity0.getCategory());
      assertNull(processDefinitionEntity0.getDescription());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertNull(processDefinitionEntity0.getKey());
      assertNull(processDefinitionEntity0.getId());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertNull(processDefinitionEntity0.getResourceName());
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(processDefinitionEntity0.getName());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertFalse(activityImpl0.isExclusive());
      assertFalse(activityImpl0.isScope());
      assertEquals((-1), activityImpl0.getWidth());
      assertNull(activityImpl0.getFailedJobRetryTimeCycleValue());
      assertFalse(activityImpl0.isAsync());
      assertNull(activityImpl0.getId());
      assertEquals((-1), activityImpl0.getY());
      assertEquals((-1), activityImpl0.getX());
      assertEquals((-1), activityImpl0.getHeight());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager722();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      String string0 = "String300.xml";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager780();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager794();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = null;
      Page page0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager45();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      
      String string0 = "getImplicitCollectionDefForFieldName";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentTenantId(string0);
      assertNotNull(deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentNameLike(deploymentQueryImpl0.SORTORDER_ASC);
      assertNotNull(deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("asc", deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("asc", deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("asc", deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getName());
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentWithoutTenantId();
      assertNotNull(deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("asc", deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("asc", deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("asc", deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("asc", deploymentQueryImpl3.getNameLike());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl3.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl3.deploymentCategoryNotEquals(string0);
      assertNotNull(deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("asc", deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("asc", deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl1.getCategoryNotEquals());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("asc", deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals("asc", deploymentQueryImpl3.getNameLike());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl3.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertNull(deploymentQueryImpl4.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertEquals("asc", deploymentQueryImpl4.getNameLike());
      assertNull(deploymentQueryImpl4.getName());
      assertTrue(deploymentQueryImpl4.isWithoutTenantId());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertEquals("getImplicitCollectionDefForFieldName", deploymentQueryImpl4.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager495();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      RepositoryServiceImpl repositoryServiceImpl0 = new RepositoryServiceImpl();
      assertNotNull(repositoryServiceImpl0);
      
      DeploymentBuilderImpl deploymentBuilderImpl0 = new DeploymentBuilderImpl(repositoryServiceImpl0);
      assertNotNull(deploymentBuilderImpl0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      
      DeploymentEntity deploymentEntity0 = deploymentBuilderImpl0.getDeployment();
      assertNotNull(deploymentEntity0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getId());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getName());
      assertFalse(deploymentEntity0.isNew());
      
      String string0 = "1K6g>a_=Lyanb";
      deploymentEntity0.tenantId = string0;
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertEquals("1K6g>a_=Lyanb", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getId());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getName());
      assertFalse(deploymentEntity0.isNew());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager963();
      assertNotNull(deploymentEntityManager0);
      
      NoExecutionVariableScope noExecutionVariableScope0 = new NoExecutionVariableScope();
      assertNotNull(noExecutionVariableScope0);
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      
      Map<String, Object> map0 = noExecutionVariableScope0.getVariables();
      assertNotNull(map0);
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager343();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      
      String string0 = "(u0`L\"6pxW";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentName(string0);
      assertNotNull(deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("(u0`L\"6pxW", deploymentQueryImpl0.getName());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("(u0`L\"6pxW", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.processDefinitionKeyLike(deploymentQueryImpl0.SORTORDER_ASC);
      assertNotNull(deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("(u0`L\"6pxW", deploymentQueryImpl0.getName());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("(u0`L\"6pxW", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals("(u0`L\"6pxW", deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager775();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager317();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotNull(deploymentEntityManager1);
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager48();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "}O`J/VrjZWQ\\S=65";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager21();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Boolean boolean0 = serializedObjectSupporter0.deserializeObjectBoolean786();
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      Boolean boolean1 = serializedObjectSupporter0.deserializeObjectBoolean746();
      assertNotNull(boolean1);
      assertTrue(boolean1);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString693();
      assertNotNull(string0);
      assertEquals("5580", string0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager471();
      assertNotNull(deploymentEntityManager0);
      
      String string1 = "axc0EVz;;";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager594();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      
      String string0 = "";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentTenantId(string0);
      assertNotNull(deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("", deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("", deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategory());
      
      int int0 = 0;
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals(0, page0.getFirstResult());
      assertEquals(0, page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl1, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString278();
      assertNotNull(string0);
      assertEquals("4241", string0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager449();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager825();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotNull(deploymentEntityManager1);
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      
      String string1 = serializedObjectSupporter0.deserializeObjectString714();
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertNotSame(string1, string0);
      assertEquals("5904", string1);
      
      String string2 = "r}Un_o$+`[2";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager482();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      
      String string0 = "";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentId(string0);
      assertNotNull(deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("", deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      
      String string1 = "l,";
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.processDefinitionKey(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("", deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals("", deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentWithoutTenantId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("", deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals("", deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("", deploymentQueryImpl3.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getNameLike());
      
      int int0 = 1;
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals(1, page0.getMaxResults());
      assertEquals(1, page0.getFirstResult());
      
      String string2 = serializedObjectSupporter0.deserializeObjectString432();
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNotNull(string2);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertEquals("9491", string2);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl3, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      RepositoryServiceImpl repositoryServiceImpl0 = null;
      DeploymentBuilderImpl deploymentBuilderImpl0 = new DeploymentBuilderImpl(repositoryServiceImpl0);
      assertNotNull(deploymentBuilderImpl0);
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      
      DeploymentEntity deploymentEntity0 = deploymentBuilderImpl0.getDeployment();
      assertNotNull(deploymentEntity0);
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertNull(deploymentEntity0.getName());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getId());
      assertNull(deploymentEntity0.getCategory());
      assertFalse(deploymentEntity0.isNew());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager473();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "deleted deployment";
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager882();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotNull(deploymentEntityManager1);
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Boolean boolean0 = serializedObjectSupporter0.deserializeObjectBoolean447();
      assertNotNull(boolean0);
      assertTrue(boolean0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager152();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager120();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotNull(deploymentEntityManager1);
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      
      String string0 = "String591.xml";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager442();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager806();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager726();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager666();
      assertNotNull(deploymentEntityManager0);
      
      CommandExecutor commandExecutor0 = null;
      HistoricProcessInstanceQueryImpl historicProcessInstanceQueryImpl0 = new HistoricProcessInstanceQueryImpl(commandExecutor0);
      assertNotNull(historicProcessInstanceQueryImpl0);
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getName());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getNameLike());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      
      Date date0 = historicProcessInstanceQueryImpl0.getStartedAfter();
      assertNull(date0);
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getName());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getNameLike());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertNotNull(taskEntity0);
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getName());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getNameLike());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      
      Map<String, Object> map0 = taskEntity0.getProcessVariables();
      assertNotNull(map0);
      assertNull(historicProcessInstanceQueryImpl0.getDatabaseType());
      assertNull(historicProcessInstanceQueryImpl0.getName());
      assertEquals(0, historicProcessInstanceQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getMaxResults());
      assertNull(historicProcessInstanceQueryImpl0.getProcessInstanceId());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionKey());
      assertNull(historicProcessInstanceQueryImpl0.getBusinessKey());
      assertNull(historicProcessInstanceQueryImpl0.getNameLike());
      assertNull(historicProcessInstanceQueryImpl0.getInvolvedUser());
      assertNull(historicProcessInstanceQueryImpl0.getSuperProcessInstanceId());
      assertEquals(1, historicProcessInstanceQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, historicProcessInstanceQueryImpl0.getLastRow());
      assertFalse(historicProcessInstanceQueryImpl0.isOpen());
      assertNull(historicProcessInstanceQueryImpl0.getStartedBy());
      assertFalse(historicProcessInstanceQueryImpl0.isExcludeSubprocesses());
      assertEquals("RES.ID_ asc", historicProcessInstanceQueryImpl0.getOrderBy());
      assertNull(historicProcessInstanceQueryImpl0.getProcessDefinitionId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getEventName());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getOwner());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getParentTaskId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getExecutionId());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertEquals(50, taskEntity0.getPriority());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = (-2799);
      int int1 = (-1419);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager691();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      NoExecutionVariableScope noExecutionVariableScope0 = new NoExecutionVariableScope();
      assertNotNull(noExecutionVariableScope0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      
      Map<String, Object> map0 = noExecutionVariableScope0.getVariables();
      assertNotNull(map0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = 1128;
      int int1 = (-16);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
