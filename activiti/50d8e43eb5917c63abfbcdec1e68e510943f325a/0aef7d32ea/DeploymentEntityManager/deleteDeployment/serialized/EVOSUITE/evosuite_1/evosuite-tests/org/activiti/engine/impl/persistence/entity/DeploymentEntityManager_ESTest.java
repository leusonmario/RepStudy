/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 04:00:53 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Collection;
import java.util.Date;
import java.util.List;
import java.util.Map;
import javax.script.SimpleBindings;
import org.activiti.engine.ProcessEngineConfiguration;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.TaskServiceImpl;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
import org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.TransactionPropagation;
import org.activiti.engine.impl.el.NoExecutionVariableScope;
import org.activiti.engine.impl.event.logger.handler.ActivityCompensatedEventHandler;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandConfig;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.jobexecutor.DefaultJobExecutor;
import org.activiti.engine.impl.persistence.deploy.Deployer;
import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
import org.activiti.engine.impl.persistence.entity.CompensateEventSubscriptionEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.EventLogEntryEntity;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.MessageEntity;
import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.SerializedObjectSupporter;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.pvm.process.ActivityImpl;
import org.activiti.engine.impl.pvm.process.ProcessDefinitionImpl;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.apache.openjpa.datacache.ConcurrentQueryCache;
import org.apache.openjpa.util.CacheMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = "p8~";
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager289();
      assertNotNull(deploymentEntityManager0);
      
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager223();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      String string0 = "v2yBq";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "&^9S+jD9?l";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager181();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      CommandConfig commandConfig0 = new CommandConfig();
      assertNotNull(commandConfig0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertTrue(commandConfig0.isContextReusePossible());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager294();
      assertNotNull(deploymentEntityManager0);
      
      DefaultJobExecutor defaultJobExecutor0 = new DefaultJobExecutor();
      assertNotNull(defaultJobExecutor0);
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      
      CommandExecutor commandExecutor0 = defaultJobExecutor0.getCommandExecutor();
      assertNull(commandExecutor0);
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl(commandExecutor0);
      assertNotNull(deploymentQueryImpl0);
      assertFalse(defaultJobExecutor0.isActive());
      assertEquals(300000, defaultJobExecutor0.getLockTimeInMillis());
      assertEquals("00000000-0100-4000-8200-000003000000", defaultJobExecutor0.getLockOwner());
      assertEquals(3, defaultJobExecutor0.getQueueSize());
      assertEquals(3, defaultJobExecutor0.getCorePoolSize());
      assertEquals(1, defaultJobExecutor0.getMaxJobsPerAcquisition());
      assertFalse(defaultJobExecutor0.isAutoActivate());
      assertEquals(5000, defaultJobExecutor0.getWaitTimeInMillis());
      assertEquals("JobExecutor[org.activiti.engine.impl.jobexecutor.DefaultJobExecutor]", defaultJobExecutor0.getName());
      assertEquals(10, defaultJobExecutor0.getMaxPoolSize());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      
      int int0 = (-1392);
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals((-1392), page0.getFirstResult());
      assertEquals((-1392), page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager324();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertNull(deploymentEntity0.getCategory());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getName());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      SimpleBindings simpleBindings0 = new SimpleBindings();
      assertNotNull(simpleBindings0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager17();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(simpleBindings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager149();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "?I/<2H6?EF*RW_DktZ";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      EvoSuiteFile evoSuiteFile0 = null;
      byte byte0 = (byte)70;
      byte byte1 = (byte) (-27);
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager140();
      assertNotNull(deploymentEntityManager0);
      
      NoExecutionVariableScope noExecutionVariableScope0 = NoExecutionVariableScope.getSharedInstance();
      assertNotNull(noExecutionVariableScope0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      
      Map<String, Object> map0 = noExecutionVariableScope0.getVariables();
      assertNotNull(map0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, byte0, byte0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager232();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      
      String string0 = "bavR-fs@E%X";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentCategory(string0);
      assertNotNull(deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.processDefinitionKey(deploymentQueryImpl0.SORTORDER_ASC);
      assertNotNull(deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      
      String string1 = "selectDeploymentById";
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentTenantIdLike(string1);
      assertNotNull(deploymentQueryImpl3);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertEquals("selectDeploymentById", deploymentQueryImpl0.getTenantIdLike());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl1.getCategory());
      assertEquals("selectDeploymentById", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("selectDeploymentById", deploymentQueryImpl2.getTenantIdLike());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("bavR-fs@E%X", deploymentQueryImpl3.getCategory());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals("selectDeploymentById", deploymentQueryImpl3.getTenantIdLike());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager158();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = null;
      int int0 = 368;
      int int1 = (-1);
      Page page0 = new Page(int0, int1);
      assertNotNull(page0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1), page0.getMaxResults());
      assertEquals(368, page0.getFirstResult());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "&^{S+jD9?l";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager66();
      assertNotNull(deploymentEntityManager0);
      
      ConcurrentQueryCache concurrentQueryCache0 = new ConcurrentQueryCache();
      assertNotNull(concurrentQueryCache0);
      assertEquals((-1), concurrentQueryCache0.getSoftReferenceSize());
      assertFalse(concurrentQueryCache0.isFailFast());
      assertEquals(1000, concurrentQueryCache0.getCacheSize());
      assertFalse(concurrentQueryCache0.isClosed());
      
      CacheMap cacheMap0 = concurrentQueryCache0.getCacheMap();
      assertNotNull(cacheMap0);
      assertEquals((-1), concurrentQueryCache0.getSoftReferenceSize());
      assertFalse(concurrentQueryCache0.isFailFast());
      assertEquals(1000, concurrentQueryCache0.getCacheSize());
      assertFalse(concurrentQueryCache0.isClosed());
      assertEquals(1000, cacheMap0.getCacheSize());
      assertFalse(cacheMap0.isLRU());
      assertEquals((-1), cacheMap0.getSoftReferenceSize());
      
      int int0 = (-1657);
      int int1 = (-875);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(cacheMap0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager123();
      assertNotNull(deploymentEntityManager0);
      
      JtaProcessEngineConfiguration jtaProcessEngineConfiguration0 = new JtaProcessEngineConfiguration();
      assertNotNull(jtaProcessEngineConfiguration0);
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      
      CommandExecutor commandExecutor0 = jtaProcessEngineConfiguration0.getCommandExecutor();
      assertNull(commandExecutor0);
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl(commandExecutor0);
      assertNotNull(deploymentQueryImpl0);
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      
      String string0 = serializedObjectSupporter0.deserializeObjectString189();
      assertEquals("2440", string0);
      assertNotNull(string0);
      
      int int0 = (-1247);
      int int1 = 1887;
      Page page0 = new Page(int0, int1);
      assertNotNull(page0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals((-1247), page0.getFirstResult());
      assertEquals(1887, page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager188();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Boolean boolean0 = serializedObjectSupporter0.deserializeObjectBoolean85();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager141();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "*3&sg;6";
      Map<String, Object> map0 = null;
      int int0 = 0;
      int int1 = 3902;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager128();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "can only delist with SUCCESS, SUSPEND, FAIL - was: ";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager262();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager135();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      String string0 = serializedObjectSupporter0.deserializeObjectString337();
      assertEquals("5759", string0);
      assertNotNull(string0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager257();
      assertNotNull(deploymentEntityManager0);
      
      String string1 = "";
      DeploymentEntity deploymentEntity0 = null;
      String string2 = "5?bG0g17^";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string2, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager223();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager193();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      
      String string0 = "org.activiti.engine.impl.bpmn.data.IOSpecification";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentId(string0);
      assertNotNull(deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getCategory());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      
      String string1 = "F(dlv";
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl0.deploymentCategoryNotEquals(string1);
      assertNotNull(deploymentQueryImpl2);
      assertFalse(string1.equals((Object)string0));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertEquals("F(dlv", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals("F(dlv", deploymentQueryImpl2.getCategoryNotEquals());
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl1.deploymentName(string0);
      assertNotNull(deploymentQueryImpl3);
      assertFalse(string0.equals((Object)string1));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertEquals("F(dlv", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals("F(dlv", deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getCategory());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("F(dlv", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl3.getName());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getTenantId());
      
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl3.deploymentTenantId(string0);
      assertNotNull(deploymentQueryImpl4);
      assertFalse(string0.equals((Object)string1));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertEquals("F(dlv", deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getName());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl1.getDeploymentId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl1.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("F(dlv", deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getCategory());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("F(dlv", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl3.getName());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl4.getName());
      assertNull(deploymentQueryImpl4.getCategory());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl4.getTenantId());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertEquals("org.activiti.engine.impl.bpmn.data.IOSpecification", deploymentQueryImpl4.getDeploymentId());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals("F(dlv", deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      
      DeploymentEntity deploymentEntity0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager319();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "selectDeploymentById";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager71();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager264();
      assertNotNull(deploymentEntityManager0);
      
      ProcessDefinitionEntity processDefinitionEntity0 = new ProcessDefinitionEntity();
      assertNotNull(processDefinitionEntity0);
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getCategory());
      assertEquals("", processDefinitionEntity0.getTenantId());
      
      String string0 = "^-!}V8Dt~qPs#";
      ActivityImpl activityImpl0 = processDefinitionEntity0.findActivity(string0);
      assertNull(activityImpl0);
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getCategory());
      assertEquals("", processDefinitionEntity0.getTenantId());
      
      ExecutionImpl executionImpl0 = new ExecutionImpl(activityImpl0);
      assertNotNull(executionImpl0);
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getCategory());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isActive());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getTenantId());
      
      Map<String, Object> map0 = executionImpl0.getVariables();
      assertNotNull(map0);
      assertEquals(1, processDefinitionEntity0.getSuspensionState());
      assertNull(processDefinitionEntity0.getResourceName());
      assertNull(processDefinitionEntity0.getDeploymentId());
      assertNull(processDefinitionEntity0.getDiagramResourceName());
      assertEquals(1, processDefinitionEntity0.getRevision());
      assertFalse(processDefinitionEntity0.getHasStartFormKey());
      assertFalse(processDefinitionEntity0.isGraphicalNotationDefined());
      assertNull(processDefinitionEntity0.getName());
      assertNull(processDefinitionEntity0.getHistoryLevel());
      assertEquals(0, processDefinitionEntity0.getVersion());
      assertNull(processDefinitionEntity0.getKey());
      assertEquals(2, processDefinitionEntity0.getRevisionNext());
      assertNull(processDefinitionEntity0.getDescription());
      assertFalse(processDefinitionEntity0.hasStartFormKey());
      assertNull(processDefinitionEntity0.getId());
      assertNull(processDefinitionEntity0.getCategory());
      assertEquals("", processDefinitionEntity0.getTenantId());
      assertNull(executionImpl0.getCurrentActivityName());
      assertFalse(executionImpl0.isConcurrent());
      assertFalse(executionImpl0.isEventScope());
      assertNull(executionImpl0.getCurrentActivityId());
      assertFalse(executionImpl0.hasVariables());
      assertNull(executionImpl0.getParentId());
      assertTrue(executionImpl0.isActive());
      assertEquals(0, (int)executionImpl0.getExecutionListenerIndex());
      assertFalse(executionImpl0.hasVariablesLocal());
      assertFalse(executionImpl0.isEnded());
      assertTrue(executionImpl0.isScope());
      assertTrue(executionImpl0.isProcessInstanceType());
      assertNull(executionImpl0.getId());
      assertNull(executionImpl0.getDeleteReason());
      assertNull(executionImpl0.getEventName());
      assertFalse(executionImpl0.isDeleteRoot());
      assertNull(executionImpl0.getTenantId());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
