/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 08:23:17 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.ArrayList;
import java.util.Date;
import java.util.Map;
import javax.script.Bindings;
import org.activiti.bpmn.model.Transaction;
import org.activiti.engine.delegate.VariableScope;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.HistoricProcessInstanceQueryImpl;
import org.activiti.engine.impl.NativeDeploymentQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.TaskServiceImpl;
import org.activiti.engine.impl.cfg.CommandExecutorImpl;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.db.DbIdGenerator;
import org.activiti.engine.impl.el.NoExecutionVariableScope;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandConfig;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.interceptor.CommandInvoker;
import org.activiti.engine.impl.persistence.deploy.DeploymentCache;
import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.MembershipEntity;
import org.activiti.engine.impl.persistence.entity.MessageEventSubscriptionEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.persistence.entity.ResourceEntity;
import org.activiti.engine.impl.persistence.entity.SerializedObjectSupporter;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.activiti.engine.impl.scripting.ResolverFactory;
import org.activiti.engine.impl.scripting.ScriptBindingsFactory;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager531();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNotNull(deploymentQueryImpl0);
      
      Page page0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager878();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "b&=[OnD@nP1";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      int int0 = 9971;
      ArrayList<ResolverFactory> arrayList0 = new ArrayList<ResolverFactory>();
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
      
      ScriptBindingsFactory scriptBindingsFactory0 = new ScriptBindingsFactory(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(scriptBindingsFactory0);
      
      NoExecutionVariableScope noExecutionVariableScope0 = new NoExecutionVariableScope();
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertNotNull(noExecutionVariableScope0);
      
      Bindings bindings0 = scriptBindingsFactory0.createBindings((VariableScope) noExecutionVariableScope0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertNotNull(bindings0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager551();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(bindings0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getName());
      assertNotNull(deploymentEntity0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNotNull(deploymentQueryImpl0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager913();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "org.activiti.image.impl.DefaultProcessDiagramG'nerator$1";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager1048();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "JAVA_LAN^_GBJEVC6";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager242();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "VDQqRh:&5K";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager1037();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager878();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      assertNotNull(deploymentEntityManager1);
      
      deploymentEntityManager1.flush();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNotNull(deploymentQueryImpl0);
      
      String string0 = "selectResourceNamesByDeploymentId";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.processDefinitionKey(string0);
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentTenantIdLike(deploymentQueryImpl0.SORTORDER_ASC);
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("asc", deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("asc", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("asc", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl2);
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentCategoryNotEquals(deploymentQueryImpl0.SORTORDER_DESC);
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("asc", deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("desc", deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("asc", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("asc", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getCategory());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertEquals("asc", deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals("desc", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl3);
      
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl3.deploymentCategory(deploymentQueryImpl0.SORTORDER_DESC);
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("desc", deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("asc", deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("desc", deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("desc", deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("asc", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals("desc", deploymentQueryImpl2.getCategory());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("asc", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals("desc", deploymentQueryImpl3.getCategory());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertEquals("asc", deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals("desc", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals("desc", deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertEquals("desc", deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("asc", deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertNull(deploymentQueryImpl4.getName());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertNotNull(deploymentQueryImpl4);
      
      Page page0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager1.findDeploymentsByQueryCriteria(deploymentQueryImpl4, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager306();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "j";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      deploymentEntityManager0.serializedObjectSupporter = serializedObjectSupporter0;
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNotNull(deploymentQueryImpl0);
      
      int int0 = 0;
      int int1 = 0;
      Page page0 = new Page(int0, int1);
      assertEquals(0, page0.getFirstResult());
      assertEquals(0, page0.getMaxResults());
      assertNotNull(page0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager46();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager250();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      assertNotNull(deploymentEntityManager1);
      
      Boolean boolean0 = serializedObjectSupporter0.deserializeObjectBoolean735();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager459();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNull(deploymentEntity0.getName());
      assertNull(deploymentEntity0.getCategory());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNotNull(deploymentEntity0);
      
      boolean boolean0 = true;
      Transaction transaction0 = new Transaction();
      assertNull(transaction0.getId());
      assertEquals(0, transaction0.getXmlColumnNumber());
      assertEquals(0, transaction0.getXmlRowNumber());
      assertFalse(transaction0.isAsynchronous());
      assertFalse(transaction0.isNotExclusive());
      assertNull(transaction0.getName());
      assertFalse(transaction0.isForCompensation());
      assertNull(transaction0.getDocumentation());
      assertNull(transaction0.getFailedJobRetryTimeCycleValue());
      assertNull(transaction0.getDefaultFlow());
      assertNotNull(transaction0);
      
      deploymentEntity0.addDeployedArtifact(transaction0);
      assertNull(deploymentEntity0.getName());
      assertNull(deploymentEntity0.getCategory());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(transaction0.getId());
      assertEquals(0, transaction0.getXmlColumnNumber());
      assertEquals(0, transaction0.getXmlRowNumber());
      assertFalse(transaction0.isAsynchronous());
      assertFalse(transaction0.isNotExclusive());
      assertNull(transaction0.getName());
      assertFalse(transaction0.isForCompensation());
      assertNull(transaction0.getDocumentation());
      assertNull(transaction0.getFailedJobRetryTimeCycleValue());
      assertNull(transaction0.getDefaultFlow());
      
      deploymentEntity0.isNew = boolean0;
      assertNull(deploymentEntity0.getName());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      assertTrue(deploymentEntity0.isNew());
      
      String string0 = "RES.KEY_";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager1009();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "Min Priority is null";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager753();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertNull(deploymentEntity0.getCategory());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getName());
      assertNotNull(deploymentEntity0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager502();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "s*6fP4jj3]CN)-gJn`A";
      SerializedObjectSupporter serializedObjectSupporter1 = null;
      deploymentEntityManager0.serializedObjectSupporter = serializedObjectSupporter1;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager279();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "lj4Z0j^&Z@GUe{o{iq?";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager223();
      assertNotNull(deploymentEntityManager0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = deploymentEntityManager0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter1);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertFalse(deploymentEntity0.isNew());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getName());
      assertNotNull(deploymentEntity0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager902();
      assertNotNull(deploymentEntityManager0);
      
      JtaProcessEngineConfiguration jtaProcessEngineConfiguration0 = new JtaProcessEngineConfiguration();
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertNotNull(jtaProcessEngineConfiguration0);
      
      CommandExecutor commandExecutor0 = jtaProcessEngineConfiguration0.getCommandExecutor();
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertNull(commandExecutor0);
      
      NativeDeploymentQueryImpl nativeDeploymentQueryImpl0 = new NativeDeploymentQueryImpl(commandExecutor0);
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertNotNull(nativeDeploymentQueryImpl0);
      
      Map<String, Object> map0 = nativeDeploymentQueryImpl0.getParameters();
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      int int0 = 0;
      int int1 = (-5844);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager863();
      assertNotNull(deploymentEntityManager0);
      
      SerializedObjectSupporter serializedObjectSupporter1 = deploymentEntityManager0.serializedObjectSupporter;
      assertNull(serializedObjectSupporter1);
      
      DeploymentEntityManager deploymentEntityManager1 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager878();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      assertNotNull(deploymentEntityManager1);
      
      deploymentEntityManager1.close();
      assertFalse(deploymentEntityManager1.equals((Object)deploymentEntityManager0));
      assertNotSame(deploymentEntityManager1, deploymentEntityManager0);
      
      String string0 = "b&=[OnD@nP1";
      // Undeclared exception!
      try { 
        deploymentEntityManager1.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      Boolean boolean0 = serializedObjectSupporter0.deserializeObjectBoolean54();
      assertTrue(boolean0);
      assertNotNull(boolean0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager388();
      assertNotNull(deploymentEntityManager0);
      
      HistoricProcessInstanceEntity historicProcessInstanceEntity0 = new HistoricProcessInstanceEntity();
      assertNull(historicProcessInstanceEntity0.getStartUserId());
      assertEquals("", historicProcessInstanceEntity0.getTenantId());
      assertNull(historicProcessInstanceEntity0.getDeleteReason());
      assertNull(historicProcessInstanceEntity0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceEntity0.getEndActivityId());
      assertNull(historicProcessInstanceEntity0.getName());
      assertNull(historicProcessInstanceEntity0.getProcessInstanceId());
      assertNull(historicProcessInstanceEntity0.getId());
      assertNull(historicProcessInstanceEntity0.getProcessDefinitionId());
      assertNull(historicProcessInstanceEntity0.getBusinessKey());
      assertNull(historicProcessInstanceEntity0.getStartActivityId());
      assertNull(historicProcessInstanceEntity0.getDurationInMillis());
      assertNotNull(historicProcessInstanceEntity0);
      
      Boolean boolean1 = serializedObjectSupporter0.deserializeObjectBoolean696();
      assertTrue(boolean1);
      assertNotNull(boolean1);
      
      Map<String, Object> map0 = historicProcessInstanceEntity0.getProcessVariables();
      assertNull(historicProcessInstanceEntity0.getStartUserId());
      assertEquals("", historicProcessInstanceEntity0.getTenantId());
      assertNull(historicProcessInstanceEntity0.getDeleteReason());
      assertNull(historicProcessInstanceEntity0.getSuperProcessInstanceId());
      assertNull(historicProcessInstanceEntity0.getEndActivityId());
      assertNull(historicProcessInstanceEntity0.getName());
      assertNull(historicProcessInstanceEntity0.getProcessInstanceId());
      assertNull(historicProcessInstanceEntity0.getId());
      assertNull(historicProcessInstanceEntity0.getProcessDefinitionId());
      assertNull(historicProcessInstanceEntity0.getBusinessKey());
      assertNull(historicProcessInstanceEntity0.getStartActivityId());
      assertNull(historicProcessInstanceEntity0.getDurationInMillis());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      int int0 = 0;
      int int1 = (-2525);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      JtaProcessEngineConfiguration jtaProcessEngineConfiguration0 = new JtaProcessEngineConfiguration();
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertNotNull(jtaProcessEngineConfiguration0);
      
      DeploymentManager deploymentManager0 = jtaProcessEngineConfiguration0.getDeploymentManager();
      assertFalse(jtaProcessEngineConfiguration0.isJpaHandleTransaction());
      assertTrue(jtaProcessEngineConfiguration0.isDbIdentityUsed());
      assertEquals("activiti@localhost", jtaProcessEngineConfiguration0.getMailServerDefaultFrom());
      assertFalse(jtaProcessEngineConfiguration0.isEnableSafeBpmnXml());
      assertEquals(2500, jtaProcessEngineConfiguration0.getIdBlockSize());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getActivityFontName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getKnowledgeBaseCacheLimit());
      assertFalse(jtaProcessEngineConfiguration0.isTablePrefixIsSchema());
      assertEquals(10, jtaProcessEngineConfiguration0.getAsyncFailedJobWaitTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxIdleConnections());
      assertTrue(jtaProcessEngineConfiguration0.isCreateDiagramOnDeploy());
      assertNull(jtaProcessEngineConfiguration0.getJpaPersistenceUnitName());
      assertEquals("audit", jtaProcessEngineConfiguration0.getHistory());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeTasks());
      assertEquals(25, jtaProcessEngineConfiguration0.getMailServerPort());
      assertEquals("sa", jtaProcessEngineConfiguration0.getJdbcUsername());
      assertNull(jtaProcessEngineConfiguration0.getMailSesionJndi());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseSchema());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseTablePrefix());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcDefaultTransactionIsolationLevel());
      assertNull(jtaProcessEngineConfiguration0.getDatabaseType());
      assertNull(jtaProcessEngineConfiguration0.getIdGeneratorDataSourceJndiName());
      assertTrue(jtaProcessEngineConfiguration0.isTransactionsExternallyManaged());
      assertEquals("camelContext", jtaProcessEngineConfiguration0.getDefaultCamelContext());
      assertFalse(jtaProcessEngineConfiguration0.isEnableDatabaseEventLogging());
      assertEquals("false", jtaProcessEngineConfiguration0.getDatabaseSchemaUpdate());
      assertEquals(25, jtaProcessEngineConfiguration0.getBatchSizeProcessInstances());
      assertTrue(jtaProcessEngineConfiguration0.isDbHistoryUsed());
      assertEquals("org.h2.Driver", jtaProcessEngineConfiguration0.getJdbcDriver());
      assertTrue(jtaProcessEngineConfiguration0.isEnableEventDispatcher());
      assertEquals("", jtaProcessEngineConfiguration0.getDatabaseCatalog());
      assertEquals("", jtaProcessEngineConfiguration0.getJdbcPassword());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxWaitTime());
      assertNull(jtaProcessEngineConfiguration0.getMailServerPassword());
      assertEquals("UTF-8", jtaProcessEngineConfiguration0.getXmlEncoding());
      assertEquals(10, jtaProcessEngineConfiguration0.getDefaultFailedJobWaitTime());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxActiveConnections());
      assertFalse(jtaProcessEngineConfiguration0.isJpaCloseEntityManager());
      assertEquals("default", jtaProcessEngineConfiguration0.getProcessEngineName());
      assertEquals((-1), jtaProcessEngineConfiguration0.getProcessDefinitionCacheLimit());
      assertEquals("localhost", jtaProcessEngineConfiguration0.getMailServerHost());
      assertEquals("jdbc:h2:tcp://localhost/activiti", jtaProcessEngineConfiguration0.getJdbcUrl());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseTLS());
      assertEquals("Arial", jtaProcessEngineConfiguration0.getLabelFontName());
      assertFalse(jtaProcessEngineConfiguration0.isJdbcPingEnabled());
      assertNull(jtaProcessEngineConfiguration0.getDataSourceJndiName());
      assertNull(jtaProcessEngineConfiguration0.getJdbcPingQuery());
      assertFalse(jtaProcessEngineConfiguration0.getMailServerUseSSL());
      assertFalse(jtaProcessEngineConfiguration0.isJobExecutorActivate());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcPingConnectionNotUsedFor());
      assertNull(jtaProcessEngineConfiguration0.getHistoryLevel());
      assertNull(jtaProcessEngineConfiguration0.getMailServerUsername());
      assertEquals(0, jtaProcessEngineConfiguration0.getJdbcMaxCheckoutTime());
      assertEquals("org.activiti.engine.impl.webservice.CxfWebServiceClientFactory", jtaProcessEngineConfiguration0.getWsSyncFactoryClassName());
      assertNull(deploymentManager0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager546();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNotNull(deploymentQueryImpl0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DeploymentEntityManager deploymentEntityManager0 = serializedObjectSupporter0.deserializeObjectDeploymentEntityManager210();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNotNull(deploymentQueryImpl0);
      
      String string0 = "org.activiti.engine.impl.delegate.ExpressionGetInvocation";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.processDefinitionKey(string0);
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategory());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      
      String string1 = "9-GdE'YbkeW\"*mk[n{7";
      DeploymentQueryImpl deploymentQueryImpl2 = (DeploymentQueryImpl)deploymentQueryImpl1.orderByDeploymenTime();
      assertFalse(string0.equals((Object)string1));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl2);
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl0.deploymentName(deploymentQueryImpl1.SORTORDER_DESC);
      assertFalse(string0.equals((Object)string1));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("desc", deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("desc", deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertEquals("desc", deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl3);
      
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl1.deploymentName(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getName());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertNull(deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl4);
      
      DeploymentQueryImpl deploymentQueryImpl5 = deploymentQueryImpl4.deploymentId(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getName());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertNull(deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertNull(deploymentQueryImpl5.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertNull(deploymentQueryImpl5.getCategoryNotEquals());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertFalse(deploymentQueryImpl5.isWithoutTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl5.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl5.getName());
      assertNull(deploymentQueryImpl5.getTenantIdLike());
      assertNull(deploymentQueryImpl5.getTenantId());
      assertNull(deploymentQueryImpl5.getNameLike());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertNotNull(deploymentQueryImpl5);
      
      DeploymentQueryImpl deploymentQueryImpl6 = deploymentQueryImpl5.deploymentCategory(deploymentQueryImpl1.SORTORDER_DESC);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("desc", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("desc", deploymentQueryImpl1.getCategory());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getName());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("desc", deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertEquals("desc", deploymentQueryImpl5.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertNull(deploymentQueryImpl5.getCategoryNotEquals());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertFalse(deploymentQueryImpl5.isWithoutTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl5.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl5.getName());
      assertNull(deploymentQueryImpl5.getTenantIdLike());
      assertNull(deploymentQueryImpl5.getTenantId());
      assertNull(deploymentQueryImpl5.getNameLike());
      assertNull(deploymentQueryImpl6.getTenantId());
      assertEquals("desc", deploymentQueryImpl6.getCategory());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl6.getName());
      assertNull(deploymentQueryImpl6.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl6.getLastRow());
      assertNull(deploymentQueryImpl6.getNameLike());
      assertNull(deploymentQueryImpl6.getTenantIdLike());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl6.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl6.getOrderBy());
      assertNull(deploymentQueryImpl6.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl6.getFirstResult());
      assertFalse(deploymentQueryImpl6.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl6.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl6.getMaxResults());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl6);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl6);
      
      DeploymentQueryImpl deploymentQueryImpl7 = (DeploymentQueryImpl)deploymentQueryImpl4.orderByDeploymentId();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("desc", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("desc", deploymentQueryImpl1.getCategory());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getName());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("desc", deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl7.getTenantId());
      assertNull(deploymentQueryImpl7.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl7.getMaxResults());
      assertEquals("desc", deploymentQueryImpl7.getCategory());
      assertEquals(0, deploymentQueryImpl7.getFirstResult());
      assertNull(deploymentQueryImpl7.getNameLike());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl7.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl7.getLastRow());
      assertNull(deploymentQueryImpl7.getTenantIdLike());
      assertNull(deploymentQueryImpl7.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl7.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl7.getOrderBy());
      assertFalse(deploymentQueryImpl7.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl7.getFirstRow());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl6);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl7, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl7);
      
      String string2 = "\\Q3N=zL29";
      DeploymentQueryImpl deploymentQueryImpl8 = deploymentQueryImpl6.deploymentTenantIdLike(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("\\Q3N=zL29", deploymentQueryImpl0.getTenantIdLike());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("desc", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertEquals("\\Q3N=zL29", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals("desc", deploymentQueryImpl1.getCategory());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getName());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl4.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("desc", deploymentQueryImpl4.getCategory());
      assertEquals("\\Q3N=zL29", deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertEquals("\\Q3N=zL29", deploymentQueryImpl5.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertEquals("desc", deploymentQueryImpl5.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertNull(deploymentQueryImpl5.getCategoryNotEquals());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertFalse(deploymentQueryImpl5.isWithoutTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl5.getDeploymentId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl5.getName());
      assertNull(deploymentQueryImpl5.getTenantId());
      assertNull(deploymentQueryImpl5.getNameLike());
      assertNull(deploymentQueryImpl6.getTenantId());
      assertEquals("desc", deploymentQueryImpl6.getCategory());
      assertEquals("\\Q3N=zL29", deploymentQueryImpl6.getTenantIdLike());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl6.getName());
      assertNull(deploymentQueryImpl6.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl6.getLastRow());
      assertNull(deploymentQueryImpl6.getNameLike());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl6.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl6.getOrderBy());
      assertNull(deploymentQueryImpl6.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl6.getFirstResult());
      assertFalse(deploymentQueryImpl6.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl6.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl6.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl8.getLastRow());
      assertEquals(1, deploymentQueryImpl8.getFirstRow());
      assertEquals("desc", deploymentQueryImpl8.getCategory());
      assertEquals(0, deploymentQueryImpl8.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl8.getMaxResults());
      assertNull(deploymentQueryImpl8.getTenantId());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl8.getDeploymentId());
      assertNull(deploymentQueryImpl8.getCategoryNotEquals());
      assertEquals("9-GdE'YbkeW\"*mk[n{7", deploymentQueryImpl8.getName());
      assertEquals("\\Q3N=zL29", deploymentQueryImpl8.getTenantIdLike());
      assertNull(deploymentQueryImpl8.getDatabaseType());
      assertNull(deploymentQueryImpl8.getNameLike());
      assertFalse(deploymentQueryImpl8.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl8.getOrderBy());
      assertSame(deploymentQueryImpl0, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl8);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl8);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl6);
      assertNotSame(string1, string2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl8);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl8);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl8);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string0);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl7);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl8, deploymentQueryImpl2);
      assertNotNull(deploymentQueryImpl8);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl6);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
