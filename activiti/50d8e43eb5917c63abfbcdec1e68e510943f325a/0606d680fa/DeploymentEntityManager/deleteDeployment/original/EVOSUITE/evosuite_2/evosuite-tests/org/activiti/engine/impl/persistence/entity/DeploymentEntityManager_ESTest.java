/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 13:04:09 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.Date;
import java.util.Map;
import javax.script.SimpleBindings;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.JobQueryImpl;
import org.activiti.engine.impl.NativeDeploymentQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.TaskServiceImpl;
import org.activiti.engine.impl.cfg.JtaProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.ProcessEngineConfigurationImpl;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandContextFactory;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.jobexecutor.DefaultJobExecutor;
import org.activiti.engine.impl.persistence.deploy.DeploymentManager;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.ExecutionEntity;
import org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity;
import org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntity;
import org.activiti.engine.impl.persistence.entity.IdentityLinkEntity;
import org.activiti.engine.impl.persistence.entity.ProcessDefinitionEntity;
import org.activiti.engine.impl.pvm.runtime.ExecutionImpl;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.activiti.engine.query.QueryProperty;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      String string0 = "selectResourceNamesByDeploymentId";
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "message";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      deploymentEntityManager0.flush();
      DeploymentQueryImpl deploymentQueryImpl0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      String string0 = null;
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNull(deploymentEntity0.getName());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getCategory());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getId());
      assertNotNull(deploymentEntity0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      int int0 = 25;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = null;
      int int0 = 1;
      Page page0 = new Page(int0, int0);
      assertEquals(1, page0.getFirstResult());
      assertEquals(1, page0.getMaxResults());
      assertNotNull(page0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNotNull(deploymentQueryImpl0);
      
      String string0 = "xQpQ";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentCategory(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("xQpQ", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("xQpQ", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNotNull(deploymentQueryImpl1);
      
      String string1 = "u-!x )$";
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentId(string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("u-!x )$", deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("xQpQ", deploymentQueryImpl0.getCategory());
      assertEquals("u-!x )$", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("xQpQ", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals("xQpQ", deploymentQueryImpl2.getCategory());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("u-!x )$", deploymentQueryImpl2.getDeploymentId());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNotNull(deploymentQueryImpl2);
      
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentNameLike(deploymentQueryImpl0.SORTORDER_DESC);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("u-!x )$", deploymentQueryImpl0.getDeploymentId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("desc", deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("xQpQ", deploymentQueryImpl0.getCategory());
      assertEquals("u-!x )$", deploymentQueryImpl1.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl1.getNameLike());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals("xQpQ", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals("xQpQ", deploymentQueryImpl2.getCategory());
      assertEquals("desc", deploymentQueryImpl2.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("u-!x )$", deploymentQueryImpl2.getDeploymentId());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("u-!x )$", deploymentQueryImpl3.getDeploymentId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals("desc", deploymentQueryImpl3.getNameLike());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals("xQpQ", deploymentQueryImpl3.getCategory());
      assertNotNull(deploymentQueryImpl3);
      
      Page page0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl3, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "ULYb";
      boolean boolean0 = true;
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNotNull(deploymentQueryImpl0);
      
      String string1 = "";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentTenantIdLike(string1);
      assertFalse(string1.equals((Object)string0));
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNotNull(deploymentQueryImpl1);
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentCategoryNotEquals(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals("ULYb", deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("ULYb", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals("ULYb", deploymentQueryImpl2.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertNotNull(deploymentQueryImpl2);
      
      String string2 = "AjZzC";
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentCategory(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertEquals("AjZzC", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("ULYb", deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("ULYb", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("AjZzC", deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("AjZzC", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals("ULYb", deploymentQueryImpl2.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("AjZzC", deploymentQueryImpl3.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("ULYb", deploymentQueryImpl3.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals("", deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNotNull(deploymentQueryImpl3);
      
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl3.processDefinitionKeyLike(string2);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertEquals("AjZzC", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("ULYb", deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("ULYb", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("AjZzC", deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("AjZzC", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals("ULYb", deploymentQueryImpl2.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("AjZzC", deploymentQueryImpl3.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("ULYb", deploymentQueryImpl3.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertEquals("", deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals("AjZzC", deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals("ULYb", deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertEquals("", deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl4.getName());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertNotNull(deploymentQueryImpl4);
      
      DeploymentQueryImpl deploymentQueryImpl5 = deploymentQueryImpl4.deploymentId(deploymentQueryImpl3.SORTORDER_DESC);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string1);
      assertNotSame(string0, string2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      assertEquals("AjZzC", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("ULYb", deploymentQueryImpl0.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("desc", deploymentQueryImpl0.getDeploymentId());
      assertEquals("desc", deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("ULYb", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertEquals("AjZzC", deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("AjZzC", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals("desc", deploymentQueryImpl2.getDeploymentId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals("ULYb", deploymentQueryImpl2.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl3.getName());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("AjZzC", deploymentQueryImpl3.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("ULYb", deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals("desc", deploymentQueryImpl3.getDeploymentId());
      assertEquals("", deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals("AjZzC", deploymentQueryImpl4.getCategory());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals("ULYb", deploymentQueryImpl4.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertEquals("desc", deploymentQueryImpl4.getDeploymentId());
      assertEquals("", deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl4.getName());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("", deploymentQueryImpl5.getTenantIdLike());
      assertNull(deploymentQueryImpl5.getName());
      assertNull(deploymentQueryImpl5.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertFalse(deploymentQueryImpl5.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertEquals("ULYb", deploymentQueryImpl5.getCategoryNotEquals());
      assertEquals("AjZzC", deploymentQueryImpl5.getCategory());
      assertNull(deploymentQueryImpl5.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertEquals("desc", deploymentQueryImpl5.getDeploymentId());
      assertNotNull(deploymentQueryImpl5);
      
      int int0 = 127;
      Page page0 = new Page(int0, int0);
      assertEquals(127, page0.getFirstResult());
      assertEquals(127, page0.getMaxResults());
      assertNotNull(page0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl4, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      CommandExecutor commandExecutor0 = null;
      String string0 = "XI~l5";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      CommandExecutor commandExecutor0 = null;
      String string0 = "XI~l5";
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string1 = "b\"";
      int int0 = (-5306);
      Random.setNextRandom(int0);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      SimpleBindings simpleBindings0 = new SimpleBindings();
      assertNotNull(simpleBindings0);
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(simpleBindings0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      SimpleBindings simpleBindings0 = new SimpleBindings();
      assertNotNull(simpleBindings0);
      
      int int0 = 0;
      int int1 = 1601;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(simpleBindings0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "selectDeploymentById";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "V1F/OgNHI'PU&(UZ";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNotNull(deploymentQueryImpl0);
      
      QueryProperty queryProperty0 = null;
      DeploymentQueryImpl deploymentQueryImpl1 = (DeploymentQueryImpl)deploymentQueryImpl0.orderBy(queryProperty0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNotNull(deploymentQueryImpl1);
      
      int int0 = 762;
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(deploymentQueryImpl0.SORTORDER_DESC, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      HistoricTaskInstanceEntity historicTaskInstanceEntity0 = new HistoricTaskInstanceEntity();
      assertEquals("", historicTaskInstanceEntity0.getTenantId());
      assertNull(historicTaskInstanceEntity0.getOwner());
      assertNull(historicTaskInstanceEntity0.getParentTaskId());
      assertNull(historicTaskInstanceEntity0.getDurationInMillis());
      assertNull(historicTaskInstanceEntity0.getId());
      assertNull(historicTaskInstanceEntity0.getProcessInstanceId());
      assertNull(historicTaskInstanceEntity0.getAssignee());
      assertNull(historicTaskInstanceEntity0.getName());
      assertNull(historicTaskInstanceEntity0.getProcessDefinitionId());
      assertNull(historicTaskInstanceEntity0.getDescription());
      assertNull(historicTaskInstanceEntity0.getCategory());
      assertNull(historicTaskInstanceEntity0.getFormKey());
      assertEquals(0, historicTaskInstanceEntity0.getPriority());
      assertNull(historicTaskInstanceEntity0.getTaskDefinitionKey());
      assertNull(historicTaskInstanceEntity0.getDeleteReason());
      assertNull(historicTaskInstanceEntity0.getExecutionId());
      assertNotNull(historicTaskInstanceEntity0);
      
      Map<String, Object> map0 = historicTaskInstanceEntity0.getTaskLocalVariables();
      assertEquals("", historicTaskInstanceEntity0.getTenantId());
      assertNull(historicTaskInstanceEntity0.getOwner());
      assertNull(historicTaskInstanceEntity0.getParentTaskId());
      assertNull(historicTaskInstanceEntity0.getDurationInMillis());
      assertNull(historicTaskInstanceEntity0.getId());
      assertNull(historicTaskInstanceEntity0.getProcessInstanceId());
      assertNull(historicTaskInstanceEntity0.getAssignee());
      assertNull(historicTaskInstanceEntity0.getName());
      assertNull(historicTaskInstanceEntity0.getProcessDefinitionId());
      assertNull(historicTaskInstanceEntity0.getDescription());
      assertNull(historicTaskInstanceEntity0.getCategory());
      assertNull(historicTaskInstanceEntity0.getFormKey());
      assertEquals(0, historicTaskInstanceEntity0.getPriority());
      assertNull(historicTaskInstanceEntity0.getTaskDefinitionKey());
      assertNull(historicTaskInstanceEntity0.getDeleteReason());
      assertNull(historicTaskInstanceEntity0.getExecutionId());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      RepositoryServiceImpl repositoryServiceImpl0 = new RepositoryServiceImpl();
      assertNotNull(repositoryServiceImpl0);
      
      DeploymentBuilderImpl deploymentBuilderImpl0 = new DeploymentBuilderImpl(repositoryServiceImpl0);
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertNotNull(deploymentBuilderImpl0);
      
      DeploymentEntity deploymentEntity0 = deploymentBuilderImpl0.getDeployment();
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertNull(deploymentEntity0.getName());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertFalse(deploymentEntity0.isNew());
      assertNotNull(deploymentEntity0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = null;
      RepositoryServiceImpl repositoryServiceImpl0 = new RepositoryServiceImpl();
      assertNotNull(repositoryServiceImpl0);
      
      DeploymentBuilderImpl deploymentBuilderImpl0 = new DeploymentBuilderImpl(repositoryServiceImpl0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertNotNull(deploymentBuilderImpl0);
      
      String string1 = "y^j+2%.paBm(7q-";
      DeploymentBuilderImpl deploymentBuilderImpl1 = (DeploymentBuilderImpl)deploymentBuilderImpl0.addString(string0, string1);
      assertSame(deploymentBuilderImpl0, deploymentBuilderImpl1);
      assertSame(deploymentBuilderImpl1, deploymentBuilderImpl0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertTrue(deploymentBuilderImpl1.isBpmn20XsdValidationEnabled());
      assertFalse(deploymentBuilderImpl1.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl1.isProcessValidationEnabled());
      assertNotNull(deploymentBuilderImpl1);
      
      DeploymentBuilderImpl deploymentBuilderImpl2 = (DeploymentBuilderImpl)deploymentBuilderImpl0.name(string0);
      assertSame(deploymentBuilderImpl0, deploymentBuilderImpl2);
      assertSame(deploymentBuilderImpl0, deploymentBuilderImpl1);
      assertSame(deploymentBuilderImpl2, deploymentBuilderImpl1);
      assertSame(deploymentBuilderImpl2, deploymentBuilderImpl0);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertTrue(deploymentBuilderImpl2.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl2.isBpmn20XsdValidationEnabled());
      assertFalse(deploymentBuilderImpl2.isDuplicateFilterEnabled());
      assertNotNull(deploymentBuilderImpl2);
      
      DeploymentEntity deploymentEntity0 = deploymentBuilderImpl0.getDeployment();
      assertSame(deploymentBuilderImpl0, deploymentBuilderImpl2);
      assertSame(deploymentBuilderImpl0, deploymentBuilderImpl1);
      assertFalse(deploymentBuilderImpl0.isDuplicateFilterEnabled());
      assertTrue(deploymentBuilderImpl0.isProcessValidationEnabled());
      assertTrue(deploymentBuilderImpl0.isBpmn20XsdValidationEnabled());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getCategory());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getName());
      assertNotNull(deploymentEntity0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
