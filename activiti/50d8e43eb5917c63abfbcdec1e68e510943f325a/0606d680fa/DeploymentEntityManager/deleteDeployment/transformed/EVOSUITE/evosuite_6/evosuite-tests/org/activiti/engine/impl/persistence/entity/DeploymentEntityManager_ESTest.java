/*
 * This file was automatically generated by EvoSuite
 * Wed Nov 03 22:39:21 GMT 2021
 */

package org.activiti.engine.impl.persistence.entity;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import javax.transaction.TransactionManager;
import org.activiti.bpmn.model.ExclusiveGateway;
import org.activiti.engine.impl.DeploymentQueryImpl;
import org.activiti.engine.impl.FormServiceImpl;
import org.activiti.engine.impl.NativeDeploymentQueryImpl;
import org.activiti.engine.impl.Page;
import org.activiti.engine.impl.RepositoryServiceImpl;
import org.activiti.engine.impl.RuntimeServiceImpl;
import org.activiti.engine.impl.cfg.CommandExecutorImpl;
import org.activiti.engine.impl.cfg.StandaloneInMemProcessEngineConfiguration;
import org.activiti.engine.impl.cfg.TransactionPropagation;
import org.activiti.engine.impl.db.PersistentObject;
import org.activiti.engine.impl.el.NoExecutionVariableScope;
import org.activiti.engine.impl.interceptor.Command;
import org.activiti.engine.impl.interceptor.CommandConfig;
import org.activiti.engine.impl.interceptor.CommandContext;
import org.activiti.engine.impl.interceptor.CommandContextFactory;
import org.activiti.engine.impl.interceptor.CommandExecutor;
import org.activiti.engine.impl.interceptor.JtaTransactionInterceptor;
import org.activiti.engine.impl.interceptor.RetryInterceptor;
import org.activiti.engine.impl.persistence.entity.ByteArrayEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntity;
import org.activiti.engine.impl.persistence.entity.DeploymentEntityManager;
import org.activiti.engine.impl.persistence.entity.HistoricProcessInstanceEntity;
import org.activiti.engine.impl.persistence.entity.HistoricTaskInstanceEntity;
import org.activiti.engine.impl.persistence.entity.JobEntity;
import org.activiti.engine.impl.persistence.entity.MessageEntity;
import org.activiti.engine.impl.persistence.entity.ModelEntity;
import org.activiti.engine.impl.persistence.entity.ResourceEntity;
import org.activiti.engine.impl.persistence.entity.TaskEntity;
import org.activiti.engine.impl.repository.DeploymentBuilderImpl;
import org.apache.ibatis.session.RowBounds;
import org.apache.ibatis.session.SqlSessionManager;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class DeploymentEntityManager_ESTest extends DeploymentEntityManager_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "/] X\\bs pjkp}";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      
      Page page0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl0, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "R*\"],)";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.close();
      String string0 = "4Y)fZ";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      deploymentEntityManager0.flush();
      String string0 = "Pz1;'@X7f>{^BFI1<yJ";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getName());
      assertFalse(deploymentEntity0.isNew());
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getId());
      
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      
      int int0 = (-283);
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(hashMap0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      Map<String, Object> map0 = null;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByQueryCriteria(deploymentQueryImpl0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "r;3L<.U";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "D@hN<.A'D>";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "deleted deployment";
      TaskEntity taskEntity0 = new TaskEntity(string0);
      assertNotNull(taskEntity0);
      assertEquals("deleted deployment", taskEntity0.getId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getOwner());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      
      Map<String, Object> map0 = taskEntity0.getProcessVariables();
      assertNotNull(map0);
      assertEquals("deleted deployment", taskEntity0.getId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getOwner());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals(50, taskEntity0.getPriority());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "4a0G>m!i]f-O<yjEr'";
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-110);
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)124;
      byteArray0[4] = byte4;
      byte byte5 = (byte)0;
      byteArray0[5] = byte5;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findLatestDeploymentByName(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.getDeploymentResourceNames(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      CommandConfig commandConfig0 = new CommandConfig();
      assertNotNull(commandConfig0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertTrue(commandConfig0.isContextReusePossible());
      
      TransactionManager transactionManager0 = null;
      JtaTransactionInterceptor jtaTransactionInterceptor0 = new JtaTransactionInterceptor(transactionManager0);
      assertNotNull(jtaTransactionInterceptor0);
      
      CommandExecutorImpl commandExecutorImpl0 = new CommandExecutorImpl(commandConfig0, jtaTransactionInterceptor0);
      assertNotNull(commandExecutorImpl0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertTrue(commandConfig0.isContextReusePossible());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl(commandExecutorImpl0);
      assertNotNull(deploymentQueryImpl0);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertTrue(commandConfig0.isContextReusePossible());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      
      String string0 = "~0`4";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.processDefinitionKeyLike(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      assertEquals(TransactionPropagation.REQUIRED, commandConfig0.getTransactionPropagation());
      assertTrue(commandConfig0.isContextReusePossible());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getName());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      
      MockDate mockDate0 = new MockDate();
      assertNotNull(mockDate0);
      
      TaskEntity taskEntity0 = TaskEntity.create(mockDate0);
      assertNotNull(taskEntity0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      
      Map<String, Object> map0 = taskEntity0.getActivityInstanceVariables();
      assertNotNull(map0);
      assertEquals("Fri Feb 14 20:21:21 GMT 2014", mockDate0.toString());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getCategory());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getOwner());
      assertNull(taskEntity0.getDelegationState());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDescription());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertEquals(0, taskEntity0.getRevision());
      assertNull(taskEntity0.getFormKey());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getName());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      int int0 = 0;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByNativeQuery(map0, int0, int0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      boolean boolean0 = false;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      boolean boolean0 = true;
      // Undeclared exception!
      try { 
        deploymentEntityManager0.deleteDeployment(string0, boolean0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      
      String string0 = "";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.deploymentTenantIdLike(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentWithoutTenantId();
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotNull(deploymentQueryImpl2);
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      
      String string1 = "zESII{L2zmCv*nx6";
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.deploymentNameLike(string1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl3);
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertNull(deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl2.getNameLike());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl3.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("", deploymentQueryImpl3.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      
      DeploymentQueryImpl deploymentQueryImpl4 = deploymentQueryImpl3.deploymentName(deploymentQueryImpl1.SORTORDER_DESC);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl4);
      assertTrue(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl0.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl0.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertNull(deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals("desc", deploymentQueryImpl0.getName());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertTrue(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("", deploymentQueryImpl1.getTenantIdLike());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getCategory());
      assertEquals("desc", deploymentQueryImpl1.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl1.getNameLike());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertEquals("", deploymentQueryImpl2.getTenantIdLike());
      assertEquals("desc", deploymentQueryImpl2.getName());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl2.getNameLike());
      assertTrue(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertNull(deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertTrue(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl3.getNameLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getCategory());
      assertEquals("", deploymentQueryImpl3.getTenantIdLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("desc", deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertTrue(deploymentQueryImpl4.isWithoutTenantId());
      assertEquals("zESII{L2zmCv*nx6", deploymentQueryImpl4.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertEquals("", deploymentQueryImpl4.getTenantIdLike());
      assertEquals("desc", deploymentQueryImpl4.getName());
      assertNull(deploymentQueryImpl4.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      
      int int0 = (-1459);
      int int1 = 0;
      Page page0 = new Page(int0, int1);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(page0);
      assertEquals(0, page0.getMaxResults());
      assertEquals((-1459), page0.getFirstResult());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl4, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      ModelEntity modelEntity0 = new ModelEntity();
      assertNotNull(modelEntity0);
      assertNull(modelEntity0.getDeploymentId());
      assertNull(modelEntity0.getEditorSourceValueId());
      assertNull(modelEntity0.getEditorSourceExtraValueId());
      assertNull(modelEntity0.getId());
      assertEquals(2, modelEntity0.getRevisionNext());
      assertEquals(1, modelEntity0.getRevision());
      assertEquals("", modelEntity0.getTenantId());
      assertNull(modelEntity0.getName());
      assertEquals(1, (int)modelEntity0.getVersion());
      assertNull(modelEntity0.getKey());
      assertNull(modelEntity0.getMetaInfo());
      assertNull(modelEntity0.getCategory());
      
      DeploymentQueryImpl deploymentQueryImpl0 = new DeploymentQueryImpl();
      assertNotNull(deploymentQueryImpl0);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      
      String string0 = "D(49zM&D(h?%WmE<}Zt";
      DeploymentQueryImpl deploymentQueryImpl1 = deploymentQueryImpl0.processDefinitionKeyLike(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl1);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertNull(deploymentQueryImpl0.getCategory());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      
      DeploymentQueryImpl deploymentQueryImpl2 = deploymentQueryImpl1.deploymentCategory(string0);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNotNull(deploymentQueryImpl2);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      
      String string1 = "";
      DeploymentQueryImpl deploymentQueryImpl3 = deploymentQueryImpl2.processDefinitionKey(string1);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl3);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getNameLike());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl3.getCategory());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertNull(deploymentQueryImpl3.getNameLike());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      
      DeploymentQueryImpl deploymentQueryImpl4 = (DeploymentQueryImpl)deploymentQueryImpl1.orderByDeploymentName();
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl4, deploymentQueryImpl0);
      assertFalse(string0.equals((Object)string1));
      assertNotNull(deploymentQueryImpl4);
      assertNull(deploymentQueryImpl0.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertNull(deploymentQueryImpl1.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl1.getCategory());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getMaxResults());
      assertEquals(1, deploymentQueryImpl4.getFirstRow());
      assertNull(deploymentQueryImpl4.getDeploymentId());
      assertNull(deploymentQueryImpl4.getDatabaseType());
      assertEquals("RES.ID_ asc", deploymentQueryImpl4.getOrderBy());
      assertNull(deploymentQueryImpl4.getNameLike());
      assertFalse(deploymentQueryImpl4.isWithoutTenantId());
      assertNull(deploymentQueryImpl4.getTenantIdLike());
      assertNull(deploymentQueryImpl4.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl4.getLastRow());
      assertNull(deploymentQueryImpl4.getTenantId());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl4.getCategory());
      assertEquals(0, deploymentQueryImpl4.getFirstResult());
      assertNull(deploymentQueryImpl4.getCategoryNotEquals());
      
      DeploymentQueryImpl deploymentQueryImpl5 = deploymentQueryImpl3.deploymentNameLike(deploymentQueryImpl1.SORTORDER_ASC);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl5, deploymentQueryImpl4);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl5);
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("asc", deploymentQueryImpl0.getNameLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertNull(deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl1.getCategory());
      assertEquals("asc", deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("asc", deploymentQueryImpl2.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl2.getCategoryNotEquals());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl3.getCategory());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertNull(deploymentQueryImpl3.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("asc", deploymentQueryImpl3.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertNull(deploymentQueryImpl5.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl5.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl5.getOrderBy());
      assertEquals(0, deploymentQueryImpl5.getFirstResult());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl5.getCategory());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getMaxResults());
      assertNull(deploymentQueryImpl5.getDatabaseType());
      assertNull(deploymentQueryImpl5.getDeploymentId());
      assertEquals(1, deploymentQueryImpl5.getFirstRow());
      assertNull(deploymentQueryImpl5.getTenantIdLike());
      assertNull(deploymentQueryImpl5.getName());
      assertEquals("asc", deploymentQueryImpl5.getNameLike());
      assertNull(deploymentQueryImpl5.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl5.getLastRow());
      
      DeploymentQueryImpl deploymentQueryImpl6 = deploymentQueryImpl3.deploymentCategoryNotEquals(deploymentQueryImpl1.SORTORDER_ASC);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl0, deploymentQueryImpl1);
      assertNotSame(string0, string1);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl1, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl2, deploymentQueryImpl0);
      assertNotSame(string1, string0);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl6);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl1);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl3, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl2);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl0);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl4);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl5);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl3);
      assertSame(deploymentQueryImpl6, deploymentQueryImpl1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotNull(deploymentQueryImpl6);
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl0.getCategory());
      assertNull(deploymentQueryImpl0.getTenantId());
      assertFalse(deploymentQueryImpl0.isWithoutTenantId());
      assertEquals("asc", deploymentQueryImpl0.getNameLike());
      assertEquals(0, deploymentQueryImpl0.getFirstResult());
      assertNull(deploymentQueryImpl0.getName());
      assertEquals(1, deploymentQueryImpl0.getFirstRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getLastRow());
      assertEquals("RES.ID_ asc", deploymentQueryImpl0.getOrderBy());
      assertNull(deploymentQueryImpl0.getTenantIdLike());
      assertEquals("asc", deploymentQueryImpl0.getCategoryNotEquals());
      assertNull(deploymentQueryImpl0.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl0.getMaxResults());
      assertNull(deploymentQueryImpl0.getDeploymentId());
      assertNull(deploymentQueryImpl1.getName());
      assertEquals("asc", deploymentQueryImpl1.getCategoryNotEquals());
      assertEquals(1, deploymentQueryImpl1.getFirstRow());
      assertEquals(0, deploymentQueryImpl1.getFirstResult());
      assertFalse(deploymentQueryImpl1.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl1.getOrderBy());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getMaxResults());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl1.getCategory());
      assertEquals("asc", deploymentQueryImpl1.getNameLike());
      assertNull(deploymentQueryImpl1.getDeploymentId());
      assertNull(deploymentQueryImpl1.getTenantId());
      assertNull(deploymentQueryImpl1.getDatabaseType());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl1.getLastRow());
      assertNull(deploymentQueryImpl1.getTenantIdLike());
      assertEquals("asc", deploymentQueryImpl2.getNameLike());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl2.getCategory());
      assertNull(deploymentQueryImpl2.getTenantId());
      assertEquals(1, deploymentQueryImpl2.getFirstRow());
      assertFalse(deploymentQueryImpl2.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl2.getOrderBy());
      assertEquals("asc", deploymentQueryImpl2.getCategoryNotEquals());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getLastRow());
      assertNull(deploymentQueryImpl2.getTenantIdLike());
      assertNull(deploymentQueryImpl2.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl2.getMaxResults());
      assertNull(deploymentQueryImpl2.getDatabaseType());
      assertNull(deploymentQueryImpl2.getDeploymentId());
      assertEquals(0, deploymentQueryImpl2.getFirstResult());
      assertNull(deploymentQueryImpl3.getDeploymentId());
      assertNull(deploymentQueryImpl3.getTenantId());
      assertNull(deploymentQueryImpl3.getDatabaseType());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl3.getCategory());
      assertEquals(0, deploymentQueryImpl3.getFirstResult());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getMaxResults());
      assertEquals("asc", deploymentQueryImpl3.getCategoryNotEquals());
      assertFalse(deploymentQueryImpl3.isWithoutTenantId());
      assertNull(deploymentQueryImpl3.getTenantIdLike());
      assertNull(deploymentQueryImpl3.getName());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl3.getLastRow());
      assertEquals(1, deploymentQueryImpl3.getFirstRow());
      assertEquals("asc", deploymentQueryImpl3.getNameLike());
      assertEquals("RES.ID_ asc", deploymentQueryImpl3.getOrderBy());
      assertEquals(0, deploymentQueryImpl6.getFirstResult());
      assertNull(deploymentQueryImpl6.getTenantIdLike());
      assertNull(deploymentQueryImpl6.getName());
      assertNull(deploymentQueryImpl6.getDatabaseType());
      assertNull(deploymentQueryImpl6.getDeploymentId());
      assertEquals("asc", deploymentQueryImpl6.getCategoryNotEquals());
      assertEquals("asc", deploymentQueryImpl6.getNameLike());
      assertNull(deploymentQueryImpl6.getTenantId());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl6.getLastRow());
      assertEquals(Integer.MAX_VALUE, deploymentQueryImpl6.getMaxResults());
      assertEquals("D(49zM&D(h?%WmE<}Zt", deploymentQueryImpl6.getCategory());
      assertFalse(deploymentQueryImpl6.isWithoutTenantId());
      assertEquals("RES.ID_ asc", deploymentQueryImpl6.getOrderBy());
      assertEquals(1, deploymentQueryImpl6.getFirstRow());
      
      int int0 = 0;
      Page page0 = new Page(int0, int0);
      assertNotNull(page0);
      assertEquals(0, page0.getFirstResult());
      assertEquals(0, page0.getMaxResults());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentsByQueryCriteria(deploymentQueryImpl6, page0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "Q5L'7y8^xft*t}sr(yt";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentById(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertEquals("", deploymentEntity0.getTenantId());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getName());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      DeploymentEntity deploymentEntity0 = new DeploymentEntity();
      assertNotNull(deploymentEntity0);
      assertFalse(deploymentEntity0.isNew());
      assertNull(deploymentEntity0.getName());
      assertNull(deploymentEntity0.getCategory());
      assertNull(deploymentEntity0.getId());
      assertEquals("", deploymentEntity0.getTenantId());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.insertDeployment(deploymentEntity0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      MessageEntity messageEntity0 = new MessageEntity();
      assertEquals(3, JobEntity.DEFAULT_RETRIES);
      assertTrue(JobEntity.DEFAULT_EXCLUSIVE);
      assertNotNull(messageEntity0);
      assertNull(messageEntity0.getRepeat());
      assertNull(messageEntity0.getExceptionMessage());
      assertNull(messageEntity0.getProcessInstanceId());
      assertEquals(1, messageEntity0.getRevisionNext());
      assertTrue(messageEntity0.isExclusive());
      assertNull(messageEntity0.getJobHandlerConfiguration());
      assertNull(messageEntity0.getProcessDefinitionId());
      assertEquals(3, messageEntity0.getRetries());
      assertNull(messageEntity0.getLockOwner());
      assertNull(messageEntity0.getExecutionId());
      assertNull(messageEntity0.getId());
      assertEquals("", messageEntity0.getTenantId());
      assertNull(messageEntity0.getJobHandlerType());
      assertEquals(0, messageEntity0.getRevision());
      
      String string0 = "e#PMO}fBy";
      messageEntity0.lockOwner = string0;
      assertNull(messageEntity0.getRepeat());
      assertNull(messageEntity0.getExceptionMessage());
      assertNull(messageEntity0.getProcessInstanceId());
      assertEquals(1, messageEntity0.getRevisionNext());
      assertTrue(messageEntity0.isExclusive());
      assertNull(messageEntity0.getJobHandlerConfiguration());
      assertNull(messageEntity0.getProcessDefinitionId());
      assertEquals(3, messageEntity0.getRetries());
      assertNull(messageEntity0.getExecutionId());
      assertNull(messageEntity0.getId());
      assertEquals("", messageEntity0.getTenantId());
      assertEquals("e#PMO}fBy", messageEntity0.getLockOwner());
      assertNull(messageEntity0.getJobHandlerType());
      assertEquals(0, messageEntity0.getRevision());
      
      Date date0 = messageEntity0.duedate;
      assertNull(date0);
      
      TaskEntity taskEntity0 = TaskEntity.create(date0);
      assertEquals(3, JobEntity.DEFAULT_RETRIES);
      assertTrue(JobEntity.DEFAULT_EXCLUSIVE);
      assertNotNull(taskEntity0);
      assertNull(messageEntity0.getRepeat());
      assertNull(messageEntity0.getExceptionMessage());
      assertNull(messageEntity0.getProcessInstanceId());
      assertEquals(1, messageEntity0.getRevisionNext());
      assertTrue(messageEntity0.isExclusive());
      assertNull(messageEntity0.getJobHandlerConfiguration());
      assertNull(messageEntity0.getProcessDefinitionId());
      assertEquals(3, messageEntity0.getRetries());
      assertNull(messageEntity0.getExecutionId());
      assertNull(messageEntity0.getId());
      assertEquals("", messageEntity0.getTenantId());
      assertEquals("e#PMO}fBy", messageEntity0.getLockOwner());
      assertNull(messageEntity0.getJobHandlerType());
      assertEquals(0, messageEntity0.getRevision());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getFormKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      
      Map<String, Object> map0 = taskEntity0.getProcessVariables();
      assertEquals(3, JobEntity.DEFAULT_RETRIES);
      assertTrue(JobEntity.DEFAULT_EXCLUSIVE);
      assertNotNull(map0);
      assertNull(messageEntity0.getRepeat());
      assertNull(messageEntity0.getExceptionMessage());
      assertNull(messageEntity0.getProcessInstanceId());
      assertEquals(1, messageEntity0.getRevisionNext());
      assertTrue(messageEntity0.isExclusive());
      assertNull(messageEntity0.getJobHandlerConfiguration());
      assertNull(messageEntity0.getProcessDefinitionId());
      assertEquals(3, messageEntity0.getRetries());
      assertNull(messageEntity0.getExecutionId());
      assertNull(messageEntity0.getId());
      assertEquals("", messageEntity0.getTenantId());
      assertEquals("e#PMO}fBy", messageEntity0.getLockOwner());
      assertNull(messageEntity0.getJobHandlerType());
      assertEquals(0, messageEntity0.getRevision());
      assertEquals(50, taskEntity0.getPriority());
      assertNull(taskEntity0.getDelegationState());
      assertNull(taskEntity0.getDescription());
      assertEquals(1, taskEntity0.getRevisionNext());
      assertEquals("", taskEntity0.getTenantId());
      assertNull(taskEntity0.getCategory());
      assertNull(taskEntity0.getName());
      assertNull(taskEntity0.getProcessDefinitionId());
      assertNull(taskEntity0.getAssignee());
      assertNull(taskEntity0.getFormKey());
      assertFalse(taskEntity0.isDeleted());
      assertNull(taskEntity0.getProcessInstanceId());
      assertNull(taskEntity0.getTaskDefinitionKey());
      assertNull(taskEntity0.getId());
      assertNull(taskEntity0.getParentTaskId());
      assertNull(taskEntity0.getExecutionId());
      assertNull(taskEntity0.getEventName());
      assertEquals(0, taskEntity0.getRevision());
      assertEquals(1, taskEntity0.getSuspensionState());
      assertNull(taskEntity0.getOwner());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      DeploymentEntityManager deploymentEntityManager0 = new DeploymentEntityManager();
      assertNotNull(deploymentEntityManager0);
      
      NoExecutionVariableScope noExecutionVariableScope0 = new NoExecutionVariableScope();
      assertNotNull(noExecutionVariableScope0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      
      Map<String, Object> map0 = noExecutionVariableScope0.getVariablesLocal();
      assertNotNull(map0);
      assertFalse(noExecutionVariableScope0.hasVariablesLocal());
      assertFalse(noExecutionVariableScope0.hasVariables());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      
      // Undeclared exception!
      try { 
        deploymentEntityManager0.findDeploymentCountByNativeQuery(map0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.activiti.engine.impl.persistence.AbstractManager", e);
      }
  }
}
