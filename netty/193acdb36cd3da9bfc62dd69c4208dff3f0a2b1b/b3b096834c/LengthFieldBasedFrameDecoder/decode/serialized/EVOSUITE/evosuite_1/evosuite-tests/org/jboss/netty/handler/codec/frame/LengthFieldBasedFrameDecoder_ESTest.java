/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 05:54:07 GMT 2021
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.OutputStream;
import java.nio.ByteBuffer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferIndexFinder;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelEvent;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.ChannelStateEvent;
import org.jboss.netty.channel.DefaultChannelFuture;
import org.jboss.netty.channel.DefaultExceptionEvent;
import org.jboss.netty.channel.DownstreamChannelStateEvent;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.channel.FailedChannelFuture;
import org.jboss.netty.channel.MessageEvent;
import org.jboss.netty.channel.SucceededChannelFuture;
import org.jboss.netty.channel.UpstreamChannelStateEvent;
import org.jboss.netty.handler.codec.embedder.EmbeddedChannel;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.jboss.netty.handler.codec.frame.SerializedObjectSupporter;
import org.jboss.netty.handler.codec.serialization.ObjectDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 383;
      int int1 = (-33);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int2 = 5;
      int int3 = (-123);
      int int4 = (-2878);
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int2, int3, int4, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -33
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      boolean boolean0 = true;
      byte byte0 = (byte)69;
      byte byte1 = (byte)0;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext1).getChannel();
      ChannelState channelState0 = ChannelState.BOUND;
      String string0 = " 3Zq <g.REVRQWA7n-";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(embeddedChannel0, channelState0, string0);
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      lengthFieldBasedFrameDecoder0.channelDisconnected(channelHandlerContext1, upstreamChannelStateEvent0);
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      
      byte byte2 = (byte)0;
      byte byte3 = (byte)127;
      byte byte4 = (byte) (-104);
      byte byte5 = (byte) (-35);
      DefaultChannelFuture defaultChannelFuture0 = new DefaultChannelFuture(embeddedChannel0, boolean0);
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isDone());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertNotNull(defaultChannelFuture0);
      
      ChannelState channelState1 = ChannelState.BOUND;
      DownstreamChannelStateEvent downstreamChannelStateEvent0 = new DownstreamChannelStateEvent(embeddedChannel0, defaultChannelFuture0, channelState1, dynamicChannelBuffer0);
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isDone());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertNotNull(downstreamChannelStateEvent0);
      
      String string1 = downstreamChannelStateEvent0.toString();
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isDone());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(channelState1, channelState0);
      assertNotSame(string1, string0);
      
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext0, downstreamChannelStateEvent0);
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isDone());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertSame(channelState1, channelState0);
      
      DynamicChannelBuffer dynamicChannelBuffer1 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer49();
      assertNull(dynamicChannelBuffer1);
      
      DynamicChannelBuffer dynamicChannelBuffer2 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer6();
      assertEquals(1337, dynamicChannelBuffer2.readableBytes());
      assertFalse(dynamicChannelBuffer2.isDirect());
      assertTrue(dynamicChannelBuffer2.hasArray());
      assertTrue(dynamicChannelBuffer2.readable());
      assertEquals(1051, dynamicChannelBuffer2.readerIndex());
      assertEquals(2388, dynamicChannelBuffer2.writerIndex());
      assertEquals(4096, dynamicChannelBuffer2.capacity());
      assertFalse(dynamicChannelBuffer2.equals((Object)dynamicChannelBuffer0));
      assertNotNull(dynamicChannelBuffer2);
      assertNotSame(dynamicChannelBuffer2, dynamicChannelBuffer0);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder757();
      assertNotNull(objectDecoder1);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer2, (int) embeddedChannel0.DUMMY_ID, (int) embeddedChannel0.DUMMY_ID);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // endianness
         //
         verifyException("org.jboss.netty.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, embeddedChannel0, dynamicChannelBuffer0);
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(3117, dynamicChannelBuffer0.readerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertNull(object0);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder33();
      assertNotNull(objectDecoder1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext1, channelEvent0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)69;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[2] = byte1;
      byteArray0[2] = byte0;
      byteArray0[4] = byte1;
      byte byte2 = (byte) (-35);
      byteArray0[5] = byte2;
      // Undeclared exception!
      try { 
        dynamicChannelBuffer0.readBytes(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.readable());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isReadable());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, embeddedChannel0, dynamicChannelBuffer0);
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(3117, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isReadable());
      assertNull(object0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext2, channelEvent0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)69;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-114);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-104);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-35);
      byteArray0[5] = byte5;
      // Undeclared exception!
      try { 
        dynamicChannelBuffer0.readBytes(byteArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 8;
      int int1 = 0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int0, boolean0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel1();
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertNotNull(embeddedChannel0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer155();
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(351, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(351, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(351, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(351, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(351, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(351, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNull(object0);
      
      lengthFieldBasedFrameDecoder0.serializedObjectSupporter = serializedObjectSupporter0;
      long long0 = 0L;
      System.setCurrentTimeMillis(long0);
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = lengthFieldBasedFrameDecoder0.serializedObjectSupporter.deserializeObjectBigEndianHeapChannelBuffer127();
      assertEquals(141, bigEndianHeapChannelBuffer1.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(141, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(141, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, embeddedChannel0, bigEndianHeapChannelBuffer1);
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(141, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(141, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(141, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNull(object1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      Object object2 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, embeddedChannel0, bigEndianHeapChannelBuffer1);
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(141, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(141, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(141, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNull(object2);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      int int1 = 3;
      int int2 = 524;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int0, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (2) + lengthFieldLength (3).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 128;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = null;
      int int1 = 4455;
      int int2 = 2754;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int0, int1, int2, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 4455
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 0;
      int int1 = 2511;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder8();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer165();
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(101, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(101, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(101, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder813();
      assertNull(objectDecoder0);
      
      int int0 = 437;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int0, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = (-6);
      int int1 = 1468;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -6
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder9();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, embeddedChannel0, dynamicChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 6 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder9();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, embeddedChannel0, dynamicChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 4;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (4) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 2;
      int int1 = 524;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelState channelState0 = ChannelState.OPEN;
      int int2 = 8;
      int int3 = 2967;
      int int4 = 0;
      int int5 = 0;
      int int6 = 0;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int7 = 1425;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int7, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (524) must be equal to or greater than lengthFieldOffset (1425) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 1;
      int int1 = 3782;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (3782) must be equal to or greater than lengthFieldOffset (3782) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 2022;
      int int1 = 8388608;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 8388608
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = 125;
      int int1 = 1;
      int int2 = (-860);
      int int3 = (-1809);
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int3, int2, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -860
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = 2174;
      int int1 = 972;
      int int2 = (-1259);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: -1259
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 255;
      int int1 = 56;
      int int2 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 56
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 2056;
      int int1 = 2;
      int int2 = (-211);
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int1, int2, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -211
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 3102;
      int int1 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      int int2 = 0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int2);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int0, int1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 4;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (4) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 1861;
      int int1 = 5835;
      int int2 = 2;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 5835
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = 8;
      int int1 = (-2061);
      int int2 = 2845;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -2061
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      int int1 = (-1247);
      int int2 = 1;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int1, int2, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -1247
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext1, channelEvent0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)69;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-114);
      byteArray0[3] = byte3;
      byte byte4 = (byte) (-104);
      byteArray0[4] = byte4;
      byte byte5 = (byte) (-35);
      byteArray0[5] = byte5;
      dynamicChannelBuffer0.readBytes(byteArray0);
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)14, (byte)5, (byte)116}, byteArray0);
      
      DefaultChannelFuture defaultChannelFuture0 = new DefaultChannelFuture(embeddedChannel0, boolean0);
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertNotNull(defaultChannelFuture0);
      
      ChannelState channelState0 = ChannelState.BOUND;
      DownstreamChannelStateEvent downstreamChannelStateEvent0 = new DownstreamChannelStateEvent(embeddedChannel0, defaultChannelFuture0, channelState0, dynamicChannelBuffer0);
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertNotNull(downstreamChannelStateEvent0);
      
      String string0 = downstreamChannelStateEvent0.toString();
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertNotNull(string0);
      
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext0, downstreamChannelStateEvent0);
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      
      DynamicChannelBuffer dynamicChannelBuffer1 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer49();
      assertNull(dynamicChannelBuffer1);
      
      DynamicChannelBuffer dynamicChannelBuffer2 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer6();
      assertTrue(dynamicChannelBuffer2.hasArray());
      assertFalse(dynamicChannelBuffer2.isDirect());
      assertEquals(1337, dynamicChannelBuffer2.readableBytes());
      assertTrue(dynamicChannelBuffer2.readable());
      assertEquals(2388, dynamicChannelBuffer2.writerIndex());
      assertEquals(4096, dynamicChannelBuffer2.capacity());
      assertEquals(1051, dynamicChannelBuffer2.readerIndex());
      assertFalse(dynamicChannelBuffer2.equals((Object)dynamicChannelBuffer0));
      assertNotNull(dynamicChannelBuffer2);
      assertNotSame(dynamicChannelBuffer2, dynamicChannelBuffer0);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder757();
      assertNotNull(objectDecoder1);
      
      ObjectDecoder objectDecoder2 = serializedObjectSupporter0.deserializeObjectObjectDecoder24();
      assertNull(objectDecoder2);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer2, (int) embeddedChannel0.DUMMY_ID, (int) embeddedChannel0.DUMMY_ID);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // endianness
         //
         verifyException("org.jboss.netty.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 8;
      int int1 = 1468;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (8) must be equal to or greater than lengthFieldOffset (1468) + lengthFieldLength (8).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 2905;
      int int1 = 1;
      int int2 = 0;
      int int3 = 0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int3, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2905) must be equal to or greater than lengthFieldOffset (2905) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder756();
      assertNull(objectDecoder0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer94();
      assertNull(dynamicChannelBuffer0);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder697();
      assertNotNull(objectDecoder1);
      
      ObjectDecoder objectDecoder2 = serializedObjectSupporter0.deserializeObjectObjectDecoder306();
      assertNull(objectDecoder2);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ObjectDecoder objectDecoder3 = serializedObjectSupporter0.deserializeObjectObjectDecoder746();
      assertNull(objectDecoder3);
      
      ObjectDecoder objectDecoder4 = serializedObjectSupporter0.deserializeObjectObjectDecoder797();
      assertNull(objectDecoder4);
      
      MessageEvent messageEvent0 = null;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext1).getChannel();
      ChannelStateEvent channelStateEvent0 = null;
      lengthFieldBasedFrameDecoder0.channelDisconnected(channelHandlerContext1, channelStateEvent0);
      try { 
        lengthFieldBasedFrameDecoder0.messageReceived(channelHandlerContext0, messageEvent0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.FrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 2760;
      int int1 = 3;
      int int2 = (-3114);
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2760) must be equal to or greater than lengthFieldOffset (2760) + lengthFieldLength (3).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      int int0 = 2;
      int int1 = 1777;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (2) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 8;
      int int1 = 1468;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext1, channelEvent0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)0;
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext2).getChannel();
      ChannelState channelState0 = ChannelState.BOUND;
      String string0 = "3Zq <g.REVRQWsA7n-";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(embeddedChannel0, channelState0, string0);
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      lengthFieldBasedFrameDecoder0.channelDisconnected(channelHandlerContext2, upstreamChannelStateEvent0);
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      
      byteArray0[1] = byte0;
      byte byte1 = (byte)0;
      byteArray0[2] = byte1;
      byte byte2 = (byte) (-114);
      byteArray0[3] = byte2;
      byte byte3 = (byte) (-104);
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-35);
      byteArray0[5] = byte4;
      dynamicChannelBuffer0.readBytes(byteArray0);
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(6, byteArray0.length);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)1, (byte)14, (byte)5, (byte)116}, byteArray0);
      
      DefaultChannelFuture defaultChannelFuture0 = new DefaultChannelFuture(embeddedChannel0, boolean0);
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertNotNull(defaultChannelFuture0);
      
      ChannelState channelState1 = ChannelState.BOUND;
      DownstreamChannelStateEvent downstreamChannelStateEvent0 = new DownstreamChannelStateEvent(embeddedChannel0, defaultChannelFuture0, channelState1, dynamicChannelBuffer0);
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertNotNull(downstreamChannelStateEvent0);
      
      String string1 = downstreamChannelStateEvent0.toString();
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(channelState1, channelState0);
      assertNotSame(string1, string0);
      
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext0, downstreamChannelStateEvent0);
      assertEquals(2284, dynamicChannelBuffer0.readerIndex());
      assertEquals(833, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertEquals(ChannelState.BOUND, downstreamChannelStateEvent0.getState());
      assertSame(channelState1, channelState0);
      
      DynamicChannelBuffer dynamicChannelBuffer1 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer6();
      assertNull(dynamicChannelBuffer1);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder757();
      assertNotNull(objectDecoder1);
      
      ObjectDecoder objectDecoder2 = serializedObjectSupporter0.deserializeObjectObjectDecoder24();
      assertFalse(objectDecoder2.equals((Object)objectDecoder1));
      assertNotNull(objectDecoder2);
      assertNotSame(objectDecoder2, objectDecoder1);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer1, (int) embeddedChannel0.DUMMY_ID, (int) embeddedChannel0.DUMMY_ID);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, embeddedChannel0, dynamicChannelBuffer0);
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(3117, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertNull(object0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext2, channelEvent0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)69;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[1] = byte1;
      byte byte2 = (byte)0;
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-114);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer130();
      assertEquals(419, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(419, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(419, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      int int0 = (-4268);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, byteArray0[1], int0);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer33();
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(839, dynamicChannelBuffer0.readableBytes());
      assertEquals(3117, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(2278, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertNotNull(dynamicChannelBuffer0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder6();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isConnected());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, embeddedChannel0, dynamicChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder4();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder508();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel5();
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertNotNull(embeddedChannel0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelEvent channelEvent0 = null;
      lengthFieldBasedFrameDecoder0.handleUpstream(channelHandlerContext1, channelEvent0);
      boolean boolean0 = true;
      byte[] byteArray0 = new byte[6];
      byte byte0 = (byte)52;
      byteArray0[0] = byte0;
      byte byte1 = (byte)0;
      byteArray0[2] = byte0;
      byte byte2 = (byte) (-114);
      byte byte3 = (byte) (-104);
      byteArray0[4] = byte3;
      byte byte4 = (byte) (-35);
      byteArray0[5] = byte4;
      DefaultChannelFuture defaultChannelFuture0 = new DefaultChannelFuture(embeddedChannel0, boolean0);
      assertFalse(defaultChannelFuture0.isSuccess());
      assertFalse(defaultChannelFuture0.isDone());
      assertFalse(defaultChannelFuture0.isCancelled());
      assertTrue(defaultChannelFuture0.isUseDeadLockChecker());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertNotNull(defaultChannelFuture0);
      
      ChannelState channelState0 = ChannelState.BOUND;
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer49();
      assertNull(dynamicChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer1 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer6();
      assertTrue(dynamicChannelBuffer1.hasArray());
      assertEquals(1337, dynamicChannelBuffer1.readableBytes());
      assertFalse(dynamicChannelBuffer1.isDirect());
      assertTrue(dynamicChannelBuffer1.readable());
      assertEquals(4096, dynamicChannelBuffer1.capacity());
      assertEquals(2388, dynamicChannelBuffer1.writerIndex());
      assertEquals(1051, dynamicChannelBuffer1.readerIndex());
      assertNotNull(dynamicChannelBuffer1);
      
      System.setCurrentTimeMillis(byte2);
      assertFalse(byte2 == byte3);
      assertFalse(byte2 == byte4);
      assertFalse(byte2 == byte1);
      assertFalse(byte2 == byte0);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, embeddedChannel0, dynamicChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }
}
