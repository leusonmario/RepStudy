/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 13:01:58 GMT 2021
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.CharBuffer;
import java.nio.file.LinkOption;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetAddress;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferFactory;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.jboss.netty.buffer.SlicedChannelBuffer;
import org.jboss.netty.buffer.TruncatedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.DefaultChildChannelStateEvent;
import org.jboss.netty.channel.DefaultWriteCompletionEvent;
import org.jboss.netty.channel.DownstreamChannelStateEvent;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.channel.FailedChannelFuture;
import org.jboss.netty.channel.UpstreamChannelStateEvent;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[2];
      int int0 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, byteArray0[1], byteArray0[1]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 46;
      int int1 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int0, int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (3) must be equal to or greater than lengthFieldOffset (46) + lengthFieldLength (3).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int2 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int2);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int0, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(2, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int2);
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, dynamicChannelBuffer0);
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertNull(object0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      int int3 = (-1857);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer1, int0, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = (-1943);
      int int1 = 48;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -1943
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 697;
      int int1 = (-955);
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int0, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -955
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int1, int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 93;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)37;
      byteArray0[1] = byte0;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(littleEndianHeapChannelBuffer0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertNotNull(duplicatedChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, duplicatedChannelBuffer0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      
      int int2 = (-241);
      int int3 = 1263;
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int2 = 1190;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int2);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(1190, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int0, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(1190, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(1190, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      int int2 = 24;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      int int4 = (-3);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel3, channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(2, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertNull(object1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int0);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      int int5 = (-1857);
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 4;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      int int2 = 24;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(4, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(4, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(4, duplicatedChannelBuffer0.capacity());
      assertEquals(4, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(4, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(4, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(4, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(4, duplicatedChannelBuffer0.capacity());
      assertEquals(4, duplicatedChannelBuffer0.writerIndex());
      assertEquals(4, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(bigEndianHeapChannelBuffer0, int3);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertTrue(truncatedChannelBuffer0.readable());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(0, truncatedChannelBuffer0.readerIndex());
      assertEquals(697, truncatedChannelBuffer0.readableBytes());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertNotNull(truncatedChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel2, truncatedChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertTrue(truncatedChannelBuffer0.readable());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(693, truncatedChannelBuffer0.readableBytes());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertEquals(4, truncatedChannelBuffer0.readerIndex());
      assertNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      ByteBuffer byteBuffer0 = truncatedChannelBuffer0.toByteBuffer(int1, int2);
      assertTrue(byteBuffer0.hasArray());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=24 cap=697]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(697, byteBuffer0.capacity());
      assertEquals(24, byteBuffer0.remaining());
      assertEquals(0, byteBuffer0.position());
      assertTrue(byteBuffer0.hasRemaining());
      assertEquals(24, byteBuffer0.limit());
      assertFalse(byteBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertTrue(truncatedChannelBuffer0.readable());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(693, truncatedChannelBuffer0.readableBytes());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertEquals(4, truncatedChannelBuffer0.readerIndex());
      assertNotNull(byteBuffer0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      // Undeclared exception!
      try { 
        duplicatedChannelBuffer0.readBytes(byteBuffer0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.AbstractChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 3;
      int int1 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (3) must be equal to or greater than lengthFieldOffset (3) + lengthFieldLength (8).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = (-82);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -82
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 1024;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 93;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[0];
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      long long0 = (-5036L);
      DefaultWriteCompletionEvent defaultWriteCompletionEvent0 = null;
      try {
        defaultWriteCompletionEvent0 = new DefaultWriteCompletionEvent(channel2, long0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // writtenAmount must be a positive integer: -5036
         //
         verifyException("org.jboss.netty.channel.DefaultWriteCompletionEvent", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 746;
      int int1 = 4;
      int int2 = (-1824);
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int0, int2, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -1824
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = 0;
      int int1 = (-691);
      int int2 = 0;
      int int3 = 6246;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int3, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = 2032;
      int int1 = 2010;
      int int2 = 0;
      int int3 = (-1480);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int3, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = (-987);
      int int1 = 2339;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -987
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 3597;
      int int1 = 4400;
      int int2 = (-857);
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int2, int1, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -857
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 2977;
      int int1 = 16;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 2977
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 3;
      int int1 = (-75);
      int int2 = (-16777216);
      int int3 = (-238);
      int int4 = (-1898);
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int3, int4, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -75
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 93;
      int int1 = 4;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int0, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (93) must be equal to or greater than lengthFieldOffset (93) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 8;
      int int1 = 1985;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int1, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (8) must be equal to or greater than lengthFieldOffset (1985) + lengthFieldLength (8).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      assertNotNull(directChannelBufferFactory0);
      
      byte[] byteArray0 = null;
      int int0 = 3891;
      int int1 = 2732;
      int int2 = 3;
      int int3 = 0;
      int int4 = 421;
      int int5 = 0;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int2, int3, int4, int4, int5, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 421
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      int int0 = 93;
      int int1 = 4;
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      LinkedList<ChannelBuffer> linkedList0 = new LinkedList<ChannelBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeChannelBuffer compositeChannelBuffer0 = new CompositeChannelBuffer(byteOrder0, linkedList0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, linkedList0.size());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      assertFalse(compositeChannelBuffer0.isDirect());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertFalse(compositeChannelBuffer0.readable());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertFalse(compositeChannelBuffer0.hasArray());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertNotNull(compositeChannelBuffer0);
      
      int int2 = 2507;
      // Undeclared exception!
      try { 
        compositeChannelBuffer0.copy(int1, int2);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jboss.netty.buffer.CompositeChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      int int3 = 390;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int3);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2, directChannelBufferFactory0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int3, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 763;
      int int1 = 2;
      int int2 = 2524;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (763) must be equal to or greater than lengthFieldOffset (763) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 232;
      int int1 = 4;
      int int2 = 2222;
      int int3 = 0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int2, int3, boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      ChannelHandlerContext channelHandlerContext0 = null;
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      int int4 = 1442;
      // Undeclared exception!
      try { 
        bigEndianHeapChannelBuffer0.writeShort(int4);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jboss.netty.buffer.BigEndianHeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      int int3 = 390;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int3);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int3, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = null;
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int1);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int1 == int0);
      
      ReadOnlyChannelBuffer readOnlyChannelBuffer0 = new ReadOnlyChannelBuffer(dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, readOnlyChannelBuffer0.capacity());
      assertFalse(readOnlyChannelBuffer0.readable());
      assertEquals(0, readOnlyChannelBuffer0.writerIndex());
      assertFalse(readOnlyChannelBuffer0.isDirect());
      assertFalse(readOnlyChannelBuffer0.hasArray());
      assertEquals(0, readOnlyChannelBuffer0.readerIndex());
      assertEquals(0, readOnlyChannelBuffer0.readableBytes());
      assertNotNull(readOnlyChannelBuffer0);
      assertFalse(int1 == int0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, readOnlyChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.capacity());
      assertEquals(0, readOnlyChannelBuffer0.capacity());
      assertFalse(readOnlyChannelBuffer0.readable());
      assertEquals(0, readOnlyChannelBuffer0.writerIndex());
      assertFalse(readOnlyChannelBuffer0.isDirect());
      assertFalse(readOnlyChannelBuffer0.hasArray());
      assertEquals(0, readOnlyChannelBuffer0.readerIndex());
      assertEquals(0, readOnlyChannelBuffer0.readableBytes());
      assertNull(object0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int2 = 24;
      int int3 = 390;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int3);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = 1048576;
      int int5 = 136;
      int int6 = 0;
      int int7 = 0;
      int int8 = (-1);
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext3 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext4 = null;
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel5 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel6 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int9 = 754;
      int int10 = (-999);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      int int0 = 24;
      boolean boolean0 = true;
      byte byte0 = (byte)30;
      int int1 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int1, byte0, boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = null;
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, channelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 3;
      int int1 = 3338;
      int int2 = (-1);
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int1, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (3) must be equal to or greater than lengthFieldOffset (3338) + lengthFieldLength (3).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = 24;
      boolean boolean0 = true;
      byte byte0 = (byte)30;
      int int1 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int1, byte0, boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = null;
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int2 = (-2134);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int1, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 136;
      int int3 = 0;
      int int4 = 0;
      int int5 = (-1);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = null;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int2);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int5);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer0.duplicate();
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(136, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertNotNull(channelBuffer0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int5);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext2, channel2, channelBuffer0);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(136, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertNull(object0);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int5);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertTrue(littleEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int6 = 754;
      int int7 = (-999);
      byte[] byteArray0 = new byte[0];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.duplicate();
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.writerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.capacity());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readerIndex());
      assertNotNull(channelBuffer1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertEquals(0, byteArray0.length);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel3, channelBuffer1);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.writerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.capacity());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readerIndex());
      assertNull(object1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int0 == int4);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int7);
      assertFalse(int0 == int6);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int7);
      assertFalse(int1 == int6);
      assertFalse(int1 == int2);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer1));
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer1, int0, int6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2, directChannelBufferFactory0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int2, int0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(byteOrder0, byteOrder1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, dynamicChannelBuffer0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertSame(byteOrder0, byteOrder1);
      
      int int3 = (-1);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int0, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity: -1
         //
         verifyException("org.jboss.netty.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 136;
      int int3 = 0;
      int int4 = 0;
      int int5 = (-1);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int6 = 562;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int6);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(562, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(562, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertNull(object0);
      assertFalse(int0 == int4);
      assertFalse(int0 == int6);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int6);
      assertFalse(int1 == int0);
      assertFalse(int6 == int5);
      assertFalse(int6 == int0);
      assertFalse(int6 == int1);
      assertFalse(int6 == int3);
      assertFalse(int6 == int2);
      assertFalse(int6 == int4);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext3 = null;
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = new LittleEndianHeapChannelBuffer(int2);
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(136, littleEndianHeapChannelBuffer1.capacity());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer1.writerIndex());
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertTrue(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int6);
      
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer1.duplicate();
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(136, littleEndianHeapChannelBuffer1.capacity());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(136, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertNotNull(channelBuffer0);
      assertTrue(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int6);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer1);
      
      Channel channel5 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int7 = 754;
      int int8 = (-999);
      byte[] byteArray0 = new byte[0];
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel2, channelBuffer0);
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer1.readable());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(136, littleEndianHeapChannelBuffer1.capacity());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(136, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertNull(object1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int6);
      assertFalse(int0 == int7);
      assertFalse(int0 == int3);
      assertFalse(int0 == int8);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int6);
      assertFalse(int1 == int8);
      assertFalse(int1 == int0);
      assertFalse(int1 == int7);
      assertTrue(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertTrue(littleEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(int2 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int7);
      assertFalse(int2 == int8);
      assertFalse(int2 == int1);
      assertFalse(int2 == int6);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer1);
      
      int int9 = 1966;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int9);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1966, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int9 == int0);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.duplicate();
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1966, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.writerIndex());
      assertEquals(1966, channelBuffer1.capacity());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readableBytes());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertNotNull(channelBuffer1);
      assertFalse(int9 == int0);
      assertFalse(int9 == int4);
      assertFalse(int9 == int5);
      assertFalse(int9 == int6);
      assertFalse(int9 == int1);
      assertFalse(int9 == int2);
      assertFalse(int9 == int8);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      
      int int10 = 1;
      int int11 = (-4777);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer1, int10, int11);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(2, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2, directChannelBufferFactory0);
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = (ByteBufferBackedChannelBuffer)lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int2, int0);
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(2, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(2, byteBufferBackedChannelBuffer0.readableBytes());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(2, byteBufferBackedChannelBuffer0.capacity());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertTrue(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteBufferBackedChannelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertSame(byteOrder0, byteOrder1);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int4 = (-1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, channel2, dynamicChannelBuffer0);
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(24, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(object0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int0, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // capacity: -1
         //
         verifyException("org.jboss.netty.buffer.DirectChannelBufferFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 136;
      int int3 = 0;
      int int4 = 0;
      int int5 = (-1);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = null;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int2);
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      
      double double0 = (-3369.027);
      littleEndianHeapChannelBuffer0.writeDouble(double0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer0.duplicate();
      assertEquals(136, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertEquals(8, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(8, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext2, channel2, channelBuffer0);
      assertEquals(136, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertEquals(8, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(8, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(136, littleEndianHeapChannelBuffer0.capacity());
      assertNull(object0);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int5);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int6 = 754;
      int int7 = (-999);
      byte[] byteArray0 = new byte[0];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertEquals(0, byteArray0.length);
      
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.duplicate();
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.capacity());
      assertFalse(channelBuffer1.isDirect());
      assertNotNull(channelBuffer1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertEquals(0, byteArray0.length);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel3, channelBuffer1);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.capacity());
      assertFalse(channelBuffer1.isDirect());
      assertNull(object1);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int6);
      assertFalse(int0 == int7);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int6);
      assertFalse(int1 == int7);
      assertFalse(int1 == int2);
      assertFalse(int1 == int5);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer1));
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertEquals(0, byteArray0.length);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer1, int0, int6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = 1;
      int int1 = (-3600);
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int0, boolean0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (1) must be equal to or greater than lengthFieldOffset (1) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(2, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int3);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int2, int0);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(2, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(byteOrder0, byteOrder1);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int4 = (-1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, channel2, dynamicChannelBuffer0);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(object0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertSame(byteOrder0, byteOrder1);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int0, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 139;
      int int3 = 0;
      int int4 = 0;
      int int5 = (-1);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = null;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int2);
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(139, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      
      double double0 = (-3369.027);
      littleEndianHeapChannelBuffer0.writeDouble(double0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(139, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer0.duplicate();
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(139, channelBuffer0.capacity());
      assertEquals(8, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(8, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(139, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(channelBuffer0);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext2, channel2, channelBuffer0);
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(139, channelBuffer0.capacity());
      assertEquals(8, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(8, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(139, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int3);
      assertFalse(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      
      Channel channel4 = mock(Channel.class, new ViolatedAssumptionAnswer());
      long long0 = littleEndianHeapChannelBuffer0.readUnsignedInt();
      assertEquals(4, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(139, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(4, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(3539053052L, long0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      
      int int6 = 754;
      int int7 = (-999);
      byte[] byteArray0 = new byte[9];
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(9, byteArray0.length);
      
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.duplicate();
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(channelBuffer1.readable());
      assertEquals(9, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(9, channelBuffer1.capacity());
      assertEquals(9, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertNotNull(channelBuffer1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertEquals(9, byteArray0.length);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel3, channelBuffer1);
      assertEquals(9, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(9, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(9, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(9, channelBuffer1.writerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertFalse(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(9, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(9, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertNull(object1);
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int0 == int7);
      assertFalse(int0 == int6);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int1 == int6);
      assertFalse(int1 == int7);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer1));
      assertFalse(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertEquals(9, byteArray0.length);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer1, int0, int6);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int3);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNull(object0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int2, int0);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(2, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertSame(byteOrder0, byteOrder1);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int4 = (-1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, channel2, dynamicChannelBuffer0);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(object1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertSame(byteOrder0, byteOrder1);
      
      ChannelHandlerContext channelHandlerContext3 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer2 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext3, channel3, bigEndianHeapChannelBuffer1);
      assertEquals(0, bigEndianHeapChannelBuffer2.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer2.capacity());
      assertFalse(bigEndianHeapChannelBuffer2.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer2.readerIndex());
      assertEquals(2, bigEndianHeapChannelBuffer2.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer2.readable());
      assertEquals(2, bigEndianHeapChannelBuffer2.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer2.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, bigEndianHeapChannelBuffer1.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertNotNull(bigEndianHeapChannelBuffer2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertTrue(bigEndianHeapChannelBuffer2.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer1));
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer2, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int0, int4);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.LITTLE_ENDIAN;
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      int int2 = 24;
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertSame(byteOrder1, byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      assertNotNull(directChannelBufferFactory0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(2, bigEndianHeapChannelBuffer1.capacity());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(2, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(2, bigEndianHeapChannelBuffer1.readableBytes());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int3);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int2, int0);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(2, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(2, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertSame(byteOrder0, byteOrder1);
      
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int4 = (-1);
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext2, channel2, dynamicChannelBuffer0);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertSame(byteOrder0, byteOrder1);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer2 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int0, int1);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(bigEndianHeapChannelBuffer2.isDirect());
      assertFalse(bigEndianHeapChannelBuffer2.readable());
      assertEquals(0, bigEndianHeapChannelBuffer2.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer2.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer2.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer2.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer2.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer2.readableBytes());
      assertNotNull(bigEndianHeapChannelBuffer2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(bigEndianHeapChannelBuffer2.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertSame(byteOrder0, byteOrder1);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer2, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer1);
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      int int0 = 93;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelState channelState0 = ChannelState.BOUND;
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte) (-89);
      byteArray0[0] = byte0;
      byte byte1 = (byte)37;
      byteArray0[1] = byte1;
      byte byte2 = (byte)2;
      byteArray0[2] = byte2;
      byte byte3 = (byte)10;
      byteArray0[3] = byte3;
      byte byte4 = (byte)7;
      byteArray0[4] = byte4;
      byte byte5 = (byte)73;
      byteArray0[5] = byte5;
      byte byte6 = (byte)39;
      byteArray0[6] = byte6;
      byte byte7 = (byte) (-1);
      byteArray0[7] = byte7;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)37, (byte)2, (byte)10, (byte)7, (byte)73, (byte)39, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(littleEndianHeapChannelBuffer0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertNotNull(duplicatedChannelBuffer0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)37, (byte)2, (byte)10, (byte)7, (byte)73, (byte)39, (byte) (-1)}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, duplicatedChannelBuffer0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)37, (byte)2, (byte)10, (byte)7, (byte)73, (byte)39, (byte) (-1)}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, object0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      assertArrayEquals(new byte[] {(byte) (-89), (byte)37, (byte)2, (byte)10, (byte)7, (byte)73, (byte)39, (byte) (-1)}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      
      lengthFieldBasedFrameDecoder0.channelClosed(channelHandlerContext0, upstreamChannelStateEvent0);
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      assertArrayEquals(new byte[] {(byte) (-89), (byte)37, (byte)2, (byte)10, (byte)7, (byte)73, (byte)39, (byte) (-1)}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelState channelState1 = ChannelState.CONNECTED;
      int int2 = 2477;
      int int3 = (-245);
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int4 = 0;
      int int5 = 1263;
      int int6 = 0;
      int int7 = 56;
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      int int0 = 93;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelState channelState0 = ChannelState.CONNECTED;
      int int2 = 2477;
      int int3 = (-245);
      Object object0 = new Object();
      assertNotNull(object0);
      
      int int4 = 0;
      int int5 = 1263;
      int int6 = 0;
      int int7 = 56;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int5);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int5 == int7);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int6);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      
      char[] charArray0 = new char[3];
      char char0 = 'y';
      charArray0[0] = char0;
      char char1 = 'G';
      charArray0[1] = char1;
      char char2 = 'q';
      charArray0[2] = char2;
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("yGq", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'y', 'G', 'q'}, charArray0);
      assertEquals(3, charArray0.length);
      
      CharBuffer charBuffer1 = CharBuffer.wrap((CharSequence) charBuffer0);
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("yGq", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertEquals("yGq", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.limit());
      assertNotNull(charBuffer1);
      assertArrayEquals(new char[] {'y', 'G', 'q'}, charArray0);
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(3, charArray0.length);
      
      ByteOrder byteOrder0 = charBuffer1.order();
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("yGq", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertEquals("yGq", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      assertArrayEquals(new char[] {'y', 'G', 'q'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertEquals(3, charArray0.length);
      
      int int8 = 2147450880;
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(byteOrder0, int8);
      assertEquals(3, charBuffer0.capacity());
      assertEquals(3, charBuffer0.remaining());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("yGq", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertEquals(3, charBuffer0.length());
      assertEquals(3, charBuffer0.limit());
      assertEquals(3, charBuffer1.capacity());
      assertEquals(3, charBuffer1.remaining());
      assertFalse(charBuffer1.isDirect());
      assertTrue(charBuffer1.hasRemaining());
      assertFalse(charBuffer1.hasArray());
      assertEquals("yGq", charBuffer1.toString());
      assertEquals(0, charBuffer1.position());
      assertTrue(charBuffer1.isReadOnly());
      assertEquals(3, charBuffer1.length());
      assertEquals(3, charBuffer1.limit());
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertFalse(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(2147450880, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertArrayEquals(new char[] {'y', 'G', 'q'}, charArray0);
      assertTrue(charBuffer0.equals((Object)charBuffer1));
      assertTrue(charBuffer1.equals((Object)charBuffer0));
      assertFalse(int8 == int1);
      assertFalse(int8 == int5);
      assertFalse(int8 == int7);
      assertFalse(int8 == int6);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int0);
      assertFalse(int5 == int7);
      assertFalse(int5 == int4);
      assertFalse(int5 == int8);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int6);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertEquals(3, charArray0.length);
      
      int int9 = (-16777216);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int9, int7);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      int int2 = 136;
      ByteOrder byteOrder0 = null;
      LinkedList<ChannelBuffer> linkedList0 = new LinkedList<ChannelBuffer>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      CompositeChannelBuffer compositeChannelBuffer0 = new CompositeChannelBuffer(byteOrder0, linkedList0);
      assertEquals(0, linkedList0.size());
      assertFalse(compositeChannelBuffer0.readable());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      assertFalse(compositeChannelBuffer0.isDirect());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertFalse(compositeChannelBuffer0.hasArray());
      assertNotNull(compositeChannelBuffer0);
      
      int int3 = 2134701007;
      int int4 = 255;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(compositeChannelBuffer0, int3, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // endianness
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBufferFactory", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      int int2 = 24;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel0, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int3);
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = (-3);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(bigEndianHeapChannelBuffer0, int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(0, truncatedChannelBuffer0.readerIndex());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(697, truncatedChannelBuffer0.readableBytes());
      assertTrue(truncatedChannelBuffer0.readable());
      assertNotNull(truncatedChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      
      int int5 = 695;
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel1, truncatedChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int2 = 24;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      assertNotNull(directChannelBufferFactory0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = new BigEndianHeapChannelBuffer(int2);
      assertEquals(0, bigEndianHeapChannelBuffer1.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(24, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int3);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      
      int int4 = (-3);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(bigEndianHeapChannelBuffer0, int3);
      assertTrue(truncatedChannelBuffer0.readable());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertEquals(0, truncatedChannelBuffer0.readerIndex());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertEquals(697, truncatedChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNotNull(truncatedChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      
      int int5 = 695;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel2, truncatedChannelBuffer0);
      assertEquals(697, truncatedChannelBuffer0.readerIndex());
      assertFalse(truncatedChannelBuffer0.readable());
      assertEquals(0, truncatedChannelBuffer0.readableBytes());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNull(object0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertFalse(int3 == int5);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      
      // Undeclared exception!
      try { 
        truncatedChannelBuffer0.toByteBuffer(int5, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length is negative: -3
         //
         verifyException("org.jboss.netty.buffer.TruncatedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      int int2 = 24;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(2, duplicatedChannelBuffer0.readableBytes());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(2, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(2, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(2, duplicatedChannelBuffer0.capacity());
      assertNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int3);
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = (-3);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(bigEndianHeapChannelBuffer0, int3);
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(697, truncatedChannelBuffer0.readableBytes());
      assertEquals(0, truncatedChannelBuffer0.readerIndex());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertTrue(truncatedChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(truncatedChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      
      int int5 = 695;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel2, truncatedChannelBuffer0);
      assertEquals(695, truncatedChannelBuffer0.readableBytes());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertEquals(2, truncatedChannelBuffer0.readerIndex());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertTrue(truncatedChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertNull(object0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int5);
      assertFalse(int0 == int2);
      assertFalse(int0 == int4);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int5);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      // Undeclared exception!
      try { 
        truncatedChannelBuffer0.toByteBuffer(int5, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length is negative: -3
         //
         verifyException("org.jboss.netty.buffer.TruncatedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      int int0 = 4;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPipeline) null).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      int int2 = 24;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.readableBytes());
      assertEquals(4, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(4, channelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.readableBytes());
      assertEquals(4, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(4, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(4, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(4, duplicatedChannelBuffer0.capacity());
      assertEquals(4, duplicatedChannelBuffer0.readableBytes());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertEquals(4, channelBuffer0.readableBytes());
      assertEquals(4, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(4, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(4, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(4, duplicatedChannelBuffer0.capacity());
      assertEquals(4, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int3);
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      
      int int4 = (-3);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(bigEndianHeapChannelBuffer0, int3);
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertTrue(truncatedChannelBuffer0.readable());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(0, truncatedChannelBuffer0.readerIndex());
      assertEquals(697, truncatedChannelBuffer0.readableBytes());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(truncatedChannelBuffer0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      
      int int5 = 695;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel2, truncatedChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      int int2 = 24;
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(int2);
      assertNotNull(directChannelBufferFactory0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int3 = 697;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.copy(int2, int0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(3, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(3, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(3, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(3, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(3, duplicatedChannelBuffer0.writerIndex());
      assertEquals(3, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertEquals(3, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertNotNull(duplicatedChannelBuffer0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext1, channel1, duplicatedChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(3, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(3, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(3, duplicatedChannelBuffer0.writerIndex());
      assertEquals(3, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(3, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertNull(bigEndianHeapChannelBuffer1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(int3);
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(697, dynamicChannelBuffer0.capacity());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertNotNull(dynamicChannelBuffer0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      
      int int4 = (-3);
      TruncatedChannelBuffer truncatedChannelBuffer0 = new TruncatedChannelBuffer(bigEndianHeapChannelBuffer0, int3);
      assertEquals(697, truncatedChannelBuffer0.readableBytes());
      assertEquals(0, truncatedChannelBuffer0.readerIndex());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertTrue(truncatedChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNotNull(truncatedChannelBuffer0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      
      int int5 = 4;
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel2, truncatedChannelBuffer0);
      assertEquals(694, truncatedChannelBuffer0.readableBytes());
      assertFalse(truncatedChannelBuffer0.isDirect());
      assertEquals(697, truncatedChannelBuffer0.writerIndex());
      assertEquals(697, truncatedChannelBuffer0.capacity());
      assertEquals(3, truncatedChannelBuffer0.readerIndex());
      assertTrue(truncatedChannelBuffer0.hasArray());
      assertTrue(truncatedChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(697, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertNull(object0);
      assertFalse(int0 == int5);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int5);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int3 == int5);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      // Undeclared exception!
      try { 
        truncatedChannelBuffer0.toByteBuffer(int5, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // length is negative: -3
         //
         verifyException("org.jboss.netty.buffer.TruncatedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      int int0 = 93;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[8];
      byte byte0 = (byte)37;
      byteArray0[1] = byte0;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertNotNull(littleEndianHeapChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(littleEndianHeapChannelBuffer0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertNotNull(duplicatedChannelBuffer0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertEquals(8, byteArray0.length);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, duplicatedChannelBuffer0);
      assertEquals(8, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(8, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(8, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.readable());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(8, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(8, duplicatedChannelBuffer0.writerIndex());
      assertEquals(8, duplicatedChannelBuffer0.readableBytes());
      assertNull(object0);
      assertArrayEquals(new byte[] {(byte)0, (byte)37, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertEquals(8, byteArray0.length);
      
      int int2 = 2477;
      int int3 = (-245);
      Object object1 = new Object();
      assertNotNull(object1);
      
      int int4 = 1263;
      int int5 = 8;
      int int6 = Integer.MAX_VALUE;
      // Undeclared exception!
      lengthFieldBasedFrameDecoder0.extractFrame(littleEndianHeapChannelBuffer0, int5, int6);
  }
}
