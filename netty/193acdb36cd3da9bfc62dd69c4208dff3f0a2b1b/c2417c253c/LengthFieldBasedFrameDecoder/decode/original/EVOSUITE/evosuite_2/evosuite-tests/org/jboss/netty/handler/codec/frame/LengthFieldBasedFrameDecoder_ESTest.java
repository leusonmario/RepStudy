/*
 * This file was automatically generated by EvoSuite
 * Thu Nov 04 13:07:45 GMT 2021
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.File;
import java.io.PipedInputStream;
import java.io.PrintStream;
import java.net.InetSocketAddress;
import java.nio.ByteBuffer;
import java.nio.ByteOrder;
import java.nio.charset.Charset;
import java.util.LinkedList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.lang.MockThrowable;
import org.evosuite.runtime.mock.java.net.MockInetSocketAddress;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ByteBufferBackedChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.jboss.netty.buffer.DirectChannelBufferFactory;
import org.jboss.netty.buffer.DuplicatedChannelBuffer;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.HeapChannelBufferFactory;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ReadOnlyChannelBuffer;
import org.jboss.netty.buffer.SlicedChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelPipeline;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.ChannelStateEvent;
import org.jboss.netty.channel.DefaultWriteCompletionEvent;
import org.jboss.netty.channel.DownstreamChannelStateEvent;
import org.jboss.netty.channel.DownstreamMessageEvent;
import org.jboss.netty.channel.FailedChannelFuture;
import org.jboss.netty.channel.SucceededChannelFuture;
import org.jboss.netty.channel.UpstreamChannelStateEvent;
import org.jboss.netty.channel.UpstreamMessageEvent;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = 1338;
      int int1 = (-1);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -1
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = (-5);
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      boolean boolean0 = true;
      int int4 = (-18);
      int int5 = 165;
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      long long0 = 827L;
      ChannelState channelState0 = ChannelState.BOUND;
      Object object0 = new Object();
      assertNotNull(object0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel2 = null;
      int int6 = 8;
      ChannelHandlerContext channelHandlerContext2 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ChannelBuffer channelBuffer0 = null;
      ChannelHandlerContext channelHandlerContext3 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int7 = 937;
      int int8 = 5492;
      int int9 = 206;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int2, int2, int7, int8, int9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)6;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertEquals(1, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(1, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(1, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte)0}, byteArray0);
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Adjusted frame length (1) is less than initialBytesToStrip: 683
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[17];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(17, byteArray0.length);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(17, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(17, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(17, bigEndianHeapChannelBuffer0.readableBytes());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertEquals(17, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(17, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(17, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(17, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(17, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(17, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(17, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      channelBuffer0.writeZero(int2);
      assertEquals(17, byteArray0.length);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(17, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(17, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(17, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(17, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(17, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(17, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.readable());
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertEquals(17, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(17, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(17, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(17, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(17, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertEquals(17, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(17, channelBuffer0.writerIndex());
      assertNull(object0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer1 = null;
      boolean boolean1 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(boolean1 == boolean0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext1 = null;
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(heapChannelBufferFactory0);
      
      ByteOrder byteOrder1 = ByteOrder.nativeOrder();
      assertFalse(byteOrder1.equals((Object)byteOrder0));
      assertEquals("LITTLE_ENDIAN", byteOrder1.toString());
      assertNotNull(byteOrder1);
      assertNotSame(byteOrder1, byteOrder0);
      
      ChannelBuffer channelBuffer2 = heapChannelBufferFactory0.getBuffer(byteOrder0, (int) byteArray0[0]);
      assertEquals(17, byteArray0.length);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(channelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer2.equals((Object)channelBuffer0));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer2.readableBytes());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.readerIndex());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(0, channelBuffer2.writerIndex());
      assertEquals(6, channelBuffer2.capacity());
      assertFalse(channelBuffer2.isDirect());
      assertNotNull(channelBuffer2);
      assertNotSame(byteOrder0, byteOrder1);
      assertNotSame(channelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer2, channelBuffer0);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, channelBuffer2);
      assertEquals(17, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(byteOrder0.equals((Object)byteOrder1));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(channelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(channelBuffer2.equals((Object)channelBuffer0));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertTrue(channelBuffer2.hasArray());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals((-10), channelBuffer2.readerIndex());
      assertEquals(0, channelBuffer2.writerIndex());
      assertTrue(channelBuffer2.readable());
      assertEquals(6, channelBuffer2.capacity());
      assertFalse(channelBuffer2.isDirect());
      assertEquals(10, channelBuffer2.readableBytes());
      assertNull(object1);
      assertNotSame(byteOrder0, byteOrder1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertNotSame(channelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer2, channelBuffer0);
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder1.decode(channelHandlerContext1, channel2, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (3) must be equal to or greater than lengthFieldOffset (3) + lengthFieldLength (3).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 60;
      int int1 = (-1066);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -1066
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 4;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (4) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      boolean boolean0 = false;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      String string0 = "-";
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-93);
      byte byte1 = (byte)0;
      byte byte2 = (byte)115;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(5, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(5, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      assertEquals(5, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertEquals(5, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(5, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(5, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)0, (byte)0, (byte)0, (byte)0, (byte)0}, byteArray0);
      assertNull(object0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = null;
      try {
        bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn((ChannelPipeline) null).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel2, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // negative pre-adjustment length field: -72057594037927936
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 18
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 2;
      int int3 = 46;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertEquals(4, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(15, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(4, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(4, littleEndianHeapChannelBuffer1.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertEquals(4, littleEndianHeapChannelBuffer1.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      int int5 = 2004;
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertNotNull(charset0);
      
      String string0 = null;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        charset0.encode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int2, int2, int3, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byte byte4 = (byte)115;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(5, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(5, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)48, (byte) (-93), (byte)0, (byte)0}, byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Adjusted frame length (-1139) is less than lengthFieldEndOffset: 2
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 1;
      boolean boolean0 = true;
      boolean boolean1 = false;
      boolean boolean2 = true;
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[22];
      byteArray0[1] = byteArray0[0];
      byteArray0[2] = byteArray0[1];
      byte[] byteArray1 = null;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = null;
      try {
        littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      int int0 = (-1676);
      ByteOrder byteOrder0 = ByteOrder.nativeOrder();
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(byteOrder0);
      assertEquals("LITTLE_ENDIAN", byteOrder0.toString());
      assertNotNull(directChannelBufferFactory0);
      
      List<ChannelBuffer> list0 = null;
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertEquals(1, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(1, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(1, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer1 = null;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext1 = null;
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(heapChannelBufferFactory0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = (-3001);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -3001
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 2313;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 2313
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 979;
      int int1 = 2877;
      int int2 = (-2417);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -2417
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = (-3332);
      int int1 = 4;
      int int2 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -3332
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      int int2 = 56;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      int int2 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      int int0 = 1;
      int int1 = (-2);
      int int2 = 40;
      int int3 = 398;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -2
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      int int0 = 2;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (2) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 3270;
      int int1 = 1036;
      int int2 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelBuffer channelBuffer0 = null;
      int int3 = 8388608;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int3, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 2;
      int int1 = 0;
      int int2 = 4;
      int int3 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (0) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = 2004;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2004) must be equal to or greater than lengthFieldOffset (2004) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (8) must be equal to or greater than lengthFieldOffset (8) + lengthFieldLength (8).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      ChannelBuffer channelBuffer0 = null;
      int int4 = 0;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int2, int4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 2;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (2) must be equal to or greater than lengthFieldOffset (2) + lengthFieldLength (2).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      boolean boolean0 = true;
      ChannelBuffer channelBuffer0 = null;
      int int4 = 0;
      int int5 = 0;
      int int6 = (-2453);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int7 = 2;
      int int8 = 2;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int7, int1, int8);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int7);
      assertFalse(int1 == int8);
      assertFalse(int1 == int6);
      assertFalse(int7 == int0);
      assertFalse(int7 == int2);
      assertFalse(int7 == int1);
      assertFalse(int7 == int6);
      assertFalse(int7 == int5);
      assertFalse(int7 == int4);
      assertFalse(int7 == int3);
      assertFalse(int8 == int1);
      assertFalse(int8 == int3);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int4);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int3, int4, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int3 == int4);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int6 = 1172;
      int int7 = (-2639);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(duplicatedChannelBuffer0, int6, int7);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(5, byteArray0.length);
      assertEquals(5, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(5, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(5, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)48, (byte) (-93), (byte)0, (byte)115}, byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(5, byteArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertEquals(5, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(5, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(5, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)48, (byte) (-93), (byte)0, (byte)115}, byteArray0);
      assertNull(object0);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int6 = 1172;
      int int7 = (-2639);
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.copy();
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int6);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int7);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.readableBytes());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertNotNull(channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer1, channelBuffer0);
      
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int8 = 256;
      int int9 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = null;
      try {
        lengthFieldBasedFrameDecoder1 = new LengthFieldBasedFrameDecoder(int8, int9, int9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      boolean boolean0 = true;
      int int2 = 911;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(911, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = littleEndianHeapChannelBuffer0.duplicate();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertTrue(channelBuffer0.equals((Object)littleEndianHeapChannelBuffer0));
      assertEquals(0, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(911, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(911, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertNotNull(channelBuffer0);
      assertNotSame(littleEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, littleEndianHeapChannelBuffer0);
      
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int2, int0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      int int0 = 1048576;
      int int1 = 3;
      int int2 = 8;
      int int3 = 128;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int0, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory();
      assertNotNull(directChannelBufferFactory0);
      
      int int4 = 8;
      ChannelBuffer channelBuffer0 = directChannelBufferFactory0.getBuffer(int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertFalse(channelBuffer0.hasArray());
      assertTrue(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(8, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertNotNull(channelBuffer0);
      
      int int5 = (-1099);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int5, int4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(16, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(3, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(16, littleEndianHeapChannelBuffer1.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(16, littleEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(16, littleEndianHeapChannelBuffer1.capacity());
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)bigEndianHeapChannelBuffer0.slice();
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer1.capacity());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(bigEndianHeapChannelBuffer1);
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int2);
      assertFalse(int5 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer1.capacity());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int6 = 1172;
      int int7 = (-2639);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer2 = (BigEndianHeapChannelBuffer)bigEndianHeapChannelBuffer0.copy();
      assertFalse(int5 == int1);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertFalse(int5 == int6);
      assertFalse(int5 == int2);
      assertFalse(int5 == int7);
      assertFalse(int5 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer2.hasArray());
      assertFalse(bigEndianHeapChannelBuffer2.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer2.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer2.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer2.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer2.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer2.capacity());
      assertFalse(bigEndianHeapChannelBuffer2.readable());
      assertNotNull(bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer1);
      
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int8 = 256;
      int int9 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = null;
      try {
        lengthFieldBasedFrameDecoder1 = new LengthFieldBasedFrameDecoder(int8, int9, int9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[9] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertNull(littleEndianHeapChannelBuffer1);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = (BigEndianHeapChannelBuffer)bigEndianHeapChannelBuffer0.slice();
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.writerIndex());
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(bigEndianHeapChannelBuffer1);
      assertFalse(int5 == int3);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int6 = 1172;
      int int7 = (-2639);
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer2 = (BigEndianHeapChannelBuffer)bigEndianHeapChannelBuffer1.copy();
      assertFalse(int5 == int7);
      assertFalse(int5 == int3);
      assertFalse(int5 == int6);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertTrue(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer2.equals((Object)bigEndianHeapChannelBuffer1));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer2.readable());
      assertFalse(bigEndianHeapChannelBuffer2.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer2.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer2.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer2.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer2.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer2.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer2.arrayOffset());
      assertNotNull(bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer2, bigEndianHeapChannelBuffer0);
      
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int8 = 256;
      int int9 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = null;
      try {
        lengthFieldBasedFrameDecoder1 = new LengthFieldBasedFrameDecoder(int8, int9, int9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      int int0 = 3;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      int int2 = 911;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = null;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(911, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(911, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNull(object0);
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int3, int4, int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int4 == int3);
      assertFalse(int4 == int2);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      int int6 = 1172;
      int int7 = (-2639);
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      int int8 = 796;
      int int9 = 112;
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int8, int9);
      assertFalse(int9 == int5);
      assertFalse(int9 == int2);
      assertFalse(int9 == int4);
      assertFalse(int9 == int7);
      assertFalse(int9 == int3);
      assertFalse(int9 == int6);
      assertFalse(int9 == int8);
      assertFalse(int9 == int0);
      assertFalse(int9 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(int1 == int5);
      assertFalse(int1 == int4);
      assertFalse(int1 == int9);
      assertFalse(int1 == int8);
      assertFalse(int1 == int7);
      assertFalse(int1 == int6);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int0);
      assertFalse(int2 == int8);
      assertFalse(int2 == int3);
      assertFalse(int2 == int9);
      assertFalse(int2 == int1);
      assertFalse(int2 == int6);
      assertFalse(int2 == int7);
      assertFalse(int3 == int9);
      assertFalse(int3 == int0);
      assertFalse(int3 == int8);
      assertFalse(int3 == int6);
      assertFalse(int3 == int7);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int4);
      assertFalse(int3 == int5);
      assertFalse(int4 == int9);
      assertFalse(int4 == int6);
      assertFalse(int4 == int3);
      assertFalse(int4 == int8);
      assertFalse(int4 == int7);
      assertFalse(int4 == int2);
      assertFalse(int4 == int5);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int5 == int9);
      assertFalse(int5 == int0);
      assertFalse(int5 == int8);
      assertFalse(int5 == int6);
      assertFalse(int5 == int7);
      assertFalse(int5 == int3);
      assertFalse(int5 == int2);
      assertFalse(int5 == int1);
      assertFalse(int5 == int4);
      assertFalse(int8 == int2);
      assertFalse(int8 == int5);
      assertFalse(int8 == int9);
      assertFalse(int8 == int7);
      assertFalse(int8 == int4);
      assertFalse(int8 == int3);
      assertFalse(int8 == int6);
      assertFalse(int8 == int0);
      assertFalse(int8 == int1);
      assertEquals(112, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(112, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(112, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int10 = 256;
      int int11 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = null;
      try {
        lengthFieldBasedFrameDecoder1 = new LengthFieldBasedFrameDecoder(int10, int11, int11);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 2;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertNull(littleEndianHeapChannelBuffer1);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int0);
      assertFalse(int5 == int3);
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = null;
      try {
        bigEndianHeapChannelBuffer1 = new BigEndianHeapChannelBuffer(byte2);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test42()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 2;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNull(littleEndianHeapChannelBuffer1);
      
      int int5 = 2004;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      
      String string0 = null;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int5);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int0);
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        charset0.encode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test43()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[16];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(16, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(16, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(16, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(16, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(16, byteArray0.length);
      assertFalse(int1 == int4);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(16, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(16, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(16, littleEndianHeapChannelBuffer0.readerIndex());
      assertNull(object0);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int5);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int4);
      assertFalse(int5 == int1);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int6 = 1172;
      int int7 = (-2639);
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.copy();
      assertFalse(int5 == int3);
      assertFalse(int5 == int0);
      assertFalse(int5 == int2);
      assertFalse(int5 == int6);
      assertFalse(int5 == int4);
      assertFalse(int5 == int7);
      assertFalse(int5 == int1);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.capacity());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertNotNull(channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      int int8 = 256;
      int int9 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = null;
      try {
        lengthFieldBasedFrameDecoder1 = new LengthFieldBasedFrameDecoder(int8, int9, int9);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test44()  throws Throwable  {
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int2, int2, int3, int2);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[5];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(5, byteArray0.length);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(5, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(5, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(5, littleEndianHeapChannelBuffer0.writerIndex());
      assertArrayEquals(new byte[] {(byte) (-12), (byte)48, (byte) (-93), (byte)0, (byte)115}, byteArray0);
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Adjusted frame length (-1139) is less than lengthFieldEndOffset: 2
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test45()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      boolean boolean0 = true;
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteBuffer byteBuffer0 = ByteBuffer.allocate(int0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertNotNull(byteBuffer0);
      
      ByteBufferBackedChannelBuffer byteBufferBackedChannelBuffer0 = new ByteBufferBackedChannelBuffer(byteBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(byteBuffer0.isDirect());
      assertEquals(1, byteBuffer0.limit());
      assertEquals(0, byteBuffer0.arrayOffset());
      assertEquals(1, byteBuffer0.capacity());
      assertEquals(1, byteBuffer0.remaining());
      assertTrue(byteBuffer0.hasRemaining());
      assertTrue(byteBuffer0.hasArray());
      assertEquals("java.nio.HeapByteBuffer[pos=0 lim=1 cap=1]", byteBuffer0.toString());
      assertEquals(0, byteBuffer0.position());
      assertFalse(byteBuffer0.isReadOnly());
      assertEquals(1, byteBufferBackedChannelBuffer0.readableBytes());
      assertTrue(byteBufferBackedChannelBuffer0.readable());
      assertTrue(byteBufferBackedChannelBuffer0.hasArray());
      assertEquals(1, byteBufferBackedChannelBuffer0.writerIndex());
      assertEquals(0, byteBufferBackedChannelBuffer0.arrayOffset());
      assertEquals(0, byteBufferBackedChannelBuffer0.readerIndex());
      assertFalse(byteBufferBackedChannelBuffer0.isDirect());
      assertEquals(1, byteBufferBackedChannelBuffer0.capacity());
      assertNotNull(byteBufferBackedChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, byteBufferBackedChannelBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // Adjusted frame length (1) is less than initialBytesToStrip: 683
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test46()  throws Throwable  {
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test47()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 31;
      int int2 = 8;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byteArray0[0] = byte0;
      byteArray0[15] = byteArray0[0];
      byte byte1 = (byte) (-93);
      byteArray0[2] = byte1;
      byte byte2 = (byte)0;
      byteArray0[3] = byte2;
      byte byte3 = (byte)115;
      byteArray0[4] = byte3;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      try { 
        lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
        fail("Expecting exception: Exception");
      
      } catch(Exception e) {
         //
         // negative pre-adjustment length field: -864691128455135232
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test48()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 2;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(littleEndianHeapChannelBuffer1.equals((Object)littleEndianHeapChannelBuffer0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(4, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(15, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(4, littleEndianHeapChannelBuffer1.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer1.readerIndex());
      assertEquals(4, littleEndianHeapChannelBuffer1.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer1.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer1.readable());
      assertTrue(littleEndianHeapChannelBuffer1.hasArray());
      assertEquals(4, littleEndianHeapChannelBuffer1.readableBytes());
      assertNotNull(littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer1, littleEndianHeapChannelBuffer0);
      
      int int5 = 2004;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = null;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer2 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(littleEndianHeapChannelBuffer0.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(int1 == int4);
      assertFalse(int1 == int2);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int5);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(littleEndianHeapChannelBuffer2.equals((Object)littleEndianHeapChannelBuffer1));
      assertFalse(littleEndianHeapChannelBuffer2.equals((Object)littleEndianHeapChannelBuffer0));
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(11, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(8, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer2.readable());
      assertEquals(4, littleEndianHeapChannelBuffer2.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer2.arrayOffset());
      assertEquals(0, littleEndianHeapChannelBuffer2.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer2.isDirect());
      assertEquals(4, littleEndianHeapChannelBuffer2.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer2.hasArray());
      assertEquals(4, littleEndianHeapChannelBuffer2.capacity());
      assertNotNull(littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer2);
      assertNotSame(littleEndianHeapChannelBuffer0, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer2, littleEndianHeapChannelBuffer1);
      assertNotSame(littleEndianHeapChannelBuffer2, littleEndianHeapChannelBuffer0);
      
      // Undeclared exception!
      try { 
        charset0.encode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test49()  throws Throwable  {
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      byteArray0[3] = byte3;
      byteArray0[4] = byteArray0[15];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel2, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertNull(object0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      int int4 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int4);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int5 = 1172;
      int int6 = (-2639);
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.copy();
      assertFalse(int4 == int5);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int6);
      assertFalse(int4 == int1);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, channelBuffer1.capacity());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.writerIndex());
      assertNotNull(channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel1, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      boolean boolean1 = false;
      int int7 = 256;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder2 = null;
      try {
        lengthFieldBasedFrameDecoder2 = new LengthFieldBasedFrameDecoder(int7, byteArray0[3], byteArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test50()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 2;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel1, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int1);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertNull(littleEndianHeapChannelBuffer1);
      
      int int5 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = (BigEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.extractFrame(littleEndianHeapChannelBuffer0, int3, byte3);
      assertEquals(19, byteArray0.length);
      assertFalse(byte3 == byte1);
      assertFalse(byte3 == byte0);
      assertFalse(byte3 == byte2);
      assertFalse(byte3 == byte4);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      assertFalse(int3 == int5);
      assertFalse(int3 == int0);
      assertFalse(int3 == int4);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.capacity());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.isRegistered());
      assertNotNull(charset0);
      
      String string0 = null;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel0, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int5);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int2 == int4);
      assertFalse(int2 == int5);
      assertFalse(int2 == int1);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertNull(object0);
      
      // Undeclared exception!
      try { 
        charset0.encode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test51()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertEquals(1, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(1, channelBuffer0.capacity());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(1, channelBuffer0.capacity());
      assertEquals(1, channelBuffer0.readerIndex());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNull(object0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext1 = null;
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(heapChannelBufferFactory0);
      
      ChannelBuffer channelBuffer1 = heapChannelBufferFactory0.getBuffer(byteOrder0, (int) byteArray0[0]);
      assertEquals(1, byteArray0.length);
      assertFalse(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.writerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(6, channelBuffer1.capacity());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(channelBuffer1);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, channelBuffer1);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertFalse(int2 == int0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.readerIndex());
      assertFalse(channelBuffer1.readable());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.writerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.readableBytes());
      assertEquals(6, channelBuffer1.capacity());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNull(object1);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
  }

  @Test(timeout = 11000)
  public void test52()  throws Throwable  {
      ChannelPipeline channelPipeline0 = mock(ChannelPipeline.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      doReturn(channelPipeline0).when(channel0).getPipeline();
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(channel0).when(channelHandlerContext0).getChannel();
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int0 = 31;
      int int1 = 8;
      int int2 = 1;
      int int3 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-12);
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      byteArray0[3] = byte3;
      byteArray0[4] = byteArray0[15];
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel2, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int3);
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertNull(object0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      int int4 = 2004;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      channelBuffer0.discardReadBytes();
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      DuplicatedChannelBuffer duplicatedChannelBuffer0 = new DuplicatedChannelBuffer(channelBuffer0);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertNotNull(duplicatedChannelBuffer0);
      
      int int5 = 1172;
      int int6 = (-2639);
      ChannelBuffer channelBuffer1 = bigEndianHeapChannelBuffer0.copy();
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int6);
      assertFalse(int4 == int5);
      assertFalse(int4 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.writerIndex());
      assertEquals(0, channelBuffer1.readableBytes());
      assertFalse(channelBuffer1.isDirect());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.readerIndex());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertEquals(0, channelBuffer1.capacity());
      assertNotNull(channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      
      ChannelState channelState0 = ChannelState.OPEN;
      String string0 = "";
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel1, channelState0, string0);
      assertEquals(ChannelState.OPEN, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      boolean boolean1 = false;
      int int7 = 256;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel3 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel3, duplicatedChannelBuffer0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int4);
      assertFalse(int0 == int5);
      assertFalse(int0 == int6);
      assertFalse(int0 == int1);
      assertFalse(int0 == int7);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int7);
      assertFalse(int1 == int3);
      assertFalse(int1 == int6);
      assertFalse(int1 == int5);
      assertFalse(int1 == int4);
      assertFalse(int4 == int1);
      assertFalse(int4 == int7);
      assertFalse(int4 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int6);
      assertFalse(int4 == int5);
      assertFalse(int4 == int3);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer1));
      assertTrue(channelBuffer0.equals((Object)channelBuffer1));
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(2004, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(0, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.writerIndex());
      assertFalse(duplicatedChannelBuffer0.readable());
      assertEquals(0, duplicatedChannelBuffer0.readableBytes());
      assertEquals(0, duplicatedChannelBuffer0.readerIndex());
      assertEquals(0, duplicatedChannelBuffer0.capacity());
      assertFalse(duplicatedChannelBuffer0.isDirect());
      assertTrue(duplicatedChannelBuffer0.hasArray());
      assertNull(object1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, channelBuffer1);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder2 = null;
      try {
        lengthFieldBasedFrameDecoder2 = new LengthFieldBasedFrameDecoder(int7, byteArray0[3], byteArray0[3]);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test53()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[15];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(15, byteArray0.length);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(15, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(15, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(15, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertEquals(15, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(15, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(15, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(15, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(15, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(15, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(15, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertEquals(15, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int0 == int3);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(15, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(15, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(15, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.readableBytes());
      assertEquals(15, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(15, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(15, channelBuffer0.capacity());
      assertNull(object0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer1 = null;
  }

  @Test(timeout = 11000)
  public void test54()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 2;
      int int3 = 1;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelState channelState0 = ChannelState.BOUND;
      PipedInputStream pipedInputStream0 = new PipedInputStream();
      assertEquals(0, pipedInputStream0.available());
      assertNotNull(pipedInputStream0);
      
      UpstreamChannelStateEvent upstreamChannelStateEvent0 = new UpstreamChannelStateEvent(channel0, channelState0, pipedInputStream0);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      assertNotNull(upstreamChannelStateEvent0);
      
      lengthFieldBasedFrameDecoder0.channelDisconnected(channelHandlerContext0, upstreamChannelStateEvent0);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int4);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertEquals(0, pipedInputStream0.available());
      assertEquals(ChannelState.BOUND, upstreamChannelStateEvent0.getState());
      
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-82);
      byteArray0[2] = byte2;
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      String string0 = null;
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      DirectChannelBufferFactory directChannelBufferFactory0 = new DirectChannelBufferFactory(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(directChannelBufferFactory0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = new DynamicChannelBuffer(byteOrder0, int2, directChannelBufferFactory0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertNotNull(dynamicChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = dynamicChannelBuffer0.duplicate();
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int4);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, dynamicChannelBuffer0.writerIndex());
      assertFalse(dynamicChannelBuffer0.readable());
      assertEquals(2, dynamicChannelBuffer0.capacity());
      assertFalse(dynamicChannelBuffer0.hasArray());
      assertEquals(0, dynamicChannelBuffer0.readerIndex());
      assertTrue(dynamicChannelBuffer0.isDirect());
      assertEquals(0, dynamicChannelBuffer0.readableBytes());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.hasArray());
      assertNotNull(channelBuffer0);
      
      int int5 = (-2013265919);
      int int6 = 41;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int5, int6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.ByteBufferBackedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test55()  throws Throwable  {
      int int0 = 1;
      int int1 = 0;
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      int int2 = 0;
      int int3 = 683;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int2, int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[1];
      byte byte0 = (byte)6;
      byteArray0[0] = byte0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = new BigEndianHeapChannelBuffer(byteArray0);
      assertEquals(1, byteArray0.length);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer0 = bigEndianHeapChannelBuffer0.slice();
      assertEquals(1, byteArray0.length);
      assertTrue(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(1, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, channel0, channelBuffer0);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(1, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(1, channelBuffer0.capacity());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(1, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNull(object0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer1 = null;
      boolean boolean1 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext1 = null;
      Channel channel1 = mock(Channel.class, new ViolatedAssumptionAnswer());
      ByteOrder byteOrder0 = ByteOrder.BIG_ENDIAN;
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(byteOrder0);
      
      HeapChannelBufferFactory heapChannelBufferFactory0 = new HeapChannelBufferFactory(byteOrder0);
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertNotNull(heapChannelBufferFactory0);
      
      ChannelBuffer channelBuffer2 = heapChannelBufferFactory0.getBuffer(byteOrder0, (int) byteArray0[0]);
      assertEquals(1, byteArray0.length);
      assertFalse(channelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer2.equals((Object)channelBuffer0));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(0, channelBuffer2.readableBytes());
      assertTrue(channelBuffer2.hasArray());
      assertFalse(channelBuffer2.isDirect());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(6, channelBuffer2.capacity());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNotNull(channelBuffer2);
      assertNotSame(channelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer2, channelBuffer0);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, channel1, channelBuffer2);
      assertEquals(1, byteArray0.length);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(channelBuffer2.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer2.equals((Object)channelBuffer0));
      assertEquals("BIG_ENDIAN", byteOrder0.toString());
      assertEquals(0, channelBuffer2.readerIndex());
      assertEquals(0, channelBuffer2.readableBytes());
      assertTrue(channelBuffer2.hasArray());
      assertFalse(channelBuffer2.isDirect());
      assertFalse(channelBuffer2.readable());
      assertEquals(0, channelBuffer2.writerIndex());
      assertEquals(0, channelBuffer2.arrayOffset());
      assertEquals(6, channelBuffer2.capacity());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNull(object1);
      assertNotSame(channelBuffer2, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer2, channelBuffer0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      Channel channel2 = mock(Channel.class, new ViolatedAssumptionAnswer());
      Object object2 = lengthFieldBasedFrameDecoder1.decode(channelHandlerContext1, channel2, bigEndianHeapChannelBuffer0);
      assertEquals(1, byteArray0.length);
      assertFalse(boolean1 == boolean0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer2));
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(1, bigEndianHeapChannelBuffer0.readerIndex());
      assertArrayEquals(new byte[] {(byte)6}, byteArray0);
      assertNull(object2);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer2);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      
      int int4 = 2754;
      int int5 = 125;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder1.extractFrame(bigEndianHeapChannelBuffer0, int4, int5);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test56()  throws Throwable  {
      int int0 = (-803);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      int int1 = 18;
      int int2 = 3;
      int int3 = 46;
      int int4 = (-1189);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int1, int2, int2);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      Channel channel0 = mock(Channel.class, new ViolatedAssumptionAnswer());
      byte[] byteArray0 = new byte[19];
      byte byte0 = (byte) (-14);
      byteArray0[0] = byte0;
      byte byte1 = (byte)48;
      byteArray0[15] = byte1;
      byte byte2 = (byte) (-93);
      byte byte3 = (byte)0;
      byteArray0[3] = byte3;
      byte byte4 = (byte)115;
      byteArray0[4] = byte4;
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer0 = new LittleEndianHeapChannelBuffer(byteArray0);
      assertEquals(19, byteArray0.length);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, littleEndianHeapChannelBuffer0.readerIndex());
      assertEquals(19, littleEndianHeapChannelBuffer0.readableBytes());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.readable());
      assertNotNull(littleEndianHeapChannelBuffer0);
      
      LittleEndianHeapChannelBuffer littleEndianHeapChannelBuffer1 = (LittleEndianHeapChannelBuffer)lengthFieldBasedFrameDecoder0.decodeLast(channelHandlerContext0, channel0, littleEndianHeapChannelBuffer0);
      assertEquals(19, byteArray0.length);
      assertFalse(int1 == int4);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int3);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int0);
      assertEquals(19, littleEndianHeapChannelBuffer0.capacity());
      assertEquals(0, littleEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(littleEndianHeapChannelBuffer0.readable());
      assertFalse(littleEndianHeapChannelBuffer0.isDirect());
      assertEquals(19, littleEndianHeapChannelBuffer0.readerIndex());
      assertTrue(littleEndianHeapChannelBuffer0.hasArray());
      assertEquals(19, littleEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, littleEndianHeapChannelBuffer0.readableBytes());
      assertNull(littleEndianHeapChannelBuffer1);
      
      int int5 = 2004;
      Charset charset0 = Charset.defaultCharset();
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.displayName());
      assertNotNull(charset0);
      
      String string0 = null;
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        charset0.encode(string0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }
}
