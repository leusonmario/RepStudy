/*
 * This file was automatically generated by EvoSuite
 * Thu Dec 09 06:00:37 GMT 2021
 */

package org.jboss.netty.handler.codec.frame;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayInputStream;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.BigEndianHeapChannelBuffer;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.ChannelBufferIndexFinder;
import org.jboss.netty.buffer.DynamicChannelBuffer;
import org.jboss.netty.buffer.LittleEndianHeapChannelBuffer;
import org.jboss.netty.channel.Channel;
import org.jboss.netty.channel.ChannelFuture;
import org.jboss.netty.channel.ChannelHandlerContext;
import org.jboss.netty.channel.ChannelState;
import org.jboss.netty.channel.DownstreamChannelStateEvent;
import org.jboss.netty.channel.UpstreamMessageEvent;
import org.jboss.netty.handler.codec.embedder.EmbeddedChannel;
import org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder;
import org.jboss.netty.handler.codec.frame.SerializedObjectSupporter;
import org.jboss.netty.handler.codec.serialization.ObjectDecoder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class LengthFieldBasedFrameDecoder_ESTest extends LengthFieldBasedFrameDecoder_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      int int0 = (-22);
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int0, int0, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -22
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      int int0 = 2009;
      int int1 = (-2820);
      int int2 = 0;
      boolean boolean0 = true;
      long long0 = (-35L);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      boolean boolean1 = false;
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      int int0 = 1;
      int int1 = 15;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, int1);
      assertNotNull(channelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(15, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(15, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer272();
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertEquals(113, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(113, bigEndianHeapChannelBuffer1.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(113, bigEndianHeapChannelBuffer1.capacity());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer1, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      long long1 = 2584L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      
      ChannelHandlerContext channelHandlerContext0 = null;
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(15, channelBuffer0.capacity());
      assertEquals(15, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object1);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(15, channelBuffer0.capacity());
      assertEquals(15, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isWritable());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer1);
      
      int int3 = 908;
      int int4 = 2147483646;
      // Undeclared exception!
      lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer1, int3, int4);
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 40;
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      long long0 = 2584L;
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel8();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      
      EmbeddedChannel embeddedChannel1 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNull(embeddedChannel1);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      SerializedObjectSupporter serializedObjectSupporter1 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter1);
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter1.deserializeObjectBigEndianHeapChannelBuffer386();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(15, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(15, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(15, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(serializedObjectSupporter1.equals((Object)serializedObjectSupporter0));
      assertNotSame(serializedObjectSupporter1, serializedObjectSupporter0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel1).when(channelHandlerContext1).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, embeddedChannel1, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      int int0 = 1;
      int int1 = (-11);
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int0);
      assertFalse(int0 == int1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer315();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(332, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      
      long long1 = 2584L;
      int int2 = 2793;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(channelBufferIndexFinder0).find(any(org.jboss.netty.buffer.ChannelBuffer.class) , anyInt());
      int int3 = bigEndianHeapChannelBuffer0.bytesBefore(int0, int2, channelBufferIndexFinder0);
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(332, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder21();
      assertNotNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNull(embeddedChannel0);
      
      boolean boolean0 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      int int0 = 2;
      int int1 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int0);
      assertFalse(int0 == int1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int1, int0);
      assertNotNull(channelBuffer0);
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      long long1 = 2584L;
      int int2 = 0;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder156();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(1, embeddedChannel0.getInterestOps());
      
      boolean boolean1 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean1);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(boolean1 == boolean0);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object0);
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.writerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext1).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 63 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      int int0 = 310;
      int int1 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int1, int1);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = null;
      try {
        lengthFieldBasedFrameDecoder1 = new LengthFieldBasedFrameDecoder(int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 310
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      int int0 = 289;
      int int1 = (-14);
      int int2 = 2;
      int int3 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int3, int0, int3, int3, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (8) must be equal to or greater than lengthFieldOffset (289) + lengthFieldLength (8).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      int int0 = 1632;
      int int1 = (-261);
      int int2 = (-480);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -261
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      int int0 = 296;
      int int1 = 3;
      int int2 = 2;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int1, int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      int int0 = 4;
      int int1 = (-243);
      int int2 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // initialBytesToStrip must be a non-negative integer: -243
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test11()  throws Throwable  {
      int int0 = 289;
      int int1 = (-38);
      int int2 = 26;
      int int3 = 4;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int3, int0, int3, int3, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (289) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test12()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      
      long long1 = 2584L;
      boolean boolean0 = false;
      boolean boolean1 = true;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, false, false, false, false).when(channelBufferIndexFinder0).find(any(org.jboss.netty.buffer.ChannelBuffer.class) , anyInt());
      int int3 = bigEndianHeapChannelBuffer0.bytesBefore(int0, int2, channelBufferIndexFinder0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(boolean0 == boolean1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals((-1), int3);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder156();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isBound());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isOpen());
      
      boolean boolean2 = true;
      int int4 = bigEndianHeapChannelBuffer0.readMedium();
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(3, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(60, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int0);
      assertEquals(0, int4);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean2);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(boolean2 == boolean0);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 990213124 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test13()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      
      long long0 = 2584L;
      boolean boolean0 = true;
      boolean boolean1 = true;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      System.setCurrentTimeMillis(long0);
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder156();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      
      boolean boolean2 = true;
      int int3 = bigEndianHeapChannelBuffer0.readMedium();
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(3, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(60, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertEquals(0, int3);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean2);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 990213124 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test14()  throws Throwable  {
      int int0 = 296;
      int int1 = 1;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (296) must be equal to or greater than lengthFieldOffset (296) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test15()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer279();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(167, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(167, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(167, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer402();
      assertNull(dynamicChannelBuffer0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder66();
      assertNotNull(objectDecoder0);
      
      ObjectDecoder objectDecoder1 = (ObjectDecoder)objectDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(objectDecoder1);
      assertSame(objectDecoder0, objectDecoder1);
      assertSame(objectDecoder1, objectDecoder0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer271();
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertEquals(333, bigEndianHeapChannelBuffer1.capacity());
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(333, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(333, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      Channel channel0 = null;
      String string0 = (String)((LengthFieldBasedFrameDecoder)objectDecoder1).decode(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertNotNull(string0);
      assertEquals(167, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(167, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(167, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertSame(objectDecoder0, objectDecoder1);
      assertSame(objectDecoder1, objectDecoder0);
      assertEquals("esosecervmlxuehspakzxdaijehdllvqrhlwgkpyxeebjxbsoohegijuislfdccnfppckfwrnegfrdzfqnxueeihyqhcmoafqgywginazkmsyvqehnfxeqbcmzwlpwawhjkeyibrrsoveigrckvwduloohgsqci", string0);
      
      int int0 = 2612;
      // Undeclared exception!
      try { 
        ((LengthFieldBasedFrameDecoder)objectDecoder1).extractFrame(bigEndianHeapChannelBuffer0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.SlicedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test16()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer279();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(167, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(167, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(167, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer402();
      assertNull(dynamicChannelBuffer0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder66();
      assertNotNull(objectDecoder0);
      
      ObjectDecoder objectDecoder1 = (ObjectDecoder)objectDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(objectDecoder1);
      assertSame(objectDecoder0, objectDecoder1);
      assertSame(objectDecoder1, objectDecoder0);
      
      long long0 = (-743L);
      System.setCurrentTimeMillis(long0);
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer1 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer271();
      assertNotNull(bigEndianHeapChannelBuffer1);
      assertFalse(bigEndianHeapChannelBuffer1.isDirect());
      assertEquals(333, bigEndianHeapChannelBuffer1.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer1.readerIndex());
      assertEquals(333, bigEndianHeapChannelBuffer1.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer1.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer1.readable());
      assertEquals(333, bigEndianHeapChannelBuffer1.capacity());
      assertTrue(bigEndianHeapChannelBuffer1.hasArray());
      assertFalse(bigEndianHeapChannelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer1, bigEndianHeapChannelBuffer0);
      
      Channel channel0 = null;
      String string0 = (String)((LengthFieldBasedFrameDecoder)objectDecoder1).decode(channelHandlerContext0, channel0, bigEndianHeapChannelBuffer0);
      assertNotNull(string0);
      assertEquals(167, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(167, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(167, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)bigEndianHeapChannelBuffer1));
      assertNotSame(bigEndianHeapChannelBuffer0, bigEndianHeapChannelBuffer1);
      assertSame(objectDecoder0, objectDecoder1);
      assertSame(objectDecoder1, objectDecoder0);
      assertEquals("esosecervmlxuehspakzxdaijehdllvqrhlwgkpyxeebjxbsoohegijuislfdccnfppckfwrnegfrdzfqnxueeihyqhcmoafqgywginazkmsyvqehnfxeqbcmzwlpwawhjkeyibrrsoveigrckvwduloohgsqci", string0);
      
      int int0 = 2612;
      // Undeclared exception!
      try { 
        ((LengthFieldBasedFrameDecoder)objectDecoder1).extractFrame(bigEndianHeapChannelBuffer0, int0, int0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.SlicedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test17()  throws Throwable  {
      int int0 = 1;
      int int1 = (-11);
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int0);
      assertFalse(int0 == int1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder6();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer315();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(332, bigEndianHeapChannelBuffer0.readableBytes());
      
      long long1 = 2584L;
      int int2 = 2793;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1, boolean1, boolean0, boolean2).when(channelBufferIndexFinder0).find(any(org.jboss.netty.buffer.ChannelBuffer.class) , anyInt());
      int int3 = bigEndianHeapChannelBuffer0.bytesBefore(int0, int2, channelBufferIndexFinder0);
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(332, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(int3 == int0);
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertEquals(4, int3);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder21();
      assertNotNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNull(embeddedChannel0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean1);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(boolean1 == boolean2);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test18()  throws Throwable  {
      int int0 = 0;
      int int1 = 0;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: 0
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test19()  throws Throwable  {
      int int0 = 1374;
      int int1 = 128;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int1, int0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 128
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test20()  throws Throwable  {
      int int0 = (-1109);
      int int1 = 0;
      int int2 = (-1667);
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength must be a positive integer: -1109
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test21()  throws Throwable  {
      int int0 = 349;
      int int1 = 530;
      int int2 = 1726;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldLength must be either 1, 2, 3, 4, or 8: 1726
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test22()  throws Throwable  {
      int int0 = 121;
      int int1 = (-376);
      int int2 = 187;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int1, int1, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // lengthFieldOffset must be a non-negative integer: -376
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test23()  throws Throwable  {
      int int0 = 1435;
      int int1 = 0;
      int int2 = 3;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Channel channel0 = null;
      ChannelFuture channelFuture0 = null;
      ChannelState channelState0 = ChannelState.BOUND;
      DownstreamChannelStateEvent downstreamChannelStateEvent0 = null;
      try {
        downstreamChannelStateEvent0 = new DownstreamChannelStateEvent(channel0, channelFuture0, channelState0, channelState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // channel
         //
         verifyException("org.jboss.netty.channel.DownstreamChannelStateEvent", e);
      }
  }

  @Test(timeout = 11000)
  public void test24()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer320();
      assertNull(dynamicChannelBuffer0);
      
      DynamicChannelBuffer dynamicChannelBuffer1 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer32();
      assertNotNull(dynamicChannelBuffer1);
      assertEquals(4096, dynamicChannelBuffer1.capacity());
      assertTrue(dynamicChannelBuffer1.readable());
      assertEquals(1316, dynamicChannelBuffer1.readableBytes());
      assertEquals(1801, dynamicChannelBuffer1.readerIndex());
      assertTrue(dynamicChannelBuffer1.hasArray());
      assertFalse(dynamicChannelBuffer1.isDirect());
      assertEquals(3117, dynamicChannelBuffer1.writerIndex());
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder18();
      assertNotNull(objectDecoder0);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder452();
      assertNull(objectDecoder1);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer367();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(214, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(214, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(214, bigEndianHeapChannelBuffer0.writerIndex());
      
      DynamicChannelBuffer dynamicChannelBuffer2 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer374();
      assertNull(dynamicChannelBuffer2);
      
      ObjectDecoder objectDecoder2 = serializedObjectSupporter0.deserializeObjectObjectDecoder494();
      assertNull(objectDecoder2);
      
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = objectDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertSame(objectDecoder0, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, objectDecoder0);
  }

  @Test(timeout = 11000)
  public void test25()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder2();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer51();
      assertNull(dynamicChannelBuffer0);
      
      int int0 = 8064;
      int int1 = (-956);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int0, int1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test26()  throws Throwable  {
      int int0 = 296;
      int int1 = 3;
      int int2 = 2;
      int int3 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (296) must be equal to or greater than lengthFieldOffset (296) + lengthFieldLength (3).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test27()  throws Throwable  {
      int int0 = 296;
      int int1 = 1;
      int int2 = 2;
      int int3 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int0, int1, int2, int3);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (296) must be equal to or greater than lengthFieldOffset (296) + lengthFieldLength (1).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test28()  throws Throwable  {
      int int0 = 530;
      System.setCurrentTimeMillis(int0);
      int int1 = 8;
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder5();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer20();
      assertNotNull(dynamicChannelBuffer0);
      assertTrue(dynamicChannelBuffer0.readable());
      assertEquals(2073, dynamicChannelBuffer0.writerIndex());
      assertEquals(4096, dynamicChannelBuffer0.capacity());
      assertEquals(1152, dynamicChannelBuffer0.readerIndex());
      assertFalse(dynamicChannelBuffer0.isDirect());
      assertEquals(921, dynamicChannelBuffer0.readableBytes());
      assertTrue(dynamicChannelBuffer0.hasArray());
      
      int int2 = 1;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(dynamicChannelBuffer0, int1, int2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // endianness
         //
         verifyException("org.jboss.netty.buffer.ChannelBuffers", e);
      }
  }

  @Test(timeout = 11000)
  public void test29()  throws Throwable  {
      int int0 = 296;
      int int1 = 3;
      int int2 = 2;
      int int3 = 8;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int0, int1, int2, int1, int2);
      assertNotNull(lengthFieldBasedFrameDecoder0);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      
      boolean boolean0 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      
      boolean boolean1 = false;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder2 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean1);
      assertNotNull(lengthFieldBasedFrameDecoder2);
      assertFalse(int0 == int3);
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder2);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder2, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder2, lengthFieldBasedFrameDecoder1);
  }

  @Test(timeout = 11000)
  public void test30()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, int1);
      assertNotNull(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int0);
      assertFalse(int2 == int1);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      long long1 = 2584L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      int int3 = 8;
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(channelBuffer0, int3, int3);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 11000)
  public void test31()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, int1);
      assertNotNull(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      long long1 = 2584L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.writerIndex());
      assertEquals(2, channelBuffer0.readableBytes());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext1).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 63 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test32()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      lengthFieldBasedFrameDecoder0.serializedObjectSupporter = serializedObjectSupporter0;
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer387();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(477, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(477, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(477, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      
      int int3 = (-1);
      // Undeclared exception!
      try { 
        lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int0, int3);
        fail("Expecting exception: NegativeArraySizeException");
      
      } catch(NegativeArraySizeException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.HeapChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test33()  throws Throwable  {
      int int0 = 1;
      int int1 = 15;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, int1);
      assertNotNull(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertEquals(15, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(15, channelBuffer0.capacity());
      assertTrue(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      long long1 = 2584L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(channelBuffer0.readable());
      assertEquals(15, channelBuffer0.readerIndex());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(15, channelBuffer0.capacity());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(0, channelBuffer0.readableBytes());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object1 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, embeddedChannel0, bigEndianHeapChannelBuffer0);
      assertNull(object1);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 11000)
  public void test34()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      long long1 = 2584L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn((Channel) null).when(channelHandlerContext0).getChannel();
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.channel.Channels", e);
      }
  }

  @Test(timeout = 11000)
  public void test35()  throws Throwable  {
      int int0 = 1;
      int int1 = 15;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, int1);
      assertNotNull(channelBuffer0);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(15, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.readerIndex());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(15, channelBuffer0.readableBytes());
      assertTrue(channelBuffer0.readable());
      assertFalse(channelBuffer0.isDirect());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      long long1 = 2584L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object0);
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(15, channelBuffer0.writerIndex());
      assertEquals(15, channelBuffer0.capacity());
      assertFalse(channelBuffer0.readable());
      assertTrue(channelBuffer0.hasArray());
      assertEquals(15, channelBuffer0.readerIndex());
      assertEquals(0, channelBuffer0.readableBytes());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelBuffer channelBuffer1 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, (int) embeddedChannel0.DUMMY_ID);
      assertNotNull(channelBuffer1);
      assertEquals(0, channelBuffer1.readerIndex());
      assertTrue(channelBuffer1.hasArray());
      assertEquals(0, channelBuffer1.capacity());
      assertEquals(0, channelBuffer1.readableBytes());
      assertFalse(channelBuffer1.readable());
      assertEquals(0, channelBuffer1.writerIndex());
      assertFalse(channelBuffer1.isDirect());
      assertEquals(0, channelBuffer1.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertTrue(embeddedChannel0.isConnected());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertFalse(channelBuffer1.equals((Object)bigEndianHeapChannelBuffer0));
      assertTrue(channelBuffer1.equals((Object)channelBuffer0));
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertNotSame(channelBuffer1, bigEndianHeapChannelBuffer0);
      assertNotSame(channelBuffer1, channelBuffer0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
  }

  @Test(timeout = 11000)
  public void test36()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      
      ChannelBuffer channelBuffer0 = lengthFieldBasedFrameDecoder0.extractFrame(bigEndianHeapChannelBuffer0, int2, int1);
      assertNotNull(channelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      boolean boolean0 = false;
      boolean boolean1 = false;
      long long1 = 2584L;
      int int3 = 0;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      int int4 = bigEndianHeapChannelBuffer0.bytesBefore(int0, int3, channelBufferIndexFinder0);
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertFalse(int0 == int3);
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(int3 == int2);
      assertFalse(int3 == int1);
      assertFalse(int3 == int0);
      assertFalse(int4 == int2);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int0);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertEquals((-1), int4);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder156();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      
      boolean boolean2 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean2);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, channelBuffer0);
      assertNull(object0);
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertTrue(embeddedChannel0.isOpen());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(channelBuffer0.readable());
      assertEquals(2, channelBuffer0.capacity());
      assertEquals(0, channelBuffer0.arrayOffset());
      assertEquals(2, channelBuffer0.readableBytes());
      assertEquals(0, channelBuffer0.readerIndex());
      assertEquals(2, channelBuffer0.writerIndex());
      assertFalse(channelBuffer0.isDirect());
      assertTrue(channelBuffer0.hasArray());
      assertFalse(int1 == int2);
      assertFalse(int1 == int3);
      assertFalse(int1 == int0);
      assertFalse(int1 == int4);
      assertFalse(int2 == int1);
      assertFalse(int2 == int4);
      assertFalse(int2 == int3);
      assertFalse(int2 == int0);
      assertFalse(bigEndianHeapChannelBuffer0.equals((Object)channelBuffer0));
      assertFalse(channelBuffer0.equals((Object)bigEndianHeapChannelBuffer0));
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      assertNotSame(bigEndianHeapChannelBuffer0, channelBuffer0);
      assertNotSame(channelBuffer0, bigEndianHeapChannelBuffer0);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext1).getChannel();
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext1, embeddedChannel0, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 63 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test37()  throws Throwable  {
      int int0 = 289;
      int int1 = (-38);
      int int2 = 2;
      int int3 = 4;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = null;
      try {
        lengthFieldBasedFrameDecoder0 = new LengthFieldBasedFrameDecoder(int3, int0, int3, int3, int2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // maxFrameLength (4) must be equal to or greater than lengthFieldOffset (289) + lengthFieldLength (4).
         //
         verifyException("org.jboss.netty.handler.codec.frame.LengthFieldBasedFrameDecoder", e);
      }
  }

  @Test(timeout = 11000)
  public void test38()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int2);
      assertFalse(int1 == int0);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer425();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      
      long long1 = 2584L;
      int int3 = 0;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      int int4 = bigEndianHeapChannelBuffer0.bytesBefore(int0, int3, channelBufferIndexFinder0);
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(63, bigEndianHeapChannelBuffer0.readableBytes());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(int0 == int1);
      assertFalse(int0 == int2);
      assertFalse(int0 == int3);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int4 == int0);
      assertFalse(int4 == int3);
      assertFalse(int4 == int1);
      assertFalse(int4 == int2);
      assertEquals((-1), int4);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isReadable());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isBound());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(1, embeddedChannel0.getInterestOps());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      doReturn(embeddedChannel0).when(channelHandlerContext0).getChannel();
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder156();
      assertNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel1 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNotNull(embeddedChannel1);
      assertEquals(0, (int)embeddedChannel1.getDUMMY_ID());
      assertTrue(embeddedChannel1.isReadable());
      assertTrue(embeddedChannel1.isWritable());
      assertTrue(embeddedChannel1.isBound());
      assertTrue(embeddedChannel1.isConnected());
      assertTrue(embeddedChannel1.isOpen());
      assertEquals(1, embeddedChannel1.getInterestOps());
      assertEquals(0, (int)embeddedChannel1.getId());
      assertFalse(embeddedChannel1.equals((Object)embeddedChannel0));
      assertNotSame(embeddedChannel1, embeddedChannel0);
      
      boolean boolean0 = true;
      int int5 = bigEndianHeapChannelBuffer0.readMedium();
      assertEquals(60, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(63, bigEndianHeapChannelBuffer0.writerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(3, bigEndianHeapChannelBuffer0.readerIndex());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(63, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertFalse(int5 == int1);
      assertFalse(int5 == int2);
      assertFalse(int5 == int0);
      assertFalse(int5 == int4);
      assertTrue(int5 == int3);
      assertEquals(0, int5);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      try { 
        lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel1, bigEndianHeapChannelBuffer0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // org.evosuite.runtime.mock.java.lang.MockThrowable: Adjusted frame length exceeds 5: 990213124 - discarded
         //
         verifyException("org.jboss.netty.handler.codec.embedder.AbstractCodecEmbedder$EmbeddedChannelSink", e);
      }
  }

  @Test(timeout = 11000)
  public void test39()  throws Throwable  {
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder753();
      assertNotNull(objectDecoder0);
      
      ObjectDecoder objectDecoder1 = serializedObjectSupporter0.deserializeObjectObjectDecoder568();
      assertNull(objectDecoder1);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer418();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(416, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(416, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertEquals(416, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      
      DynamicChannelBuffer dynamicChannelBuffer0 = serializedObjectSupporter0.deserializeObjectDynamicChannelBuffer89();
      assertNull(dynamicChannelBuffer0);
      
      boolean boolean0 = false;
      ObjectDecoder objectDecoder2 = (ObjectDecoder)objectDecoder0.setFailImmediatelyOnTooLongFrame(boolean0);
      assertNotNull(objectDecoder2);
      assertSame(objectDecoder0, objectDecoder2);
      assertSame(objectDecoder2, objectDecoder0);
      
      long long0 = (-755L);
      System.setCurrentTimeMillis(long0);
      int int0 = 8;
      int int1 = 770;
      // Undeclared exception!
      try { 
        ((LengthFieldBasedFrameDecoder)objectDecoder2).extractFrame(bigEndianHeapChannelBuffer0, int0, int1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jboss.netty.buffer.SlicedChannelBuffer", e);
      }
  }

  @Test(timeout = 11000)
  public void test40()  throws Throwable  {
      int int0 = 1;
      int int1 = 2;
      int int2 = 8;
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      System.setCurrentTimeMillis(int1);
      assertFalse(int1 == int0);
      assertFalse(int1 == int2);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder1();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      boolean boolean0 = true;
      boolean boolean1 = false;
      long long0 = 2584L;
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel2();
      assertNotNull(embeddedChannel0);
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertEquals(0, (int)embeddedChannel0.getId());
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      EmbeddedChannel embeddedChannel1 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNull(embeddedChannel1);
      
      ChannelHandlerContext channelHandlerContext1 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer13();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(1024, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(1024, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(1024, bigEndianHeapChannelBuffer0.readableBytes());
      
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel1, bigEndianHeapChannelBuffer0);
      assertNull(object0);
      assertTrue(embeddedChannel0.isBound());
      assertTrue(embeddedChannel0.isConnected());
      assertTrue(embeddedChannel0.isOpen());
      assertTrue(embeddedChannel0.isWritable());
      assertTrue(embeddedChannel0.isReadable());
      assertEquals(0, (int)embeddedChannel0.getDUMMY_ID());
      assertEquals(1, embeddedChannel0.getInterestOps());
      assertEquals(0, (int)embeddedChannel0.getId());
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(1024, bigEndianHeapChannelBuffer0.readerIndex());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(1024, bigEndianHeapChannelBuffer0.capacity());
      assertFalse(bigEndianHeapChannelBuffer0.readable());
      assertEquals(1024, bigEndianHeapChannelBuffer0.writerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(0, bigEndianHeapChannelBuffer0.readableBytes());
      
      long long1 = (-795L);
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
  }

  @Test(timeout = 11000)
  public void test41()  throws Throwable  {
      int int0 = 1;
      int int1 = (-11);
      long long0 = (-2969L);
      System.setCurrentTimeMillis(long0);
      System.setCurrentTimeMillis(int0);
      assertFalse(int0 == int1);
      
      SerializedObjectSupporter serializedObjectSupporter0 = new SerializedObjectSupporter();
      assertNotNull(serializedObjectSupporter0);
      
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder0 = serializedObjectSupporter0.deserializeObjectLengthFieldBasedFrameDecoder6();
      assertNotNull(lengthFieldBasedFrameDecoder0);
      
      BigEndianHeapChannelBuffer bigEndianHeapChannelBuffer0 = serializedObjectSupporter0.deserializeObjectBigEndianHeapChannelBuffer315();
      assertNotNull(bigEndianHeapChannelBuffer0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(332, bigEndianHeapChannelBuffer0.readableBytes());
      
      long long1 = 2584L;
      int int2 = 2793;
      boolean boolean0 = false;
      boolean boolean1 = false;
      boolean boolean2 = true;
      ChannelBufferIndexFinder channelBufferIndexFinder0 = mock(ChannelBufferIndexFinder.class, new ViolatedAssumptionAnswer());
      doReturn(boolean0, boolean1, boolean1, boolean0, boolean2).when(channelBufferIndexFinder0).find(any(org.jboss.netty.buffer.ChannelBuffer.class) , anyInt());
      int int3 = bigEndianHeapChannelBuffer0.bytesBefore(int0, int2, channelBufferIndexFinder0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertEquals(0, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertEquals(332, bigEndianHeapChannelBuffer0.readableBytes());
      assertFalse(int0 == int2);
      assertFalse(int0 == int1);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(boolean0 == boolean2);
      assertFalse(boolean1 == boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(int3 == int0);
      assertEquals(4, int3);
      
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      ObjectDecoder objectDecoder0 = serializedObjectSupporter0.deserializeObjectObjectDecoder21();
      assertNotNull(objectDecoder0);
      
      EmbeddedChannel embeddedChannel0 = serializedObjectSupporter0.deserializeObjectEmbeddedChannel3();
      assertNull(embeddedChannel0);
      
      boolean boolean3 = true;
      LengthFieldBasedFrameDecoder lengthFieldBasedFrameDecoder1 = lengthFieldBasedFrameDecoder0.setFailImmediatelyOnTooLongFrame(boolean3);
      assertNotNull(lengthFieldBasedFrameDecoder1);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertSame(lengthFieldBasedFrameDecoder1, lengthFieldBasedFrameDecoder0);
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
      
      ChannelHandlerContext channelHandlerContext0 = mock(ChannelHandlerContext.class, new ViolatedAssumptionAnswer());
      Object object0 = lengthFieldBasedFrameDecoder0.decode(channelHandlerContext0, embeddedChannel0, bigEndianHeapChannelBuffer0);
      assertNull(object0);
      assertEquals(0, bigEndianHeapChannelBuffer0.arrayOffset());
      assertEquals(330, bigEndianHeapChannelBuffer0.readableBytes());
      assertEquals(332, bigEndianHeapChannelBuffer0.capacity());
      assertTrue(bigEndianHeapChannelBuffer0.hasArray());
      assertEquals(2, bigEndianHeapChannelBuffer0.readerIndex());
      assertTrue(bigEndianHeapChannelBuffer0.readable());
      assertFalse(bigEndianHeapChannelBuffer0.isDirect());
      assertEquals(332, bigEndianHeapChannelBuffer0.writerIndex());
      assertSame(lengthFieldBasedFrameDecoder0, lengthFieldBasedFrameDecoder1);
  }
}
