/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 10:52:48 GMT 2021
 */

package org.elasticsearch.action.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.Map;
import org.apache.lucene.analysis.hunspell.Dictionary;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.index.TransportIndexAction;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.cluster.action.index.MappingUpdatedAction;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.shard.IndexShard;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportIndexAction_ESTest extends TransportIndexAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      IndexRequest indexRequest0 = null;
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.executeIndexRequestOnReplica(indexRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      IndexRequest indexRequest0 = new IndexRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals((-3L), indexRequest0.version());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.type());
      assertNotNull(indexRequest0);
      
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest0, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      String string0 = "";
      IndexRequest indexRequest0 = new IndexRequest(string0, string0);
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("", indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNotNull(indexRequest0);
      
      String string1 = "";
      IndexRequest indexRequest1 = indexRequest0.id(string1);
      assertSame(string0, string1);
      assertSame(indexRequest0, indexRequest1);
      assertSame(string1, string0);
      assertSame(indexRequest1, indexRequest0);
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("", indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("", indexRequest1.type());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals("", indexRequest1.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.index());
      assertNotNull(indexRequest1);
      
      byte[] byteArray0 = new byte[0];
      IndexRequest indexRequest2 = indexRequest1.source(byteArray0);
      assertSame(string0, string1);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("", indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("", indexRequest1.type());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals("", indexRequest1.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.index());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals("", indexRequest2.index());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.parent());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals((-3L), indexRequest2.version());
      assertEquals("", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNotNull(indexRequest2);
      assertEquals(0, byteArray0.length);
      
      String string2 = "XWpTS>#";
      IndexRequest indexRequest3 = indexRequest2.source(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertNotSame(string1, string2);
      assertSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest2);
      assertArrayEquals(new byte[] {}, byteArray0);
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("", indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("", indexRequest0.type());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("", indexRequest1.type());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals("", indexRequest1.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.routing());
      assertEquals("", indexRequest1.index());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals("", indexRequest2.index());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.parent());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals((-3L), indexRequest2.version());
      assertEquals("", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertNull(indexRequest3.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.routing());
      assertEquals("", indexRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals((-3L), indexRequest3.version());
      assertEquals("", indexRequest3.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals("", indexRequest3.id());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.getPipeline());
      assertNotNull(indexRequest3);
      assertEquals(0, byteArray0.length);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.executeIndexRequestOnReplica(indexRequest2, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      IndexRequest indexRequest0 = null;
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      IndexRequest indexRequest0 = new IndexRequest();
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNotNull(indexRequest0);
      
      long long0 = (-1310L);
      IndexRequest indexRequest1 = indexRequest0.ttl(long0);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.getPipeline());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.id());
      assertNotNull(indexRequest1);
      
      String string0 = "W2/bDhS ";
      IndexRequest indexRequest2 = indexRequest1.setPipeline(string0);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("W2/bDhS ", indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals("W2/bDhS ", indexRequest1.getPipeline());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.timestamp());
      assertEquals("W2/bDhS ", indexRequest2.getPipeline());
      assertEquals((-3L), indexRequest2.version());
      assertNull(indexRequest2.type());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertNull(indexRequest2.parent());
      assertNull(indexRequest2.index());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNotNull(indexRequest2);
      
      VersionType versionType0 = VersionType.EXTERNAL;
      HashMap<IndexResponse, IndexRequest> hashMap0 = new HashMap<IndexResponse, IndexRequest>();
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertNotNull(hashMap0);
      
      XContentType xContentType0 = XContentType.YAML;
      IndexRequest indexRequest3 = indexRequest1.source((Map) hashMap0, xContentType0);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("W2/bDhS ", indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals("W2/bDhS ", indexRequest1.getPipeline());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.id());
      assertEquals(0, hashMap0.size());
      assertTrue(hashMap0.isEmpty());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.index());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertEquals("W2/bDhS ", indexRequest3.getPipeline());
      assertNull(indexRequest3.routing());
      assertEquals((-3L), indexRequest3.version());
      assertNull(indexRequest3.type());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertNull(indexRequest3.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.parent());
      assertNull(indexRequest3.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertNotNull(indexRequest3);
      
      IndexRequest indexRequest4 = indexRequest2.versionType(versionType0);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest4);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest1);
      assertSame(indexRequest4, indexRequest3);
      assertSame(indexRequest4, indexRequest2);
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("W2/bDhS ", indexRequest0.getPipeline());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL, indexRequest0.versionType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals("W2/bDhS ", indexRequest1.getPipeline());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.timestamp());
      assertEquals(VersionType.EXTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.timestamp());
      assertEquals("W2/bDhS ", indexRequest2.getPipeline());
      assertEquals((-3L), indexRequest2.version());
      assertNull(indexRequest2.type());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertNull(indexRequest2.parent());
      assertNull(indexRequest2.index());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(VersionType.EXTERNAL, indexRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertNull(indexRequest4.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest4.opType());
      assertNull(indexRequest4.timestamp());
      assertNull(indexRequest4.parent());
      assertEquals("W2/bDhS ", indexRequest4.getPipeline());
      assertEquals((-3L), indexRequest4.version());
      assertNull(indexRequest4.type());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.index());
      assertEquals(VersionType.EXTERNAL, indexRequest4.versionType());
      assertNull(indexRequest4.routing());
      assertEquals(XContentType.JSON, indexRequest4.getContentType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest4.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertNotNull(indexRequest4);
      
      Hashtable<Object, Dictionary> hashtable0 = new Hashtable<Object, Dictionary>();
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertNotNull(hashtable0);
      
      XContentType xContentType1 = XContentType.JSON;
      IndexRequest indexRequest5 = indexRequest4.source((Map) hashtable0, xContentType1);
      assertFalse(xContentType1.equals((Object)xContentType0));
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest5);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest1, indexRequest5);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest5);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest4);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest5);
      assertSame(indexRequest4, indexRequest1);
      assertSame(indexRequest4, indexRequest3);
      assertSame(indexRequest4, indexRequest2);
      assertSame(indexRequest5, indexRequest3);
      assertSame(indexRequest5, indexRequest1);
      assertSame(indexRequest5, indexRequest0);
      assertSame(indexRequest5, indexRequest2);
      assertSame(indexRequest5, indexRequest4);
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.type());
      assertEquals("W2/bDhS ", indexRequest0.getPipeline());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(VersionType.EXTERNAL, indexRequest0.versionType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals("W2/bDhS ", indexRequest1.getPipeline());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.timestamp());
      assertEquals(VersionType.EXTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.timestamp());
      assertEquals("W2/bDhS ", indexRequest2.getPipeline());
      assertEquals((-3L), indexRequest2.version());
      assertNull(indexRequest2.type());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertNull(indexRequest2.parent());
      assertNull(indexRequest2.index());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(VersionType.EXTERNAL, indexRequest2.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertNull(indexRequest4.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest4.opType());
      assertNull(indexRequest4.timestamp());
      assertNull(indexRequest4.parent());
      assertEquals("W2/bDhS ", indexRequest4.getPipeline());
      assertEquals((-3L), indexRequest4.version());
      assertNull(indexRequest4.type());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.index());
      assertEquals(VersionType.EXTERNAL, indexRequest4.versionType());
      assertNull(indexRequest4.routing());
      assertEquals(XContentType.JSON, indexRequest4.getContentType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest4.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertEquals(0, hashtable0.size());
      assertTrue(hashtable0.isEmpty());
      assertEquals(VersionType.EXTERNAL, indexRequest5.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest5.consistencyLevel());
      assertEquals("W2/bDhS ", indexRequest5.getPipeline());
      assertEquals((-3L), indexRequest5.version());
      assertFalse(indexRequest5.getShouldPersistResult());
      assertNull(indexRequest5.type());
      assertNull(indexRequest5.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest5.opType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest5.getRefreshPolicy());
      assertEquals(0L, indexRequest5.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest5.getContentType());
      assertNull(indexRequest5.parent());
      assertNull(indexRequest5.timestamp());
      assertNull(indexRequest5.routing());
      assertNull(indexRequest5.index());
      assertNotNull(indexRequest5);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest5, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      String string0 = "";
      String string1 = "org.elasticsearch.tasks.LoggingTaskListener";
      IndexRequest indexRequest0 = new IndexRequest(string0, string1, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNull(indexRequest0.getPipeline());
      assertEquals("", indexRequest0.index());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.type());
      assertNotNull(indexRequest0);
      
      byte[] byteArray0 = new byte[3];
      byte byte0 = (byte)2;
      byteArray0[0] = byte0;
      byte byte1 = (byte) (-1);
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-3);
      byteArray0[2] = byte2;
      int int0 = 0;
      IndexRequest indexRequest1 = indexRequest0.source(byteArray0, (int) byte1, int0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-3)}, byteArray0);
      assertNull(indexRequest0.getPipeline());
      assertEquals("", indexRequest0.index());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.id());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.parent());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNotNull(indexRequest1);
      assertEquals(3, byteArray0.length);
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      IndexRequest indexRequest2 = indexRequest1.versionType(versionType0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-3)}, byteArray0);
      assertNull(indexRequest0.getPipeline());
      assertEquals("", indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.id());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.parent());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals("", indexRequest2.index());
      assertEquals((-3L), indexRequest2.version());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest2.id());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.timestamp());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.parent());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest2.versionType());
      assertNull(indexRequest2.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertNotNull(indexRequest2);
      assertEquals(3, byteArray0.length);
      
      String string2 = "transport.netty.reuse_address";
      IndexRequest indexRequest3 = indexRequest2.source(string2);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string2));
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string2);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest1);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-3)}, byteArray0);
      assertNull(indexRequest0.getPipeline());
      assertEquals("", indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.id());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.parent());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals("", indexRequest2.index());
      assertEquals((-3L), indexRequest2.version());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest2.id());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.timestamp());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.parent());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest2.versionType());
      assertNull(indexRequest2.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest3.id());
      assertNull(indexRequest3.routing());
      assertEquals((-3L), indexRequest3.version());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest3.versionType());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest3.type());
      assertNull(indexRequest3.parent());
      assertNull(indexRequest3.timestamp());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertNotNull(indexRequest3);
      assertEquals(3, byteArray0.length);
      
      String string3 = "";
      IndexRequest indexRequest4 = indexRequest3.id(string3);
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(byte1 == byte0);
      assertFalse(byte1 == byte2);
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertSame(string3, string0);
      assertNotSame(string3, string1);
      assertNotSame(string3, string2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string1);
      assertSame(string0, string3);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest2);
      assertSame(indexRequest4, indexRequest3);
      assertSame(indexRequest4, indexRequest1);
      assertNotSame(string1, string0);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest4);
      assertSame(indexRequest2, indexRequest1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest4);
      assertSame(indexRequest3, indexRequest1);
      assertArrayEquals(new byte[] {(byte)2, (byte) (-1), (byte) (-3)}, byteArray0);
      assertEquals(XContentType.JSON, indexRequest4.getContentType());
      assertNull(indexRequest4.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertNull(indexRequest4.routing());
      assertEquals((-3L), indexRequest4.version());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.getPipeline());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest4.consistencyLevel());
      assertEquals("", indexRequest4.index());
      assertNull(indexRequest4.parent());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest4.versionType());
      assertEquals("", indexRequest4.id());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest4.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest4.opType());
      assertNull(indexRequest0.getPipeline());
      assertEquals("", indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.timestamp());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest0.type());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals("", indexRequest1.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.parent());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals("", indexRequest2.index());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.timestamp());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.parent());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest2.versionType());
      assertNull(indexRequest2.getPipeline());
      assertEquals("", indexRequest2.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertNull(indexRequest3.routing());
      assertEquals((-3L), indexRequest3.version());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest3.versionType());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals("org.elasticsearch.tasks.LoggingTaskListener", indexRequest3.type());
      assertNull(indexRequest3.parent());
      assertNull(indexRequest3.timestamp());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.getPipeline());
      assertEquals("", indexRequest3.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertNotNull(indexRequest4);
      assertEquals(3, byteArray0.length);
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest4, indexShard0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 11000)
  public void test6()  throws Throwable  {
      IndexRequest indexRequest0 = null;
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest0, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test7()  throws Throwable  {
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      String string0 = "lY}%ko%37*1pcZ";
      String string1 = "ind|a";
      IndexRequest indexRequest0 = new IndexRequest(string0, string1);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals("ind|a", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNotNull(indexRequest0);
      
      byte[] byteArray0 = new byte[5];
      long long0 = 5341L;
      indexRequest0.primaryTerm(long0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("ind|a", indexRequest0.type());
      assertNull(indexRequest0.id());
      assertEquals(5341L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      
      byte byte0 = (byte)1;
      byteArray0[0] = byte0;
      IndexRequest indexRequest1 = indexRequest0.id(string0);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("ind|a", indexRequest0.type());
      assertEquals(5341L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals("lY}%ko%37*1pcZ", indexRequest1.index());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.parent());
      assertEquals("ind|a", indexRequest1.type());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.getPipeline());
      assertEquals("lY}%ko%37*1pcZ", indexRequest1.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(5341L, indexRequest1.primaryTerm());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNotNull(indexRequest1);
      
      byte byte1 = (byte)115;
      byteArray0[1] = byte1;
      byte byte2 = (byte) (-27);
      byteArray0[2] = byte2;
      byte byte3 = (byte) (-35);
      String[] stringArray0 = indexRequest0.indices();
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(indexRequest0, indexRequest1);
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("ind|a", indexRequest0.type());
      assertEquals(5341L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNotNull(stringArray0);
      assertEquals(1, stringArray0.length);
      
      byteArray0[3] = byte3;
      byte byte4 = (byte)0;
      byteArray0[4] = byte4;
      int int0 = 744;
      IndexRequest indexRequest2 = indexRequest0.source(byteArray0, int0, (int) byteArray0[0]);
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      assertNotSame(string0, string1);
      assertNotSame(string1, string0);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertArrayEquals(new byte[] {(byte)1, (byte)115, (byte) (-27), (byte) (-35), (byte)0}, byteArray0);
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("ind|a", indexRequest0.type());
      assertEquals(5341L, indexRequest0.primaryTerm());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.parent());
      assertEquals("lY}%ko%37*1pcZ", indexRequest0.id());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals((-3L), indexRequest2.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals("lY}%ko%37*1pcZ", indexRequest2.index());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals("ind|a", indexRequest2.type());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertEquals(5341L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.parent());
      assertEquals("lY}%ko%37*1pcZ", indexRequest2.id());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertNull(indexRequest2.routing());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNotNull(indexRequest2);
      assertEquals(5, byteArray0.length);
      
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest0, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }
}
