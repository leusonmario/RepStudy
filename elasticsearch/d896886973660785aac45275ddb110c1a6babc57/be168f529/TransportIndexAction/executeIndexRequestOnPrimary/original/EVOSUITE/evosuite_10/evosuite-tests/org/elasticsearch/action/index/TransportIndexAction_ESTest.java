/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 09:55:25 GMT 2021
 */

package org.elasticsearch.action.index;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.nio.ByteOrder;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import java.util.concurrent.Callable;
import java.util.concurrent.ScheduledFuture;
import java.util.concurrent.ScheduledThreadPoolExecutor;
import java.util.concurrent.TimeUnit;
import org.apache.lucene.analysis.hunspell.Dictionary;
import org.apache.lucene.util.NamedThreadFactory;
import org.elasticsearch.action.WriteConsistencyLevel;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.index.IndexResponse;
import org.elasticsearch.action.index.TransportIndexAction;
import org.elasticsearch.action.support.WriteRequest;
import org.elasticsearch.action.support.replication.TransportWriteAction;
import org.elasticsearch.cluster.action.index.MappingUpdatedAction;
import org.elasticsearch.cluster.routing.allocation.FailedRerouteAllocation;
import org.elasticsearch.common.bytes.BytesReference;
import org.elasticsearch.common.bytes.ChannelBufferBytesReference;
import org.elasticsearch.common.xcontent.XContentType;
import org.elasticsearch.index.VersionType;
import org.elasticsearch.index.engine.Engine;
import org.elasticsearch.index.shard.IndexShard;
import org.elasticsearch.search.rescore.QueryRescorerBuilder;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.Random;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jboss.netty.buffer.ChannelBuffer;
import org.jboss.netty.buffer.CompositeChannelBuffer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportIndexAction_ESTest extends TransportIndexAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test00()  throws Throwable  {
      IndexRequest indexRequest0 = new IndexRequest();
      assertNotNull(indexRequest0);
      assertNull(indexRequest0.id());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertNull(indexRequest0.getPipeline());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.routing());
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.executeIndexRequestOnReplica(indexRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test01()  throws Throwable  {
      IndexRequest indexRequest0 = new IndexRequest();
      assertNotNull(indexRequest0);
      assertNull(indexRequest0.id());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.routing());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest0, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test02()  throws Throwable  {
      IndexRequest indexRequest0 = null;
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test03()  throws Throwable  {
      String string0 = null;
      String string1 = "";
      IndexRequest indexRequest0 = new IndexRequest(string0, string1);
      assertNotNull(indexRequest0);
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.routing());
      
      String string2 = "o$2BM.B('X";
      IndexRequest indexRequest1 = indexRequest0.timestamp(string2);
      assertNotNull(indexRequest1);
      assertNotSame(string1, string2);
      assertSame(indexRequest0, indexRequest1);
      assertNotSame(string2, string1);
      assertSame(indexRequest1, indexRequest0);
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("o$2BM.B('X", indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.id());
      assertEquals("o$2BM.B('X", indexRequest1.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals("", indexRequest1.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      
      Map<QueryRescorerBuilder, Dictionary> map0 = null;
      XContentType xContentType0 = XContentType.YAML;
      IndexRequest indexRequest2 = indexRequest1.source(map0, xContentType0);
      assertNotNull(indexRequest2);
      assertNotSame(string1, string2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertNotSame(string2, string1);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertNull(indexRequest0.getPipeline());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("o$2BM.B('X", indexRequest0.timestamp());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest1.id());
      assertEquals("o$2BM.B('X", indexRequest1.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals("", indexRequest1.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals((-3L), indexRequest1.version());
      assertNull(indexRequest1.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest2.id());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals("", indexRequest2.type());
      assertEquals((-3L), indexRequest2.version());
      assertEquals("o$2BM.B('X", indexRequest2.timestamp());
      assertNull(indexRequest2.routing());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.parent());
      assertNull(indexRequest2.index());
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string1));
      
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest2, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test04()  throws Throwable  {
      IndexRequest indexRequest0 = null;
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest0, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test05()  throws Throwable  {
      String string0 = "";
      IndexRequest indexRequest0 = new IndexRequest(string0, string0);
      assertNotNull(indexRequest0);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertNull(indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("", indexRequest0.index());
      
      String string1 = " ";
      IndexRequest indexRequest1 = indexRequest0.id(string1);
      assertNotNull(indexRequest1);
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest1);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest0);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(" ", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("", indexRequest0.index());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.timestamp());
      assertEquals(" ", indexRequest1.id());
      assertEquals("", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexRequest.OpType indexRequest_OpType0 = IndexRequest.OpType.INDEX;
      IndexRequest indexRequest2 = indexRequest1.opType(indexRequest_OpType0);
      assertNotNull(indexRequest2);
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(" ", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.parent());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("", indexRequest0.index());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.timestamp());
      assertEquals(" ", indexRequest1.id());
      assertEquals("", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals("", indexRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.getPipeline());
      assertEquals(" ", indexRequest2.id());
      assertNull(indexRequest2.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertNull(indexRequest2.parent());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      VersionType versionType0 = VersionType.EXTERNAL_GTE;
      IndexRequest indexRequest3 = indexRequest2.versionType(versionType0);
      assertNotNull(indexRequest3);
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest3);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(" ", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("", indexRequest0.index());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.timestamp());
      assertEquals(" ", indexRequest1.id());
      assertEquals("", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("", indexRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals("", indexRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.getPipeline());
      assertEquals(" ", indexRequest2.id());
      assertNull(indexRequest2.timestamp());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest2.versionType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertNull(indexRequest2.parent());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest3.versionType());
      assertNull(indexRequest3.routing());
      assertNull(indexRequest3.getPipeline());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals((-3L), indexRequest3.version());
      assertEquals("", indexRequest3.type());
      assertEquals(" ", indexRequest3.id());
      assertNull(indexRequest3.timestamp());
      assertNull(indexRequest3.parent());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexRequest indexRequest4 = indexRequest1.index(string1);
      assertNotNull(indexRequest4);
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest0, indexRequest3);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest4, indexRequest3);
      assertSame(indexRequest4, indexRequest1);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest2);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(" ", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.parent());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(" ", indexRequest0.index());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertNull(indexRequest1.parent());
      assertNull(indexRequest1.timestamp());
      assertEquals(" ", indexRequest1.id());
      assertEquals("", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(" ", indexRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest4.routing());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest4.opType());
      assertEquals("", indexRequest4.type());
      assertEquals((-3L), indexRequest4.version());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.getPipeline());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest4.getContentType());
      assertNull(indexRequest4.parent());
      assertEquals(" ", indexRequest4.id());
      assertNull(indexRequest4.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest4.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest4.consistencyLevel());
      assertEquals(" ", indexRequest4.index());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexRequest indexRequest5 = indexRequest2.parent(string1);
      assertNotNull(indexRequest5);
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest5);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest5);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest2, indexRequest4);
      assertSame(indexRequest2, indexRequest5);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest5, indexRequest1);
      assertSame(indexRequest5, indexRequest3);
      assertSame(indexRequest5, indexRequest4);
      assertSame(indexRequest5, indexRequest0);
      assertSame(indexRequest5, indexRequest2);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(" ", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(" ", indexRequest0.parent());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(" ", indexRequest0.index());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(" ", indexRequest1.parent());
      assertNull(indexRequest1.timestamp());
      assertEquals(" ", indexRequest1.id());
      assertEquals("", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(" ", indexRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals(" ", indexRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.getPipeline());
      assertEquals(" ", indexRequest2.id());
      assertNull(indexRequest2.timestamp());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest2.versionType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(" ", indexRequest2.parent());
      assertEquals("", indexRequest5.type());
      assertFalse(indexRequest5.getShouldPersistResult());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest5.opType());
      assertEquals((-3L), indexRequest5.version());
      assertNull(indexRequest5.timestamp());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest5.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest5.getRefreshPolicy());
      assertEquals(" ", indexRequest5.index());
      assertNull(indexRequest5.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest5.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest5.getContentType());
      assertEquals(" ", indexRequest5.id());
      assertEquals(" ", indexRequest5.parent());
      assertEquals(0L, indexRequest5.primaryTerm());
      assertNull(indexRequest5.getPipeline());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexRequest indexRequest6 = indexRequest5.source(string1);
      assertNotNull(indexRequest6);
      assertNotSame(string0, string1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest6);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest5);
      assertNotSame(string1, string0);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest5);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest1, indexRequest6);
      assertSame(indexRequest2, indexRequest4);
      assertSame(indexRequest2, indexRequest5);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest2, indexRequest6);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest5, indexRequest1);
      assertSame(indexRequest5, indexRequest6);
      assertSame(indexRequest5, indexRequest3);
      assertSame(indexRequest5, indexRequest4);
      assertSame(indexRequest5, indexRequest0);
      assertSame(indexRequest5, indexRequest2);
      assertSame(indexRequest6, indexRequest5);
      assertSame(indexRequest6, indexRequest4);
      assertSame(indexRequest6, indexRequest1);
      assertSame(indexRequest6, indexRequest2);
      assertSame(indexRequest6, indexRequest0);
      assertSame(indexRequest6, indexRequest3);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals(" ", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals(" ", indexRequest0.parent());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest0.versionType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(" ", indexRequest0.index());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(" ", indexRequest1.parent());
      assertNull(indexRequest1.timestamp());
      assertEquals(" ", indexRequest1.id());
      assertEquals("", indexRequest1.type());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(" ", indexRequest1.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest1.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals((-3L), indexRequest2.version());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals("", indexRequest2.type());
      assertEquals(" ", indexRequest2.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.routing());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertNull(indexRequest2.getPipeline());
      assertEquals(" ", indexRequest2.id());
      assertNull(indexRequest2.timestamp());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest2.versionType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(" ", indexRequest2.parent());
      assertEquals("", indexRequest5.type());
      assertFalse(indexRequest5.getShouldPersistResult());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest5.opType());
      assertEquals((-3L), indexRequest5.version());
      assertNull(indexRequest5.timestamp());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest5.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest5.getRefreshPolicy());
      assertEquals(" ", indexRequest5.index());
      assertNull(indexRequest5.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest5.consistencyLevel());
      assertEquals(XContentType.JSON, indexRequest5.getContentType());
      assertEquals(" ", indexRequest5.id());
      assertEquals(" ", indexRequest5.parent());
      assertEquals(0L, indexRequest5.primaryTerm());
      assertNull(indexRequest5.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest6.consistencyLevel());
      assertEquals(VersionType.EXTERNAL_GTE, indexRequest6.versionType());
      assertNull(indexRequest6.routing());
      assertFalse(indexRequest6.getShouldPersistResult());
      assertEquals(XContentType.JSON, indexRequest6.getContentType());
      assertEquals((-3L), indexRequest6.version());
      assertNull(indexRequest6.getPipeline());
      assertEquals("", indexRequest6.type());
      assertEquals(0L, indexRequest6.primaryTerm());
      assertNull(indexRequest6.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest6.getRefreshPolicy());
      assertEquals(" ", indexRequest6.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest6.opType());
      assertEquals(" ", indexRequest6.parent());
      assertEquals(" ", indexRequest6.index());
      assertFalse(string0.equals((Object)string1));
      assertFalse(string1.equals((Object)string0));
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest6, indexShard0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }

  @Test(timeout = 11000)
  public void test06()  throws Throwable  {
      String string0 = "Dynamic mappings are not available on the node that holds the primary yet";
      String string1 = "Dynamic mappings are not available on the node that holds the primary yet";
      String string2 = "Xbte!N";
      IndexRequest indexRequest0 = new IndexRequest(string0, string1, string2);
      assertNotNull(indexRequest0);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.type());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals("Xbte!N", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.index());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      IndexRequest indexRequest1 = indexRequest0.timestamp(string2);
      assertNotNull(indexRequest1);
      assertNotSame(string0, string2);
      assertSame(string0, string1);
      assertSame(string1, string0);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.routing());
      assertEquals("Xbte!N", indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.type());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals("Xbte!N", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("Xbte!N", indexRequest1.timestamp());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.index());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals("Xbte!N", indexRequest1.id());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      
      String string3 = "AF";
      Object object0 = null;
      String string4 = "X+%};";
      IndexRequest indexRequest2 = indexRequest1.source(string3, object0, string4, (Object) string0, string4, (Object) string3, string0, (Object) string0);
      assertNotNull(indexRequest2);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.routing());
      assertEquals("Xbte!N", indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.type());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals("Xbte!N", indexRequest0.id());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals((-3L), indexRequest0.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.index());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals((-3L), indexRequest1.version());
      assertEquals("Xbte!N", indexRequest1.timestamp());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.index());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals("Xbte!N", indexRequest1.id());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest2.index());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals("Xbte!N", indexRequest2.id());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertNull(indexRequest2.routing());
      assertEquals("Xbte!N", indexRequest2.timestamp());
      assertEquals((-3L), indexRequest2.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      IndexRequest.OpType indexRequest_OpType0 = IndexRequest.OpType.CREATE;
      IndexRequest indexRequest3 = indexRequest2.opType(indexRequest_OpType0);
      assertNotNull(indexRequest3);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest2);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest2);
      assertNull(indexRequest0.routing());
      assertEquals("Xbte!N", indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.type());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.getPipeline());
      assertEquals("Xbte!N", indexRequest0.id());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals((-4L), indexRequest0.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.index());
      assertEquals((-4L), indexRequest1.version());
      assertEquals("Xbte!N", indexRequest1.timestamp());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest1.opType());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.index());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals("Xbte!N", indexRequest1.id());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest2.index());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals("Xbte!N", indexRequest2.id());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest2.opType());
      assertNull(indexRequest2.routing());
      assertEquals((-4L), indexRequest2.version());
      assertEquals("Xbte!N", indexRequest2.timestamp());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("Xbte!N", indexRequest3.timestamp());
      assertNull(indexRequest3.routing());
      assertNull(indexRequest3.parent());
      assertEquals("Xbte!N", indexRequest3.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest3.type());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertNull(indexRequest3.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest3.opType());
      assertEquals((-4L), indexRequest3.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest3.index());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      XContentType xContentType0 = XContentType.YAML;
      IndexRequest indexRequest4 = indexRequest3.contentType(xContentType0);
      assertNotNull(indexRequest4);
      assertNotSame(string0, string2);
      assertNotSame(string0, string3);
      assertSame(string0, string1);
      assertNotSame(string0, string4);
      assertSame(string1, string0);
      assertNotSame(string1, string4);
      assertNotSame(string1, string3);
      assertNotSame(string1, string2);
      assertNotSame(string2, string0);
      assertNotSame(string2, string1);
      assertNotSame(string2, string3);
      assertNotSame(string2, string4);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest4);
      assertNotSame(string3, string0);
      assertNotSame(string3, string4);
      assertNotSame(string3, string2);
      assertNotSame(string3, string1);
      assertNotSame(string4, string1);
      assertNotSame(string4, string3);
      assertNotSame(string4, string0);
      assertNotSame(string4, string2);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest4);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest4);
      assertSame(indexRequest4, indexRequest2);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest1);
      assertSame(indexRequest4, indexRequest3);
      assertNull(indexRequest0.routing());
      assertEquals(XContentType.YAML, indexRequest0.getContentType());
      assertEquals("Xbte!N", indexRequest0.timestamp());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertNull(indexRequest0.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.type());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals("Xbte!N", indexRequest0.id());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest0.opType());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals((-4L), indexRequest0.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest0.index());
      assertEquals((-4L), indexRequest1.version());
      assertEquals("Xbte!N", indexRequest1.timestamp());
      assertEquals(XContentType.YAML, indexRequest1.getContentType());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertNull(indexRequest1.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.type());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest1.opType());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest1.index());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals("Xbte!N", indexRequest1.id());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.parent());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest2.index());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals("Xbte!N", indexRequest2.id());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest2.opType());
      assertNull(indexRequest2.routing());
      assertEquals((-4L), indexRequest2.version());
      assertEquals("Xbte!N", indexRequest2.timestamp());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(XContentType.YAML, indexRequest2.getContentType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("Xbte!N", indexRequest3.timestamp());
      assertNull(indexRequest3.routing());
      assertNull(indexRequest3.parent());
      assertEquals("Xbte!N", indexRequest3.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest3.type());
      assertEquals(XContentType.YAML, indexRequest3.getContentType());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest3.opType());
      assertEquals((-4L), indexRequest3.version());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest3.index());
      assertEquals(IndexRequest.OpType.CREATE, indexRequest4.opType());
      assertEquals("Xbte!N", indexRequest4.id());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertEquals(XContentType.YAML, indexRequest4.getContentType());
      assertEquals((-4L), indexRequest4.version());
      assertEquals("Xbte!N", indexRequest4.timestamp());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertEquals(VersionType.INTERNAL, indexRequest4.versionType());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest4.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest4.consistencyLevel());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.routing());
      assertNull(indexRequest4.getPipeline());
      assertEquals("Dynamic mappings are not available on the node that holds the primary yet", indexRequest4.type());
      assertNull(indexRequest4.parent());
      assertFalse(string0.equals((Object)string2));
      assertFalse(string0.equals((Object)string3));
      assertFalse(string0.equals((Object)string4));
      assertFalse(string1.equals((Object)string4));
      assertFalse(string1.equals((Object)string3));
      assertFalse(string1.equals((Object)string2));
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string3));
      assertFalse(string2.equals((Object)string4));
      assertFalse(string3.equals((Object)string0));
      assertFalse(string3.equals((Object)string4));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string1));
      assertFalse(string4.equals((Object)string1));
      assertFalse(string4.equals((Object)string3));
      assertFalse(string4.equals((Object)string0));
      assertFalse(string4.equals((Object)string2));
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest4, indexShard0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"Xbte!N\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 11000)
  public void test07()  throws Throwable  {
      IndexRequest indexRequest0 = new IndexRequest();
      assertNotNull(indexRequest0);
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      
      IndexRequest.OpType indexRequest_OpType0 = IndexRequest.OpType.INDEX;
      IndexRequest indexRequest1 = indexRequest0.opType(indexRequest_OpType0);
      assertNotNull(indexRequest1);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.getPipeline());
      assertNull(indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.index());
      assertNull(indexRequest1.type());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      
      String string0 = "action.allow_id_generation";
      IndexRequest indexRequest2 = indexRequest1.type(string0);
      assertNotNull(indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertEquals("action.allow_id_generation", indexRequest0.type());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.getPipeline());
      assertNull(indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals("action.allow_id_generation", indexRequest1.type());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.index());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest2.timestamp());
      assertEquals((-3L), indexRequest2.version());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.routing());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals("action.allow_id_generation", indexRequest2.type());
      assertNull(indexRequest2.index());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.id());
      assertNull(indexRequest2.parent());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      
      ByteOrder byteOrder0 = null;
      ArrayList<ChannelBuffer> arrayList0 = new ArrayList<ChannelBuffer>();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      
      boolean boolean0 = true;
      CompositeChannelBuffer compositeChannelBuffer0 = new CompositeChannelBuffer(byteOrder0, arrayList0, boolean0);
      assertNotNull(compositeChannelBuffer0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, compositeChannelBuffer0.numComponents());
      assertFalse(compositeChannelBuffer0.readable());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertFalse(compositeChannelBuffer0.isDirect());
      assertFalse(compositeChannelBuffer0.hasArray());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      
      ChannelBufferBytesReference channelBufferBytesReference0 = new ChannelBufferBytesReference(compositeChannelBuffer0);
      assertNotNull(channelBufferBytesReference0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, compositeChannelBuffer0.numComponents());
      assertFalse(compositeChannelBuffer0.readable());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertFalse(compositeChannelBuffer0.isDirect());
      assertFalse(compositeChannelBuffer0.hasArray());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertFalse(channelBufferBytesReference0.hasArray());
      
      IndexRequest indexRequest3 = indexRequest2.source((BytesReference) channelBufferBytesReference0);
      assertNotNull(indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest3);
      assertSame(indexRequest2, indexRequest1);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest3, indexRequest0);
      assertEquals("action.allow_id_generation", indexRequest0.type());
      assertNull(indexRequest0.routing());
      assertNull(indexRequest0.index());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.id());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertNull(indexRequest1.timestamp());
      assertNull(indexRequest1.parent());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertNull(indexRequest1.getPipeline());
      assertNull(indexRequest1.id());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals("action.allow_id_generation", indexRequest1.type());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertNull(indexRequest1.index());
      assertEquals((-3L), indexRequest1.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertNull(indexRequest1.routing());
      assertNull(indexRequest2.timestamp());
      assertEquals((-3L), indexRequest2.version());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertNull(indexRequest2.routing());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertEquals("action.allow_id_generation", indexRequest2.type());
      assertNull(indexRequest2.index());
      assertNull(indexRequest2.getPipeline());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.id());
      assertNull(indexRequest2.parent());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, compositeChannelBuffer0.numComponents());
      assertFalse(compositeChannelBuffer0.readable());
      assertEquals(0, compositeChannelBuffer0.writerIndex());
      assertEquals(0, compositeChannelBuffer0.capacity());
      assertFalse(compositeChannelBuffer0.isDirect());
      assertFalse(compositeChannelBuffer0.hasArray());
      assertEquals(0, compositeChannelBuffer0.readableBytes());
      assertEquals(0, compositeChannelBuffer0.readerIndex());
      assertEquals(0, channelBufferBytesReference0.length());
      assertFalse(channelBufferBytesReference0.hasArray());
      assertNull(indexRequest3.parent());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.getPipeline());
      assertNull(indexRequest3.timestamp());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.id());
      assertNull(indexRequest3.routing());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals((-3L), indexRequest3.version());
      assertNull(indexRequest3.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest3.consistencyLevel());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals("action.allow_id_generation", indexRequest3.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.prepareIndexOperationOnPrimary(indexRequest3, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Objects", e);
      }
  }

  @Test(timeout = 11000)
  public void test08()  throws Throwable  {
      String string0 = "index";
      IndexRequest indexRequest0 = new IndexRequest(string0);
      assertNotNull(indexRequest0);
      assertNull(indexRequest0.getPipeline());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.id());
      assertEquals("index", indexRequest0.index());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertNull(indexRequest0.timestamp());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.parent());
      assertNull(indexRequest0.routing());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.executeIndexRequestOnReplica(indexRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test09()  throws Throwable  {
      IndexRequest indexRequest0 = null;
      IndexShard indexShard0 = null;
      // Undeclared exception!
      try { 
        TransportIndexAction.executeIndexRequestOnReplica(indexRequest0, indexShard0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.elasticsearch.action.index.TransportIndexAction", e);
      }
  }

  @Test(timeout = 11000)
  public void test10()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = false;
      boolean boolean1 = FileSystemHandling.shouldThrowIOException(evoSuiteFile0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = true;
      boolean boolean3 = true;
      boolean boolean4 = FileSystemHandling.setPermissions(evoSuiteFile0, boolean0, boolean2, boolean3);
      assertFalse(boolean4);
      assertFalse(boolean0 == boolean3);
      assertFalse(boolean0 == boolean2);
      assertTrue(boolean0 == boolean1);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean3 == boolean0);
      assertFalse(boolean3 == boolean1);
      assertFalse(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4 == boolean2);
      assertTrue(boolean4 == boolean0);
      
      long long0 = 635L;
      boolean boolean5 = FileSystemHandling.createFolder(evoSuiteFile0);
      assertFalse(boolean5);
      assertFalse(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      
      EvoSuiteFile evoSuiteFile1 = null;
      boolean boolean6 = false;
      boolean boolean7 = FileSystemHandling.setPermissions(evoSuiteFile1, boolean6, boolean2, boolean1);
      assertFalse(boolean7);
      assertFalse(boolean1 == boolean3);
      assertTrue(boolean1 == boolean4);
      assertTrue(boolean1 == boolean5);
      assertFalse(boolean1 == boolean2);
      assertTrue(boolean1 == boolean6);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean2 == boolean6);
      assertFalse(boolean2 == boolean5);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean4);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6 == boolean3);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean6);
      assertFalse(boolean7 == boolean3);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean4);
      assertFalse(boolean7 == boolean2);
      assertTrue(boolean7 == boolean0);
      
      System.setCurrentTimeMillis(long0);
      long long1 = 493L;
      System.setCurrentTimeMillis(long1);
      assertFalse(long1 == long0);
      
      int int0 = (-2778);
      Random.setNextRandom(int0);
      String string0 = "";
      boolean boolean8 = FileSystemHandling.createFolder(evoSuiteFile1);
      assertFalse(boolean8);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean6);
      assertFalse(boolean8 == boolean3);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean4);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean7);
      assertFalse(boolean8 == boolean2);
      
      IndexRequest indexRequest0 = new IndexRequest(string0, string0, string0);
      assertNotNull(indexRequest0);
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals("", indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("", indexRequest0.type());
      assertEquals((-3L), indexRequest0.version());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      
      long long2 = (-181L);
      IndexRequest indexRequest1 = indexRequest0.version(long2);
      assertNotNull(indexRequest1);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest1, indexRequest0);
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals((-181L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals("", indexRequest0.index());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest0.consistencyLevel());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.DEFAULT, indexRequest1.consistencyLevel());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals("", indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals((-181L), indexRequest1.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.id());
      assertNull(indexRequest1.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals("", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      WriteConsistencyLevel writeConsistencyLevel0 = WriteConsistencyLevel.QUORUM;
      IndexRequest indexRequest2 = indexRequest0.consistencyLevel(writeConsistencyLevel0);
      assertNotNull(indexRequest2);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest2, indexRequest0);
      assertSame(indexRequest2, indexRequest1);
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest0.consistencyLevel());
      assertEquals((-181L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals("", indexRequest0.index());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertNull(indexRequest2.getPipeline());
      assertEquals(XContentType.JSON, indexRequest2.getContentType());
      assertEquals(0L, indexRequest2.primaryTerm());
      assertEquals("", indexRequest2.id());
      assertFalse(indexRequest2.getShouldPersistResult());
      assertEquals(VersionType.INTERNAL, indexRequest2.versionType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest2.opType());
      assertEquals("", indexRequest2.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest2.getRefreshPolicy());
      assertNull(indexRequest2.routing());
      assertEquals("", indexRequest2.index());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest2.consistencyLevel());
      assertNull(indexRequest2.timestamp());
      assertNull(indexRequest2.parent());
      assertEquals((-181L), indexRequest2.version());
      
      Object[] objectArray0 = new Object[0];
      IndexRequest indexRequest3 = indexRequest1.source(objectArray0);
      assertNotNull(indexRequest3);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest2);
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest0.consistencyLevel());
      assertEquals((-181L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertEquals(XContentType.JSON, indexRequest0.getContentType());
      assertNull(indexRequest0.parent());
      assertEquals("", indexRequest0.id());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals("", indexRequest0.index());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertEquals(XContentType.JSON, indexRequest1.getContentType());
      assertNull(indexRequest1.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest1.consistencyLevel());
      assertEquals("", indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals((-181L), indexRequest1.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.id());
      assertNull(indexRequest1.timestamp());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals("", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest3.consistencyLevel());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals((-181L), indexRequest3.version());
      assertEquals(XContentType.JSON, indexRequest3.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.getPipeline());
      assertEquals("", indexRequest3.id());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.timestamp());
      assertNull(indexRequest3.parent());
      assertEquals("", indexRequest3.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.routing());
      assertEquals(0, objectArray0.length);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      XContentType xContentType0 = XContentType.YAML;
      IndexRequest indexRequest4 = indexRequest3.contentType(xContentType0);
      assertNotNull(indexRequest4);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest4);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest1);
      assertSame(indexRequest4, indexRequest2);
      assertSame(indexRequest4, indexRequest3);
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest0.consistencyLevel());
      assertEquals((-181L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.parent());
      assertEquals("", indexRequest0.id());
      assertEquals(XContentType.YAML, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals("", indexRequest0.index());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest1.consistencyLevel());
      assertEquals("", indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals((-181L), indexRequest1.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.id());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.YAML, indexRequest1.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals("", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest3.consistencyLevel());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals((-181L), indexRequest3.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.getPipeline());
      assertEquals("", indexRequest3.id());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.timestamp());
      assertNull(indexRequest3.parent());
      assertEquals("", indexRequest3.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.routing());
      assertEquals(XContentType.YAML, indexRequest3.getContentType());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.routing());
      assertEquals("", indexRequest4.id());
      assertEquals("", indexRequest4.type());
      assertEquals(VersionType.INTERNAL, indexRequest4.versionType());
      assertNull(indexRequest4.getPipeline());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertNull(indexRequest4.timestamp());
      assertEquals(XContentType.YAML, indexRequest4.getContentType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertNull(indexRequest4.parent());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest4.opType());
      assertEquals((-181L), indexRequest4.version());
      assertEquals("", indexRequest4.index());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest4.consistencyLevel());
      assertEquals(0, objectArray0.length);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      HashMap<String, FailedRerouteAllocation.FailedShard> hashMap0 = new HashMap<String, FailedRerouteAllocation.FailedShard>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      Collection<FailedRerouteAllocation.FailedShard> collection0 = hashMap0.values();
      assertNotNull(collection0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      IndexRequest indexRequest5 = indexRequest4.source((Map) hashMap0, xContentType0);
      assertNotNull(indexRequest5);
      assertSame(indexRequest0, indexRequest3);
      assertSame(indexRequest0, indexRequest1);
      assertSame(indexRequest0, indexRequest5);
      assertSame(indexRequest0, indexRequest2);
      assertSame(indexRequest0, indexRequest4);
      assertSame(indexRequest1, indexRequest2);
      assertSame(indexRequest1, indexRequest0);
      assertSame(indexRequest1, indexRequest3);
      assertSame(indexRequest1, indexRequest5);
      assertSame(indexRequest1, indexRequest4);
      assertSame(indexRequest3, indexRequest0);
      assertSame(indexRequest3, indexRequest1);
      assertSame(indexRequest3, indexRequest4);
      assertSame(indexRequest3, indexRequest5);
      assertSame(indexRequest3, indexRequest2);
      assertSame(indexRequest4, indexRequest0);
      assertSame(indexRequest4, indexRequest1);
      assertSame(indexRequest4, indexRequest2);
      assertSame(indexRequest4, indexRequest3);
      assertSame(indexRequest4, indexRequest5);
      assertSame(indexRequest5, indexRequest2);
      assertSame(indexRequest5, indexRequest0);
      assertSame(indexRequest5, indexRequest3);
      assertSame(indexRequest5, indexRequest1);
      assertSame(indexRequest5, indexRequest4);
      assertEquals(0L, indexRequest0.primaryTerm());
      assertNull(indexRequest0.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest0.consistencyLevel());
      assertEquals((-181L), indexRequest0.version());
      assertEquals(VersionType.INTERNAL, indexRequest0.versionType());
      assertNull(indexRequest0.parent());
      assertEquals("", indexRequest0.id());
      assertEquals(XContentType.YAML, indexRequest0.getContentType());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest0.opType());
      assertNull(indexRequest0.timestamp());
      assertFalse(indexRequest0.getShouldPersistResult());
      assertNull(indexRequest0.routing());
      assertEquals("", indexRequest0.index());
      assertEquals("", indexRequest0.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest0.getRefreshPolicy());
      assertEquals(0L, indexRequest1.primaryTerm());
      assertNull(indexRequest1.getPipeline());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest1.consistencyLevel());
      assertEquals("", indexRequest1.index());
      assertNull(indexRequest1.parent());
      assertEquals((-181L), indexRequest1.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest1.opType());
      assertEquals("", indexRequest1.id());
      assertNull(indexRequest1.timestamp());
      assertEquals(XContentType.YAML, indexRequest1.getContentType());
      assertEquals(VersionType.INTERNAL, indexRequest1.versionType());
      assertEquals("", indexRequest1.type());
      assertNull(indexRequest1.routing());
      assertFalse(indexRequest1.getShouldPersistResult());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest1.getRefreshPolicy());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest3.consistencyLevel());
      assertFalse(indexRequest3.getShouldPersistResult());
      assertEquals("", indexRequest3.index());
      assertEquals((-181L), indexRequest3.version());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest3.opType());
      assertEquals(0L, indexRequest3.primaryTerm());
      assertNull(indexRequest3.getPipeline());
      assertEquals("", indexRequest3.id());
      assertEquals(VersionType.INTERNAL, indexRequest3.versionType());
      assertNull(indexRequest3.timestamp());
      assertNull(indexRequest3.parent());
      assertEquals("", indexRequest3.type());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest3.getRefreshPolicy());
      assertNull(indexRequest3.routing());
      assertEquals(XContentType.YAML, indexRequest3.getContentType());
      assertFalse(indexRequest4.getShouldPersistResult());
      assertNull(indexRequest4.routing());
      assertEquals("", indexRequest4.id());
      assertEquals("", indexRequest4.type());
      assertEquals(VersionType.INTERNAL, indexRequest4.versionType());
      assertNull(indexRequest4.getPipeline());
      assertEquals(0L, indexRequest4.primaryTerm());
      assertNull(indexRequest4.timestamp());
      assertEquals(XContentType.YAML, indexRequest4.getContentType());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest4.getRefreshPolicy());
      assertNull(indexRequest4.parent());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest4.opType());
      assertEquals((-181L), indexRequest4.version());
      assertEquals("", indexRequest4.index());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest4.consistencyLevel());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertNull(indexRequest5.timestamp());
      assertEquals(WriteRequest.RefreshPolicy.NONE, indexRequest5.getRefreshPolicy());
      assertEquals(IndexRequest.OpType.INDEX, indexRequest5.opType());
      assertNull(indexRequest5.parent());
      assertEquals(VersionType.INTERNAL, indexRequest5.versionType());
      assertEquals(0L, indexRequest5.primaryTerm());
      assertNull(indexRequest5.getPipeline());
      assertEquals("", indexRequest5.id());
      assertEquals(WriteConsistencyLevel.QUORUM, indexRequest5.consistencyLevel());
      assertEquals((-181L), indexRequest5.version());
      assertEquals("", indexRequest5.type());
      assertFalse(indexRequest5.getShouldPersistResult());
      assertEquals("", indexRequest5.index());
      assertNull(indexRequest5.routing());
      assertEquals(XContentType.YAML, indexRequest5.getContentType());
      assertEquals(0, objectArray0.length);
      assertFalse(long2 == long1);
      assertFalse(long2 == long0);
      
      IndexShard indexShard0 = null;
      MappingUpdatedAction mappingUpdatedAction0 = null;
      try { 
        TransportIndexAction.executeIndexRequestOnPrimary(indexRequest5, indexShard0, mappingUpdatedAction0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("java.lang.Long", e);
      }
  }
}
