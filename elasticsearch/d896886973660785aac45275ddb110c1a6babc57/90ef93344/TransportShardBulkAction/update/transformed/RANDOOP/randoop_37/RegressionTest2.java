import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest2 {

    public static boolean debug = false;

    @Test
    public void test01001() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01001");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest2.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest(1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest2.setShardId(shardId8);
        org.elasticsearch.action.update.UpdateHelper.Result result11 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest17.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest13.timeout(timeValue18);
        boolean boolean20 = bulkShardRequest13.getShouldPersistResult();
        java.lang.Throwable throwable22 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult23 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult24 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result12, (org.elasticsearch.action.ActionRequest) bulkShardRequest13, true, throwable22, writeResult23);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult25 = updateResult24.writeResult;
        boolean boolean26 = updateResult24.retry;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = updateResult24.request();
        org.elasticsearch.action.update.UpdateHelper.Result result29 = null;
        org.elasticsearch.action.ActionRequest actionRequest30 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting32 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting34 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.common.transport.TransportAddress transportAddress41 = bulkShardRequest40.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId42 = bulkShardRequest40.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress43 = null;
        bulkShardRequest40.remoteAddress(transportAddress43);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long48 = bulkShardRequest47.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue49 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest47.timeout(timeValue49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue53 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest51.timeout(timeValue53);
        org.elasticsearch.action.support.IndicesOptions indicesOptions55 = bulkShardRequest54.indicesOptions();
        bulkShardRequest54.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = bulkShardRequest54.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest47.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long63 = bulkShardRequest62.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel64 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest62.consistencyLevel(writeConsistencyLevel64);
        org.elasticsearch.common.transport.TransportAddress transportAddress66 = bulkShardRequest65.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId67 = bulkShardRequest65.getParentTask();
        long long68 = bulkShardRequest65.seqNo();
        boolean boolean69 = bulkShardRequest65.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId70 = bulkShardRequest65.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException71 = bulkShardRequest65.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult72 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult73 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result36, (org.elasticsearch.action.ActionRequest) bulkShardRequest60, false, (java.lang.Throwable) actionRequestValidationException71, writeResult72);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure75 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting34, "current version [-1] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException71, "index.data_path");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure77 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting32, "", (java.lang.Throwable) actionRequestValidationException71, "index.uuid");
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult78 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult79 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result29, actionRequest30, true, (java.lang.Throwable) actionRequestValidationException71, writeResult78);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult80 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult81 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result11, (org.elasticsearch.action.ActionRequest) bulkShardRequest27, false, (java.lang.Throwable) actionRequestValidationException71, writeResult80);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult82 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult83 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, true, (java.lang.Throwable) actionRequestValidationException71, writeResult82);
        bulkShardRequest2.seqNo((long) (byte) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput86 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest2.writeTo(streamOutput86);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(timeValue18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNull(writeResult25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNull(transportAddress41);
        org.junit.Assert.assertNotNull(taskId42);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 0L + "'", long48 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(indicesOptions55);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel58 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel58.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNull(transportAddress66);
        org.junit.Assert.assertNotNull(taskId67);
        org.junit.Assert.assertTrue("'" + long68 + "' != '" + 0L + "'", long68 == 0L);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
        org.junit.Assert.assertNotNull(taskId70);
        org.junit.Assert.assertNotNull(actionRequestValidationException71);
    }

    @Test
    public void test01002() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01002");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putMapping("delete", "current version [-1] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01003() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01003");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = indexMetaData0.toXContent(xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(params10);
    }

    @Test
    public void test01004() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01004");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        long long5 = versionType2.updateVersion((long) 101, 52L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 52L + "'", long5 == 52L);
    }

    @Test
    public void test01005() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01005");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("hi!");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [hi!]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01006() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01006");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        java.lang.Class<?> wildcardClass6 = strImmutableOpenMap5.getClass();
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.AnnotatedElement, java.lang.String> annotatedElementTuple8 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.AnnotatedElement) wildcardClass6, "current version [98] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(wildcardClass6);
        org.junit.Assert.assertNotNull(annotatedElementTuple8);
    }

    @Test
    public void test01007() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01007");
        org.elasticsearch.index.VersionType versionType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromString("index.version.upgraded_string", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.version.upgraded_string]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01008() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01008");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, true, throwable10, writeResult11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = updateResult12.request();
        org.elasticsearch.action.ActionRequest actionRequest14 = updateResult12.actionRequest;
        org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest> bulkShardRequestActionRequest15 = updateResult12.request();
        org.elasticsearch.tasks.TaskId taskId16 = bulkShardRequestActionRequest15.getParentTask();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(actionRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequestActionRequest15);
        org.junit.Assert.assertNotNull(taskId16);
    }

    @Test
    public void test01009() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01009");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        bulkShardRequest12.setParentTask("index.shadow_replicas", (long) 10);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
    }

    @Test
    public void test01010() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01010");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [52] is different than the one provided [10]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01011() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01011");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean21 = indexMetaData19.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData19.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap25 = indexMetaData19.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData19.excludeFilters();
        int int27 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData19.mapping("index.number_of_shards");
        org.elasticsearch.common.io.stream.StreamInput streamInput31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff32 = indexMetaData19.readDiffFrom(streamInput31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNull(mappingMetaData30);
    }

    @Test
    public void test01012() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01012");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte7 = state6.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.state(state6);
        // The following exception was thrown during execution in test generation
        try {
            long long10 = builder3.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 1 + "'", byte7 == (byte) 1);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test01013() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01013");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        java.lang.String[] strArray39 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder12.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder1.putActiveAllocationIds((int) (short) 1, (java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean48 = indexMetaData46.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData46);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters50 = indexMetaData46.getInitialRecoveryFilters();
        long long52 = indexMetaData46.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = indexMetaData46.getState();
        org.elasticsearch.common.settings.Settings settings54 = indexMetaData46.getSettings();
        boolean boolean55 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        boolean boolean56 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder45.settings(settings54);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder1.settings(settings54);
        org.elasticsearch.common.settings.Settings settings60 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings54);
        org.elasticsearch.transport.TransportService transportService61 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService62 = null;
        org.elasticsearch.indices.IndicesService indicesService63 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool64 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction65 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction66 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper67 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters68 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver69 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction70 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings60, transportService61, clusterService62, indicesService63, threadPool64, shardStateAction65, mappingUpdatedAction66, updateHelper67, actionFilters68, indexNameExpressionResolver69);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNull(discoveryNodeFilters50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
    }

    @Test
    public void test01014() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01014");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        int int6 = indexMetaData2.getNumberOfReplicas();
        int int7 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData2.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = indexMetaData2.toXContent(xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(params10);
    }

    @Test
    public void test01015() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01015");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest19.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest22.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest22.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest21.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest6.timeout(timeValue27);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest30.validate();
        bulkShardRequest30.setParentTask("index.priority", 10L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput35 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest30.writeTo(streamOutput35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
    }

    @Test
    public void test01016() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01016");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("primary_terms", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01017() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01017");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest4.remoteAddress(transportAddress7);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.index("hi!");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
    }

    @Test
    public void test01018() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01018");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putCustom("index.version.minimum_compatible", custom10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01019() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01019");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [32] is different than the one provided [97]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [32] is different than the one provided [97]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01020() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01020");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress2 = null;
        bulkShardRequest0.remoteAddress(transportAddress2);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
    }

    @Test
    public void test01021() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01021");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        bulkShardRequest9.primaryTerm((long) (short) -1);
        boolean boolean12 = bulkShardRequest9.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkShardRequest9.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test01022() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01022");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest4.primaryTerm((long) (byte) 1);
        long long7 = bulkShardRequest4.primaryTerm();
        bulkShardRequest4.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest4.remoteAddress(transportAddress11);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, org.elasticsearch.action.bulk.BulkShardRequest> writeableTuple13 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData0, bulkShardRequest4);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData0.mappingOrDefault("current version [32] is different than the one provided [3]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(writeableTuple13);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
    }

    @Test
    public void test01023() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01023");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAlias("primary_terms");
        java.lang.String str5 = builder4.index();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.creation_date_string" + "'", str5, "index.creation_date_string");
    }

    @Test
    public void test01024() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01024");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.shared_filesystem", throwable2, "index.");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.String str6 = shardFailure4.reason;
        java.lang.String str7 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = shardFailure4.routing;
        java.lang.String str9 = shardFailure4.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = shardFailure4.routing;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index." + "'", str5, "index.");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.shared_filesystem" + "'", str6, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index." + "'", str7, "index.");
        org.junit.Assert.assertNull(shardRouting8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index." + "'", str9, "index.");
        org.junit.Assert.assertNull(shardRouting10);
    }

    @Test
    public void test01025() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01025");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        byte byte6 = versionType1.getValue();
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (byte) -1, 101L, false);
        long long13 = versionType1.updateVersion(1L, (long) (byte) 2);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 2L + "'", long13 == 2L);
    }

    @Test
    public void test01026() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01026");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 1, (long) (short) 1);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
    }

    @Test
    public void test01027() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01027");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        byte byte6 = versionType1.getValue();
        long long9 = versionType1.updateVersion((long) (-1), (long) (short) 100);
        org.elasticsearch.index.VersionType versionType10 = versionType1.versionTypeForReplicationAndRecovery();
        long long13 = versionType1.updateVersion(0L, (long) 100);
        byte byte14 = versionType1.getValue();
        java.lang.String str17 = versionType1.explainConflictForReads((long) 0, 102L);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [0] is different than the one provided [102]" + "'", str17, "current version [0] is different than the one provided [102]");
    }

    @Test
    public void test01028() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01028");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) (short) 100);
        java.lang.String str15 = builder12.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.putMapping(mappingMetaData16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "" + "'", str15, "");
    }

    @Test
    public void test01029() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01029");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = bulkShardRequest4.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest(10, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        bulkShardRequest4.seqNo(100L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = bulkShardRequest4.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel8 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel8.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test01030() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01030");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.priority");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.priority]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01031() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01031");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions9 = bulkShardRequest1.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, org.elasticsearch.action.IndicesRequest> strComparableTuple10 = new org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, org.elasticsearch.action.IndicesRequest>((java.lang.Comparable<java.lang.String>) "update", (org.elasticsearch.action.IndicesRequest) bulkShardRequest1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest18.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest14.timeout(timeValue19);
        bulkShardRequest14.primaryTerm(33L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest23.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest23.index("primary_terms");
        org.elasticsearch.index.shard.ShardId shardId31 = bulkShardRequest23.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = bulkShardRequest35.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId37 = bulkShardRequest35.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = null;
        bulkShardRequest35.remoteAddress(transportAddress38);
        bulkShardRequest35.primaryTerm((long) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest42.primaryTerm((long) (byte) 1);
        long long45 = bulkShardRequest42.primaryTerm();
        bulkShardRequest42.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue49 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest42.timeout(timeValue49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest35.timeout(timeValue49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long53 = bulkShardRequest52.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue54 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest52.timeout(timeValue54);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long57 = bulkShardRequest56.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue58 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest56.timeout(timeValue58);
        org.elasticsearch.action.support.IndicesOptions indicesOptions60 = bulkShardRequest59.indicesOptions();
        bulkShardRequest59.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel63 = bulkShardRequest59.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest52.consistencyLevel(writeConsistencyLevel63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long67 = bulkShardRequest66.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue68 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest66.timeout(timeValue68);
        org.elasticsearch.index.shard.ShardId shardId70 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest66.setShardId(shardId70);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long73 = bulkShardRequest72.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel74 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest72.consistencyLevel(writeConsistencyLevel74);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest76 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue77 = bulkShardRequest76.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest78 = bulkShardRequest72.timeout(timeValue77);
        boolean boolean79 = bulkShardRequest72.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue80 = bulkShardRequest72.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest81 = bulkShardRequest71.timeout(timeValue80);
        org.elasticsearch.tasks.TaskId taskId82 = bulkShardRequest71.getParentTask();
        bulkShardRequest65.setParentTask(taskId82);
        bulkShardRequest23.setParentTask(taskId82);
        bulkShardRequest14.setParentTask(taskId82);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task86 = bulkShardRequest1.createTask((long) 10, "current version [-1] is different than the one provided [11]", "current version [1] is different than the one provided [-1]", taskId82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(indicesOptions9);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(shardId31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(transportAddress36);
        org.junit.Assert.assertNotNull(taskId37);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(indicesOptions60);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel63 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel63.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + 0L + "'", long67 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest75);
        org.junit.Assert.assertNotNull(timeValue77);
        org.junit.Assert.assertNotNull(bulkShardRequest78);
        org.junit.Assert.assertTrue("'" + boolean79 + "' != '" + false + "'", boolean79 == false);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(bulkShardRequest81);
        org.junit.Assert.assertNotNull(taskId82);
    }

    @Test
    public void test01032() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01032");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version(101L);
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01033() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01033");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest5.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId7 = bulkShardRequest5.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest5.remoteAddress(transportAddress8);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.timeout(timeValue18);
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest19.indicesOptions();
        bulkShardRequest19.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest27.timeout(timeValue29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest27.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId33 = null;
        bulkShardRequest27.setParentTask(taskId33);
        org.elasticsearch.index.shard.ShardId shardId35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest27.setShardId(shardId35);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long40 = bulkShardRequest39.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest39.timeout(timeValue41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long44 = bulkShardRequest43.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue45 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest43.timeout(timeValue45);
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest46.indicesOptions();
        bulkShardRequest46.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel50 = bulkShardRequest46.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel50);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel52 = bulkShardRequest39.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest38.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel52);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest54.timeout("active_allocations");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [active_allocations]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertNotNull(taskId7);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel50 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel50.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel52 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel52.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
    }

    @Test
    public void test01034() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01034");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.timeout(timeValue12);
        boolean boolean15 = bulkShardRequest14.getShouldPersistResult();
        boolean boolean16 = bulkShardRequest14.getShouldPersistResult();
        long long17 = bulkShardRequest14.primaryTerm();
        bulkShardRequest14.setParentTask("index.version.upgraded", (long) (short) 10);
        org.elasticsearch.common.io.stream.StreamInput streamInput21 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest14.readFrom(streamInput21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test01035() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01035");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.state(state6);
        int int8 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.putCustom("delete", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.putAlias(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01036() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01036");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest6.index("index.");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest6.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
    }

    @Test
    public void test01037() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01037");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.requireFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
    }

    @Test
    public void test01038() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01038");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        long long16 = builder15.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder9.state(state22);
        int int25 = builder9.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder9.creationDate((long) 100);
        long long28 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder9.version(0L);
        long long31 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean35 = indexMetaData33.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder36.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder37.state(state39);
        java.lang.String[] strArray67 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet68 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean69 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet68, strArray67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder40.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder9.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder3.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet68);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder3.putMapping("current version [52] is different than the one provided [10]", "current version [34] is different than the one provided [34]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strArray67);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + true + "'", boolean69 == true);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
    }

    @Test
    public void test01039() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01039");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.index("index.version.created");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putMapping("current version [100] is different than the one provided [10]", "current version [-1] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01040() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01040");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        java.lang.String str4 = versionType0.explainConflictForWrites((-1L), 11L, true);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [-1] is different than the one provided [11]" + "'", str4, "current version [-1] is different than the one provided [11]");
    }

    @Test
    public void test01041() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01041");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        long long9 = versionType1.updateVersion((long) (byte) 100, 1L);
        java.lang.String str12 = versionType1.explainConflictForReads((long) (short) 100, (long) (short) 10);
        java.lang.String str15 = versionType1.explainConflictForReads((long) 0, (long) 1);
        long long18 = versionType1.updateVersion((long) 'a', (long) (byte) 1);
        java.lang.String str22 = versionType1.explainConflictForWrites(0L, 102L, false);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 101L + "'", long9 == 101L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [100] is different than the one provided [10]" + "'", str12, "current version [100] is different than the one provided [10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str15, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 98L + "'", long18 == 98L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "current version [0] is different than the one provided [102]" + "'", str22, "current version [0] is different than the one provided [102]");
    }

    @Test
    public void test01042() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01042");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.putAlias(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test01043() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01043");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        java.lang.String str7 = bulkShardRequest0.index();
        boolean boolean8 = bulkShardRequest0.getShouldPersistResult();
        long long9 = bulkShardRequest0.seqNo();
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test01044() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01044");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        boolean boolean6 = indexMetaData0.isSameUUID("index.");
        int int7 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
    }

    @Test
    public void test01045() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01045");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [-1] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [-1] is different than the one provided [10]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01046() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01046");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        java.lang.Object obj4 = null;
        boolean boolean5 = indexMetaData0.equals(obj4);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = indexMetaData0.toXContent(xContentBuilder6, params7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(params7);
    }

    @Test
    public void test01047() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01047");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest10.primaryTerm((long) (byte) 1);
        long long13 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest10.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest16.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue28 = bulkShardRequest27.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest23.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest22.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest9.timeout(timeValue28);
        bulkShardRequest31.setParentTask("index.blocks.read_only", (long) (short) 10);
        org.elasticsearch.action.update.UpdateHelper.Result result35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue41 = bulkShardRequest40.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest36.timeout(timeValue41);
        boolean boolean43 = bulkShardRequest36.getShouldPersistResult();
        java.lang.Throwable throwable45 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult46 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult47 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result35, (org.elasticsearch.action.ActionRequest) bulkShardRequest36, true, throwable45, writeResult46);
        org.elasticsearch.index.shard.ShardId shardId48 = bulkShardRequest36.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long50 = bulkShardRequest49.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest49.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = bulkShardRequest52.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId54 = bulkShardRequest52.getParentTask();
        long long55 = bulkShardRequest52.seqNo();
        boolean boolean56 = bulkShardRequest52.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId57 = bulkShardRequest52.getParentTask();
        bulkShardRequest36.setParentTask(taskId57);
        bulkShardRequest31.setParentTask(taskId57);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long64 = bulkShardRequest63.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue65 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest63.timeout(timeValue65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest63.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest70 = bulkShardRequest63.index("primary_terms");
        org.elasticsearch.tasks.TaskId taskId71 = bulkShardRequest70.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task72 = bulkShardRequest31.createTask((long) '#', "current version [100] is different than the one provided [100]", "current version [-1] is different than the one provided [1]", taskId71);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(shardId48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNull(transportAddress53);
        org.junit.Assert.assertNotNull(taskId54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(taskId57);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest70);
        org.junit.Assert.assertNotNull(taskId71);
    }

    @Test
    public void test01048() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01048");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version(101L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData7.getInitialRecoveryFilters();
        long long13 = indexMetaData7.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData7.getState();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData7.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder6.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder4.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = builder19.build();
        int int21 = builder19.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test01049() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01049");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        java.lang.String str9 = indexMetaData6.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData6.getAliases();
        org.elasticsearch.common.xcontent.XContentParser xContentParser11 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = indexMetaData6.fromXContent(xContentParser11, parseFieldMatcher12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test01050() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01050");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.removeAllAliases();
        long long9 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int12 = builder11.numberOfShards();
        long long13 = builder11.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean17 = indexMetaData15.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.state(state21);
        java.lang.String[] strArray49 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet50 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean51 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet50, strArray49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder22.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder11.putActiveAllocationIds((int) (short) 1, (java.util.Set<java.lang.String>) strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean58 = indexMetaData56.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData56);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters60 = indexMetaData56.getInitialRecoveryFilters();
        long long62 = indexMetaData56.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData56.getState();
        org.elasticsearch.common.settings.Settings settings64 = indexMetaData56.getSettings();
        boolean boolean65 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings64);
        boolean boolean66 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder55.settings(settings64);
        org.elasticsearch.common.settings.Settings settings68 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder11.settings(settings64);
        org.elasticsearch.common.settings.Settings settings70 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder8.settings(settings64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData74 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean76 = indexMetaData74.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData74);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters78 = indexMetaData74.getInitialRecoveryFilters();
        long long80 = indexMetaData74.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state81 = indexMetaData74.getState();
        org.elasticsearch.common.settings.Settings settings82 = indexMetaData74.getSettings();
        boolean boolean83 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings82);
        boolean boolean84 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings82);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder73.settings(settings82);
        boolean boolean86 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings82);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder71.settings(settings82);
        boolean boolean88 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings82);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strArray49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(discoveryNodeFilters60);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertTrue("'" + boolean66 + "' != '" + false + "'", boolean66 == false);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(settings68);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(indexMetaData74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNull(discoveryNodeFilters78);
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertTrue("'" + state81 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state81.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + boolean84 + "' != '" + false + "'", boolean84 == false);
        org.junit.Assert.assertNotNull(builder85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertTrue("'" + boolean88 + "' != '" + false + "'", boolean88 == false);
    }

    @Test
    public void test01051() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01051");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        int int9 = indexMetaData6.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData6.getCustoms();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean15 = indexMetaData13.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData13);
        long long17 = builder16.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.state(state18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.creationDate((long) (byte) 100);
        long long24 = builder21.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = builder21.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple30 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest27, state29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder26.state(state29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap34 = indexMetaData33.getAliases();
        org.elasticsearch.Version version35 = indexMetaData33.getUpgradedVersion();
        org.apache.lucene.util.Version version36 = indexMetaData33.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap38 = indexMetaData33.getCustoms();
        java.util.Set<java.lang.String> strSet40 = indexMetaData33.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder31.putActiveAllocationIds(0, strSet40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean44 = indexMetaData42.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData42);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData42.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData42);
        int int48 = indexMetaData42.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData42);
        org.elasticsearch.common.settings.Settings settings50 = indexMetaData42.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder41.settings(settings50);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple52 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params12, settings50);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = indexMetaData6.toXContent(xContentBuilder11, params12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(version35);
        org.junit.Assert.assertNull(version36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(strSet40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 0 + "'", int48 == 0);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test01052() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01052");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder5, params6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(params6);
    }

    @Test
    public void test01053() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01053");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        int int8 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version9 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(version9);
    }

    @Test
    public void test01054() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01054");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("hi!");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "hi!" + "'", str2, "hi!");
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test01055() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01055");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.timeout(timeValue4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest2.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId8 = null;
        bulkShardRequest2.setParentTask(taskId8);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult10 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult11 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, writeResult10);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult12 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult13 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, writeResult12);
        long long14 = bulkShardRequest2.primaryTerm();
        bulkShardRequest2.setParentTask("index.version.minimum_compatible", (long) (byte) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray18 = bulkShardRequest2.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01056() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01056");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.Version version5 = indexMetaData2.getUpgradedVersion();
        long long6 = indexMetaData2.getVersion();
        org.apache.lucene.util.Version version7 = indexMetaData2.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData2.getActiveAllocationIds();
        long long9 = indexMetaData2.getVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData2.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
    }

    @Test
    public void test01057() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01057");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 1, (long) (short) 1);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType4.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
    }

    @Test
    public void test01058() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01058");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData2.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01059() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01059");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest4.primaryTerm((long) (byte) 1);
        long long7 = bulkShardRequest4.primaryTerm();
        bulkShardRequest4.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest4.remoteAddress(transportAddress11);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, org.elasticsearch.action.bulk.BulkShardRequest> writeableTuple13 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData0, bulkShardRequest4);
        int int14 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder15 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params16 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = indexMetaData0.toXContent(xContentBuilder15, params16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(writeableTuple13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(params16);
    }

    @Test
    public void test01060() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01060");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder7.build();
        java.lang.Class<?> wildcardClass10 = indexMetaData9.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test01061() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01061");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 1, (long) (short) 1);
        byte byte4 = versionType0.getValue();
        java.lang.String str8 = versionType0.explainConflictForWrites((long) (byte) 100, (long) 0, false);
        boolean boolean11 = versionType0.isVersionConflictForReads(0L, (long) (byte) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [100] is different than the one provided [0]" + "'", str8, "current version [100] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01062() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01062");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long4 = versionType1.updateVersion((-1L), (long) 'a');
        boolean boolean7 = versionType1.isVersionConflictForReads((long) (short) 1, (long) 0);
        org.elasticsearch.index.VersionType versionType8 = versionType1.versionTypeForReplicationAndRecovery();
        java.lang.String str12 = versionType8.explainConflictForWrites(32L, (long) (byte) 1, false);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [32] is higher or equal to the one provided [1]" + "'", str12, "current version [32] is higher or equal to the one provided [1]");
    }

    @Test
    public void test01063() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01063");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = indexMetaData0.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
    }

    @Test
    public void test01064() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01064");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [1] is different than the one provided [10]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01065() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01065");
        org.elasticsearch.index.VersionType versionType1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromString("current version [0] is different than the one provided [10]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is different than the one provided [10]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01066() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01066");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult9 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult10 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, writeResult9);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest1.remoteAddress(transportAddress11);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01067() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01067");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [10] is different than the one provided [98]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01068() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01068");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(version8);
    }

    @Test
    public void test01069() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01069");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder6 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder6, params7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test01070() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01070");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        byte byte7 = versionType1.getValue();
        boolean boolean9 = versionType1.validateVersionForWrites((long) '4');
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01071() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01071");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [99] is different than the one provided [100]");
    }

    @Test
    public void test01072() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01072");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [100] is different than the one provided [100]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [100] is different than the one provided [100]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01073() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01073");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean6 = indexMetaData4.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData4.diff(indexMetaData10);
        long long13 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData14.mappingOrDefault("index.blocks.read");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean23 = indexMetaData21.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData21.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap26 = indexMetaData21.getMappings();
        long long27 = indexMetaData21.getCreationDate();
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData21.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder20.settings(settings28);
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings28);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.elasticsearch.transport.TransportService transportService32 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService33 = null;
        org.elasticsearch.indices.IndicesService indicesService34 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool35 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction36 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction37 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper38 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters39 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver40 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction41 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings28, transportService32, clusterService33, indicesService34, threadPool35, shardStateAction36, mappingUpdatedAction37, updateHelper38, actionFilters39, indexNameExpressionResolver40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test01074() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01074");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData2.mappingOrDefault("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData2.readDiffFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test01075() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01075");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        // The following exception was thrown during execution in test generation
        try {
            long long4 = builder1.primaryTerm(0);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test01076() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01076");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str1 = bulkShardRequest0.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest5.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId7 = bulkShardRequest5.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest5.remoteAddress(transportAddress8);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.timeout(timeValue18);
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest19.indicesOptions();
        bulkShardRequest19.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        bulkShardRequest0.setParentTask("current version [52] is higher than the one provided [10]", 0L);
        org.junit.Assert.assertNull(str1);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertNotNull(taskId7);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
    }

    @Test
    public void test01077() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01077");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        byte byte7 = versionType1.getValue();
        boolean boolean9 = versionType1.validateVersionForWrites((long) '4');
        byte byte10 = versionType1.getValue();
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0);
    }

    @Test
    public void test01078() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01078");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        int int6 = indexMetaData2.getNumberOfReplicas();
        int int7 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData2.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData2.mapping("current version [98] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(mappingMetaData10);
    }

    @Test
    public void test01079() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01079");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        long long22 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.version(0L);
        long long25 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean29 = indexMetaData27.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder30.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.state(state33);
        java.lang.String[] strArray61 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder34.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder3.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet62);
        int int66 = builder65.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData68 = builder65.mapping("state-");
        int int69 = builder65.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(mappingMetaData68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
    }

    @Test
    public void test01080() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01080");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long4 = versionType1.updateVersion((-1L), (long) 'a');
        boolean boolean7 = versionType1.isVersionConflictForReads((long) (short) 1, (long) 0);
        org.elasticsearch.index.VersionType versionType8 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType9 = versionType1.versionTypeForReplicationAndRecovery();
        java.lang.String str12 = versionType1.explainConflictForReads((long) ' ', (long) 'a');
        long long15 = versionType1.updateVersion(101L, (long) 10);
        byte byte16 = versionType1.getValue();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [32] is different than the one provided [97]" + "'", str12, "current version [32] is different than the one provided [97]");
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 102L + "'", long15 == 102L);
        org.junit.Assert.assertTrue("'" + byte16 + "' != '" + (byte) 0 + "'", byte16 == (byte) 0);
    }

    @Test
    public void test01081() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01081");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("index.blocks.metadata");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.blocks.metadata]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01082() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01082");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.timeout(timeValue12);
        boolean boolean15 = bulkShardRequest14.getShouldPersistResult();
        boolean boolean16 = bulkShardRequest14.getShouldPersistResult();
        long long17 = bulkShardRequest14.primaryTerm();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkShardRequest14.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test01083() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01083");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest3.indicesOptions();
        bulkShardRequest3.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel7 = bulkShardRequest3.consistencyLevel();
        bulkShardRequest3.primaryTerm((long) (byte) 0);
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest3.shardId();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel7 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel7.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(shardId10);
    }

    @Test
    public void test01084() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01084");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        long long6 = bulkShardRequest3.seqNo();
        boolean boolean7 = bulkShardRequest3.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId8 = bulkShardRequest3.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.timeout(timeValue11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest9.setShardId(shardId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest19.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.timeout(timeValue20);
        boolean boolean22 = bulkShardRequest15.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue23 = bulkShardRequest15.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest14.timeout(timeValue23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest3.timeout(timeValue23);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest3.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(taskId8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
    }

    @Test
    public void test01085() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01085");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean7 = versionType1.validateVersionForWrites(1L);
        byte byte8 = versionType1.getValue();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
    }

    @Test
    public void test01086() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01086");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean18 = indexMetaData16.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData16.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = indexMetaData16.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData22.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData16.diff(indexMetaData22);
        boolean boolean25 = indexMetaData10.equals((java.lang.Object) indexMetaData22);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap27 = indexMetaData10.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean31 = indexMetaData29.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = indexMetaData29.getState();
        boolean boolean34 = indexMetaData10.equals((java.lang.Object) state33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder9.state(state33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData36.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData36.getState();
        byte byte40 = state39.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder9.state(state39);
        java.util.Set<java.lang.String> strSet43 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder41.putActiveAllocationIds((int) (short) 0, strSet43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte40 + "' != '" + (byte) 0 + "'", byte40 == (byte) 0);
        org.junit.Assert.assertNotNull(builder41);
    }

    @Test
    public void test01087() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01087");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version(101L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean17 = indexMetaData15.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData15);
        long long19 = builder18.version();
        org.elasticsearch.common.settings.Settings settings20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean24 = indexMetaData22.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        long long26 = builder25.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder21.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder14.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean34 = indexMetaData32.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        java.lang.String[] strArray59 = new java.lang.String[] { "state-", "active_allocations", "index.shared_filesystem.recover_on_any_node", "hi!", "update", "", "index.uuid", "index.version.upgraded_string", "index.version.upgraded", "index.auto_expand_replicas", "update", "index.data_path", "index.version.minimum_compatible", "hi!", "hi!", "index.uuid", "active_allocations", "index.version.created_string", "index.creation_date_string" };
        java.util.LinkedHashSet<java.lang.String> strSet60 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean61 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet60, strArray59);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder38.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder35.putActiveAllocationIds(1, (java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder30.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder7.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder7.index("current version [1] is different than the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = builder7.build();
        long long70 = indexMetaData69.getCreationDate();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder71 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params72 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData69, xContentBuilder71, params72);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray59);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + true + "'", boolean61 == true);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + (-1L) + "'", long70 == (-1L));
        org.junit.Assert.assertNotNull(params72);
    }

    @Test
    public void test01088() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01088");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel8);
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = bulkShardRequest9.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest9.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest9.remoteAddress(transportAddress12);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("hi!");
        bulkShardRequest17.seqNo((long) (byte) -1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap5, (org.elasticsearch.transport.TransportMessage) bulkShardRequest17);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = strSetImmutableOpenIntMapTuple20.v1();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest22.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest22.timeout(timeValue27);
        boolean boolean29 = bulkShardRequest22.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest22.validate();
        bulkShardRequest22.setParentTask("index.version.created_string", 101L);
        java.lang.String str35 = bulkShardRequest22.index();
        org.elasticsearch.index.shard.ShardId shardId36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest22.setShardId(shardId36);
        boolean boolean38 = strSetImmutableOpenIntMapTuple20.equals((java.lang.Object) bulkShardRequest37);
        org.elasticsearch.action.update.UpdateHelper.Result result39 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long42 = bulkShardRequest41.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest41.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue46 = bulkShardRequest45.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest41.timeout(timeValue46);
        boolean boolean48 = bulkShardRequest41.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue49 = bulkShardRequest41.timeout();
        java.lang.Throwable throwable51 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult52 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult53 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result40, (org.elasticsearch.action.ActionRequest) bulkShardRequest41, false, throwable51, writeResult52);
        java.lang.Throwable throwable55 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult56 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult57 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result39, (org.elasticsearch.action.ActionRequest) bulkShardRequest41, true, throwable55, writeResult56);
        org.elasticsearch.tasks.TaskId taskId58 = bulkShardRequest41.getParentTask();
        boolean boolean59 = strSetImmutableOpenIntMapTuple20.equals((java.lang.Object) bulkShardRequest41);
        org.elasticsearch.index.shard.ShardId shardId60 = bulkShardRequest41.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue62 = bulkShardRequest61.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest41.timeout(timeValue62);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str64 = bulkShardRequest41.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(transportAddress10);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(indicesOptions30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
        org.junit.Assert.assertNull(str35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(taskId58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNull(shardId60);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
    }

    @Test
    public void test01089() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01089");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version5 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff7 = indexMetaData0.readDiffFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(version5);
    }

    @Test
    public void test01090() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01090");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder14.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.version(11L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.removeAlias("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.version((-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder22.numberOfReplicas((int) (byte) -1);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01091() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01091");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean3 = versionType1.validateVersionForReads((long) (short) 1);
        boolean boolean5 = versionType1.validateVersionForWrites(100L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
    }

    @Test
    public void test01092() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01092");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        boolean boolean5 = bulkShardRequest3.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest3.timeout();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.timeout("index.version.created");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.version.created]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertNotNull(timeValue7);
    }

    @Test
    public void test01093() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01093");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.apache.lucene.util.Version version5 = indexMetaData4.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData4.diff(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder24.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean31 = indexMetaData29.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        long long33 = builder32.version();
        org.elasticsearch.common.settings.Settings settings34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean38 = indexMetaData36.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        long long40 = builder39.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder35.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder43.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean47 = indexMetaData45.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData45.getInitialRecoveryFilters();
        long long51 = indexMetaData45.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData45.getState();
        org.elasticsearch.common.settings.Settings settings53 = indexMetaData45.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder43.settings(settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean57 = indexMetaData55.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean63 = indexMetaData61.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData61);
        long long65 = builder64.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state66 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder64.state(state66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder67.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder67.state(state71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder58.state(state71);
        int int74 = builder58.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder58.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder58.creationDate((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder58.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean82 = indexMetaData80.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData80);
        long long84 = builder83.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state85 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder83.state(state85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder86.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state90 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder86.state(state90);
        byte byte92 = state90.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder58.state(state90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder43.state(state90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder28.state(state90);
        boolean boolean96 = indexMetaData6.equals((java.lang.Object) builder95);
        long long97 = indexMetaData6.getVersion();
        org.elasticsearch.common.settings.Settings settings98 = indexMetaData6.getSettings();
        boolean boolean99 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings98);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state66.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + state85 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state85.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + state90 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state90.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + byte92 + "' != '" + (byte) 0 + "'", byte92 == (byte) 0);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertTrue("'" + long97 + "' != '" + 1L + "'", long97 == 1L);
        org.junit.Assert.assertNotNull(settings98);
        org.junit.Assert.assertTrue("'" + boolean99 + "' != '" + false + "'", boolean99 == false);
    }

    @Test
    public void test01094() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01094");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        // The following exception was thrown during execution in test generation
        try {
            long long8 = indexMetaData0.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test01095() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01095");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        long long5 = bulkShardRequest3.seqNo();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest3.getParentTask();
        bulkShardRequest3.setParentTask("index.version.upgraded_string", (long) 10);
        bulkShardRequest3.primaryTerm((long) 'a');
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest3.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(taskId6);
    }

    @Test
    public void test01096() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01096");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.Version version6 = indexMetaData4.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder7 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params8 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = indexMetaData4.toXContent(xContentBuilder7, params8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(params8);
    }

    @Test
    public void test01097() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01097");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [0] is different than the one provided [2]");
    }

    @Test
    public void test01098() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01098");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        byte byte7 = versionType1.getValue();
        boolean boolean9 = versionType1.validateVersionForReads(0L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01099() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01099");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder3.creationDate((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean27 = indexMetaData25.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.state(state35);
        byte byte37 = state35.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder3.state(state35);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = builder38.primaryTerm(101);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 101");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 0 + "'", byte37 == (byte) 0);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test01100() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01100");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.timeout(timeValue12);
        boolean boolean15 = bulkShardRequest14.getShouldPersistResult();
        boolean boolean16 = bulkShardRequest14.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest14.timeout("current version [1] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [1] is different than the one provided [10]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
    }

    @Test
    public void test01101() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01101");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setShardId(shardId7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest0.remoteAddress(transportAddress9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest0.index("current version [52] is higher than the one provided [10]");
        java.lang.String str13 = bulkShardRequest12.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [52] is higher than the one provided [10]" + "'", str13, "current version [52] is higher than the one provided [10]");
    }

    @Test
    public void test01102() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01102");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder1.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.shadow_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01103() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01103");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("_na_");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [_na_]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01104() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01104");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.index("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.removeAlias("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01105() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01105");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = bulkShardRequest4.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest(10, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        int int10 = bulkItemRequest9.id();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest9.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel8 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel8.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 10 + "'", int10 == 10);
    }

    @Test
    public void test01106() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01106");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.created_string", throwable2, "");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.Throwable throwable6 = shardFailure4.cause;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting7 = shardFailure4.routing;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "" + "'", str5, "");
        org.junit.Assert.assertNull(throwable6);
        org.junit.Assert.assertNull(shardRouting7);
    }

    @Test
    public void test01107() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01107");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) 101);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult8 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult9 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, writeResult8);
        java.lang.Throwable throwable10 = updateResult9.error;
        org.elasticsearch.action.update.UpdateHelper.Result result11 = updateResult9.result;
        org.elasticsearch.action.ActionRequest actionRequest12 = updateResult9.actionRequest;
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNull(throwable10);
        org.junit.Assert.assertNull(result11);
        org.junit.Assert.assertNotNull(actionRequest12);
    }

    @Test
    public void test01108() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01108");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData0.getState();
        org.elasticsearch.index.Index index25 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index25);
    }

    @Test
    public void test01109() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01109");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        byte byte2 = versionType1.getValue();
        boolean boolean4 = versionType1.validateVersionForWrites((long) ' ');
        byte byte5 = versionType1.getValue();
        boolean boolean7 = versionType1.validateVersionForWrites(2L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 2 + "'", byte2 == (byte) 2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 2 + "'", byte5 == (byte) 2);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01110() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01110");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = bulkShardRequest10.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest10.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest10.remoteAddress(transportAddress13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.index("hi!");
        long long19 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long21 = bulkShardRequest20.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest20.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = bulkShardRequest23.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId25 = bulkShardRequest23.getParentTask();
        long long26 = bulkShardRequest23.seqNo();
        boolean boolean27 = bulkShardRequest23.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId28 = bulkShardRequest23.getParentTask();
        bulkShardRequest18.setParentTask(taskId28);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task30 = bulkShardRequest0.createTask((long) (short) 0, "", "current version [100] is different than the one provided [97]", taskId28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(transportAddress11);
        org.junit.Assert.assertNotNull(taskId12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNull(transportAddress24);
        org.junit.Assert.assertNotNull(taskId25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(taskId28);
    }

    @Test
    public void test01111() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01111");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.timeout(timeValue11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest9.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.index("primary_terms");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.timeout(timeValue19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest20.indicesOptions();
        bulkShardRequest20.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple26 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap8, (org.elasticsearch.transport.TransportMessage) bulkShardRequest9);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap27 = strSetImmutableOpenIntMapTuple26.v1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str28 = strSetImmutableOpenIntMapTuple26.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap27);
    }

    @Test
    public void test01112() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01112");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = bulkShardRequest10.remoteAddress();
        bulkShardRequest10.primaryTerm((long) (short) 10);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult16 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult17 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest10, writeResult16);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest10.timeout("index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.blocks.read]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(transportAddress13);
    }

    @Test
    public void test01113() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01113");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        boolean boolean7 = indexMetaData0.isSameUUID("index.version.minimum_compatible");
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNotNull(params11);
    }

    @Test
    public void test01114() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01114");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        long long9 = versionType1.updateVersion((long) (byte) 100, 1L);
        java.lang.String str12 = versionType1.explainConflictForReads((long) (short) 100, (long) (short) 10);
        java.lang.String str15 = versionType1.explainConflictForReads((long) 0, (long) 1);
        long long18 = versionType1.updateVersion((long) 'a', (long) (byte) 1);
        java.lang.String str22 = versionType1.explainConflictForWrites((long) (short) 0, 99L, false);
        long long25 = versionType1.updateVersion(0L, (long) (byte) 100);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 101L + "'", long9 == 101L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [100] is different than the one provided [10]" + "'", str12, "current version [100] is different than the one provided [10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str15, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 98L + "'", long18 == 98L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "current version [0] is different than the one provided [99]" + "'", str22, "current version [0] is different than the one provided [99]");
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
    }

    @Test
    public void test01115() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01115");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long4 = versionType1.updateVersion((-1L), (long) 'a');
        long long7 = versionType1.updateVersion((long) (byte) -1, (long) '4');
        boolean boolean10 = versionType1.isVersionConflictForReads((long) 'a', (long) (short) -1);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01116() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01116");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        boolean boolean6 = indexMetaData2.isSameUUID("");
        boolean boolean8 = indexMetaData2.isSameUUID("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData2.getActiveAllocationIds();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData2.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
    }

    @Test
    public void test01117() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01117");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = builder21.mapping("index.uuid");
        java.lang.String str24 = builder21.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.putMapping(mappingMetaData25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "" + "'", str24, "");
    }

    @Test
    public void test01118() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01118");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.timeout("current version [100] is different than the one provided [100]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [100] is different than the one provided [100]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
    }

    @Test
    public void test01119() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01119");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = bulkShardRequest4.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest(10, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.action.ActionRequest actionRequest10 = bulkItemRequest9.request();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest9.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel8 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel8.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequest10);
    }

    @Test
    public void test01120() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01120");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest6.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest2.timeout(timeValue7);
        boolean boolean9 = bulkShardRequest2.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest2.timeout();
        java.lang.Throwable throwable12 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult14 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, false, throwable12, writeResult13);
        java.lang.Throwable throwable16 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult17 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult18 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, true, throwable16, writeResult17);
        bulkShardRequest2.seqNo((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean26 = indexMetaData24.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters29 = indexMetaData24.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData24.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long32 = bulkShardRequest31.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest31.timeout(timeValue33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest31.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId37 = null;
        bulkShardRequest31.setParentTask(taskId37);
        org.elasticsearch.index.shard.ShardId shardId39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest31.setShardId(shardId39);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple41 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap30, (org.elasticsearch.transport.TransportMessage) bulkShardRequest40);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap42 = strSetImmutableOpenIntMapTuple41.v1();
        org.elasticsearch.index.VersionType versionType44 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean46 = versionType44.validateVersionForWrites((long) (short) 100);
        boolean boolean48 = versionType44.validateVersionForWrites((long) (byte) 10);
        byte byte49 = versionType44.getValue();
        boolean boolean50 = strSetImmutableOpenIntMapTuple41.equals((java.lang.Object) byte49);
        org.elasticsearch.transport.TransportMessage transportMessage51 = strSetImmutableOpenIntMapTuple41.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = strSetImmutableOpenIntMapTuple41.v1();
        org.elasticsearch.transport.TransportMessage transportMessage53 = strSetImmutableOpenIntMapTuple41.v2();
        org.elasticsearch.transport.TransportMessage transportMessage54 = strSetImmutableOpenIntMapTuple41.v2();
        org.elasticsearch.transport.TransportMessage transportMessage55 = strSetImmutableOpenIntMapTuple41.v2();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long57 = bulkShardRequest56.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest56.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue61 = bulkShardRequest60.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = bulkShardRequest56.timeout(timeValue61);
        boolean boolean63 = bulkShardRequest56.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions64 = bulkShardRequest56.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException65 = bulkShardRequest56.validate();
        bulkShardRequest56.seqNo(10L);
        org.elasticsearch.tasks.TaskId taskId68 = bulkShardRequest56.getParentTask();
        boolean boolean69 = strSetImmutableOpenIntMapTuple41.equals((java.lang.Object) taskId68);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task70 = bulkShardRequest2.createTask((long) (byte) 10, "current version [1] is different than the one provided [-1]", "current version [0] is different than the one provided [102]", taskId68);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNull(discoveryNodeFilters29);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap42);
        org.junit.Assert.assertNotNull(versionType44);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertTrue("'" + byte49 + "' != '" + (byte) 0 + "'", byte49 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(transportMessage51);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertNotNull(transportMessage53);
        org.junit.Assert.assertNotNull(transportMessage54);
        org.junit.Assert.assertNotNull(transportMessage55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertNotNull(bulkShardRequest62);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(indicesOptions64);
        org.junit.Assert.assertNotNull(actionRequestValidationException65);
        org.junit.Assert.assertNotNull(taskId68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test01121() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01121");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        org.apache.lucene.util.Version version17 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData10.readDiffFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(version17);
    }

    @Test
    public void test01122() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01122");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.setShardId(shardId6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest11.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest11.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest11.remoteAddress(transportAddress14);
        bulkShardRequest11.primaryTerm((long) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest18.primaryTerm((long) (byte) 1);
        long long21 = bulkShardRequest18.primaryTerm();
        bulkShardRequest18.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue25 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest18.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest11.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest7.timeout(timeValue25);
        org.elasticsearch.common.io.stream.StreamInput streamInput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest28.readFrom(streamInput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
    }

    @Test
    public void test01123() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01123");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) -1, actionRequest1);
        org.elasticsearch.action.ActionRequest actionRequest3 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.action.ActionRequest actionRequest4 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.action.ActionRequest actionRequest5 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(actionRequest3);
        org.junit.Assert.assertNull(actionRequest4);
        org.junit.Assert.assertNull(actionRequest5);
    }

    @Test
    public void test01124() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01124");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        bulkShardRequest0.seqNo((long) 10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest0.timeout("current version [32] is different than the one provided [3]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [32] is different than the one provided [3]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
    }

    @Test
    public void test01125() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01125");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.version((long) (byte) 2);
        java.lang.String str4 = builder3.index();
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "current version [-1] is different than the one provided [10]" + "'", str4, "current version [-1] is different than the one provided [10]");
    }

    @Test
    public void test01126() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01126");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putMapping("current version [32] is different than the one provided [3]", "index.version.upgraded_string");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01127() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01127");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        long long6 = bulkShardRequest4.seqNo();
        org.elasticsearch.tasks.TaskId taskId7 = bulkShardRequest4.getParentTask();
        boolean boolean8 = bulkShardRequest4.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest9.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(taskId7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test01128() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01128");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        boolean boolean7 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        bulkShardRequest0.setParentTask("index.version.created_string", 101L);
        java.lang.String str13 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setShardId(shardId14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.index("index.uuid");
        long long19 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel20);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray22 = bulkShardRequest15.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
    }

    @Test
    public void test01129() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01129");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.state(state15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.creationDate((long) (byte) 100);
        long long21 = builder18.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = builder18.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple27 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest24, state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder23.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap31 = indexMetaData30.getAliases();
        org.elasticsearch.Version version32 = indexMetaData30.getUpgradedVersion();
        org.apache.lucene.util.Version version33 = indexMetaData30.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData30.getCustoms();
        java.util.Set<java.lang.String> strSet37 = indexMetaData30.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder28.putActiveAllocationIds(0, strSet37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean41 = indexMetaData39.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData39.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        int int45 = indexMetaData39.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.common.settings.Settings settings47 = indexMetaData39.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder38.settings(settings47);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple49 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params9, settings47);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNotNull(params9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test01130() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01130");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        java.lang.Throwable throwable8 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult9 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult10 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, false, throwable8, writeResult9);
        bulkShardRequest4.setParentTask("current version [100] is different than the one provided [100]", (long) (byte) 1);
        java.lang.String str14 = bulkShardRequest4.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str15 = bulkShardRequest4.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNull(str14);
    }

    @Test
    public void test01131() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01131");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 1, 11L);
        long long9 = versionType1.updateVersion((long) '4', (long) '4');
        java.lang.String str12 = versionType1.explainConflictForReads((long) (byte) 3, 0L);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 53L + "'", long9 == 53L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [3] is different than the one provided [0]" + "'", str12, "current version [3] is different than the one provided [0]");
    }

    @Test
    public void test01132() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01132");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        long long6 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean10 = indexMetaData8.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData8.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData0.getCustoms();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder17 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params18 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder17, params18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(params18);
    }

    @Test
    public void test01133() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01133");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest10.primaryTerm((long) (byte) 1);
        long long13 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest10.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest16.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue28 = bulkShardRequest27.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest23.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest22.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest9.timeout(timeValue28);
        bulkShardRequest31.setParentTask("index.blocks.read_only", (long) (short) 10);
        org.elasticsearch.action.update.UpdateHelper.Result result35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue41 = bulkShardRequest40.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest36.timeout(timeValue41);
        boolean boolean43 = bulkShardRequest36.getShouldPersistResult();
        java.lang.Throwable throwable45 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult46 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult47 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result35, (org.elasticsearch.action.ActionRequest) bulkShardRequest36, true, throwable45, writeResult46);
        org.elasticsearch.index.shard.ShardId shardId48 = bulkShardRequest36.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long50 = bulkShardRequest49.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest49.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.common.transport.TransportAddress transportAddress53 = bulkShardRequest52.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId54 = bulkShardRequest52.getParentTask();
        long long55 = bulkShardRequest52.seqNo();
        boolean boolean56 = bulkShardRequest52.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId57 = bulkShardRequest52.getParentTask();
        bulkShardRequest36.setParentTask(taskId57);
        bulkShardRequest31.setParentTask(taskId57);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput60 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest31.writeTo(streamOutput60);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(timeValue41);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNull(shardId48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNull(transportAddress53);
        org.junit.Assert.assertNotNull(taskId54);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + false + "'", boolean56 == false);
        org.junit.Assert.assertNotNull(taskId57);
    }

    @Test
    public void test01134() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01134");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [0] is higher than the one provided [98]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is higher than the one provided [98]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01135() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01135");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        long long16 = builder15.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.creationDate((long) (byte) 100);
        long long23 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = builder20.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple29 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest26, state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData32.getAliases();
        org.elasticsearch.Version version34 = indexMetaData32.getUpgradedVersion();
        org.apache.lucene.util.Version version35 = indexMetaData32.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData32.getCustoms();
        java.util.Set<java.lang.String> strSet39 = indexMetaData32.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder30.putActiveAllocationIds(0, strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean43 = indexMetaData41.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData41.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        int int47 = indexMetaData41.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData41.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder40.settings(settings49);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple51 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params11, settings49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = indexMetaData0.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test01136() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01136");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData12.getMappings();
        org.elasticsearch.Version version20 = indexMetaData12.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.common.io.stream.StreamInput streamInput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = indexMetaData12.readFrom(streamInput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(version20);
    }

    @Test
    public void test01137() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01137");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = builder5.mapping("current version [10] is different than the one provided [98]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test01138() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01138");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.data_path", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("current version [100] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.putMapping(mappingMetaData7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01139() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01139");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test01140() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01140");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.tasks.TaskId taskId7 = bulkShardRequest0.getParentTask();
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest0.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = bulkShardRequest12.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest12.getParentTask();
        org.elasticsearch.tasks.TaskId taskId15 = bulkShardRequest12.getParentTask();
        bulkShardRequest0.setParentTask(taskId15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = null;
        bulkShardRequest0.remoteAddress(transportAddress17);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(taskId7);
        org.junit.Assert.assertNull(shardId8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(transportAddress13);
        org.junit.Assert.assertNotNull(taskId14);
        org.junit.Assert.assertNotNull(taskId15);
    }

    @Test
    public void test01141() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01141");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.index.Index index12 = indexMetaData5.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.Version version14 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.Version version15 = indexMetaData5.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData5.getCustoms();
        boolean boolean17 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap16);
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.readDiffFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
    }

    @Test
    public void test01142() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01142");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.primaryTerm(0, 0L);
        long long8 = builder7.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test01143() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01143");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 1, (long) (short) 1);
        byte byte4 = versionType0.getValue();
        boolean boolean6 = versionType0.validateVersionForWrites(2L);
        boolean boolean9 = versionType0.isVersionConflictForReads((long) (short) 0, 100L);
        boolean boolean11 = versionType0.validateVersionForWrites(0L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + byte4 + "' != '" + (byte) 0 + "'", byte4 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01144() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01144");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        long long9 = versionType1.updateVersion((long) (byte) 100, 1L);
        boolean boolean11 = versionType1.validateVersionForReads((long) 10);
        boolean boolean15 = versionType1.isVersionConflictForWrites((long) (short) 100, (long) (byte) 10, true);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 101L + "'", long9 == 101L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01145() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01145");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
        int int7 = builder5.numberOfShards();
        int int8 = builder5.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01146() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01146");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        long long22 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder3.version(101L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = builder3.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder3.putMapping(mappingMetaData28);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
    }

    @Test
    public void test01147() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01147");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version11 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData8.getAliases();
        int int22 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData8.getSettings();
        org.elasticsearch.transport.TransportService transportService24 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService25 = null;
        org.elasticsearch.indices.IndicesService indicesService26 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool27 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction28 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction29 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper30 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters31 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction33 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings23, transportService24, clusterService25, indicesService26, threadPool27, shardStateAction28, mappingUpdatedAction29, updateHelper30, actionFilters31, indexNameExpressionResolver32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
    }

    @Test
    public void test01148() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01148");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("update");
    }

    @Test
    public void test01149() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01149");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long6 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings8);
        boolean boolean10 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings8);
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings8);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
    }

    @Test
    public void test01150() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01150");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.created_string", throwable2, "");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting5 = shardFailure4.routing;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting6 = shardFailure4.routing;
        java.lang.String str7 = shardFailure4.indexUUID;
        java.lang.String str8 = shardFailure4.indexUUID;
        java.lang.Throwable throwable9 = shardFailure4.cause;
        org.junit.Assert.assertNull(shardRouting5);
        org.junit.Assert.assertNull(shardRouting6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "" + "'", str7, "");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "" + "'", str8, "");
        org.junit.Assert.assertNull(throwable9);
    }

    @Test
    public void test01151() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01151");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest5.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId7 = bulkShardRequest5.getParentTask();
        java.lang.Throwable throwable9 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult10 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult11 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest5, false, throwable9, writeResult10);
        long long12 = bulkShardRequest5.seqNo();
        long long13 = bulkShardRequest5.seqNo();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult14 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult15 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest5, writeResult14);
        org.elasticsearch.action.update.UpdateResponse updateResponse16 = updateResult15.noopResult;
        boolean boolean17 = updateResult15.failure();
        org.elasticsearch.action.ActionRequest actionRequest18 = updateResult15.actionRequest;
        org.elasticsearch.action.ActionRequest actionRequest19 = updateResult15.actionRequest;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertNotNull(taskId7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(updateResponse16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(actionRequest18);
        org.junit.Assert.assertNotNull(actionRequest19);
    }

    @Test
    public void test01152() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01152");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        boolean boolean11 = indexMetaData0.isSameUUID("current version [10] is higher than the one provided [10]");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean16 = indexMetaData14.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        long long18 = builder17.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.creationDate((long) (byte) 100);
        long long25 = builder22.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = builder22.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple31 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest28, state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder27.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap35 = indexMetaData34.getAliases();
        org.elasticsearch.Version version36 = indexMetaData34.getUpgradedVersion();
        org.apache.lucene.util.Version version37 = indexMetaData34.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData34);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData34.getCustoms();
        java.util.Set<java.lang.String> strSet41 = indexMetaData34.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder32.putActiveAllocationIds(0, strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean45 = indexMetaData43.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData43.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        int int49 = indexMetaData43.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.settings.Settings settings51 = indexMetaData43.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder42.settings(settings51);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple53 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params13, settings51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = indexMetaData0.toXContent(xContentBuilder12, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(params13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01153() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01153");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData2.getSettings();
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings6);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01154() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01154");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData2.getActiveAllocationIds();
        int int7 = indexMetaData2.getNumberOfReplicas();
        org.apache.lucene.util.Version version8 = indexMetaData2.getMinimumCompatibleVersion();
        int int9 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData2.mapping("current version [32] is different than the one provided [97]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData2.requireFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData2.readDiffFrom(streamInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test01155() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01155");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest3.indicesOptions();
        bulkShardRequest3.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel7 = bulkShardRequest3.consistencyLevel();
        long long8 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.tasks.TaskId taskId9 = bulkShardRequest3.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel7 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel7.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(taskId9);
    }

    @Test
    public void test01156() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01156");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [1] is different than the one provided [97]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [1] is different than the one provided [97]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01157() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01157");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        long long6 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean10 = indexMetaData8.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData8.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData8);
        org.apache.lucene.util.Version version16 = indexMetaData8.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData8.requireFilters();
        int int18 = indexMetaData8.getTotalNumberOfShards();
        long long19 = indexMetaData8.getCreationDate();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params21 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = indexMetaData8.toXContent(xContentBuilder20, params21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(params21);
    }

    @Test
    public void test01158() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01158");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest3.remoteAddress(transportAddress6);
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = bulkShardRequest3.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.update.UpdateHelper.Result result14 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest16.timeout(timeValue21);
        boolean boolean23 = bulkShardRequest16.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue24 = bulkShardRequest16.timeout();
        java.lang.Throwable throwable26 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult27 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult28 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result15, (org.elasticsearch.action.ActionRequest) bulkShardRequest16, false, throwable26, writeResult27);
        java.lang.Throwable throwable30 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult31 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult32 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result14, (org.elasticsearch.action.ActionRequest) bulkShardRequest16, true, throwable30, writeResult31);
        org.elasticsearch.tasks.TaskId taskId33 = bulkShardRequest16.getParentTask();
        bulkShardRequest13.setParentTask(taskId33);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task35 = bulkShardRequest3.createTask(53L, "index.shared_filesystem.recover_on_any_node", "index.data_path", taskId33);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNull(writeConsistencyLevel9);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(taskId33);
    }

    @Test
    public void test01159() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01159");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (byte) 1, (long) (short) 0, true);
        boolean boolean12 = versionType1.validateVersionForWrites((long) 1);
        org.elasticsearch.index.VersionType versionType13 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType13.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(versionType13);
    }

    @Test
    public void test01160() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01160");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData0.getSettings();
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings22);
        org.elasticsearch.transport.TransportService transportService24 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService25 = null;
        org.elasticsearch.indices.IndicesService indicesService26 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool27 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction28 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction29 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper30 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters31 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction33 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings22, transportService24, clusterService25, indicesService26, threadPool27, shardStateAction28, mappingUpdatedAction29, updateHelper30, actionFilters31, indexNameExpressionResolver32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01161() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01161");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean4 = versionType2.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType2.validateVersionForWrites((long) (byte) 10);
        byte byte7 = versionType2.getValue();
        long long10 = versionType2.updateVersion((long) (-1), (long) (short) 100);
        org.elasticsearch.index.VersionType versionType11 = versionType2.versionTypeForReplicationAndRecovery();
        boolean boolean15 = versionType2.isVersionConflictForWrites((long) 100, 100L, true);
        boolean boolean17 = versionType2.validateVersionForWrites(32L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType18 = org.elasticsearch.index.VersionType.fromString("current version [1] is different than the one provided [0]", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [1] is different than the one provided [0]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01162() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01162");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        long long4 = builder3.version();
        java.lang.String str5 = builder3.index();
        java.lang.String str6 = builder3.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.index("current version [-1] is different than the one provided [32]");
        // The following exception was thrown during execution in test generation
        try {
            int int9 = builder8.numberOfShards();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.shadow_replicas" + "'", str5, "index.shadow_replicas");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.shadow_replicas" + "'", str6, "index.shadow_replicas");
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test01163() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01163");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + 10 + "'", int3 == 10);
    }

    @Test
    public void test01164() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01164");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        long long9 = versionType1.updateVersion((long) (byte) 100, 1L);
        java.lang.String str12 = versionType1.explainConflictForReads((long) (short) 100, (long) (short) 10);
        java.lang.String str15 = versionType1.explainConflictForReads((long) (-1), 1L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 101L + "'", long9 == 101L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [100] is different than the one provided [10]" + "'", str12, "current version [100] is different than the one provided [10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [-1] is different than the one provided [1]" + "'", str15, "current version [-1] is different than the one provided [1]");
    }

    @Test
    public void test01165() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01165");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest16.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.timeout(timeValue25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest26.indicesOptions();
        bulkShardRequest26.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest34 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '4', (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str35 = bulkItemRequest34.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
    }

    @Test
    public void test01166() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01166");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [1] is different than the one provided [97]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01167() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01167");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean21 = indexMetaData19.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData19.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap25 = indexMetaData19.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData19.excludeFilters();
        int int27 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.putMapping(mappingMetaData31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test01168() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01168");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean13 = indexMetaData11.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData11);
        long long15 = builder14.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.creationDate((long) (byte) 100);
        long long22 = builder19.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = builder19.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple28 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest25, state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap32 = indexMetaData31.getAliases();
        org.elasticsearch.Version version33 = indexMetaData31.getUpgradedVersion();
        org.apache.lucene.util.Version version34 = indexMetaData31.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData31);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap36 = indexMetaData31.getCustoms();
        java.util.Set<java.lang.String> strSet38 = indexMetaData31.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder29.putActiveAllocationIds(0, strSet38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean42 = indexMetaData40.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData40);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap44 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData40);
        int int46 = indexMetaData40.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData40);
        org.elasticsearch.common.settings.Settings settings48 = indexMetaData40.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder39.settings(settings48);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple50 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params10, settings48);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(params10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(version33);
        org.junit.Assert.assertNull(version34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertNotNull(strSet38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
    }

    @Test
    public void test01169() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01169");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.primaryTerm(0, 0L);
        org.elasticsearch.common.settings.Settings.Builder builder8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.settings(builder8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01170() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01170");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (byte) 1, (long) (short) 0, true);
        long long13 = versionType1.updateVersion((long) 10, (long) 10);
        org.elasticsearch.index.VersionType versionType14 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean17 = versionType1.isVersionConflictForReads((long) 1, (long) (byte) 2);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test01171() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01171");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest9.remoteAddress();
        bulkShardRequest9.primaryTerm((long) (short) 10);
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest9.remoteAddress(transportAddress15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest21.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest17.timeout(timeValue22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest28.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest24.timeout(timeValue29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest23.timeout(timeValue29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest32.timeout(timeValue37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long40 = bulkShardRequest39.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue44 = bulkShardRequest43.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest39.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest38.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest23.timeout(timeValue44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest9.timeout(timeValue44);
        org.elasticsearch.tasks.TaskId taskId49 = bulkShardRequest48.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest48.index("current version [0] is different than the one provided [10]");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNull(taskId49);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
    }

    @Test
    public void test01172() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01172");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.priority", throwable2, "update");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting5 = shardFailure4.routing;
        java.lang.Throwable throwable6 = shardFailure4.cause;
        org.junit.Assert.assertNull(shardRouting5);
        org.junit.Assert.assertNull(throwable6);
    }

    @Test
    public void test01173() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01173");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue9 = bulkShardRequest1.timeout();
        java.lang.Throwable throwable11 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult12 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult13 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, false, throwable11, writeResult12);
        boolean boolean14 = updateResult13.retry;
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01174() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01174");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.uuid");
        int int15 = indexMetaData12.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData12.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
    }

    @Test
    public void test01175() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01175");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        long long16 = builder15.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.creationDate((long) (byte) 100);
        long long23 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = builder20.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple29 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest26, state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData32.getAliases();
        org.elasticsearch.Version version34 = indexMetaData32.getUpgradedVersion();
        org.apache.lucene.util.Version version35 = indexMetaData32.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData32.getCustoms();
        java.util.Set<java.lang.String> strSet39 = indexMetaData32.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder30.putActiveAllocationIds(0, strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean43 = indexMetaData41.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData41.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        int int47 = indexMetaData41.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData41.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder40.settings(settings49);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple51 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params11, settings49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = indexMetaData0.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test01176() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01176");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData13.getAliases();
        org.elasticsearch.Version version15 = indexMetaData13.getUpgradedVersion();
        org.apache.lucene.util.Version version16 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap18 = indexMetaData13.getCustoms();
        java.util.Set<java.lang.String> strSet20 = indexMetaData13.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder11.putActiveAllocationIds((int) (byte) -1, strSet20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = builder11.build();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData22.getMappings();
        org.elasticsearch.common.io.stream.StreamInput streamInput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff25 = indexMetaData22.readDiffFrom(streamInput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
    }

    @Test
    public void test01177() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01177");
        org.elasticsearch.common.xcontent.ToXContent.Params params0 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData1 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean3 = indexMetaData1.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData1);
        long long5 = builder4.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.state(state6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) (byte) 100);
        long long12 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = builder9.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple18 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest15, state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData21.getAliases();
        org.elasticsearch.Version version23 = indexMetaData21.getUpgradedVersion();
        org.apache.lucene.util.Version version24 = indexMetaData21.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData21.getCustoms();
        java.util.Set<java.lang.String> strSet28 = indexMetaData21.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder19.putActiveAllocationIds(0, strSet28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean32 = indexMetaData30.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap34 = indexMetaData30.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        int int36 = indexMetaData30.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.elasticsearch.common.settings.Settings settings38 = indexMetaData30.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder29.settings(settings38);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple40 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params0, settings38);
        org.elasticsearch.transport.TransportService transportService41 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService42 = null;
        org.elasticsearch.indices.IndicesService indicesService43 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool44 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction45 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction46 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper47 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters48 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver49 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction50 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings38, transportService41, clusterService42, indicesService43, threadPool44, shardStateAction45, mappingUpdatedAction46, updateHelper47, actionFilters48, indexNameExpressionResolver49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(params0);
        org.junit.Assert.assertNotNull(indexMetaData1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertNotNull(strSet28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(settings38);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test01178() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01178");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [10] is different than the one provided [-1]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01179() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01179");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.version((long) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        java.lang.String str14 = builder13.index();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean17 = indexMetaData15.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData15.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData15.mapping("active_allocations");
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData15.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder13.settings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder5.settings(settings22);
        boolean boolean25 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings22);
        org.elasticsearch.transport.TransportService transportService26 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService27 = null;
        org.elasticsearch.indices.IndicesService indicesService28 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool29 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction30 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction31 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper32 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters33 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver34 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction35 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings22, transportService26, clusterService27, indicesService28, threadPool29, shardStateAction30, mappingUpdatedAction31, updateHelper32, actionFilters33, indexNameExpressionResolver34);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shadow_replicas" + "'", str14, "index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01180() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01180");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [34] is different than the one provided [34]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01181() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01181");
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue8 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.timeout(timeValue8);
        boolean boolean10 = bulkShardRequest3.getShouldPersistResult();
        java.lang.Throwable throwable12 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult14 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result2, (org.elasticsearch.action.ActionRequest) bulkShardRequest3, true, throwable12, writeResult13);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult15 = updateResult14.writeResult;
        boolean boolean16 = updateResult14.retry;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = updateResult14.request();
        org.elasticsearch.action.update.UpdateHelper.Result result19 = null;
        org.elasticsearch.action.ActionRequest actionRequest20 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting22 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting24 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = bulkShardRequest30.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId32 = bulkShardRequest30.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest30.remoteAddress(transportAddress33);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.timeout(timeValue39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long42 = bulkShardRequest41.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest41.timeout(timeValue43);
        org.elasticsearch.action.support.IndicesOptions indicesOptions45 = bulkShardRequest44.indicesOptions();
        bulkShardRequest44.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest44.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long53 = bulkShardRequest52.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel54 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest52.consistencyLevel(writeConsistencyLevel54);
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = bulkShardRequest55.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId57 = bulkShardRequest55.getParentTask();
        long long58 = bulkShardRequest55.seqNo();
        boolean boolean59 = bulkShardRequest55.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId60 = bulkShardRequest55.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException61 = bulkShardRequest55.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult62 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult63 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result26, (org.elasticsearch.action.ActionRequest) bulkShardRequest50, false, (java.lang.Throwable) actionRequestValidationException61, writeResult62);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure65 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting24, "current version [-1] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException61, "index.data_path");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure67 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting22, "", (java.lang.Throwable) actionRequestValidationException61, "index.uuid");
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult68 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult69 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result19, actionRequest20, true, (java.lang.Throwable) actionRequestValidationException61, writeResult68);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult70 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult71 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17, false, (java.lang.Throwable) actionRequestValidationException61, writeResult70);
        org.elasticsearch.action.ActionRequest actionRequest72 = updateResult71.actionRequest;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest73 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, actionRequest72);
        int int74 = bulkItemRequest73.id();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(writeResult15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(transportAddress31);
        org.junit.Assert.assertNotNull(taskId32);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(indicesOptions45);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNull(transportAddress56);
        org.junit.Assert.assertNotNull(taskId57);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(taskId60);
        org.junit.Assert.assertNotNull(actionRequestValidationException61);
        org.junit.Assert.assertNotNull(actionRequest72);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 10 + "'", int74 == 10);
    }

    @Test
    public void test01182() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01182");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder8.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean16 = indexMetaData14.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData14.getInitialRecoveryFilters();
        long long20 = indexMetaData14.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData14.getState();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.cluster.block.ClusterBlock clusterBlock24 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_READ_ONLY_BLOCK;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Settings, org.elasticsearch.cluster.block.ClusterBlock> settingsTuple25 = org.elasticsearch.common.collect.Tuple.tuple(settings23, clusterBlock24);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings23);
        org.elasticsearch.common.settings.Settings settings27 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder13.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean34 = indexMetaData32.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData32.getInitialRecoveryFilters();
        long long38 = indexMetaData32.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData32.getState();
        org.elasticsearch.common.settings.Settings settings40 = indexMetaData32.getSettings();
        boolean boolean41 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings40);
        boolean boolean42 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder31.settings(settings40);
        java.lang.String[] strArray83 = new java.lang.String[] { "index.blocks.metadata", "current version [-1] is different than the one provided [32]", "index.shadow_replicas", "index.shared_filesystem", "index.creation_date_string", "index.shadow_replicas", "index.number_of_replicas", "current version [-1] is different than the one provided [1]", "index.shared_filesystem", "index.shared_filesystem", "index.blocks.read_only", "index.blocks.read", "active_allocations", "index.blocks.metadata", "", "index.version.created", "index.shadow_replicas", "index.auto_expand_replicas", "index.auto_expand_replicas", "current version [0] is different than the one provided [-1]", "indices:data/write/bulk[s]", "index.creation_date", "current version [100] is different than the one provided [10]", "current version [1] is different than the one provided [10]", "current version [-1] is different than the one provided [-1]", "current version [1] is different than the one provided [-1]", "index.blocks.metadata", "index.shared_filesystem", "index.blocks.read", "current version [100] is different than the one provided [100]", "index.blocks.read_only", "current version [0] is different than the one provided [-1]", "current version [100] is different than the one provided [2]", "index.blocks.read_only", "index.shared_filesystem.recover_on_any_node", "primary_terms", "current version [0] is different than the one provided [-1]", "current version [1] is different than the one provided [10]" };
        java.util.LinkedHashSet<java.lang.String> strSet84 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean85 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet84, strArray83);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder43.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder28.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder28.version((long) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(clusterBlock24);
        org.junit.Assert.assertNotNull(settingsTuple25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(strArray83);
        org.junit.Assert.assertTrue("'" + boolean85 + "' != '" + true + "'", boolean85 == true);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
    }

    @Test
    public void test01183() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01183");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01184() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01184");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting3 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting5 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest11.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest11.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest11.remoteAddress(transportAddress14);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest22.timeout(timeValue24);
        org.elasticsearch.action.support.IndicesOptions indicesOptions26 = bulkShardRequest25.indicesOptions();
        bulkShardRequest25.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest25.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long34 = bulkShardRequest33.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest33.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.transport.TransportAddress transportAddress37 = bulkShardRequest36.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId38 = bulkShardRequest36.getParentTask();
        long long39 = bulkShardRequest36.seqNo();
        boolean boolean40 = bulkShardRequest36.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest36.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest36.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult43 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult44 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result7, (org.elasticsearch.action.ActionRequest) bulkShardRequest31, false, (java.lang.Throwable) actionRequestValidationException42, writeResult43);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure46 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting5, "current version [-1] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException42, "index.data_path");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure48 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting3, "", (java.lang.Throwable) actionRequestValidationException42, "index.uuid");
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult49 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult50 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, actionRequest1, true, (java.lang.Throwable) actionRequestValidationException42, writeResult49);
        java.lang.Class<?> wildcardClass51 = actionRequestValidationException42.getClass();
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(indicesOptions26);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(transportAddress37);
        org.junit.Assert.assertNotNull(taskId38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNotNull(wildcardClass51);
    }

    @Test
    public void test01185() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01185");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long4 = versionType1.updateVersion((-1L), (long) 'a');
        long long7 = versionType1.updateVersion((long) (byte) -1, (long) '4');
        boolean boolean9 = versionType1.validateVersionForWrites(11L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test01186() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01186");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest6.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest2.timeout(timeValue7);
        boolean boolean9 = bulkShardRequest2.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest2.timeout();
        java.lang.Throwable throwable12 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult14 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, false, throwable12, writeResult13);
        java.lang.Throwable throwable16 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult17 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult18 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, true, throwable16, writeResult17);
        boolean boolean19 = bulkShardRequest2.getShouldPersistResult();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01187() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01187");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        long long22 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.version(0L);
        long long25 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean29 = indexMetaData27.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder30.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.state(state33);
        java.lang.String[] strArray61 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder34.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder3.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = builder65.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder65.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder69.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom72 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder70.putCustom("index.number_of_shards", custom72);
        org.elasticsearch.common.settings.Settings.Builder builder74 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder73.settings(builder74);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder73);
    }

    @Test
    public void test01188() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01188");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long6 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        int int11 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putMapping("update", "index.shadow_replicas");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01189() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01189");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder9 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params10 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = indexMetaData0.toXContent(xContentBuilder9, params10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(params10);
    }

    @Test
    public void test01190() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01190");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest0.shardId();
        bulkShardRequest0.setParentTask("index.version.created", (long) '#');
        bulkShardRequest0.primaryTerm(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(shardId8);
    }

    @Test
    public void test01191() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01191");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData4.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
    }

    @Test
    public void test01192() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01192");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData6.getAliases();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = indexMetaData6.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(params11);
    }

    @Test
    public void test01193() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01193");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.xcontent.XContentParser xContentParser4 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = indexMetaData0.fromXContent(xContentParser4, parseFieldMatcher5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
    }

    @Test
    public void test01194() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01194");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest8.remoteAddress();
        bulkShardRequest8.primaryTerm((long) (byte) 0);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest8.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue13 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest8.timeout(timeValue13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest8.setShardId(shardId15);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str17 = bulkShardRequest8.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
    }

    @Test
    public void test01195() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01195");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfReplicas((int) (byte) 2);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.putAlias(aliasMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01196() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01196");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.index.Index index12 = indexMetaData5.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.Version version14 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.Version version15 = indexMetaData5.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData5.getCustoms();
        boolean boolean17 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap16);
        long long18 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean21 = indexMetaData19.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData19.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap24 = indexMetaData19.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData19.diff(indexMetaData25);
        long long28 = indexMetaData25.getCreationDate();
        boolean boolean29 = indexMetaData0.equals((java.lang.Object) long28);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder30 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params31 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean34 = indexMetaData32.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        long long36 = builder35.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.creationDate((long) (byte) 100);
        long long43 = builder40.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = builder40.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple49 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest46, state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder45.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap53 = indexMetaData52.getAliases();
        org.elasticsearch.Version version54 = indexMetaData52.getUpgradedVersion();
        org.apache.lucene.util.Version version55 = indexMetaData52.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData52.getCustoms();
        java.util.Set<java.lang.String> strSet59 = indexMetaData52.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder50.putActiveAllocationIds(0, strSet59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean63 = indexMetaData61.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData61);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap65 = indexMetaData61.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData61);
        int int67 = indexMetaData61.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData61);
        org.elasticsearch.common.settings.Settings settings69 = indexMetaData61.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder60.settings(settings69);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple71 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params31, settings69);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder72 = indexMetaData0.toXContent(xContentBuilder30, params31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + (-1L) + "'", long28 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(params31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNotNull(strImmutableOpenMap53);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(strSet59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(strImmutableOpenMap65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertTrue("'" + int67 + "' != '" + 0 + "'", int67 == 0);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(settings69);
        org.junit.Assert.assertNotNull(builder70);
    }

    @Test
    public void test01197() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01197");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.creation_date_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.data_path", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.removeAlias("current version [100] is different than the one provided [0]");
        int int7 = builder6.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test01198() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01198");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.putAlias(aliasMetaData2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01199() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01199");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        byte byte2 = versionType1.getValue();
        byte byte3 = versionType1.getValue();
        long long6 = versionType1.updateVersion((long) (byte) 0, (long) ' ');
        java.lang.String str10 = versionType1.explainConflictForWrites((long) (byte) 0, (long) (short) 0, true);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + byte2 + "' != '" + (byte) 2 + "'", byte2 == (byte) 2);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 2 + "'", byte3 == (byte) 2);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 32L + "'", long6 == 32L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [0] is higher than the one provided [0]" + "'", str10, "current version [0] is higher than the one provided [0]");
    }

    @Test
    public void test01200() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01200");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        int int20 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version21 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder22 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params23 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean26 = indexMetaData24.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        long long28 = builder27.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state29 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.state(state29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.creationDate((long) (byte) 100);
        long long35 = builder32.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = builder32.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple41 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest38, state40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder37.state(state40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap45 = indexMetaData44.getAliases();
        org.elasticsearch.Version version46 = indexMetaData44.getUpgradedVersion();
        org.apache.lucene.util.Version version47 = indexMetaData44.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData44);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData44.getCustoms();
        java.util.Set<java.lang.String> strSet51 = indexMetaData44.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder42.putActiveAllocationIds(0, strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean55 = indexMetaData53.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap57 = indexMetaData53.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        int int59 = indexMetaData53.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.common.settings.Settings settings61 = indexMetaData53.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder52.settings(settings61);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params23, settings61);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder22, params23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(params23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + state29 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state29.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 1L + "'", long35 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(strImmutableOpenMap57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertTrue("'" + int59 + "' != '" + 0 + "'", int59 == 0);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(settings61);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test01201() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01201");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateResponse updateResponse1 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult2 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, updateResponse1);
        java.lang.Throwable throwable3 = updateResult2.error;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult4 = updateResult2.writeResult;
        boolean boolean5 = updateResult2.success();
        org.elasticsearch.action.update.UpdateResponse updateResponse6 = updateResult2.noopResult;
        boolean boolean7 = updateResult2.retry;
        org.junit.Assert.assertNull(throwable3);
        org.junit.Assert.assertNull(writeResult4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNull(updateResponse6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test01202() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01202");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        bulkShardRequest3.seqNo((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest3.timeout("current version [2] is different than the one provided [-1]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [2] is different than the one provided [-1]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
    }

    @Test
    public void test01203() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01203");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        long long9 = versionType1.updateVersion((long) (byte) 100, 1L);
        java.lang.String str12 = versionType1.explainConflictForReads((long) (short) 100, (long) (short) 10);
        java.lang.String str15 = versionType1.explainConflictForReads((long) 0, (long) 1);
        long long18 = versionType1.updateVersion((long) 'a', (long) (byte) 1);
        java.lang.String str22 = versionType1.explainConflictForWrites((long) (short) 0, 99L, false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 101L + "'", long9 == 101L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [100] is different than the one provided [10]" + "'", str12, "current version [100] is different than the one provided [10]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str15, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 98L + "'", long18 == 98L);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "current version [0] is different than the one provided [99]" + "'", str22, "current version [0] is different than the one provided [99]");
    }

    @Test
    public void test01204() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01204");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder8.putCustom("current version [100] is different than the one provided [10]", custom14);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01205() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01205");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        byte byte6 = versionType1.getValue();
        long long9 = versionType1.updateVersion((long) (-1), (long) (short) 100);
        org.elasticsearch.index.VersionType versionType10 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType11 = versionType10.versionTypeForReplicationAndRecovery();
        boolean boolean13 = versionType10.validateVersionForReads((long) '#');
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01206() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01206");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.state(state12);
        byte byte15 = state12.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 1 + "'", byte15 == (byte) 1);
    }

    @Test
    public void test01207() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01207");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        int int5 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.index.Index index6 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(index6);
    }

    @Test
    public void test01208() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01208");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [52] is higher than the one provided [10]");
    }

    @Test
    public void test01209() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01209");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData9.getAliases();
        org.elasticsearch.Version version11 = indexMetaData9.getUpgradedVersion();
        org.apache.lucene.util.Version version12 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings13 = indexMetaData9.getSettings();
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder3.settings(settings13);
        int int16 = builder3.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(settings13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test01210() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01210");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("");
        org.elasticsearch.common.settings.Settings.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.settings(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test01211() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01211");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder3.creationDate((long) (short) -1);
        int int24 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder3.putAlias(aliasMetaData25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
    }

    @Test
    public void test01212() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01212");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        java.lang.String str12 = builder11.index();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean15 = indexMetaData13.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData13.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData13.mapping("active_allocations");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData13.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder11.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder7.settings(settings20);
        org.elasticsearch.transport.TransportService transportService23 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService24 = null;
        org.elasticsearch.indices.IndicesService indicesService25 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool26 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction27 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction28 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper29 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters30 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction32 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings20, transportService23, clusterService24, indicesService25, threadPool26, shardStateAction27, mappingUpdatedAction28, updateHelper29, actionFilters30, indexNameExpressionResolver31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.shadow_replicas" + "'", str12, "index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01213() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01213");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout("current version [10] is different than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [10] is different than the one provided [32]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
    }

    @Test
    public void test01214() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01214");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test01215() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01215");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [2] is different than the one provided [-1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [2] is different than the one provided [-1]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01216() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01216");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest8.remoteAddress();
        bulkShardRequest8.primaryTerm((long) (byte) 0);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel12);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest13.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
    }

    @Test
    public void test01217() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01217");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [11] is different than the one provided [100]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01218() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01218");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings8);
        org.elasticsearch.transport.TransportService transportService10 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService11 = null;
        org.elasticsearch.indices.IndicesService indicesService12 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool13 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction14 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction15 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper16 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters17 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction19 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings8, transportService10, clusterService11, indicesService12, threadPool13, shardStateAction14, mappingUpdatedAction15, updateHelper16, actionFilters17, indexNameExpressionResolver18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01219() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01219");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        bulkShardRequest3.seqNo((long) (short) -1);
        org.elasticsearch.action.update.UpdateHelper.Result result9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = bulkShardRequest13.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId15 = bulkShardRequest13.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest13.remoteAddress(transportAddress16);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.index("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData22.getState();
        org.elasticsearch.index.Index index24 = indexMetaData22.getMergeSourceIndex();
        int int25 = indexMetaData22.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData22.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap27 = indexMetaData22.getCustoms();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.IndicesRequest, org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>> indicesRequestTuple28 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.IndicesRequest, org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom>>((org.elasticsearch.action.IndicesRequest) bulkShardRequest21, strImmutableOpenMap27);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult29 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult30 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result9, (org.elasticsearch.action.ActionRequest) bulkShardRequest21, writeResult29);
        org.elasticsearch.index.shard.ShardId shardId31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest21.setShardId(shardId31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long34 = bulkShardRequest33.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest33.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.transport.TransportAddress transportAddress37 = bulkShardRequest36.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId38 = bulkShardRequest36.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = null;
        bulkShardRequest36.remoteAddress(transportAddress39);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest36.index("index.blocks.read");
        bulkShardRequest36.seqNo(0L);
        org.elasticsearch.tasks.TaskId taskId47 = bulkShardRequest36.getParentTask();
        bulkShardRequest21.setParentTask(taskId47);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task49 = bulkShardRequest3.createTask(102L, "current version [0] is higher than the one provided [1]", "current version [100] is different than the one provided [97]", taskId47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNull(transportAddress14);
        org.junit.Assert.assertNotNull(taskId15);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(transportAddress37);
        org.junit.Assert.assertNotNull(taskId38);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(taskId47);
    }

    @Test
    public void test01220() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01220");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        long long6 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
    }

    @Test
    public void test01221() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01221");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        java.lang.Throwable throwable3 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult4 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult5 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, actionRequest1, true, throwable3, writeResult4);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult6 = updateResult5.writeResult;
        boolean boolean7 = updateResult5.retry;
        org.elasticsearch.action.update.UpdateHelper.Result result8 = updateResult5.result;
        org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest> bulkShardRequestReplicationRequest9 = updateResult5.request();
        boolean boolean10 = updateResult5.retry;
        boolean boolean11 = updateResult5.retry;
        java.lang.Throwable throwable12 = updateResult5.error;
        org.junit.Assert.assertNull(writeResult6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(result8);
        org.junit.Assert.assertNull(bulkShardRequestReplicationRequest9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(throwable12);
    }

    @Test
    public void test01222() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01222");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [52] is different than the one provided [10]");
    }

    @Test
    public void test01223() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01223");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("current version [-1] is different than the one provided [-1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(mappingMetaData12);
    }

    @Test
    public void test01224() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01224");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        byte byte6 = state5.id();
        byte byte7 = state5.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
    }

    @Test
    public void test01225() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01225");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean4 = versionType2.validateVersionForWrites((long) (short) 100);
        boolean boolean7 = versionType2.isVersionConflictForReads((long) 100, (long) 'a');
        boolean boolean11 = versionType2.isVersionConflictForWrites((long) (byte) 10, 100L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType12 = org.elasticsearch.index.VersionType.fromString("current version [0] is different than the one provided [99]", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is different than the one provided [99]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test01226() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01226");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [100] is different than the one provided [97]");
    }

    @Test
    public void test01227() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01227");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData7.getInitialRecoveryFilters();
        long long13 = indexMetaData7.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData7.getState();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData7.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder6.settings(settings15);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder1.putCustom("", custom22);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.putMapping(mappingMetaData24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test01228() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01228");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.apache.lucene.util.Version version5 = indexMetaData4.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData4.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData4.requireFilters();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData4.activeAllocationIds(52);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(strSet12);
    }

    @Test
    public void test01229() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01229");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.version((long) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.state(state15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.state(state20);
        byte byte22 = state20.id();
        byte byte23 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder9.state(state20);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = builder9.mapping("current version [0] is different than the one provided [102]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNull(mappingMetaData26);
    }

    @Test
    public void test01230() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01230");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        bulkShardRequest9.setParentTask("index.shared_filesystem", (long) 100);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel13);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest14.validate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest14.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(actionRequestValidationException15);
    }

    @Test
    public void test01231() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01231");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version11 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData8.getAliases();
        int int22 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData8.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData8, xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test01232() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01232");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mappingOrDefault("index.auto_expand_replicas");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test01233() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01233");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        java.lang.String str2 = bulkShardRequest1.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel5);
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest6.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId8 = bulkShardRequest6.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest6.remoteAddress(transportAddress9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.timeout(timeValue19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest20.indicesOptions();
        bulkShardRequest20.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult28 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult29 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest27, writeResult28);
        java.lang.Throwable throwable30 = updateResult29.error;
        org.elasticsearch.action.ActionRequest actionRequest31 = updateResult29.actionRequest;
        boolean boolean32 = updateResult29.retry;
        org.junit.Assert.assertNull(str2);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertNotNull(taskId8);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(throwable30);
        org.junit.Assert.assertNotNull(actionRequest31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
    }

    @Test
    public void test01234() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01234");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.primaryTerm(0, (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) (byte) 3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean20 = indexMetaData18.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        long long22 = builder21.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder15.state(state28);
        int int31 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder15.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder33.putCustom("index.uuid", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData39.getState();
        org.elasticsearch.index.Index index41 = indexMetaData39.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData39.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long44 = indexMetaData43.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long46 = indexMetaData45.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData43.diff(indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData45.getSettings();
        boolean boolean50 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings49);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        boolean boolean52 = indexMetaData39.equals((java.lang.Object) settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder38.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder11.settings(settings49);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder11.putMapping(mappingMetaData55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test01235() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01235");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest3.remoteAddress(transportAddress6);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.index("hi!");
        bulkShardRequest11.seqNo((long) (byte) -1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel16);
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = bulkShardRequest17.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId19 = bulkShardRequest17.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest17.remoteAddress(transportAddress20);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest23.index("hi!");
        long long26 = bulkShardRequest25.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = bulkShardRequest30.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId32 = bulkShardRequest30.getParentTask();
        long long33 = bulkShardRequest30.seqNo();
        boolean boolean34 = bulkShardRequest30.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId35 = bulkShardRequest30.getParentTask();
        bulkShardRequest25.setParentTask(taskId35);
        bulkShardRequest11.setParentTask(taskId35);
        bulkShardRequest11.primaryTerm((long) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray40 = bulkShardRequest11.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNull(transportAddress18);
        org.junit.Assert.assertNotNull(taskId19);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(transportAddress31);
        org.junit.Assert.assertNotNull(taskId32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(taskId35);
    }

    @Test
    public void test01236() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01236");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder24.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long32 = builder31.version();
        java.lang.String[] strArray47 = new java.lang.String[] { "index.blocks.read_only", "index.version.created_string", "index.version.created_string", "index.shadow_replicas", "index.", "index.version.upgraded", "index.auto_expand_replicas", "index.blocks.read", "index.auto_expand_replicas", "index.version.upgraded_string", "update", "active_allocations", "index." };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder31.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder25.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder52.removeAllAliases();
        java.lang.String str54 = builder53.index();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder53.putAlias(builder55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertEquals("'" + str54 + "' != '" + "" + "'", str54, "");
    }

    @Test
    public void test01237() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01237");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long4 = versionType1.updateVersion((-1L), (long) 'a');
        long long7 = versionType1.updateVersion((long) (byte) -1, (long) '4');
        org.elasticsearch.index.VersionType versionType8 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType1.validateVersionForReads((long) 100);
        byte byte11 = versionType1.getValue();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
    }

    @Test
    public void test01238() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01238");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest8.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.index("current version [10] is higher than the one provided [10]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest15.remoteAddress();
        long long17 = bulkShardRequest15.seqNo();
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest15.getParentTask();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest15.timeout();
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest15.getParentTask();
        bulkShardRequest11.setParentTask(taskId20);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest11.timeout("current version [0] is higher than the one provided [0]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [0] is higher than the one provided [0]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(taskId20);
    }

    @Test
    public void test01239() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01239");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version11 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData12);
        java.lang.String str21 = indexMetaData12.getIndexUUID();
        org.apache.lucene.util.Version version22 = indexMetaData12.getMinimumCompatibleVersion();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertNull(version22);
        org.junit.Assert.assertNull(strSet24);
    }

    @Test
    public void test01240() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01240");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder3.creationDate((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder3.creationDate(11L);
        int int26 = builder25.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder27 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.settings(builder27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
    }

    @Test
    public void test01241() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01241");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.index("current version [98] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.putAlias(builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01242() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01242");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [-1] is higher than the one provided [10]");
    }

    @Test
    public void test01243() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01243");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.settings(settings5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder6.mapping("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test01244() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01244");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [3] is different than the one provided [0]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01245() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01245");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        byte byte7 = versionType1.getValue();
        boolean boolean9 = versionType1.validateVersionForReads(0L);
        boolean boolean12 = versionType1.isVersionConflictForReads(102L, (long) (byte) 0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
    }

    @Test
    public void test01246() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01246");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData0.getSettings();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params24 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder23, params24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(params24);
    }

    @Test
    public void test01247() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01247");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest1.primaryTerm((long) (byte) 1);
        long long4 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue8 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest1.timeout(timeValue8);
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest1.shardId();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, writeResult11);
        bulkShardRequest1.primaryTerm(2L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(shardId10);
    }

    @Test
    public void test01248() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01248");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = builder4.build();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData5.writeTo(streamOutput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
    }

    @Test
    public void test01249() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01249");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean4 = versionType2.validateVersionForWrites((long) (short) 100);
        boolean boolean7 = versionType2.isVersionConflictForReads((long) 100, (long) 'a');
        byte byte8 = versionType2.getValue();
        boolean boolean12 = versionType2.isVersionConflictForWrites((long) (short) 0, (long) (short) 100, true);
        boolean boolean15 = versionType2.isVersionConflictForReads((long) (short) 100, (long) (short) -1);
        boolean boolean19 = versionType2.isVersionConflictForWrites((long) (-1), (long) (byte) 0, true);
        boolean boolean23 = versionType2.isVersionConflictForWrites(99L, 100L, false);
        long long26 = versionType2.updateVersion(0L, 53L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType27 = org.elasticsearch.index.VersionType.fromString("current version [1] is different than the one provided [0]", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [1] is different than the one provided [0]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test01250() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01250");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
    }

    @Test
    public void test01251() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01251");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [10] is higher or equal to the one provided [10]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [10] is higher or equal to the one provided [10]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01252() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01252");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        byte byte6 = versionType1.getValue();
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (byte) -1, 101L, false);
        java.lang.String str13 = versionType1.explainConflictForReads(98L, (long) (short) 0);
        long long16 = versionType1.updateVersion((long) (short) -1, 0L);
        boolean boolean20 = versionType1.isVersionConflictForWrites(10L, 2L, true);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [98] is different than the one provided [0]" + "'", str13, "current version [98] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + true + "'", boolean20 == true);
    }

    @Test
    public void test01253() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01253");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.removeAlias("index.number_of_shards");
        int int8 = builder3.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder3.putMapping("current version [-1] is different than the one provided [11]", "current version [0] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01254() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01254");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) 101);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult8 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult9 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, writeResult8);
        long long10 = bulkShardRequest4.seqNo();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test01255() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01255");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putMapping("", "current version [-1] is different than the one provided [2]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01256() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01256");
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.timeout(timeValue4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest2.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId8 = null;
        bulkShardRequest2.setParentTask(taskId8);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult10 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult11 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, writeResult10);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkItemRequest12.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
    }

    @Test
    public void test01257() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01257");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.readFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
    }

    @Test
    public void test01258() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01258");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest3.remoteAddress(transportAddress6);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel8);
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest3.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest3.index("");
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkShardRequest3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
    }

    @Test
    public void test01259() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01259");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.putMapping(mappingMetaData8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01260() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01260");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        bulkShardRequest4.seqNo((long) (short) -1);
        boolean boolean7 = bulkShardRequest4.getShouldPersistResult();
        org.elasticsearch.action.update.UpdateHelper.Result result8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest13.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest9.timeout(timeValue14);
        boolean boolean16 = bulkShardRequest9.getShouldPersistResult();
        java.lang.Throwable throwable18 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult19 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult20 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result8, (org.elasticsearch.action.ActionRequest) bulkShardRequest9, true, throwable18, writeResult19);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult21 = updateResult20.writeResult;
        boolean boolean22 = updateResult20.retry;
        java.lang.Throwable throwable23 = updateResult20.error;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult24 = updateResult20.writeResult;
        boolean boolean25 = updateResult20.failure();
        org.elasticsearch.action.update.UpdateResponse updateResponse26 = updateResult20.noopResult;
        org.elasticsearch.action.update.UpdateResponse updateResponse27 = updateResult20.noopResult;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult> bulkShardRequestActionRequestTuple28 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest4, updateResult20);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult29 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult30 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, writeResult29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long35 = bulkShardRequest34.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest34.timeout(timeValue36);
        org.elasticsearch.index.shard.ShardId shardId38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest34.setShardId(shardId38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long41 = bulkShardRequest40.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel42 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue45 = bulkShardRequest44.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest40.timeout(timeValue45);
        boolean boolean47 = bulkShardRequest40.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue48 = bulkShardRequest40.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest39.timeout(timeValue48);
        org.elasticsearch.tasks.TaskId taskId50 = bulkShardRequest39.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task51 = bulkShardRequest4.createTask((long) (short) 1, "index.data_path", "current version [0] is higher than the one provided [98]", taskId50);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(writeResult21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNull(throwable23);
        org.junit.Assert.assertNull(writeResult24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNull(updateResponse26);
        org.junit.Assert.assertNull(updateResponse27);
        org.junit.Assert.assertNotNull(bulkShardRequestActionRequestTuple28);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(timeValue48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(taskId50);
    }

    @Test
    public void test01261() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01261");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test01262() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01262");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.xcontent.XContentParser xContentParser9 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.fromXContent(xContentParser9, parseFieldMatcher10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test01263() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01263");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.version(101L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        long long9 = builder8.version();
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        long long16 = builder15.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder11.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder4.state(state17);
        // The following exception was thrown during execution in test generation
        try {
            long long22 = builder20.primaryTerm((int) (byte) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01264() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01264");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        int int6 = indexMetaData2.getNumberOfReplicas();
        long long7 = indexMetaData2.getCreationDate();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = indexMetaData2.toXContent(xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(params9);
    }

    @Test
    public void test01265() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01265");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [10] is different than the one provided [32]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test01266() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01266");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [-1] is different than the one provided [52]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [-1] is different than the one provided [52]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01267() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01267");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        boolean boolean7 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        bulkShardRequest0.setParentTask("index.version.created_string", 101L);
        java.lang.String str13 = bulkShardRequest0.index();
        boolean boolean14 = bulkShardRequest0.getShouldPersistResult();
        java.lang.Class<?> wildcardClass15 = bulkShardRequest0.getClass();
        org.elasticsearch.common.settings.Setting<java.lang.Integer> intSetting16 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_NUMBER_OF_SHARDS_SETTING;
        org.elasticsearch.common.collect.Tuple<java.lang.reflect.GenericDeclaration, org.elasticsearch.common.settings.Setting<java.lang.Integer>> genericDeclarationTuple17 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.reflect.GenericDeclaration) wildcardClass15, intSetting16);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = intSetting16.toXContent(xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(wildcardClass15);
        org.junit.Assert.assertNotNull(intSetting16);
        org.junit.Assert.assertNotNull(genericDeclarationTuple17);
        org.junit.Assert.assertNotNull(params19);
    }

    @Test
    public void test01268() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01268");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.version((long) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.state(state15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.state(state20);
        byte byte22 = state20.id();
        byte byte23 = state20.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder9.state(state20);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder9.putMapping(mappingMetaData25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + byte22 + "' != '" + (byte) 0 + "'", byte22 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01269() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01269");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.state(state10);
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.removeAllAliases();
        java.lang.String str14 = builder6.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "" + "'", str14, "");
    }

    @Test
    public void test01270() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01270");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("indices:data/write/bulk[s]");
        int int2 = builder1.numberOfShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test01271() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01271");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.EXTERNAL;
        boolean boolean3 = versionType1.validateVersionForReads((long) 52);
        java.lang.String str7 = versionType1.explainConflictForWrites(2L, 52L, false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType8 = org.elasticsearch.index.VersionType.fromString("current version [0] is different than the one provided [2]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is different than the one provided [2]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "current version [2] is higher or equal to the one provided [52]" + "'", str7, "current version [2] is higher or equal to the one provided [52]");
    }

    @Test
    public void test01272() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01272");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = bulkShardRequest0.index("index.uuid");
        org.elasticsearch.index.shard.ShardId shardId3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest0.setShardId(shardId3);
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.junit.Assert.assertNotNull(bulkShardRequest2);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue5);
    }

    @Test
    public void test01273() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01273");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.transport.TransportService transportService8 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService9 = null;
        org.elasticsearch.indices.IndicesService indicesService10 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool11 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction12 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction13 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper14 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters15 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction17 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings7, transportService8, clusterService9, indicesService10, threadPool11, shardStateAction12, mappingUpdatedAction13, updateHelper14, actionFilters15, indexNameExpressionResolver16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
    }

    @Test
    public void test01274() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01274");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.setShardId(shardId6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest11.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest11.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest11.remoteAddress(transportAddress14);
        bulkShardRequest11.primaryTerm((long) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest18.primaryTerm((long) (byte) 1);
        long long21 = bulkShardRequest18.primaryTerm();
        bulkShardRequest18.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue25 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest18.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest11.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest7.timeout(timeValue25);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest7.writeTo(streamOutput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(timeValue25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
    }

    @Test
    public void test01275() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01275");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        // The following exception was thrown during execution in test generation
        try {
            long long21 = indexMetaData0.primaryTerm((int) (byte) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
    }

    @Test
    public void test01276() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01276");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData2.getActiveAllocationIds();
        int int7 = indexMetaData2.getNumberOfReplicas();
        org.apache.lucene.util.Version version8 = indexMetaData2.getMinimumCompatibleVersion();
        int int9 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData10.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData2.diff(indexMetaData10);
        java.lang.String str13 = indexMetaData10.getIndexUUID();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = indexMetaData10.readFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
    }

    @Test
    public void test01277() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01277");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.timeout(timeValue10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.timeout(timeValue14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest15.indicesOptions();
        bulkShardRequest15.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest15.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel19);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = bulkShardRequest21.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
    }

    @Test
    public void test01278() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01278");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap4 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
    }

    @Test
    public void test01279() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01279");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.timeout(timeValue10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest11.indicesOptions();
        bulkShardRequest11.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest0.remoteAddress();
        long long18 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.update.UpdateHelper.Result result22 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest28.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest24.timeout(timeValue29);
        boolean boolean31 = bulkShardRequest24.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue32 = bulkShardRequest24.timeout();
        java.lang.Throwable throwable34 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult35 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult36 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result23, (org.elasticsearch.action.ActionRequest) bulkShardRequest24, false, throwable34, writeResult35);
        java.lang.Throwable throwable38 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult39 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult40 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result22, (org.elasticsearch.action.ActionRequest) bulkShardRequest24, true, throwable38, writeResult39);
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest24.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task42 = bulkShardRequest0.createTask((long) 10, "index.shared_filesystem", "current version [10] is higher or equal to the one provided [10]", taskId41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(taskId41);
    }

    @Test
    public void test01280() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01280");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData2.getSettings();
        boolean boolean7 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings6);
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        org.elasticsearch.transport.TransportService transportService10 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService11 = null;
        org.elasticsearch.indices.IndicesService indicesService12 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool13 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction14 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction15 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper16 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters17 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction19 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings9, transportService10, clusterService11, indicesService12, threadPool13, shardStateAction14, mappingUpdatedAction15, updateHelper16, actionFilters17, indexNameExpressionResolver18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
    }

    @Test
    public void test01281() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01281");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        int int20 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData0.getSettings();
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings21);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test01282() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01282");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas((int) (short) 0);
        int int4 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
    }

    @Test
    public void test01283() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01283");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = bulkShardRequest4.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest(10, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.action.ActionRequest actionRequest10 = bulkItemRequest9.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest9.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel8 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel8.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(actionRequest10);
    }

    @Test
    public void test01284() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01284");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult2 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult3 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, actionRequest1, writeResult2);
        boolean boolean4 = updateResult3.failure();
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
    }

    @Test
    public void test01285() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01285");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        java.lang.String str9 = versionType1.explainConflictForReads((long) 100, (long) (short) 100);
        long long12 = versionType1.updateVersion(0L, (long) (short) 100);
        org.elasticsearch.index.VersionType versionType13 = versionType1.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType13.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "current version [100] is different than the one provided [100]" + "'", str9, "current version [100] is different than the one provided [100]");
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNotNull(versionType13);
    }

    @Test
    public void test01286() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01286");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean16 = indexMetaData14.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        long long18 = builder17.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.creationDate((long) (byte) 100);
        long long25 = builder22.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = builder22.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple31 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest28, state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder27.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap35 = indexMetaData34.getAliases();
        org.elasticsearch.Version version36 = indexMetaData34.getUpgradedVersion();
        org.apache.lucene.util.Version version37 = indexMetaData34.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData34);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData34.getCustoms();
        java.util.Set<java.lang.String> strSet41 = indexMetaData34.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder32.putActiveAllocationIds(0, strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean45 = indexMetaData43.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData43.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        int int49 = indexMetaData43.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.settings.Settings settings51 = indexMetaData43.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder42.settings(settings51);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple53 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params13, settings51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = indexMetaData0.toXContent(xContentBuilder12, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(params13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01287() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01287");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        int int5 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strSet7);
        org.junit.Assert.assertNull(index8);
    }

    @Test
    public void test01288() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01288");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean21 = indexMetaData19.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData19.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData19.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap25 = indexMetaData19.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData19.excludeFilters();
        int int27 = indexMetaData19.getNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData19.mapping("index.number_of_shards");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder31 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params32 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean35 = indexMetaData33.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        long long37 = builder36.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder36.state(state38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.creationDate((long) (byte) 100);
        long long44 = builder41.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = builder41.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple50 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest47, state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder46.state(state49);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap54 = indexMetaData53.getAliases();
        org.elasticsearch.Version version55 = indexMetaData53.getUpgradedVersion();
        org.apache.lucene.util.Version version56 = indexMetaData53.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap58 = indexMetaData53.getCustoms();
        java.util.Set<java.lang.String> strSet60 = indexMetaData53.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder51.putActiveAllocationIds(0, strSet60);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean64 = indexMetaData62.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData62);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap66 = indexMetaData62.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData62);
        int int68 = indexMetaData62.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData62);
        org.elasticsearch.common.settings.Settings settings70 = indexMetaData62.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder61.settings(settings70);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple72 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params32, settings70);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder73 = indexMetaData19.toXContent(xContentBuilder31, params32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(params32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(version55);
        org.junit.Assert.assertNull(version56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(strSet60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strImmutableOpenMap66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + int68 + "' != '" + 0 + "'", int68 == 0);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(settings70);
        org.junit.Assert.assertNotNull(builder71);
    }

    @Test
    public void test01289() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01289");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [0] is different than the one provided [100]");
    }

    @Test
    public void test01290() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01290");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest7.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId13 = null;
        bulkShardRequest7.setParentTask(taskId13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest7.setShardId(shardId15);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple17 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap6, (org.elasticsearch.transport.TransportMessage) bulkShardRequest16);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.index.VersionType versionType20 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean22 = versionType20.validateVersionForWrites((long) (short) 100);
        boolean boolean24 = versionType20.validateVersionForWrites((long) (byte) 10);
        byte byte25 = versionType20.getValue();
        boolean boolean26 = strSetImmutableOpenIntMapTuple17.equals((java.lang.Object) byte25);
        org.elasticsearch.transport.TransportMessage transportMessage27 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap28 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.transport.TransportMessage transportMessage29 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage30 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage31 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap32 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long34 = bulkShardRequest33.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest33.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.common.transport.TransportAddress transportAddress37 = bulkShardRequest36.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId38 = bulkShardRequest36.getParentTask();
        long long39 = bulkShardRequest36.seqNo();
        boolean boolean40 = bulkShardRequest36.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest36.getParentTask();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple42 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap32, (org.elasticsearch.transport.TransportMessage) bulkShardRequest36);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str43 = bulkShardRequest36.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(versionType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(transportMessage27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap28);
        org.junit.Assert.assertNotNull(transportMessage29);
        org.junit.Assert.assertNotNull(transportMessage30);
        org.junit.Assert.assertNotNull(transportMessage31);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(transportAddress37);
        org.junit.Assert.assertNotNull(taskId38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(taskId41);
    }

    @Test
    public void test01291() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01291");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [10] is different than the one provided [10]");
    }

    @Test
    public void test01292() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01292");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest3.indicesOptions();
        bulkShardRequest3.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel7 = bulkShardRequest3.consistencyLevel();
        bulkShardRequest3.primaryTerm((long) (byte) 0);
        java.lang.Class<?> wildcardClass10 = bulkShardRequest3.getClass();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel7 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel7.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(wildcardClass10);
    }

    @Test
    public void test01293() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01293");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        java.lang.String str4 = builder3.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder3.mapping("index.version.upgraded");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.numberOfShards((int) ' ');
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index.shadow_replicas" + "'", str4, "index.shadow_replicas");
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test01294() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01294");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (byte) 100);
        org.elasticsearch.common.settings.Settings.Builder builder7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.settings(builder7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
    }

    @Test
    public void test01295() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01295");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData0.mappingOrDefault("index.creation_date");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean25 = indexMetaData23.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        long long27 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.creationDate((long) (byte) 100);
        long long34 = builder31.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = builder31.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple40 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest37, state39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder36.state(state39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap44 = indexMetaData43.getAliases();
        org.elasticsearch.Version version45 = indexMetaData43.getUpgradedVersion();
        org.apache.lucene.util.Version version46 = indexMetaData43.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData43.getCustoms();
        java.util.Set<java.lang.String> strSet50 = indexMetaData43.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder41.putActiveAllocationIds(0, strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean54 = indexMetaData52.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData52.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        int int58 = indexMetaData52.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        org.elasticsearch.common.settings.Settings settings60 = indexMetaData52.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder51.settings(settings60);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params22, settings60);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = indexMetaData0.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNull(version46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test01296() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01296");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest11.primaryTerm((long) (byte) 1);
        long long14 = bulkShardRequest11.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest(1, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str18 = bulkItemRequest17.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
    }

    @Test
    public void test01297() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01297");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        boolean boolean6 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings5);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
    }

    @Test
    public void test01298() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01298");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        java.lang.String[] strArray39 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet40 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean41 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet40, strArray39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder12.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder1.putActiveAllocationIds((int) (short) 1, (java.util.Set<java.lang.String>) strSet40);
        int int44 = builder1.numberOfReplicas();
        org.elasticsearch.common.settings.Settings.Builder builder45 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder1.settings(builder45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strArray39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + int44 + "' != '" + (-1) + "'", int44 == (-1));
    }

    @Test
    public void test01299() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01299");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.minimum_compatible", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01300() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01300");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData0.readDiffFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
    }

    @Test
    public void test01301() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01301");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("active_allocations");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean18 = indexMetaData16.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        long long20 = builder19.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.creationDate((long) (byte) 100);
        long long27 = builder24.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = builder24.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple33 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest30, state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder29.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap37 = indexMetaData36.getAliases();
        org.elasticsearch.Version version38 = indexMetaData36.getUpgradedVersion();
        org.apache.lucene.util.Version version39 = indexMetaData36.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap41 = indexMetaData36.getCustoms();
        java.util.Set<java.lang.String> strSet43 = indexMetaData36.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder34.putActiveAllocationIds(0, strSet43);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean47 = indexMetaData45.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap49 = indexMetaData45.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        int int51 = indexMetaData45.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.common.settings.Settings settings53 = indexMetaData45.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder44.settings(settings53);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple55 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params15, settings53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = indexMetaData0.toXContent(xContentBuilder14, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(version38);
        org.junit.Assert.assertNull(version39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(strImmutableOpenMap41);
        org.junit.Assert.assertNotNull(strSet43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(strImmutableOpenMap49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 0 + "'", int51 == 0);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test01302() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01302");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index22 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData0.includeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder26 = indexMetaData0.toXContent(xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNull(index22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
    }

    @Test
    public void test01303() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01303");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.settings(settings8);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long17 = builder16.version();
        java.lang.String[] strArray32 = new java.lang.String[] { "index.blocks.read_only", "index.version.created_string", "index.version.created_string", "index.shadow_replicas", "index.", "index.version.upgraded", "index.auto_expand_replicas", "index.blocks.read", "index.auto_expand_replicas", "index.version.upgraded_string", "update", "active_allocations", "index." };
        java.util.LinkedHashSet<java.lang.String> strSet33 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean34 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet33, strArray32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder16.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder13.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet33);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.putAlias(builder37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(strArray32);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
    }

    @Test
    public void test01304() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01304");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData0.readDiffFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01305() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01305");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.apache.lucene.util.Version version5 = indexMetaData4.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData4.diff(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder24.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean31 = indexMetaData29.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        long long33 = builder32.version();
        org.elasticsearch.common.settings.Settings settings34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean38 = indexMetaData36.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        long long40 = builder39.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder35.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder43.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean47 = indexMetaData45.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData45.getInitialRecoveryFilters();
        long long51 = indexMetaData45.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state52 = indexMetaData45.getState();
        org.elasticsearch.common.settings.Settings settings53 = indexMetaData45.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder43.settings(settings53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean57 = indexMetaData55.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean63 = indexMetaData61.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData61);
        long long65 = builder64.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state66 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder64.state(state66);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder67.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder67.state(state71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder58.state(state71);
        int int74 = builder58.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder58.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder58.creationDate((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder58.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean82 = indexMetaData80.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData80);
        long long84 = builder83.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state85 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder83.state(state85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder86.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state90 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder86.state(state90);
        byte byte92 = state90.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder58.state(state90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder43.state(state90);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder28.state(state90);
        boolean boolean96 = indexMetaData6.equals((java.lang.Object) builder95);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData98 = builder95.mapping("index.number_of_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 1L + "'", long40 == 1L);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + state52 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state52.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + false + "'", boolean63 == false);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 1L + "'", long65 == 1L);
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state66.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertTrue("'" + int74 + "' != '" + 1 + "'", int74 == 1);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertTrue("'" + boolean82 + "' != '" + false + "'", boolean82 == false);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 1L + "'", long84 == 1L);
        org.junit.Assert.assertTrue("'" + state85 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state85.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertTrue("'" + state90 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state90.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + byte92 + "' != '" + (byte) 0 + "'", byte92 == (byte) 0);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
        org.junit.Assert.assertNotNull(builder95);
        org.junit.Assert.assertTrue("'" + boolean96 + "' != '" + false + "'", boolean96 == false);
        org.junit.Assert.assertNull(mappingMetaData98);
    }

    @Test
    public void test01306() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01306");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long6 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest18.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest14.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest13.timeout(timeValue19);
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) timeValue19);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test01307() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01307");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [10] is different than the one provided [10]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01308() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01308");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) -1, actionRequest1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str3 = bulkItemRequest2.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01309() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01309");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest7.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId13 = null;
        bulkShardRequest7.setParentTask(taskId13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest7.setShardId(shardId15);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple17 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap6, (org.elasticsearch.transport.TransportMessage) bulkShardRequest16);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.transport.TransportMessage transportMessage19 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage20 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage21 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = strSetImmutableOpenIntMapTuple17.v1();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str23 = strSetImmutableOpenIntMapTuple17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(transportMessage19);
        org.junit.Assert.assertNotNull(transportMessage20);
        org.junit.Assert.assertNotNull(transportMessage21);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
    }

    @Test
    public void test01310() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01310");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01311() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01311");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest4.indicesOptions();
        bulkShardRequest4.primaryTerm((long) 101);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult8 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult9 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, writeResult8);
        java.lang.Throwable throwable10 = updateResult9.error;
        org.elasticsearch.action.update.UpdateHelper.Result result11 = updateResult9.result;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = updateResult9.request();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkShardRequest12.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNull(throwable10);
        org.junit.Assert.assertNull(result11);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
    }

    @Test
    public void test01312() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01312");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(101);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentParser xContentParser8 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.fromXContent(xContentParser8, parseFieldMatcher9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test01313() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01313");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        int int9 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean16 = indexMetaData14.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        long long18 = builder17.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.creationDate((long) (byte) 100);
        long long25 = builder22.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = builder22.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple31 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest28, state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder27.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData34 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap35 = indexMetaData34.getAliases();
        org.elasticsearch.Version version36 = indexMetaData34.getUpgradedVersion();
        org.apache.lucene.util.Version version37 = indexMetaData34.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData34);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData34.getCustoms();
        java.util.Set<java.lang.String> strSet41 = indexMetaData34.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder32.putActiveAllocationIds(0, strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean45 = indexMetaData43.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData43.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        int int49 = indexMetaData43.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.settings.Settings settings51 = indexMetaData43.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder42.settings(settings51);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple53 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params13, settings51);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder54 = indexMetaData0.toXContent(xContentBuilder12, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(params13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(strSet41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 0 + "'", int49 == 0);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test01314() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01314");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData6.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData8.mappingOrDefault("index.version.created_string");
        boolean boolean14 = indexMetaData8.equals((java.lang.Object) (byte) -1);
        int int15 = indexMetaData8.getNumberOfReplicas();
        long long16 = indexMetaData8.getCreationDate();
        int int17 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData0.getActiveAllocationIds();
        int int21 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
    }

    @Test
    public void test01315() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01315");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = bulkShardRequest0.index("index.uuid");
        long long3 = bulkShardRequest0.primaryTerm();
        boolean boolean4 = bulkShardRequest0.getShouldPersistResult();
        java.lang.String str5 = bulkShardRequest0.index();
        org.junit.Assert.assertNotNull(bulkShardRequest2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.uuid" + "'", str5, "index.uuid");
    }

    @Test
    public void test01316() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01316");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        java.lang.Throwable throwable3 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult4 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult5 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, actionRequest1, true, throwable3, writeResult4);
        boolean boolean6 = updateResult5.success();
        boolean boolean7 = updateResult5.success();
        boolean boolean8 = updateResult5.retry;
        org.elasticsearch.action.ActionRequest actionRequest9 = updateResult5.actionRequest;
        java.lang.Throwable throwable10 = updateResult5.error;
        boolean boolean11 = updateResult5.retry;
        java.lang.Throwable throwable12 = updateResult5.error;
        boolean boolean13 = updateResult5.failure();
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(actionRequest9);
        org.junit.Assert.assertNull(throwable10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(throwable12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01317() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01317");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        int int7 = indexMetaData0.getNumberOfShards();
        int int8 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test01318() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01318");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData8.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test01319() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01319");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        long long2 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder4, params5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(params5);
    }

    @Test
    public void test01320() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01320");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.index.Index index12 = indexMetaData5.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.Version version14 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.Version version15 = indexMetaData5.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData5.getCustoms();
        boolean boolean17 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap16);
        org.elasticsearch.index.Index index18 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean23 = indexMetaData21.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        long long25 = builder24.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.creationDate((long) (byte) 100);
        long long32 = builder29.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = builder29.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple38 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest35, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder34.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap42 = indexMetaData41.getAliases();
        org.elasticsearch.Version version43 = indexMetaData41.getUpgradedVersion();
        org.apache.lucene.util.Version version44 = indexMetaData41.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData41.getCustoms();
        java.util.Set<java.lang.String> strSet48 = indexMetaData41.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder39.putActiveAllocationIds(0, strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean52 = indexMetaData50.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        int int56 = indexMetaData50.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        org.elasticsearch.common.settings.Settings settings58 = indexMetaData50.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder49.settings(settings58);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple60 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params20, settings58);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(index18);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNull(version44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test01321() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01321");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        boolean boolean6 = indexMetaData2.isSameUUID("");
        boolean boolean8 = indexMetaData2.isSameUUID("index.blocks.metadata");
        int int9 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = indexMetaData2.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertNotNull(params11);
    }

    @Test
    public void test01322() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01322");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.index.Index index12 = indexMetaData5.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.Version version14 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.Version version15 = indexMetaData5.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData5.getCustoms();
        boolean boolean17 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap16);
        long long18 = indexMetaData0.getCreationDate();
        int int19 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean25 = indexMetaData23.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        long long27 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.creationDate((long) (byte) 100);
        long long34 = builder31.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = builder31.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple40 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest37, state39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder36.state(state39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap44 = indexMetaData43.getAliases();
        org.elasticsearch.Version version45 = indexMetaData43.getUpgradedVersion();
        org.apache.lucene.util.Version version46 = indexMetaData43.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData43);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap48 = indexMetaData43.getCustoms();
        java.util.Set<java.lang.String> strSet50 = indexMetaData43.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder41.putActiveAllocationIds(0, strSet50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean54 = indexMetaData52.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap56 = indexMetaData52.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        int int58 = indexMetaData52.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        org.elasticsearch.common.settings.Settings settings60 = indexMetaData52.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder51.settings(settings60);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params22, settings60);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder63 = indexMetaData0.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNotNull(strImmutableOpenMap44);
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertNull(version46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertNotNull(strSet50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strImmutableOpenMap56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + int58 + "' != '" + 0 + "'", int58 == 0);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settings60);
        org.junit.Assert.assertNotNull(builder61);
    }

    @Test
    public void test01323() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01323");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mapping("index.version.minimum_compatible");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test01324() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01324");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest7.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId13 = null;
        bulkShardRequest7.setParentTask(taskId13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest7.setShardId(shardId15);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple17 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap6, (org.elasticsearch.transport.TransportMessage) bulkShardRequest16);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.index.VersionType versionType20 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean22 = versionType20.validateVersionForWrites((long) (short) 100);
        boolean boolean24 = versionType20.validateVersionForWrites((long) (byte) 10);
        byte byte25 = versionType20.getValue();
        boolean boolean26 = strSetImmutableOpenIntMapTuple17.equals((java.lang.Object) byte25);
        org.elasticsearch.transport.TransportMessage transportMessage27 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap28 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.transport.TransportMessage transportMessage29 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage30 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage31 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder33.settings(settings34);
        long long36 = builder35.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state38 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte39 = state38.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder35.state(state38);
        boolean boolean41 = strSetImmutableOpenIntMapTuple17.equals((java.lang.Object) builder35);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str42 = strSetImmutableOpenIntMapTuple17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(versionType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(transportMessage27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap28);
        org.junit.Assert.assertNotNull(transportMessage29);
        org.junit.Assert.assertNotNull(transportMessage30);
        org.junit.Assert.assertNotNull(transportMessage31);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertTrue("'" + state38 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state38.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte39 + "' != '" + (byte) 1 + "'", byte39 == (byte) 1);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
    }

    @Test
    public void test01325() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01325");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest6.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest2.timeout(timeValue7);
        boolean boolean9 = bulkShardRequest2.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest2.timeout();
        java.lang.Throwable throwable12 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult14 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, false, throwable12, writeResult13);
        java.lang.Throwable throwable16 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult17 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult18 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, true, throwable16, writeResult17);
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest2.timeout();
        boolean boolean20 = bulkShardRequest2.getShouldPersistResult();
        long long21 = bulkShardRequest2.seqNo();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
    }

    @Test
    public void test01326() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01326");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) 100, (long) 'a');
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (byte) 1, (long) (short) 0, true);
        long long13 = versionType1.updateVersion((long) 10, (long) 10);
        long long16 = versionType1.updateVersion((long) (-1), (long) (byte) 1);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
    }

    @Test
    public void test01327() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01327");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.transport.TransportService transportService9 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService10 = null;
        org.elasticsearch.indices.IndicesService indicesService11 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool12 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction13 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction14 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper15 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters16 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver17 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction18 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings8, transportService9, clusterService10, indicesService11, threadPool12, shardStateAction13, mappingUpdatedAction14, updateHelper15, actionFilters16, indexNameExpressionResolver17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
    }

    @Test
    public void test01328() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01328");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean7 = indexMetaData5.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData5.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData5.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.index.Index index12 = indexMetaData5.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.Version version14 = indexMetaData5.getUpgradedVersion();
        org.elasticsearch.Version version15 = indexMetaData5.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData5.getCustoms();
        boolean boolean17 = indexMetaData0.equals((java.lang.Object) strImmutableOpenMap16);
        long long18 = indexMetaData0.getCreationDate();
        int int19 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(index12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
    }

    @Test
    public void test01329() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01329");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest6.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest2.timeout(timeValue7);
        boolean boolean9 = bulkShardRequest2.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest2.timeout();
        java.lang.Throwable throwable12 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult14 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, false, throwable12, writeResult13);
        java.lang.Throwable throwable16 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult17 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult18 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, true, throwable16, writeResult17);
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest2.timeout();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest2.timeout();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray21 = bulkShardRequest2.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(timeValue20);
    }

    @Test
    public void test01330() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01330");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest4.remoteAddress(transportAddress7);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.index("hi!");
        bulkShardRequest12.seqNo((long) (byte) -1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = bulkShardRequest18.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest18.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress21 = null;
        bulkShardRequest18.remoteAddress(transportAddress21);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest24.index("hi!");
        long long27 = bulkShardRequest26.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest28.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = bulkShardRequest31.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId33 = bulkShardRequest31.getParentTask();
        long long34 = bulkShardRequest31.seqNo();
        boolean boolean35 = bulkShardRequest31.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId36 = bulkShardRequest31.getParentTask();
        bulkShardRequest26.setParentTask(taskId36);
        bulkShardRequest12.setParentTask(taskId36);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult39 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult40 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest12, writeResult39);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput41 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest12.writeTo(streamOutput41);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(transportAddress19);
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(transportAddress32);
        org.junit.Assert.assertNotNull(taskId33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(taskId36);
    }

    @Test
    public void test01331() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01331");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.timeout(timeValue10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest11.indicesOptions();
        bulkShardRequest11.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = bulkShardRequest16.consistencyLevel();
        bulkShardRequest16.setParentTask("hi!", (long) (short) 0);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException21 = bulkShardRequest16.validate();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel17 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel17.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(actionRequestValidationException21);
    }

    @Test
    public void test01332() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01332");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version11 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = indexMetaData8.toXContent(xContentBuilder21, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(params22);
    }

    @Test
    public void test01333() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01333");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest8.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.index("current version [10] is higher than the one provided [10]");
        bulkShardRequest8.setParentTask("current version [3] is different than the one provided [0]", 103L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
    }

    @Test
    public void test01334() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01334");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.primaryTerm(0, (long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.creationDate((long) (byte) 3);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean20 = indexMetaData18.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        long long22 = builder21.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder24.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder15.state(state28);
        int int31 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder15.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder33.putCustom("index.uuid", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData39.getState();
        org.elasticsearch.index.Index index41 = indexMetaData39.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData39.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long44 = indexMetaData43.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long46 = indexMetaData45.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData43.diff(indexMetaData45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData45);
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData45.getSettings();
        boolean boolean50 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings49);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings49);
        boolean boolean52 = indexMetaData39.equals((java.lang.Object) settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder38.settings(settings49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder11.settings(settings49);
        org.elasticsearch.transport.TransportService transportService55 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService56 = null;
        org.elasticsearch.indices.IndicesService indicesService57 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool58 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction59 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction60 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper61 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters62 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver63 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction64 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings49, transportService55, clusterService56, indicesService57, threadPool58, shardStateAction59, mappingUpdatedAction60, updateHelper61, actionFilters62, indexNameExpressionResolver63);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index41);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test01335() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01335");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.index("primary_terms");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.timeout(timeValue11);
        org.elasticsearch.action.support.IndicesOptions indicesOptions13 = bulkShardRequest12.indicesOptions();
        bulkShardRequest12.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel16);
        bulkShardRequest1.primaryTerm(99L);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest20 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = bulkItemRequest20.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(indicesOptions13);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest17);
    }

    @Test
    public void test01336() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01336");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap6 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        org.elasticsearch.transport.TransportService transportService10 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService11 = null;
        org.elasticsearch.indices.IndicesService indicesService12 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool13 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction14 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction15 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper16 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters17 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver18 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction19 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings7, transportService10, clusterService11, indicesService12, threadPool13, shardStateAction14, mappingUpdatedAction15, updateHelper16, actionFilters17, indexNameExpressionResolver18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
    }

    @Test
    public void test01337() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01337");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest4.primaryTerm((long) (byte) 1);
        long long7 = bulkShardRequest4.primaryTerm();
        bulkShardRequest4.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest4.remoteAddress(transportAddress11);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Writeable, org.elasticsearch.action.bulk.BulkShardRequest> writeableTuple13 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Writeable) indexMetaData0, bulkShardRequest4);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData0.mappingOrDefault("current version [32] is different than the one provided [3]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long18 = indexMetaData17.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData17.diff(indexMetaData19);
        org.elasticsearch.Version version22 = indexMetaData19.getUpgradedVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput24 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData19.writeTo(streamOutput24);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(writeableTuple13);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
    }

    @Test
    public void test01338() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01338");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest0.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting11 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result13 = null;
        org.elasticsearch.action.ActionRequest actionRequest14 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting16 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting18 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long22 = bulkShardRequest21.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest21.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest24.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest24.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest24.remoteAddress(transportAddress27);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long32 = bulkShardRequest31.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest31.timeout(timeValue33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest35.timeout(timeValue37);
        org.elasticsearch.action.support.IndicesOptions indicesOptions39 = bulkShardRequest38.indicesOptions();
        bulkShardRequest38.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel42 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest31.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long47 = bulkShardRequest46.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest46.consistencyLevel(writeConsistencyLevel48);
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = bulkShardRequest49.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId51 = bulkShardRequest49.getParentTask();
        long long52 = bulkShardRequest49.seqNo();
        boolean boolean53 = bulkShardRequest49.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId54 = bulkShardRequest49.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException55 = bulkShardRequest49.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult56 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult57 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result20, (org.elasticsearch.action.ActionRequest) bulkShardRequest44, false, (java.lang.Throwable) actionRequestValidationException55, writeResult56);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure59 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting18, "current version [-1] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException55, "index.data_path");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure61 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting16, "", (java.lang.Throwable) actionRequestValidationException55, "index.uuid");
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult62 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult63 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result13, actionRequest14, true, (java.lang.Throwable) actionRequestValidationException55, writeResult62);
        org.elasticsearch.action.ActionRequest actionRequest65 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest66 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) -1, actionRequest65);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, org.elasticsearch.common.io.stream.Streamable> validationExceptionTuple67 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.ValidationException) actionRequestValidationException55, (org.elasticsearch.common.io.stream.Streamable) actionRequest65);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure69 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting11, "current version [32] is different than the one provided [97]", (java.lang.Throwable) actionRequestValidationException55, "index.version.upgraded");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.action.ActionRequestValidationException> bulkShardRequestActionRequestTuple70 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>, org.elasticsearch.action.ActionRequestValidationException>((org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest0, actionRequestValidationException55);
        java.lang.String str71 = bulkShardRequest0.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(taskId10);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(indicesOptions39);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel42 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel42.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNull(transportAddress50);
        org.junit.Assert.assertNotNull(taskId51);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(taskId54);
        org.junit.Assert.assertNotNull(actionRequestValidationException55);
        org.junit.Assert.assertNotNull(validationExceptionTuple67);
        org.junit.Assert.assertEquals("'" + str71 + "' != '" + "active_allocations" + "'", str71, "active_allocations");
    }

    @Test
    public void test01339() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01339");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap10 = indexMetaData0.getAliases();
        long long11 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test01340() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01340");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        long long22 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.version(0L);
        long long25 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean29 = indexMetaData27.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder30.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state33 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.state(state33);
        java.lang.String[] strArray61 = new java.lang.String[] { "index.uuid", "index.auto_expand_replicas", "current version [-1] is different than the one provided [1]", "current version [10] is higher or equal to the one provided [10]", "state-", "current version [-1] is different than the one provided [1]", "_na_", "index.blocks.read_only", "index.priority", "_na_", "index.version.created_string", "index.blocks.read_only", "index.version.created_string", "index.version.upgraded_string", "index.version.created", "index.version.created_string", "", "index.creation_date", "current version [-1] is different than the one provided [10]", "index.number_of_shards", "index.shared_filesystem", "index.shared_filesystem", "primary_terms", "index.", "index.version.minimum_compatible" };
        java.util.LinkedHashSet<java.lang.String> strSet62 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean63 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet62, strArray61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder34.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet62);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder3.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet62);
        int int66 = builder65.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData68 = builder65.mapping("state-");
        // The following exception was thrown during execution in test generation
        try {
            long long70 = builder65.primaryTerm((int) (byte) 2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state33 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state33.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray61);
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertTrue("'" + int66 + "' != '" + 0 + "'", int66 == 0);
        org.junit.Assert.assertNull(mappingMetaData68);
    }

    @Test
    public void test01341() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01341");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest3.remoteAddress(transportAddress6);
        bulkShardRequest3.primaryTerm((long) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest10.primaryTerm((long) (byte) 1);
        long long13 = bulkShardRequest10.primaryTerm();
        bulkShardRequest10.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue17 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest10.timeout(timeValue17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest3.timeout(timeValue17);
        java.lang.String str20 = bulkShardRequest3.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(str20);
    }

    @Test
    public void test01342() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01342");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData6.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData8.mappingOrDefault("index.version.created_string");
        boolean boolean14 = indexMetaData8.equals((java.lang.Object) (byte) -1);
        int int15 = indexMetaData8.getNumberOfReplicas();
        long long16 = indexMetaData8.getCreationDate();
        int int17 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData8.getMappings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData8);
        java.util.Set<java.lang.String> strSet21 = indexMetaData0.activeAllocationIds((int) (short) 0);
        org.elasticsearch.common.io.stream.StreamInput streamInput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = indexMetaData0.readFrom(streamInput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(strSet21);
    }

    @Test
    public void test01343() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01343");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder8.build();
        org.elasticsearch.Version version13 = indexMetaData12.getUpgradedVersion();
        int int14 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData12.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder16 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params17 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean20 = indexMetaData18.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        long long22 = builder21.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder26.creationDate((long) (byte) 100);
        long long29 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = builder26.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state34 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple35 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest32, state34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.state(state34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap39 = indexMetaData38.getAliases();
        org.elasticsearch.Version version40 = indexMetaData38.getUpgradedVersion();
        org.apache.lucene.util.Version version41 = indexMetaData38.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData38);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData38.getCustoms();
        java.util.Set<java.lang.String> strSet45 = indexMetaData38.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder36.putActiveAllocationIds(0, strSet45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean49 = indexMetaData47.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData47);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData47.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData47);
        int int53 = indexMetaData47.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData47);
        org.elasticsearch.common.settings.Settings settings55 = indexMetaData47.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder46.settings(settings55);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple57 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params17, settings55);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = indexMetaData12.toXContent(xContentBuilder16, params17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 101 + "'", int14 == 101);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(params17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + state34 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state34.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(version40);
        org.junit.Assert.assertNull(version41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(strSet45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test01344() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01344");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        boolean boolean7 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        bulkShardRequest0.seqNo(10L);
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest0.getParentTask();
        org.elasticsearch.common.io.stream.StreamInput streamInput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.readFrom(streamInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertNotNull(taskId12);
    }

    @Test
    public void test01345() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01345");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "index.shadow_replicas");
    }

    @Test
    public void test01346() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01346");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        bulkShardRequest0.primaryTerm(33L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
    }

    @Test
    public void test01347() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01347");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        boolean boolean17 = indexMetaData0.isSameUUID("index.");
        int int18 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean23 = indexMetaData21.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        long long25 = builder24.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder24.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.creationDate((long) (byte) 100);
        long long32 = builder29.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = builder29.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple38 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest35, state37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder34.state(state37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap42 = indexMetaData41.getAliases();
        org.elasticsearch.Version version43 = indexMetaData41.getUpgradedVersion();
        org.apache.lucene.util.Version version44 = indexMetaData41.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap46 = indexMetaData41.getCustoms();
        java.util.Set<java.lang.String> strSet48 = indexMetaData41.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder39.putActiveAllocationIds(0, strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean52 = indexMetaData50.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap54 = indexMetaData50.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        int int56 = indexMetaData50.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        org.elasticsearch.common.settings.Settings settings58 = indexMetaData50.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder49.settings(settings58);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple60 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params20, settings58);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(strImmutableOpenMap42);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNull(version44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(strSet48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(strImmutableOpenMap54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + int56 + "' != '" + 0 + "'", int56 == 0);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(builder59);
    }

    @Test
    public void test01348() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01348");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest3.remoteAddress(transportAddress6);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest10.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.timeout(timeValue16);
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest17.indicesOptions();
        bulkShardRequest17.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel21 = bulkShardRequest17.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel21);
        long long24 = bulkShardRequest3.seqNo();
        bulkShardRequest3.seqNo(10L);
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest3.setShardId(shardId27);
        org.elasticsearch.common.io.stream.StreamInput streamInput29 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest3.readFrom(streamInput29);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel21 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel21.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
    }

    @Test
    public void test01349() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01349");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.tasks.TaskId taskId8 = bulkShardRequest7.getParentTask();
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest7.shardId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray10 = bulkShardRequest7.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(taskId8);
        org.junit.Assert.assertNull(shardId9);
    }

    @Test
    public void test01350() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01350");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap5 = indexMetaData0.getCustoms();
        boolean boolean7 = indexMetaData0.isSameUUID("current version [0] is different than the one provided [-1]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("index.data_path");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test01351() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01351");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean6 = indexMetaData4.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData4.diff(indexMetaData10);
        long long13 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData14.mappingOrDefault("index.blocks.read");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.creationDate(52L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder22.removeAllAliases();
        java.lang.String str24 = builder23.index();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "index.shadow_replicas" + "'", str24, "index.shadow_replicas");
    }

    @Test
    public void test01352() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01352");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel5);
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest6.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId8 = bulkShardRequest6.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest6.remoteAddress(transportAddress9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.timeout(timeValue19);
        org.elasticsearch.action.support.IndicesOptions indicesOptions21 = bulkShardRequest20.indicesOptions();
        bulkShardRequest20.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest28.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = bulkShardRequest31.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId33 = bulkShardRequest31.getParentTask();
        long long34 = bulkShardRequest31.seqNo();
        boolean boolean35 = bulkShardRequest31.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId36 = bulkShardRequest31.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException37 = bulkShardRequest31.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult38 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult39 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result2, (org.elasticsearch.action.ActionRequest) bulkShardRequest26, false, (java.lang.Throwable) actionRequestValidationException37, writeResult38);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure41 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [-1] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException37, "index.data_path");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting42 = shardFailure41.routing;
        java.lang.String str43 = shardFailure41.reason;
        java.lang.String str44 = shardFailure41.indexUUID;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertNotNull(taskId8);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(indicesOptions21);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNull(transportAddress32);
        org.junit.Assert.assertNotNull(taskId33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(taskId36);
        org.junit.Assert.assertNotNull(actionRequestValidationException37);
        org.junit.Assert.assertNull(shardRouting42);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "current version [-1] is different than the one provided [1]" + "'", str43, "current version [-1] is different than the one provided [1]");
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index.data_path" + "'", str44, "index.data_path");
    }

    @Test
    public void test01353() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01353");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "index.blocks.read");
    }

    @Test
    public void test01354() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01354");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        int int4 = builder1.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int7 = builder6.numberOfShards();
        long long8 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean11 = indexMetaData9.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData15.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData9.diff(indexMetaData15);
        long long18 = indexMetaData15.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long20 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData19.mappingOrDefault("index.blocks.read");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData15.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state24 = indexMetaData15.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder6.state(state24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean28 = indexMetaData26.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData26.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap31 = indexMetaData26.getMappings();
        long long32 = indexMetaData26.getCreationDate();
        org.elasticsearch.common.settings.Settings settings33 = indexMetaData26.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder25.settings(settings33);
        boolean boolean35 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder1.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.creationDate(2L);
        org.elasticsearch.common.settings.Settings.Builder builder39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder36.settings(builder39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 1L + "'", long20 == 1L);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertTrue("'" + state24 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state24.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test01355() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01355");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, true, throwable10, writeResult11);
        org.elasticsearch.index.shard.ShardId shardId13 = bulkShardRequest1.shardId();
        org.elasticsearch.index.shard.ShardId shardId14 = bulkShardRequest1.shardId();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray15 = bulkShardRequest1.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(shardId13);
        org.junit.Assert.assertNull(shardId14);
    }

    @Test
    public void test01356() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01356");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.timeout(timeValue12);
        boolean boolean15 = bulkShardRequest14.getShouldPersistResult();
        java.lang.String str16 = bulkShardRequest14.index();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput17 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest14.writeTo(streamOutput17);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(str16);
    }

    @Test
    public void test01357() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01357");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        java.lang.Throwable throwable8 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult9 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult10 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, false, throwable8, writeResult9);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str11 = bulkShardRequest4.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
    }

    @Test
    public void test01358() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01358");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.settings(settings8);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.removeAllAliases();
        java.lang.String str12 = builder7.index();
        java.lang.String[] strArray53 = new java.lang.String[] { "index.shared_filesystem.recover_on_any_node", "indices:data/write/bulk[s]", "current version [-1] is different than the one provided [1]", "index.uuid", "index.version.upgraded", "index.creation_date_string", "current version [-1] is different than the one provided [32]", "index.priority", "index.creation_date_string", "hi!", "state-", "current version [-1] is different than the one provided [10]", "current version [-1] is different than the one provided [1]", "index.blocks.read", "index.shadow_replicas", "index.version.upgraded_string", "indices:data/write/bulk[s]", "index.version.created", "current version [10] is different than the one provided [0]", "index.creation_date", "index.shared_filesystem", "_na_", "index.blocks.read_only", "index.number_of_replicas", "current version [1] is different than the one provided [10]", "current version [10] is different than the one provided [0]", "index.shared_filesystem", "current version [-1] is different than the one provided [32]", "index.shared_filesystem", "index.auto_expand_replicas", "current version [100] is different than the one provided [10]", "delete", "active_allocations", "index.creation_date", "current version [100] is different than the one provided [100]", "index.blocks.write", "state-", "index.creation_date_string", "current version [1] is different than the one provided [-1]" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder7.putActiveAllocationIds((int) (short) 100, (java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean59 = indexMetaData57.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData57);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters61 = indexMetaData57.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData57);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean65 = indexMetaData63.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData63);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters67 = indexMetaData63.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap68 = indexMetaData63.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters70 = indexMetaData69.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff71 = indexMetaData63.diff(indexMetaData69);
        boolean boolean72 = indexMetaData57.equals((java.lang.Object) indexMetaData69);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters73 = indexMetaData57.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap74 = indexMetaData57.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state75 = indexMetaData57.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder56.state(state75);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder77 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder76.putAlias(builder77);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.auto_expand_replicas" + "'", str12, "index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNull(discoveryNodeFilters61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNull(discoveryNodeFilters67);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(discoveryNodeFilters70);
        org.junit.Assert.assertNotNull(indexMetaDataDiff71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters73);
        org.junit.Assert.assertNotNull(strImmutableOpenMap74);
        org.junit.Assert.assertTrue("'" + state75 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state75.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder76);
    }

    @Test
    public void test01359() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01359");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        long long9 = indexMetaData0.getVersion();
        long long11 = indexMetaData0.primaryTerm(0);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.getInitialRecoveryFilters();
        // The following exception was thrown during execution in test generation
        try {
            long long16 = indexMetaData0.primaryTerm((int) '#');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
    }

    @Test
    public void test01360() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01360");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setShardId(shardId4);
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.timeout(timeValue6);
        org.elasticsearch.common.unit.TimeValue timeValue8 = bulkShardRequest0.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest0.index("current version [32] is different than the one provided [3]");
        org.elasticsearch.common.io.stream.StreamOutput streamOutput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest10.writeTo(streamOutput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(timeValue8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
    }

    @Test
    public void test01361() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01361");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.settings(settings8);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder7.removeAlias("delete");
        java.lang.String str16 = builder15.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.version(34L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.creation_date" + "'", str16, "index.creation_date");
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01362() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01362");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("state-");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [state-]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01363() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01363");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest16.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.timeout(timeValue25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest26.indicesOptions();
        bulkShardRequest26.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest34 = new org.elasticsearch.action.bulk.BulkItemRequest(101, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        org.elasticsearch.action.ActionRequest actionRequest35 = bulkItemRequest34.request();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str36 = bulkItemRequest34.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(actionRequest35);
    }

    @Test
    public void test01364() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01364");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.timeout(timeValue10);
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest11.indicesOptions();
        bulkShardRequest11.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest11.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = bulkShardRequest16.consistencyLevel();
        bulkShardRequest16.setParentTask("hi!", (long) (short) 0);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str21 = bulkShardRequest16.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel17 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel17.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test01365() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01365");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        long long5 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        java.lang.String str12 = builder11.index();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean15 = indexMetaData13.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData13.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData13.mapping("active_allocations");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData13.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder11.settings(settings20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder7.settings(settings20);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.putAlias(aliasMetaData23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.shadow_replicas" + "'", str12, "index.shadow_replicas");
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01366() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01366");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean3 = versionType1.validateVersionForReads((long) (short) 1);
        long long6 = versionType1.updateVersion((long) ' ', 0L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
    }

    @Test
    public void test01367() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01367");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData8.mapping("index.data_path");
        boolean boolean15 = indexMetaData8.isSameUUID("");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
    }

    @Test
    public void test01368() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01368");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = builder3.primaryTerm((int) (byte) 3);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 3");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01369() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01369");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult9 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult10 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, writeResult9);
        org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest> bulkShardRequestReplicationRequest11 = updateResult10.request();
        org.elasticsearch.action.update.UpdateResponse updateResponse12 = updateResult10.noopResult;
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(bulkShardRequestReplicationRequest11);
        org.junit.Assert.assertNull(updateResponse12);
    }

    @Test
    public void test01370() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01370");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [-1] is different than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [-1] is different than the one provided [32]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01371() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01371");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        java.lang.Throwable throwable3 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult4 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult5 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, actionRequest1, true, throwable3, writeResult4);
        boolean boolean6 = updateResult5.success();
        boolean boolean7 = updateResult5.success();
        boolean boolean8 = updateResult5.retry;
        org.elasticsearch.action.update.UpdateHelper.Result result9 = updateResult5.result;
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(result9);
    }

    @Test
    public void test01372() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01372");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
        org.elasticsearch.index.Index index10 = indexMetaData9.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test01373() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01373");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        java.lang.Class<?> wildcardClass7 = version6.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNotNull(wildcardClass7);
    }

    @Test
    public void test01374() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01374");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.state(state6);
        int int8 = builder4.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.putCustom("delete", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder13.mapping("index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test01375() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01375");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [0] is different than the one provided [99]");
    }

    @Test
    public void test01376() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01376");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean4 = indexMetaData2.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData2.getInitialRecoveryFilters();
        long long8 = indexMetaData2.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData2.getState();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData2.getSettings();
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings10);
        java.lang.String[] strArray53 = new java.lang.String[] { "index.blocks.metadata", "current version [-1] is different than the one provided [32]", "index.shadow_replicas", "index.shared_filesystem", "index.creation_date_string", "index.shadow_replicas", "index.number_of_replicas", "current version [-1] is different than the one provided [1]", "index.shared_filesystem", "index.shared_filesystem", "index.blocks.read_only", "index.blocks.read", "active_allocations", "index.blocks.metadata", "", "index.version.created", "index.shadow_replicas", "index.auto_expand_replicas", "index.auto_expand_replicas", "current version [0] is different than the one provided [-1]", "indices:data/write/bulk[s]", "index.creation_date", "current version [100] is different than the one provided [10]", "current version [1] is different than the one provided [10]", "current version [-1] is different than the one provided [-1]", "current version [1] is different than the one provided [-1]", "index.blocks.metadata", "index.shared_filesystem", "index.blocks.read", "current version [100] is different than the one provided [100]", "index.blocks.read_only", "current version [0] is different than the one provided [-1]", "current version [100] is different than the one provided [2]", "index.blocks.read_only", "index.shared_filesystem.recover_on_any_node", "primary_terms", "current version [0] is different than the one provided [-1]", "current version [1] is different than the one provided [10]" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder13.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet54);
        int int57 = builder13.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom59 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder13.putCustom("current version [98] is different than the one provided [0]", custom59);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData61 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder13.putAlias(aliasMetaData61);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertTrue("'" + int57 + "' != '" + 0 + "'", int57 == 0);
        org.junit.Assert.assertNotNull(builder60);
    }

    @Test
    public void test01377() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01377");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        long long22 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.version(0L);
        long long25 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long27 = indexMetaData26.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff30 = indexMetaData26.diff(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData28);
        org.elasticsearch.common.settings.Settings settings32 = indexMetaData28.getSettings();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder3.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.numberOfReplicas((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder36.version((long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            long long40 = builder36.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
    }

    @Test
    public void test01378() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01378");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long4 = versionType1.updateVersion((-1L), (long) 'a');
        boolean boolean8 = versionType1.isVersionConflictForWrites(0L, (long) (short) 10, true);
        java.lang.String str11 = versionType1.explainConflictForReads((long) (short) -1, (long) (short) -1);
        boolean boolean13 = versionType1.validateVersionForReads(102L);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [-1] is different than the one provided [-1]" + "'", str11, "current version [-1] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test01379() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01379");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.creation_date");
        long long2 = builder1.version();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putMapping("", "delete");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
    }

    @Test
    public void test01380() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01380");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version4 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder5 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params6 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.creationDate((long) (byte) 100);
        long long18 = builder15.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = builder15.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple24 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest21, state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder20.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap28 = indexMetaData27.getAliases();
        org.elasticsearch.Version version29 = indexMetaData27.getUpgradedVersion();
        org.apache.lucene.util.Version version30 = indexMetaData27.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData27);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData27.getCustoms();
        java.util.Set<java.lang.String> strSet34 = indexMetaData27.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder25.putActiveAllocationIds(0, strSet34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean38 = indexMetaData36.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap40 = indexMetaData36.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        int int42 = indexMetaData36.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        org.elasticsearch.common.settings.Settings settings44 = indexMetaData36.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder35.settings(settings44);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple46 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params6, settings44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = indexMetaData0.toXContent(xContentBuilder5, params6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertNotNull(params6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertNotNull(version29);
        org.junit.Assert.assertNull(version30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(strSet34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + 0 + "'", int42 == 0);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(builder45);
    }

    @Test
    public void test01381() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01381");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromString("index.blocks.metadata", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.blocks.metadata]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
    }

    @Test
    public void test01382() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01382");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder24.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long32 = builder31.version();
        java.lang.String[] strArray47 = new java.lang.String[] { "index.blocks.read_only", "index.version.created_string", "index.version.created_string", "index.shadow_replicas", "index.", "index.version.upgraded", "index.auto_expand_replicas", "index.blocks.read", "index.auto_expand_replicas", "index.version.upgraded_string", "update", "active_allocations", "index." };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder31.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder25.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder7.creationDate((long) 52);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.putAlias(builder55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test01383() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01383");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.apache.lucene.util.Version version3 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mappingOrDefault("index.version.upgraded");
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index7 = indexMetaData0.getIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(version3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(index7);
    }

    @Test
    public void test01384() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01384");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean4 = indexMetaData2.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData2.getInitialRecoveryFilters();
        long long8 = indexMetaData2.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData2.getState();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData2.getSettings();
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings10);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings10);
        org.elasticsearch.transport.TransportService transportService15 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService16 = null;
        org.elasticsearch.indices.IndicesService indicesService17 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool18 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction19 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction20 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper21 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters22 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction24 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings10, transportService15, clusterService16, indicesService17, threadPool18, shardStateAction19, mappingUpdatedAction20, updateHelper21, actionFilters22, indexNameExpressionResolver23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test01385() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01385");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        boolean boolean5 = bulkShardRequest3.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str6 = bulkShardRequest3.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
    }

    @Test
    public void test01386() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01386");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet2 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.elasticsearch.common.xcontent.XContentParser xContentParser3 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = indexMetaData0.fromXContent(xContentParser3, parseFieldMatcher4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(strSet2);
    }

    @Test
    public void test01387() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01387");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        java.lang.Throwable throwable14 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult15 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult16 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest10, false, throwable14, writeResult15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest10.remoteAddress();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest10.timeout("current version [52] is higher than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [52] is higher than the one provided [10]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNull(transportAddress17);
    }

    @Test
    public void test01388() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01388");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.settings(settings5);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        long long11 = builder10.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder6.state(state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder14.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder15.version(11L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder15.removeAlias("index.");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder15.primaryTerm((int) '#', (long) (short) 10);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 35");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
    }

    @Test
    public void test01389() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01389");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        boolean boolean6 = indexMetaData2.isSameUUID("");
        long long7 = indexMetaData2.getVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = indexMetaData2.toXContent(xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(params9);
    }

    @Test
    public void test01390() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01390");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData12.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData12.getMappings();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNull(strSet21);
    }

    @Test
    public void test01391() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01391");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = bulkShardRequest0.index("index.uuid");
        long long3 = bulkShardRequest0.primaryTerm();
        boolean boolean4 = bulkShardRequest0.getShouldPersistResult();
        java.lang.Class<?> wildcardClass5 = bulkShardRequest0.getClass();
        org.junit.Assert.assertNotNull(bulkShardRequest2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(wildcardClass5);
    }

    @Test
    public void test01392() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01392");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAlias("index.version.minimum_compatible");
        int int5 = builder4.numberOfShards();
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
    }

    @Test
    public void test01393() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01393");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.common.settings.Settings settings8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.settings(settings8);
        long long10 = builder7.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder7.index("index.creation_date");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder7.removeAlias("delete");
        org.elasticsearch.common.settings.Settings.Builder builder16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder7.settings(builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01394() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01394");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder11.build();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean15 = indexMetaData13.equals((java.lang.Object) (short) -1);
        org.apache.lucene.util.Version version16 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData13.mappingOrDefault("index.version.upgraded");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData12.diff(indexMetaData13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = builder20.mapping("current version [-1] is different than the one provided [-1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(mappingMetaData22);
    }

    @Test
    public void test01395() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01395");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.numberOfReplicas(101);
        java.lang.String str4 = builder1.index();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder1.mapping("current version [3] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index.number_of_replicas" + "'", str4, "index.number_of_replicas");
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test01396() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01396");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel8);
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = bulkShardRequest9.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest9.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = null;
        bulkShardRequest9.remoteAddress(transportAddress12);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.index("hi!");
        bulkShardRequest17.seqNo((long) (byte) -1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap5, (org.elasticsearch.transport.TransportMessage) bulkShardRequest17);
        org.elasticsearch.transport.TransportMessage transportMessage21 = strSetImmutableOpenIntMapTuple20.v2();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str22 = strSetImmutableOpenIntMapTuple20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(transportAddress10);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(transportMessage21);
    }

    @Test
    public void test01397() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01397");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue8 = bulkShardRequest7.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.timeout(timeValue8);
        boolean boolean10 = bulkShardRequest3.getShouldPersistResult();
        java.lang.Throwable throwable12 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult14 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result2, (org.elasticsearch.action.ActionRequest) bulkShardRequest3, true, throwable12, writeResult13);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult15 = updateResult14.writeResult;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult16 = updateResult14.writeResult;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult17 = updateResult14.writeResult;
        java.lang.Throwable throwable18 = updateResult14.error;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = updateResult14.request();
        org.elasticsearch.action.ActionRequest actionRequest20 = updateResult14.actionRequest;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult21 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult22 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, actionRequest20, writeResult21);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult23 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult24 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, actionRequest20, writeResult23);
        boolean boolean25 = updateResult24.failure();
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(writeResult15);
        org.junit.Assert.assertNull(writeResult16);
        org.junit.Assert.assertNull(writeResult17);
        org.junit.Assert.assertNull(throwable18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(actionRequest20);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
    }

    @Test
    public void test01398() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01398");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest9.consistencyLevel();
        long long11 = bulkShardRequest9.seqNo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str12 = bulkShardRequest9.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test01399() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01399");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 1, (long) (short) 1);
        boolean boolean7 = versionType0.isVersionConflictForWrites((long) (byte) 1, (long) (byte) -1, true);
        byte byte8 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
    }

    @Test
    public void test01400() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01400");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long6 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params11 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        long long16 = builder15.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.state(state17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.creationDate((long) (byte) 100);
        long long23 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = builder20.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple29 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest26, state28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.state(state28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap33 = indexMetaData32.getAliases();
        org.elasticsearch.Version version34 = indexMetaData32.getUpgradedVersion();
        org.apache.lucene.util.Version version35 = indexMetaData32.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap37 = indexMetaData32.getCustoms();
        java.util.Set<java.lang.String> strSet39 = indexMetaData32.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder30.putActiveAllocationIds(0, strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean43 = indexMetaData41.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap45 = indexMetaData41.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        int int47 = indexMetaData41.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData41);
        org.elasticsearch.common.settings.Settings settings49 = indexMetaData41.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder40.settings(settings49);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple51 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params11, settings49);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder52 = settings8.toXContent(xContentBuilder10, params11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(params11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(version34);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(strSet39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(strImmutableOpenMap45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(builder50);
    }

    @Test
    public void test01401() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01401");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, true, throwable10, writeResult11);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = updateResult12.writeResult;
        boolean boolean14 = updateResult12.retry;
        java.lang.Throwable throwable15 = updateResult12.error;
        org.elasticsearch.action.update.UpdateHelper.Result result16 = updateResult12.result;
        boolean boolean17 = updateResult12.retry;
        org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest> bulkShardRequestReplicationRequest18 = updateResult12.request();
        boolean boolean19 = bulkShardRequestReplicationRequest18.getShouldPersistResult();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(writeResult13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(throwable15);
        org.junit.Assert.assertNull(result16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(bulkShardRequestReplicationRequest18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test01402() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01402");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.timeout(timeValue4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest2.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId8 = null;
        bulkShardRequest2.setParentTask(taskId8);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult10 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult11 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, writeResult10);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult12 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult13 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, writeResult12);
        long long14 = bulkShardRequest2.primaryTerm();
        bulkShardRequest2.setParentTask("index.version.minimum_compatible", (long) (byte) 0);
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest2.readFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
    }

    @Test
    public void test01403() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01403");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean3 = versionType0.validateVersionForReads((long) 0);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput4 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
    }

    @Test
    public void test01404() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01404");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, true, throwable10, writeResult11);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = updateResult12.writeResult;
        boolean boolean14 = updateResult12.retry;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = updateResult12.request();
        org.elasticsearch.index.shard.ShardId shardId16 = bulkShardRequest15.shardId();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(writeResult13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(shardId16);
    }

    @Test
    public void test01405() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01405");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAllAliases();
        int int6 = builder3.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long8 = builder3.primaryTerm((int) 'a');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 97");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
    }

    @Test
    public void test01406() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01406");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest16.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.timeout(timeValue25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest26.indicesOptions();
        bulkShardRequest26.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest34 = new org.elasticsearch.action.bulk.BulkItemRequest(101, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        org.elasticsearch.action.ActionRequest actionRequest35 = bulkItemRequest34.request();
        org.elasticsearch.action.ActionRequest actionRequest36 = bulkItemRequest34.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest34.writeTo(streamOutput37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(actionRequest35);
        org.junit.Assert.assertNotNull(actionRequest36);
    }

    @Test
    public void test01407() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01407");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        boolean boolean7 = versionType1.validateVersionForWrites(1L);
        boolean boolean9 = versionType1.validateVersionForReads((long) ' ');
        boolean boolean13 = versionType1.isVersionConflictForWrites((long) (short) -1, 100L, false);
        long long16 = versionType1.updateVersion(1L, 34L);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 2L + "'", long16 == 2L);
    }

    @Test
    public void test01408() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01408");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = builder21.mapping("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.putCustom("index.uuid", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData27.getState();
        org.elasticsearch.index.Index index29 = indexMetaData27.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData27.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long32 = indexMetaData31.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long34 = indexMetaData33.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData31.diff(indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.common.settings.Settings settings37 = indexMetaData33.getSettings();
        boolean boolean38 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings37);
        org.elasticsearch.common.settings.Settings settings39 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings37);
        boolean boolean40 = indexMetaData27.equals((java.lang.Object) settings37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder26.settings(settings37);
        boolean boolean42 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings37);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(settings37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
    }

    @Test
    public void test01409() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01409");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.timeout(timeValue4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest2.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId8 = null;
        bulkShardRequest2.setParentTask(taskId8);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest2.setShardId(shardId10);
        bulkShardRequest2.primaryTerm((long) ' ');
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest14 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest15 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 2, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.action.ActionRequest actionRequest16 = bulkItemRequest15.request();
        int int17 = bulkItemRequest15.id();
        org.elasticsearch.common.io.stream.StreamInput streamInput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest15.readFrom(streamInput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(actionRequest16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 2 + "'", int17 == 2);
    }

    @Test
    public void test01410() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01410");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        int int8 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test01411() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01411");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        long long7 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("current version [-1] is different than the one provided [-1]");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
    }

    @Test
    public void test01412() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01412");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.timeout(timeValue8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest10.timeout(timeValue12);
        org.elasticsearch.action.support.IndicesOptions indicesOptions14 = bulkShardRequest13.indicesOptions();
        bulkShardRequest13.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel17);
        bulkShardRequest19.setParentTask("current version [52] is different than the one provided [10]", (long) '#');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(indicesOptions14);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel17 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel17.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
    }

    @Test
    public void test01413() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01413");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [-1] is different than the one provided [101]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01414() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01414");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("active_allocations");
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version9 = indexMetaData0.getCreationVersion();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        long long11 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
    }

    @Test
    public void test01415() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01415");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder8.build();
        org.elasticsearch.Version version13 = indexMetaData12.getUpgradedVersion();
        int int14 = indexMetaData12.getTotalNumberOfShards();
        org.apache.lucene.util.Version version15 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.index.Index index16 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData12.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 101 + "'", int14 == 101);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
    }

    @Test
    public void test01416() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01416");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [0] is different than the one provided [102]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [0] is different than the one provided [102]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01417() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01417");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("current version [1] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mapping("current version [52] is higher than the one provided [10]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
    }

    @Test
    public void test01418() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01418");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = builder5.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder5.primaryTerm(0, (long) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder5.primaryTerm(10, 98L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test01419() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01419");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = bulkShardRequest10.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest10.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest10.remoteAddress(transportAddress13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long22 = bulkShardRequest21.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest21.timeout(timeValue23);
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest24.indicesOptions();
        bulkShardRequest24.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel28 = bulkShardRequest24.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = bulkShardRequest35.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId37 = bulkShardRequest35.getParentTask();
        long long38 = bulkShardRequest35.seqNo();
        boolean boolean39 = bulkShardRequest35.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId40 = bulkShardRequest35.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException41 = bulkShardRequest35.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult42 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult43 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result6, (org.elasticsearch.action.ActionRequest) bulkShardRequest30, false, (java.lang.Throwable) actionRequestValidationException41, writeResult42);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure45 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "current version [52] is higher than the one provided [2]", (java.lang.Throwable) actionRequestValidationException41, "index.blocks.write");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure47 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [0] is different than the one provided [99]", (java.lang.Throwable) actionRequestValidationException41, "current version [35] is different than the one provided [2]");
        java.lang.Throwable throwable48 = shardFailure47.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure50 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [32] is different than the one provided [3]", throwable48, "current version [-1] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(transportAddress11);
        org.junit.Assert.assertNotNull(taskId12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel28 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel28.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(transportAddress36);
        org.junit.Assert.assertNotNull(taskId37);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(taskId40);
        org.junit.Assert.assertNotNull(actionRequestValidationException41);
        org.junit.Assert.assertNotNull(throwable48);
        org.junit.Assert.assertEquals(throwable48.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable48.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable48.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test01420() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01420");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        long long22 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.version(0L);
        long long25 = builder3.version();
        org.elasticsearch.common.settings.Settings.Builder builder26 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder3.settings(builder26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 1L + "'", long22 == 1L);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
    }

    @Test
    public void test01421() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01421");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        int int8 = builder7.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder7.build();
        java.lang.String str10 = builder7.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) 10);
        org.elasticsearch.common.settings.Settings.Builder builder13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.settings(builder13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.auto_expand_replicas" + "'", str10, "index.auto_expand_replicas");
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test01422() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01422");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        byte byte6 = versionType1.getValue();
        long long9 = versionType1.updateVersion((long) (-1), (long) (short) 100);
        org.elasticsearch.index.VersionType versionType10 = versionType1.versionTypeForReplicationAndRecovery();
        long long13 = versionType1.updateVersion(0L, (long) 100);
        byte byte14 = versionType1.getValue();
        java.lang.String str17 = versionType1.explainConflictForReads((long) (byte) 10, 0L);
        boolean boolean19 = versionType1.validateVersionForWrites((long) 101);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput20 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(versionType10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertTrue("'" + byte14 + "' != '" + (byte) 0 + "'", byte14 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [0]" + "'", str17, "current version [10] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test01423() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01423");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version11 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData8.getAliases();
        int int22 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData8.getSettings();
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings23);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test01424() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01424");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version((long) (short) 100);
        int int15 = builder14.numberOfReplicas();
        // The following exception was thrown during execution in test generation
        try {
            long long17 = builder14.primaryTerm((int) (short) 1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
    }

    @Test
    public void test01425() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01425");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        boolean boolean7 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions8 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        bulkShardRequest0.setParentTask("index.version.created_string", 101L);
        java.lang.String str13 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setShardId(shardId14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest16.index("index.uuid");
        long long19 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.update.UpdateHelper.Result result26 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest28.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue33 = bulkShardRequest32.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest28.timeout(timeValue33);
        boolean boolean35 = bulkShardRequest28.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue36 = bulkShardRequest28.timeout();
        java.lang.Throwable throwable38 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult39 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult40 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result27, (org.elasticsearch.action.ActionRequest) bulkShardRequest28, false, throwable38, writeResult39);
        java.lang.Throwable throwable42 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult43 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult44 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result26, (org.elasticsearch.action.ActionRequest) bulkShardRequest28, true, throwable42, writeResult43);
        org.elasticsearch.tasks.TaskId taskId45 = bulkShardRequest28.getParentTask();
        bulkShardRequest25.setParentTask(taskId45);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task47 = bulkShardRequest21.createTask(2L, "index.priority", "index.", taskId45);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNotNull(indicesOptions8);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertNull(str13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(timeValue33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(timeValue36);
        org.junit.Assert.assertNotNull(taskId45);
    }

    @Test
    public void test01426() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01426");
        org.elasticsearch.action.support.replication.ReplicationTask replicationTask0 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.setPhase(replicationTask0, "current version [0] is different than the one provided [1]");
    }

    @Test
    public void test01427() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01427");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData2.getSettings();
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings6);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings6);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test01428() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01428");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean22 = indexMetaData20.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData20);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData20.getInitialRecoveryFilters();
        long long26 = indexMetaData20.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData20.getState();
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData20.getSettings();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder3.settings(settings28);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings28);
        boolean boolean32 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test01429() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01429");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest6.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest2.timeout(timeValue7);
        boolean boolean9 = bulkShardRequest2.getShouldPersistResult();
        java.lang.Throwable throwable11 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult12 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult13 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest2, true, throwable11, writeResult12);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult14 = updateResult13.writeResult;
        boolean boolean15 = updateResult13.retry;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = updateResult13.request();
        org.elasticsearch.action.update.UpdateHelper.Result result18 = null;
        org.elasticsearch.action.ActionRequest actionRequest19 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting21 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting23 = null;
        org.elasticsearch.action.update.UpdateHelper.Result result25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel28);
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = bulkShardRequest29.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId31 = bulkShardRequest29.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = null;
        bulkShardRequest29.remoteAddress(transportAddress32);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.timeout(timeValue38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long41 = bulkShardRequest40.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue42 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest40.timeout(timeValue42);
        org.elasticsearch.action.support.IndicesOptions indicesOptions44 = bulkShardRequest43.indicesOptions();
        bulkShardRequest43.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel47 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest29.consistencyLevel(writeConsistencyLevel47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel53 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest51.consistencyLevel(writeConsistencyLevel53);
        org.elasticsearch.common.transport.TransportAddress transportAddress55 = bulkShardRequest54.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId56 = bulkShardRequest54.getParentTask();
        long long57 = bulkShardRequest54.seqNo();
        boolean boolean58 = bulkShardRequest54.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId59 = bulkShardRequest54.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException60 = bulkShardRequest54.validate();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult61 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult62 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result25, (org.elasticsearch.action.ActionRequest) bulkShardRequest49, false, (java.lang.Throwable) actionRequestValidationException60, writeResult61);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure64 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting23, "current version [-1] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException60, "index.data_path");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure66 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting21, "", (java.lang.Throwable) actionRequestValidationException60, "index.uuid");
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult67 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult68 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result18, actionRequest19, true, (java.lang.Throwable) actionRequestValidationException60, writeResult67);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult69 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult70 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest16, false, (java.lang.Throwable) actionRequestValidationException60, writeResult69);
        org.elasticsearch.action.ActionRequest actionRequest71 = updateResult70.actionRequest;
        boolean boolean72 = updateResult70.retry;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(writeResult14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNull(transportAddress30);
        org.junit.Assert.assertNotNull(taskId31);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(indicesOptions44);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel47 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel47.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNull(transportAddress55);
        org.junit.Assert.assertNotNull(taskId56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(taskId59);
        org.junit.Assert.assertNotNull(actionRequestValidationException60);
        org.junit.Assert.assertNotNull(actionRequest71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
    }

    @Test
    public void test01430() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01430");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        int int2 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + 0 + "'", int2 == 0);
        org.junit.Assert.assertNotNull(builder3);
    }

    @Test
    public void test01431() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01431");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("active_allocations");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder4 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putAlias(builder4);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test01432() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01432");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("primary_terms");
        org.elasticsearch.tasks.TaskId taskId8 = bulkShardRequest7.getParentTask();
        long long9 = bulkShardRequest7.primaryTerm();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(taskId8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
    }

    @Test
    public void test01433() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01433");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.FORCE;
        long long4 = versionType1.updateVersion((long) (short) 0, (long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.fromString("index.blocks.read_only", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.blocks.read_only]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + (-1L) + "'", long4 == (-1L));
    }

    @Test
    public void test01434() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01434");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        int int2 = builder1.numberOfShards();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean6 = indexMetaData4.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData10.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData4.diff(indexMetaData10);
        long long13 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long15 = indexMetaData14.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData14.mappingOrDefault("index.blocks.read");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData10.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder1.creationDate(52L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.version((-1L));
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = builder22.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfShards for index [index.shadow_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01435() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01435");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean7 = versionType1.isVersionConflictForWrites((long) (short) -1, 0L, false);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType1.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test01436() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01436");
        org.elasticsearch.action.ActionRequest actionRequest1 = null;
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest2 = null; // flaky: new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) -1, actionRequest1);
        int int3 = 0; // flaky: bulkItemRequest2.id();
        int int4 = 0; // flaky: bulkItemRequest2.id();
        int int5 = 0; // flaky: bulkItemRequest2.id();
        org.elasticsearch.action.ActionRequest actionRequest6 = null; // flaky: bulkItemRequest2.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest2.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
// flaky:         org.junit.Assert.assertTrue("'" + int3 + "' != '" + (-1) + "'", int3 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int4 + "' != '" + (-1) + "'", int4 == (-1));
// flaky:         org.junit.Assert.assertTrue("'" + int5 + "' != '" + (-1) + "'", int5 == (-1));
        org.junit.Assert.assertNull(actionRequest6);
    }

    @Test
    public void test01437() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01437");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [11] is different than the one provided [100]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01438() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01438");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        long long11 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version13 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData0.mapping("index.creation_date_string");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test01439() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01439");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        int int19 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder3.creationDate((long) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder3.creationDate((long) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean27 = indexMetaData25.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        long long29 = builder28.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.state(state30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder31.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state35 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.state(state35);
        byte byte37 = state35.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder3.state(state35);
        java.lang.String str39 = builder3.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + state35 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state35.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + byte37 + "' != '" + (byte) 0 + "'", byte37 == (byte) 0);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "" + "'", str39, "");
    }

    @Test
    public void test01440() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01440");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test01441() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01441");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("primary_terms");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [primary_terms]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01442() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01442");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest4.remoteAddress(transportAddress7);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest4.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkItemRequest12.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(indicesOptions11);
    }

    @Test
    public void test01443() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01443");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder9.build();
        org.apache.lucene.util.Version version11 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData12.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData10.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertNotNull(params19);
    }

    @Test
    public void test01444() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01444");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest7.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId13 = null;
        bulkShardRequest7.setParentTask(taskId13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest7.setShardId(shardId15);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple17 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap6, (org.elasticsearch.transport.TransportMessage) bulkShardRequest16);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.transport.TransportMessage transportMessage19 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage20 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean24 = indexMetaData22.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData22.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder27.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder27.numberOfShards((int) ' ');
        boolean boolean31 = strSetImmutableOpenIntMapTuple17.equals((java.lang.Object) ' ');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(transportMessage19);
        org.junit.Assert.assertNotNull(transportMessage20);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
    }

    @Test
    public void test01445() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01445");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.removeAlias("index.number_of_shards");
        int int8 = builder3.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder3.putCustom("current version [0] is higher than the one provided [1]", custom10);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.putAlias(aliasMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test01446() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01446");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        int int20 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.Version version21 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version22 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(version21);
        org.junit.Assert.assertNotNull(version22);
    }

    @Test
    public void test01447() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01447");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 1, (long) (short) 1);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput5 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertNotNull(versionType4);
    }

    @Test
    public void test01448() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01448");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest5.consistencyLevel();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str7 = bulkShardRequest5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test01449() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01449");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        long long6 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean10 = indexMetaData8.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData8.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData8.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData8);
        org.apache.lucene.util.Version version16 = indexMetaData8.getMinimumCompatibleVersion();
        boolean boolean18 = indexMetaData8.isSameUUID("current version [-1] is different than the one provided [52]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test01450() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01450");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        java.lang.String[] strArray22 = new java.lang.String[] { "state-", "active_allocations", "index.shared_filesystem.recover_on_any_node", "hi!", "update", "", "index.uuid", "index.version.upgraded_string", "index.version.upgraded", "index.auto_expand_replicas", "update", "index.data_path", "index.version.minimum_compatible", "hi!", "hi!", "index.uuid", "active_allocations", "index.version.created_string", "index.creation_date_string" };
        java.util.LinkedHashSet<java.lang.String> strSet23 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean24 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet23, strArray22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder1.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean28 = indexMetaData26.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData26.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData26.mapping("active_allocations");
        org.elasticsearch.common.settings.Settings settings33 = indexMetaData26.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder1.settings(settings33);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder35 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params36 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean39 = indexMetaData37.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData37);
        long long41 = builder40.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.state(state42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.creationDate((long) (byte) 100);
        long long48 = builder45.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = builder45.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state53 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple54 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest51, state53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder50.state(state53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap58 = indexMetaData57.getAliases();
        org.elasticsearch.Version version59 = indexMetaData57.getUpgradedVersion();
        org.apache.lucene.util.Version version60 = indexMetaData57.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData57);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap62 = indexMetaData57.getCustoms();
        java.util.Set<java.lang.String> strSet64 = indexMetaData57.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder55.putActiveAllocationIds(0, strSet64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData66 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean68 = indexMetaData66.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData66);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap70 = indexMetaData66.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData66);
        int int72 = indexMetaData66.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData66);
        org.elasticsearch.common.settings.Settings settings74 = indexMetaData66.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder65.settings(settings74);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple76 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params36, settings74);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder77 = settings33.toXContent(xContentBuilder35, params36);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(strArray22);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(params36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + state53 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state53.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertNotNull(version59);
        org.junit.Assert.assertNull(version60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(strImmutableOpenMap62);
        org.junit.Assert.assertNotNull(strSet64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(indexMetaData66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(strImmutableOpenMap70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertTrue("'" + int72 + "' != '" + 0 + "'", int72 == 0);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(settings74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test01451() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01451");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long3 = indexMetaData2.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.diff(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.index("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean10 = indexMetaData8.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData8.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData8.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData14.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData8.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder7.state(state17);
        org.elasticsearch.common.settings.Settings.Builder builder19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.settings(builder19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 1L + "'", long1 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test01452() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01452");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder12.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder3.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder3.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean22 = indexMetaData20.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData20);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData20.getInitialRecoveryFilters();
        long long26 = indexMetaData20.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData20.getState();
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData20.getSettings();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder3.settings(settings28);
        int int31 = builder30.numberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder30.putMapping(mappingMetaData32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
    }

    @Test
    public void test01453() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01453");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [2] is higher or equal to the one provided [52]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [2] is higher or equal to the one provided [52]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01454() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01454");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder6.state(state10);
        java.lang.String str12 = builder6.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.creationDate((long) 2);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.putAlias(builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "" + "'", str12, "");
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test01455() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01455");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [32] is different than the one provided [3]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [32] is different than the one provided [3]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01456() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01456");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest1.setShardId(shardId8);
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = null;
        bulkShardRequest1.remoteAddress(transportAddress10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest1.index("current version [52] is higher than the one provided [10]");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest14 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest15 = bulkItemRequest14.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest14.writeTo(streamOutput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(actionRequest15);
    }

    @Test
    public void test01457() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01457");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [98] is different than the one provided [1]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [98] is different than the one provided [1]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01458() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01458");
        org.elasticsearch.action.update.UpdateHelper.Result result1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.consistencyLevel(writeConsistencyLevel4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest5.remoteAddress();
        boolean boolean7 = bulkShardRequest5.getShouldPersistResult();
        java.lang.Throwable throwable9 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult10 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult11 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result1, (org.elasticsearch.action.ActionRequest) bulkShardRequest5, false, throwable9, writeResult10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = bulkShardRequest5.consistencyLevel();
        org.elasticsearch.index.shard.ShardId shardId13 = bulkShardRequest5.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest14 = new org.elasticsearch.action.bulk.BulkItemRequest(101, (org.elasticsearch.action.ActionRequest) bulkShardRequest5);
        org.elasticsearch.common.io.stream.StreamInput streamInput15 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest14.readFrom(streamInput15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertNull(writeConsistencyLevel12);
        org.junit.Assert.assertNull(shardId13);
    }

    @Test
    public void test01459() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01459");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = builder8.build();
        org.elasticsearch.common.settings.Settings.Builder builder10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.settings(builder10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
    }

    @Test
    public void test01460() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01460");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("index.version.created_string", custom4);
        int int6 = builder5.numberOfShards();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
    }

    @Test
    public void test01461() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01461");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean9 = indexMetaData7.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData7.getInitialRecoveryFilters();
        long long13 = indexMetaData7.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData7.getState();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData7.getSettings();
        boolean boolean16 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder6.settings(settings15);
        boolean boolean19 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings15);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.primaryTerm(2, 101L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test01462() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01462");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.removeAlias("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.putAlias(aliasMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test01463() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01463");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue5 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest6.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = bulkShardRequest18.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest18.getParentTask();
        bulkShardRequest14.setParentTask(taskId20);
        long long22 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.update.UpdateHelper.Result result26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = bulkShardRequest30.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId32 = bulkShardRequest30.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress33 = null;
        bulkShardRequest30.remoteAddress(transportAddress33);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest36.index("hi!");
        bulkShardRequest38.seqNo((long) (byte) -1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long42 = bulkShardRequest41.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest41.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.common.transport.TransportAddress transportAddress45 = bulkShardRequest44.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId46 = bulkShardRequest44.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress47 = null;
        bulkShardRequest44.remoteAddress(transportAddress47);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel49 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest44.consistencyLevel(writeConsistencyLevel49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest50.index("hi!");
        long long53 = bulkShardRequest52.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long55 = bulkShardRequest54.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel56);
        org.elasticsearch.common.transport.TransportAddress transportAddress58 = bulkShardRequest57.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId59 = bulkShardRequest57.getParentTask();
        long long60 = bulkShardRequest57.seqNo();
        boolean boolean61 = bulkShardRequest57.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId62 = bulkShardRequest57.getParentTask();
        bulkShardRequest52.setParentTask(taskId62);
        bulkShardRequest38.setParentTask(taskId62);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult65 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult66 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result26, (org.elasticsearch.action.ActionRequest) bulkShardRequest38, writeResult65);
        long long67 = bulkShardRequest38.seqNo();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel68 = bulkShardRequest38.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long70 = bulkShardRequest69.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel71 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest69.consistencyLevel(writeConsistencyLevel71);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue74 = bulkShardRequest73.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest69.timeout(timeValue74);
        boolean boolean76 = bulkShardRequest69.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions77 = bulkShardRequest69.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException78 = bulkShardRequest69.validate();
        bulkShardRequest69.seqNo(10L);
        org.elasticsearch.tasks.TaskId taskId81 = bulkShardRequest69.getParentTask();
        org.elasticsearch.tasks.TaskId taskId82 = bulkShardRequest69.getParentTask();
        bulkShardRequest38.setParentTask(taskId82);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task84 = bulkShardRequest14.createTask(0L, "current version [2] is higher or equal to the one provided [52]", "current version [-1] is different than the one provided [-1]", taskId82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(transportAddress19);
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNull(transportAddress31);
        org.junit.Assert.assertNotNull(taskId32);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(transportAddress45);
        org.junit.Assert.assertNotNull(taskId46);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNull(transportAddress58);
        org.junit.Assert.assertNotNull(taskId59);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(taskId62);
        org.junit.Assert.assertTrue("'" + long67 + "' != '" + (-1L) + "'", long67 == (-1L));
        org.junit.Assert.assertNull(writeConsistencyLevel68);
        org.junit.Assert.assertTrue("'" + long70 + "' != '" + 0L + "'", long70 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertNotNull(timeValue74);
        org.junit.Assert.assertNotNull(bulkShardRequest75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(indicesOptions77);
        org.junit.Assert.assertNotNull(actionRequestValidationException78);
        org.junit.Assert.assertNotNull(taskId81);
        org.junit.Assert.assertNotNull(taskId82);
    }

    @Test
    public void test01464() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01464");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01465() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01465");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder8.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData12.getAliases();
        java.lang.Class<?> wildcardClass15 = indexMetaData12.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(wildcardClass15);
    }

    @Test
    public void test01466() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01466");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setShardId(shardId4);
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.timeout(timeValue6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = bulkShardRequest7.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
    }

    @Test
    public void test01467() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01467");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        java.lang.String str6 = versionType2.explainConflictForWrites((long) (byte) -1, 10L, true);
        boolean boolean10 = versionType2.isVersionConflictForWrites((long) (byte) 10, (long) (short) -1, true);
        java.lang.String str13 = versionType2.explainConflictForReads((long) (short) 100, (long) (byte) 100);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType14 = org.elasticsearch.index.VersionType.fromString("index.number_of_shards", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.number_of_shards]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [10]" + "'", str6, "current version [-1] is different than the one provided [10]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [100] is different than the one provided [100]" + "'", str13, "current version [100] is different than the one provided [100]");
    }

    @Test
    public void test01468() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01468");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long4 = builder3.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder3.state(state5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.creationDate((long) (byte) 100);
        long long11 = builder8.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = builder8.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple17 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest14, state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.state(state16);
        long long19 = builder13.version();
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder13.putAlias(builder20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
    }

    @Test
    public void test01469() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01469");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = bulkShardRequest0.index("index.uuid");
        long long3 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest7.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId13 = null;
        bulkShardRequest7.setParentTask(taskId13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest7.setShardId(shardId15);
        bulkShardRequest16.setParentTask("index.shared_filesystem", (long) 100);
        bulkShardRequest16.setParentTask("index.version.minimum_compatible", (long) (byte) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel25);
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = bulkShardRequest26.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId28 = bulkShardRequest26.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress29 = null;
        bulkShardRequest26.remoteAddress(transportAddress29);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest26.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest32.index("hi!");
        long long35 = bulkShardRequest34.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = bulkShardRequest39.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest39.getParentTask();
        long long42 = bulkShardRequest39.seqNo();
        boolean boolean43 = bulkShardRequest39.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId44 = bulkShardRequest39.getParentTask();
        bulkShardRequest34.setParentTask(taskId44);
        bulkShardRequest16.setParentTask(taskId44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task47 = bulkShardRequest0.createTask((long) 52, "current version [10] is different than the one provided [0]", "current version [32] is higher or equal to the one provided [1]", taskId44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(bulkShardRequest2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(transportAddress27);
        org.junit.Assert.assertNotNull(taskId28);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(transportAddress40);
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(taskId44);
    }

    @Test
    public void test01470() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01470");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean4 = indexMetaData2.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData2.getInitialRecoveryFilters();
        long long8 = indexMetaData2.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData2.getState();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData2.getSettings();
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder1.settings(settings10);
        // The following exception was thrown during execution in test generation
        try {
            long long15 = builder13.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test01471() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01471");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData10);
        boolean boolean18 = indexMetaData0.isSameUUID("delete");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        int int20 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData0.getSettings();
        org.elasticsearch.transport.TransportService transportService22 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService23 = null;
        org.elasticsearch.indices.IndicesService indicesService24 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool25 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction26 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction27 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper28 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters29 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction31 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings21, transportService22, clusterService23, indicesService24, threadPool25, shardStateAction26, mappingUpdatedAction27, updateHelper28, actionFilters29, indexNameExpressionResolver30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(settings21);
    }

    @Test
    public void test01472() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01472");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.state(state15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.creationDate((long) (byte) 100);
        long long21 = builder18.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = builder18.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple27 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest24, state26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder23.state(state26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap31 = indexMetaData30.getAliases();
        org.elasticsearch.Version version32 = indexMetaData30.getUpgradedVersion();
        org.apache.lucene.util.Version version33 = indexMetaData30.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap35 = indexMetaData30.getCustoms();
        java.util.Set<java.lang.String> strSet37 = indexMetaData30.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder28.putActiveAllocationIds(0, strSet37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean41 = indexMetaData39.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData39.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        int int45 = indexMetaData39.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.common.settings.Settings settings47 = indexMetaData39.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder38.settings(settings47);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple49 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params9, settings47);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder50 = indexMetaData0.toXContent(xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(params9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNull(version33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(strSet37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 0 + "'", int45 == 0);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
    }

    @Test
    public void test01473() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01473");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        long long6 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version8);
    }

    @Test
    public void test01474() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01474");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        long long7 = indexMetaData0.getCreationDate();
        long long8 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
    }

    @Test
    public void test01475() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01475");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.apache.lucene.util.Version version1 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean4 = indexMetaData2.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData2.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = builder7.build();
        boolean boolean12 = indexMetaData10.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version13 = indexMetaData10.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean16 = indexMetaData14.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index17 = indexMetaData14.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData14.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData14.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData14.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap23 = indexMetaData14.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData14.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap25 = indexMetaData14.getActiveAllocationIds();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData14);
        org.elasticsearch.Version version27 = indexMetaData14.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(version1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNotNull(version27);
    }

    @Test
    public void test01476() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01476");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.removeAlias("current version [-1] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder5.build();
        boolean boolean10 = indexMetaData8.isSameUUID("index.shared_filesystem");
        org.elasticsearch.Version version11 = indexMetaData8.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean14 = indexMetaData12.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index15 = indexMetaData12.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds(1);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap21 = indexMetaData12.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.index("current version [-1] is different than the one provided [-1]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNull(index15);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test01477() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01477");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData0.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean28 = indexMetaData26.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData26);
        long long30 = builder29.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.state(state31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder34.creationDate((long) (byte) 100);
        long long37 = builder34.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = builder34.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple43 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest40, state42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder39.state(state42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap47 = indexMetaData46.getAliases();
        org.elasticsearch.Version version48 = indexMetaData46.getUpgradedVersion();
        org.apache.lucene.util.Version version49 = indexMetaData46.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData46);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap51 = indexMetaData46.getCustoms();
        java.util.Set<java.lang.String> strSet53 = indexMetaData46.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder44.putActiveAllocationIds(0, strSet53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData55 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean57 = indexMetaData55.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData55);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap59 = indexMetaData55.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData55);
        int int61 = indexMetaData55.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData55);
        org.elasticsearch.common.settings.Settings settings63 = indexMetaData55.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder54.settings(settings63);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple65 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params25, settings63);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder24, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
        org.junit.Assert.assertNotNull(params25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 1L + "'", long37 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(version48);
        org.junit.Assert.assertNull(version49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(indexMetaData55);
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(strImmutableOpenMap59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertTrue("'" + int61 + "' != '" + 0 + "'", int61 == 0);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settings63);
        org.junit.Assert.assertNotNull(builder64);
    }

    @Test
    public void test01478() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01478");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, true, throwable10, writeResult11);
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult13 = updateResult12.writeResult;
        boolean boolean14 = updateResult12.retry;
        java.lang.Throwable throwable15 = updateResult12.error;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult16 = updateResult12.writeResult;
        boolean boolean17 = updateResult12.failure();
        org.elasticsearch.action.update.UpdateResponse updateResponse18 = updateResult12.noopResult;
        boolean boolean19 = updateResult12.failure();
        java.lang.Throwable throwable20 = updateResult12.error;
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNull(writeResult13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertNull(throwable15);
        org.junit.Assert.assertNull(writeResult16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNull(updateResponse18);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNull(throwable20);
    }

    @Test
    public void test01479() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01479");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean12 = indexMetaData10.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        long long14 = builder13.version();
        org.elasticsearch.common.settings.Settings settings15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.settings(settings15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        long long21 = builder20.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder16.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder24.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.primaryTerm(0, (long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long32 = builder31.version();
        java.lang.String[] strArray47 = new java.lang.String[] { "index.blocks.read_only", "index.version.created_string", "index.version.created_string", "index.shadow_replicas", "index.", "index.version.upgraded", "index.auto_expand_replicas", "index.blocks.read", "index.auto_expand_replicas", "index.version.upgraded_string", "update", "active_allocations", "index." };
        java.util.LinkedHashSet<java.lang.String> strSet48 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean49 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet48, strArray47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder31.putActiveAllocationIds((int) '4', (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder25.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder7.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder52.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder52.removeAlias("current version [0] is higher than the one provided [98]");
        java.lang.String str56 = builder52.index();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strArray47);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + true + "'", boolean49 == true);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertEquals("'" + str56 + "' != '" + "" + "'", str56, "");
    }

    @Test
    public void test01480() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01480");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId6 = null;
        bulkShardRequest0.setParentTask(taskId6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        bulkShardRequest9.setParentTask("index.shared_filesystem", (long) 100);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel13);
        bulkShardRequest14.primaryTerm((long) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap21 = indexMetaData17.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData17.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest24.timeout(timeValue26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest24.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId30 = null;
        bulkShardRequest24.setParentTask(taskId30);
        org.elasticsearch.index.shard.ShardId shardId32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest24.setShardId(shardId32);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple34 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap23, (org.elasticsearch.transport.TransportMessage) bulkShardRequest33);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap35 = strSetImmutableOpenIntMapTuple34.v1();
        org.elasticsearch.index.VersionType versionType37 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean39 = versionType37.validateVersionForWrites((long) (short) 100);
        boolean boolean41 = versionType37.validateVersionForWrites((long) (byte) 10);
        byte byte42 = versionType37.getValue();
        boolean boolean43 = strSetImmutableOpenIntMapTuple34.equals((java.lang.Object) byte42);
        org.elasticsearch.transport.TransportMessage transportMessage44 = strSetImmutableOpenIntMapTuple34.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap45 = strSetImmutableOpenIntMapTuple34.v1();
        org.elasticsearch.transport.TransportMessage transportMessage46 = strSetImmutableOpenIntMapTuple34.v2();
        org.elasticsearch.transport.TransportMessage transportMessage47 = strSetImmutableOpenIntMapTuple34.v2();
        org.elasticsearch.transport.TransportMessage transportMessage48 = strSetImmutableOpenIntMapTuple34.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        org.elasticsearch.common.settings.Settings settings51 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.settings(settings51);
        long long53 = builder52.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state55 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        byte byte56 = state55.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder52.state(state55);
        boolean boolean58 = strSetImmutableOpenIntMapTuple34.equals((java.lang.Object) builder52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest60 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long61 = bulkShardRequest60.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel62 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest60.consistencyLevel(writeConsistencyLevel62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue65 = bulkShardRequest64.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest60.timeout(timeValue65);
        boolean boolean67 = bulkShardRequest60.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions68 = bulkShardRequest60.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, org.elasticsearch.action.IndicesRequest> strComparableTuple69 = new org.elasticsearch.common.collect.Tuple<java.lang.Comparable<java.lang.String>, org.elasticsearch.action.IndicesRequest>((java.lang.Comparable<java.lang.String>) "update", (org.elasticsearch.action.IndicesRequest) bulkShardRequest60);
        boolean boolean70 = strSetImmutableOpenIntMapTuple34.equals((java.lang.Object) "update");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap71 = strSetImmutableOpenIntMapTuple34.v1();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.IndicesRequest, org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>> indicesRequestTuple72 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.IndicesRequest, org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>>((org.elasticsearch.action.IndicesRequest) bulkShardRequest14, strSetImmutableOpenIntMapTuple34);
        org.elasticsearch.transport.TransportMessage transportMessage73 = strSetImmutableOpenIntMapTuple34.v2();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap35);
        org.junit.Assert.assertNotNull(versionType37);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertTrue("'" + byte42 + "' != '" + (byte) 0 + "'", byte42 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean43 + "' != '" + false + "'", boolean43 == false);
        org.junit.Assert.assertNotNull(transportMessage44);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap45);
        org.junit.Assert.assertNotNull(transportMessage46);
        org.junit.Assert.assertNotNull(transportMessage47);
        org.junit.Assert.assertNotNull(transportMessage48);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertTrue("'" + state55 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state55.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 1 + "'", byte56 == (byte) 1);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(timeValue65);
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertTrue("'" + boolean67 + "' != '" + false + "'", boolean67 == false);
        org.junit.Assert.assertNotNull(indicesOptions68);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap71);
        org.junit.Assert.assertNotNull(transportMessage73);
    }

    @Test
    public void test01481() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01481");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        long long5 = versionType2.updateVersion((-1L), (long) 'a');
        boolean boolean8 = versionType2.isVersionConflictForReads((long) (short) 1, (long) 0);
        java.lang.String str12 = versionType2.explainConflictForWrites(32L, (long) (byte) 3, false);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType13 = org.elasticsearch.index.VersionType.fromString("index.auto_expand_replicas", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.auto_expand_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 1L + "'", long5 == 1L);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [32] is different than the one provided [3]" + "'", str12, "current version [32] is different than the one provided [3]");
    }

    @Test
    public void test01482() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01482");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap1 = indexMetaData0.getAliases();
        long long2 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters3 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder4 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params5 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        long long10 = builder9.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas((int) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.creationDate((long) (byte) 100);
        long long17 = builder14.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = builder14.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.transport.TransportMessage, org.elasticsearch.cluster.metadata.IndexMetaData.State> transportMessageTuple23 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.transport.TransportMessage) bulkShardRequest20, state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder19.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap27 = indexMetaData26.getAliases();
        org.elasticsearch.Version version28 = indexMetaData26.getUpgradedVersion();
        org.apache.lucene.util.Version version29 = indexMetaData26.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData26);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap31 = indexMetaData26.getCustoms();
        java.util.Set<java.lang.String> strSet33 = indexMetaData26.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.putActiveAllocationIds(0, strSet33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean37 = indexMetaData35.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap39 = indexMetaData35.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        int int41 = indexMetaData35.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.common.settings.Settings settings43 = indexMetaData35.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder34.settings(settings43);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings> paramsTuple45 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.settings.Settings>(params5, settings43);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder4, params5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap1);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + (-1L) + "'", long2 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters3);
        org.junit.Assert.assertNotNull(params5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(transportMessageTuple23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertNotNull(version28);
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap31);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(builder44);
    }

    @Test
    public void test01483() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01483");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean3 = versionType1.validateVersionForWrites((long) (short) 100);
        boolean boolean5 = versionType1.validateVersionForWrites((long) (byte) 10);
        byte byte6 = versionType1.getValue();
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) (byte) -1, 101L, false);
        java.lang.String str13 = versionType1.explainConflictForReads(98L, (long) (short) 0);
        java.lang.Class<?> wildcardClass14 = versionType1.getClass();
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [98] is different than the one provided [0]" + "'", str13, "current version [98] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(wildcardClass14);
    }

    @Test
    public void test01484() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01484");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest1.primaryTerm((long) (byte) 1);
        long long4 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue8 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest1.timeout(timeValue8);
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest1.shardId();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult11 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult12 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, writeResult11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = updateResult12.request();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest13.timeout("current version [1] is different than the one provided [0]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [1] is different than the one provided [0]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(shardId10);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
    }

    @Test
    public void test01485() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01485");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest4.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest4.remoteAddress(transportAddress7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest4.remoteAddress();
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult10 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult11 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4, writeResult10);
        boolean boolean12 = updateResult11.failure();
        boolean boolean13 = updateResult11.retry;
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNull(transportAddress5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
    }

    @Test
    public void test01486() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01486");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest12.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest8.timeout(timeValue13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest7.timeout(timeValue13);
        boolean boolean16 = bulkShardRequest15.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '4', (org.elasticsearch.action.ActionRequest) bulkShardRequest15);
        int int18 = bulkItemRequest17.id();
        int int19 = bulkItemRequest17.id();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str20 = bulkItemRequest17.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 52 + "'", int18 == 52);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 52 + "'", int19 == 52);
    }

    @Test
    public void test01487() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01487");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean4 = versionType2.validateVersionForWrites(2L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.fromString("index.number_of_replicas", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [index.number_of_replicas]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
    }

    @Test
    public void test01488() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01488");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        bulkShardRequest0.primaryTerm((long) (byte) 1);
        long long3 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.setParentTask("index.version.created", 0L);
        org.elasticsearch.common.unit.TimeValue timeValue7 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest8.remoteAddress();
        bulkShardRequest8.primaryTerm((long) (byte) 0);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest8.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue13 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest8.timeout(timeValue13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = bulkShardRequest21.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId23 = bulkShardRequest21.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest21.remoteAddress(transportAddress24);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest21.consistencyLevel(writeConsistencyLevel26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest27.index("hi!");
        bulkShardRequest29.seqNo((long) (byte) -1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel34 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest32.consistencyLevel(writeConsistencyLevel34);
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = bulkShardRequest35.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId37 = bulkShardRequest35.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = null;
        bulkShardRequest35.remoteAddress(transportAddress38);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel40 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest35.consistencyLevel(writeConsistencyLevel40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest41.index("hi!");
        long long44 = bulkShardRequest43.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel47 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.consistencyLevel(writeConsistencyLevel47);
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = bulkShardRequest48.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId50 = bulkShardRequest48.getParentTask();
        long long51 = bulkShardRequest48.seqNo();
        boolean boolean52 = bulkShardRequest48.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId53 = bulkShardRequest48.getParentTask();
        bulkShardRequest43.setParentTask(taskId53);
        bulkShardRequest29.setParentTask(taskId53);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task56 = bulkShardRequest8.createTask(100L, "index.data_path", "current version [3] is different than the one provided [0]", taskId53);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(transportAddress22);
        org.junit.Assert.assertNotNull(taskId23);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNull(transportAddress36);
        org.junit.Assert.assertNotNull(taskId37);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNull(transportAddress49);
        org.junit.Assert.assertNotNull(taskId50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(taskId53);
    }

    @Test
    public void test01489() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01489");
        org.elasticsearch.action.update.UpdateHelper.Result result0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest1.timeout(timeValue6);
        boolean boolean8 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue9 = bulkShardRequest1.timeout();
        java.lang.Throwable throwable11 = null;
        org.elasticsearch.action.support.replication.TransportReplicationAction.WriteResult writeResult12 = null;
        org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult updateResult13 = new org.elasticsearch.action.bulk.TransportShardBulkAction.UpdateResult(result0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1, false, throwable11, writeResult12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest1.indicesOptions();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNull(transportAddress14);
        org.junit.Assert.assertNotNull(indicesOptions15);
    }

    @Test
    public void test01490() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01490");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = builder3.build();
        org.apache.lucene.util.Version version5 = indexMetaData4.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData6.activeAllocationIds((int) (short) -1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData4.diff(indexMetaData6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData6.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData6.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData6.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test01491() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01491");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.index.Index index3 = indexMetaData0.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean8 = indexMetaData6.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData12.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData6.diff(indexMetaData12);
        java.lang.String str15 = indexMetaData12.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean19 = indexMetaData17.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData17.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean25 = indexMetaData23.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData23.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap28 = indexMetaData23.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData29.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData23.diff(indexMetaData29);
        boolean boolean32 = indexMetaData17.equals((java.lang.Object) indexMetaData29);
        int int33 = indexMetaData17.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData17.mapping("primary_terms");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData17.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData12.diff(indexMetaData17);
        int int38 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder39 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params40 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder41 = indexMetaData12.toXContent(xContentBuilder39, params40);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNull(index3);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(indexMetaDataDiff14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + true + "'", boolean32 == true);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
        org.junit.Assert.assertTrue("'" + int38 + "' != '" + 1 + "'", int38 == 1);
        org.junit.Assert.assertNotNull(params40);
    }

    @Test
    public void test01492() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01492");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest7.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId13 = null;
        bulkShardRequest7.setParentTask(taskId13);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest7.setShardId(shardId15);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage> strSetImmutableOpenIntMapTuple17 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>>, org.elasticsearch.transport.TransportMessage>(strSetImmutableOpenIntMap6, (org.elasticsearch.transport.TransportMessage) bulkShardRequest16);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.index.VersionType versionType20 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        boolean boolean22 = versionType20.validateVersionForWrites((long) (short) 100);
        boolean boolean24 = versionType20.validateVersionForWrites((long) (byte) 10);
        byte byte25 = versionType20.getValue();
        boolean boolean26 = strSetImmutableOpenIntMapTuple17.equals((java.lang.Object) byte25);
        org.elasticsearch.transport.TransportMessage transportMessage27 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap28 = strSetImmutableOpenIntMapTuple17.v1();
        org.elasticsearch.transport.TransportMessage transportMessage29 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage30 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage31 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage32 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean35 = indexMetaData33.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData33.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean41 = indexMetaData39.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters43 = indexMetaData39.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap44 = indexMetaData39.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters46 = indexMetaData45.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData39.diff(indexMetaData45);
        boolean boolean48 = indexMetaData33.equals((java.lang.Object) indexMetaData45);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData33.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap50 = indexMetaData33.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData33.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean54 = indexMetaData52.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData52);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData52.getState();
        boolean boolean57 = indexMetaData33.equals((java.lang.Object) state56);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap58 = indexMetaData33.getAliases();
        boolean boolean59 = strSetImmutableOpenIntMapTuple17.equals((java.lang.Object) strImmutableOpenMap58);
        org.elasticsearch.transport.TransportMessage transportMessage60 = strSetImmutableOpenIntMapTuple17.v2();
        org.elasticsearch.transport.TransportMessage transportMessage61 = strSetImmutableOpenIntMapTuple17.v2();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str62 = strSetImmutableOpenIntMapTuple17.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(versionType20);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
        org.junit.Assert.assertTrue("'" + byte25 + "' != '" + (byte) 0 + "'", byte25 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(transportMessage27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap28);
        org.junit.Assert.assertNotNull(transportMessage29);
        org.junit.Assert.assertNotNull(transportMessage30);
        org.junit.Assert.assertNotNull(transportMessage31);
        org.junit.Assert.assertNotNull(transportMessage32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNull(discoveryNodeFilters43);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(discoveryNodeFilters46);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean57 + "' != '" + false + "'", boolean57 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(transportMessage60);
        org.junit.Assert.assertNotNull(transportMessage61);
    }

    @Test
    public void test01493() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01493");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = indexMetaData0.getState();
        org.elasticsearch.index.Index index2 = indexMetaData0.getMergeSourceIndex();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        org.elasticsearch.common.io.stream.StreamInput streamInput6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = indexMetaData0.readFrom(streamInput6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + state1 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state1.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test01494() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01494");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.numberOfShards((int) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.settings(builder6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01495() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01495");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        long long7 = indexMetaData0.primaryTerm((int) (short) 0);
        java.lang.String str8 = indexMetaData0.getIndexUUID();
        long long9 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("current version [1] is different than the one provided [0]");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder12, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "_na_" + "'", str8, "_na_");
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(params13);
    }

    @Test
    public void test01496() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01496");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shadow_replicas");
        long long2 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom4 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.putCustom("current version [-1] is different than the one provided [52]", custom4);
        java.util.Set<java.lang.String> strSet7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.putActiveAllocationIds((int) (short) 10, strSet7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(builder5);
    }

    @Test
    public void test01497() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01497");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("index.uuid");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [index.uuid]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test01498() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01498");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        boolean boolean2 = indexMetaData0.equals((java.lang.Object) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData6.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff8 = indexMetaData0.diff(indexMetaData6);
        long long9 = indexMetaData0.getVersion();
        org.apache.lucene.util.Version version10 = indexMetaData0.getMinimumCompatibleVersion();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + false + "'", boolean2 == false);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaDataDiff8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNull(version10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
        org.junit.Assert.assertNull(version12);
    }

    @Test
    public void test01499() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01499");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.timeout(timeValue2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setShardId(shardId4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str8 = bulkShardRequest5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
    }

    @Test
    public void test01500() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest2.test01500");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.timeout(timeValue3);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("active_allocations");
        org.elasticsearch.tasks.TaskId taskId7 = null;
        bulkShardRequest1.setParentTask(taskId7);
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.setShardId(shardId9);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest16.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest16.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.timeout(timeValue25);
        org.elasticsearch.action.support.IndicesOptions indicesOptions27 = bulkShardRequest26.indicesOptions();
        bulkShardRequest26.primaryTerm((long) (-1));
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest26.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest12.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest34 = new org.elasticsearch.action.bulk.BulkItemRequest(101, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        org.elasticsearch.action.ActionRequest actionRequest35 = bulkItemRequest34.request();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel38);
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = bulkShardRequest39.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest39.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress42 = null;
        bulkShardRequest39.remoteAddress(transportAddress42);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest45.index("hi!");
        bulkShardRequest47.seqNo((long) (byte) -1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long51 = bulkShardRequest50.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel52 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest50.consistencyLevel(writeConsistencyLevel52);
        org.elasticsearch.common.transport.TransportAddress transportAddress54 = bulkShardRequest53.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId55 = bulkShardRequest53.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = null;
        bulkShardRequest53.remoteAddress(transportAddress56);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest53.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest59.index("hi!");
        long long62 = bulkShardRequest61.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long64 = bulkShardRequest63.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel65 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest63.consistencyLevel(writeConsistencyLevel65);
        org.elasticsearch.common.transport.TransportAddress transportAddress67 = bulkShardRequest66.remoteAddress();
        org.elasticsearch.tasks.TaskId taskId68 = bulkShardRequest66.getParentTask();
        long long69 = bulkShardRequest66.seqNo();
        boolean boolean70 = bulkShardRequest66.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId71 = bulkShardRequest66.getParentTask();
        bulkShardRequest61.setParentTask(taskId71);
        bulkShardRequest47.setParentTask(taskId71);
        actionRequest35.setParentTask(taskId71);
        org.elasticsearch.common.transport.TransportAddress transportAddress75 = actionRequest35.remoteAddress();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(indicesOptions27);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(actionRequest35);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNull(transportAddress40);
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(transportAddress54);
        org.junit.Assert.assertNotNull(taskId55);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNull(transportAddress67);
        org.junit.Assert.assertNotNull(taskId68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertTrue("'" + boolean70 + "' != '" + false + "'", boolean70 == false);
        org.junit.Assert.assertNotNull(taskId71);
        org.junit.Assert.assertNull(transportAddress75);
    }
}
