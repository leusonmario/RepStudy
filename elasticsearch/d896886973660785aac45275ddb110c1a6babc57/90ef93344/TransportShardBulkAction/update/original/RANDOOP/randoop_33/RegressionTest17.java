import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest17 {

    public static boolean debug = false;

    @Test
    public void test08501() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08501");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData0.mapping("current version [10] is different than the one provided [32]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData5.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("current version [0] is higher or equal to the one provided [0]");
        int int14 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08502() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08502");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.setShardId(shardId8);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.setShardId(shardId10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest9.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest0.timeout(timeValue12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.index.VersionType versionType19 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType20 = versionType19.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple21 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest18, versionType19);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest22 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        long long25 = bulkShardRequest23.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId27 = bulkShardRequest26.getParentTask();
        bulkShardRequest23.setParentTask(taskId27);
        bulkShardRequest18.setParentTask(taskId27);
        org.elasticsearch.tasks.TaskId taskId30 = bulkShardRequest18.getParentTask();
        bulkShardRequest0.setParentTask(taskId30);
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = bulkShardRequest0.remoteAddress();
        bulkShardRequest0.seqNo((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(timeValue12);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(versionType19);
        org.junit.Assert.assertNotNull(versionType20);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple21);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(taskId27);
        org.junit.Assert.assertNotNull(taskId30);
        org.junit.Assert.assertNull(transportAddress32);
    }

    @Test
    public void test08503() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08503");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) (byte) -1);
        int int7 = builder6.numberOfShards();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.primaryTerm((int) (byte) 1, 1L);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
    }

    @Test
    public void test08504() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08504");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple7 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest4, versionType5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest4.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions10 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest12.timeout(timeValue16);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest18 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        bulkShardRequest17.setParentTask("index.version.created_string", (long) (byte) -1);
        org.elasticsearch.index.shard.ShardId shardId22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest17.setShardId(shardId22);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest24.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest24.index("index.version.created");
        bulkShardRequest24.primaryTerm((long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.seqNo();
        long long34 = bulkShardRequest32.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId36 = bulkShardRequest35.getParentTask();
        bulkShardRequest32.setParentTask(taskId36);
        bulkShardRequest24.setParentTask(taskId36);
        bulkShardRequest17.setParentTask(taskId36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long41 = bulkShardRequest40.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long43 = bulkShardRequest42.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions44 = bulkShardRequest42.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException45 = bulkShardRequest42.validate();
        org.elasticsearch.common.unit.TimeValue timeValue46 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest42.timeout(timeValue46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest40.timeout(timeValue46);
        org.elasticsearch.common.unit.TimeValue timeValue49 = bulkShardRequest40.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest17.timeout(timeValue49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest4.timeout(timeValue49);
        bulkShardRequest4.setParentTask("index.shadow_replicas", 32L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple7);
        org.junit.Assert.assertNull(shardId9);
        org.junit.Assert.assertNotNull(indicesOptions10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(taskId36);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions44);
        org.junit.Assert.assertNotNull(actionRequestValidationException45);
        org.junit.Assert.assertNotNull(timeValue46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
    }

    @Test
    public void test08505() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08505");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        boolean boolean9 = indexMetaData6.isSameUUID("index.version.created_string");
        int int10 = indexMetaData6.getNumberOfReplicas();
        boolean boolean12 = indexMetaData6.isSameUUID("");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData6.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.index.Index index16 = indexMetaData6.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNull(index16);
    }

    @Test
    public void test08506() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08506");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData0.mappingOrDefault("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        boolean boolean25 = indexMetaData0.isSameUUID("current version [101] is different than the one provided [32]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap26 = indexMetaData0.getCustoms();
        long long27 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long29 = indexMetaData28.getCreationDate();
        boolean boolean31 = indexMetaData28.isSameUUID("index.version.created_string");
        java.lang.String str32 = indexMetaData28.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData0.diff(indexMetaData28);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters34 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "_na_" + "'", str32, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertNull(discoveryNodeFilters34);
    }

    @Test
    public void test08507() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08507");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
        long long2 = builder1.version();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting4 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple6 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting4, builder5);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting7 = settingsSettingTuple6.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str10 = builder9.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple15 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting7, builder14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder17.removeAllAliases();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple19 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting7, builder18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder22.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.index("index.version.created");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple29 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting27, builder28);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = settingsSettingTuple29.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str33 = builder32.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder32.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple38 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting30, builder37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = settingsSettingTuple38.v2();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = builder39.mapping("indices:data/write/bulk[s]");
        java.lang.String[] strArray69 = new java.lang.String[] { "primary_terms", "current version [10] is different than the one provided [100]", "current version [52] is different than the one provided [1]", "current version [35] is different than the one provided [100]", "index.shared_filesystem.recover_on_any_node", "current version [101] is different than the one provided [0]", "", "current version [32] is different than the one provided [3]", "current version [52] is different than the one provided [0]", "current version [10] is different than the one provided [-1]", "current version [-1] is different than the one provided [10]", "current version [35] is different than the one provided [100]", "current version [101] is different than the one provided [0]", "current version [32] is different than the one provided [3]", "current version [3] is different than the one provided [11]", "current version [10] is different than the one provided [-1]", "index.version.minimum_compatible", "index.blocks.metadata", "current version [-1] is different than the one provided [0]", "index.shadow_replicas", "current version [52] is different than the one provided [0]", "index.version.minimum_compatible", "index.shared_filesystem.recover_on_any_node", "index.version.upgraded", "current version [10] is different than the one provided [35]", "current version [0] is different than the one provided [35]" };
        java.util.LinkedHashSet<java.lang.String> strSet70 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean71 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet70, strArray69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder39.putActiveAllocationIds(0, (java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder23.putActiveAllocationIds((int) (byte) 2, (java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder18.putActiveAllocationIds(97, (java.util.Set<java.lang.String>) strSet70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder1.putActiveAllocationIds((int) (byte) 2, (java.util.Set<java.lang.String>) strSet70);
        long long76 = builder75.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder75.index("current version [3] is different than the one provided [34]");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(settingsSetting4);
        org.junit.Assert.assertNotNull(settingsSettingTuple6);
        org.junit.Assert.assertNotNull(settingsSetting7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.version.minimum_compatible" + "'", str10, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(settingsSettingTuple29);
        org.junit.Assert.assertNotNull(settingsSetting30);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index.version.minimum_compatible" + "'", str33, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNotNull(strArray69);
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + true + "'", boolean71 == true);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 1L + "'", long76 == 1L);
        org.junit.Assert.assertNotNull(builder78);
    }

    @Test
    public void test08508() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08508");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        java.lang.Object obj20 = null;
        boolean boolean21 = indexMetaData0.equals(obj20);
        org.elasticsearch.common.io.stream.StreamInput streamInput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.readDiffFrom(streamInput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
    }

    @Test
    public void test08509() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08509");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long9 = indexMetaData4.getCreationDate();
        int int10 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap12 = indexMetaData4.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet14 = indexMetaData4.activeAllocationIds((int) (byte) 0);
        int int15 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamInput streamInput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData4.readDiffFrom(streamInput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap12);
        org.junit.Assert.assertNotNull(strSet14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08510() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08510");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        long long10 = indexMetaData7.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData7.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        long long15 = indexMetaData12.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData12.mapping("hi!");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData7.diff(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData7.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData7.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap22 = indexMetaData0.getAliases();
        java.util.Set<java.lang.String> strSet24 = null; // flaky: indexMetaData0.activeAllocationIds(1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData0.mapping("current version [1] is different than the one provided [54]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertNull(strSet24);
        org.junit.Assert.assertNull(mappingMetaData26);
    }

    @Test
    public void test08511() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08511");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [11] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("current version [13] is different than the one provided [100]");
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test08512() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08512");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData0.activeAllocationIds((int) '4');
        org.elasticsearch.index.Index index14 = indexMetaData0.getMergeSourceIndex();
        int int15 = indexMetaData0.getTotalNumberOfShards();
        long long17 = indexMetaData0.primaryTerm((int) (byte) 0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
    }

    @Test
    public void test08513() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08513");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData4.diff(indexMetaData10);
        long long17 = indexMetaData10.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData10.getMappings();
        long long19 = indexMetaData10.getVersion();
        java.lang.String str20 = indexMetaData10.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData10.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData10.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + (-1L) + "'", long17 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 1L + "'", long19 == 1L);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters22);
    }

    @Test
    public void test08514() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08514");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        java.lang.String str13 = indexMetaData9.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData9.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData0.getCustoms();
        int int20 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData21.getMappings();
        int int26 = indexMetaData21.getNumberOfReplicas();
        org.apache.lucene.util.Version version27 = indexMetaData21.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap28 = indexMetaData21.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting29 = null;
        java.lang.Throwable throwable31 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure33 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting29, "index.shared_filesystem", throwable31, "index.shared_filesystem");
        java.lang.String str34 = shardFailure33.reason;
        java.lang.String str35 = shardFailure33.indexUUID;
        java.lang.String str36 = shardFailure33.reason;
        java.lang.String str37 = shardFailure33.reason;
        java.lang.String str38 = shardFailure33.indexUUID;
        boolean boolean39 = indexMetaData21.equals((java.lang.Object) shardFailure33);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap40 = indexMetaData21.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings41 = indexMetaData21.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData21.mappingOrDefault("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData21);
        boolean boolean46 = indexMetaData21.isSameUUID("current version [101] is different than the one provided [32]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData21.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData0.diff(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 1 + "'", int20 == 1);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 0 + "'", int26 == 0);
        org.junit.Assert.assertNull(version27);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap28);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "index.shared_filesystem" + "'", str34, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str35 + "' != '" + "index.shared_filesystem" + "'", str35, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index.shared_filesystem" + "'", str36, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "index.shared_filesystem" + "'", str37, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "index.shared_filesystem" + "'", str38, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + false + "'", boolean39 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap40);
        org.junit.Assert.assertNotNull(settings41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + true + "'", boolean46 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff48);
    }

    @Test
    public void test08515() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08515");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.index.Index index10 = indexMetaData4.getMergeSourceIndex();
        int int11 = indexMetaData4.getTotalNumberOfShards();
        boolean boolean13 = indexMetaData4.isSameUUID("current version [1] is different than the one provided [35]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData4.mappingOrDefault("current version [52] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData20.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData20.getState();
        boolean boolean24 = indexMetaData16.equals((java.lang.Object) state23);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap25 = indexMetaData16.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        long long27 = builder26.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.putCustom("index.blocks.read", custom31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder29.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings38 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.settings(settings38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long43 = indexMetaData40.getVersion();
        org.elasticsearch.common.settings.Settings settings44 = indexMetaData40.getSettings();
        org.elasticsearch.common.settings.Settings settings45 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder39.settings(settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder29.settings(settings44);
        boolean boolean48 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings44);
        org.elasticsearch.common.settings.Settings settings49 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder26.settings(settings50);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting52 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple54 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting52, builder53);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting55 = settingsSettingTuple54.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str58 = builder57.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder57.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder57.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple63 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting55, builder62);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting64 = settingsSettingTuple63.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = settingsSettingTuple63.v2();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = builder65.mapping("current version [1] is higher than the one provided [-1]");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting68 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple70 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting68, builder69);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting71 = settingsSettingTuple70.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str74 = builder73.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = builder73.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder73.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple79 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting71, builder78);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData80 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = indexMetaData80.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData80);
        java.lang.String str84 = indexMetaData80.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData80);
        org.elasticsearch.common.settings.Settings settings86 = indexMetaData80.getSettings();
        org.elasticsearch.common.settings.Settings settings87 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings86);
        org.elasticsearch.common.settings.Settings settings88 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings86);
        boolean boolean89 = settingsSettingTuple79.equals((java.lang.Object) settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder65.settings(settings86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder51.settings(settings86);
        boolean boolean92 = indexMetaData4.equals((java.lang.Object) builder91);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 1L + "'", long43 == 1L);
        org.junit.Assert.assertNotNull(settings44);
        org.junit.Assert.assertNotNull(settings45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertNotNull(settings49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(settingsSetting52);
        org.junit.Assert.assertNotNull(settingsSettingTuple54);
        org.junit.Assert.assertNotNull(settingsSetting55);
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "index.version.minimum_compatible" + "'", str58, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(settingsSetting64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertNotNull(settingsSetting68);
        org.junit.Assert.assertNotNull(settingsSettingTuple70);
        org.junit.Assert.assertNotNull(settingsSetting71);
        org.junit.Assert.assertEquals("'" + str74 + "' != '" + "index.version.minimum_compatible" + "'", str74, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(indexMetaData80);
        org.junit.Assert.assertNull(mappingMetaData82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertEquals("'" + str84 + "' != '" + "_na_" + "'", str84, "_na_");
        org.junit.Assert.assertNotNull(settings86);
        org.junit.Assert.assertNotNull(settings87);
        org.junit.Assert.assertNotNull(settings88);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + false + "'", boolean89 == false);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertTrue("'" + boolean92 + "' != '" + false + "'", boolean92 == false);
    }

    @Test
    public void test08516() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08516");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        bulkShardRequest2.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest2.timeout(timeValue6);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.primaryTerm();
        bulkShardRequest10.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest10.timeout(timeValue14);
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.seqNo();
        long long21 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId23 = bulkShardRequest22.getParentTask();
        bulkShardRequest19.setParentTask(taskId23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest19.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException27 = bulkShardRequest26.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest28 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest26);
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest15.timeout(timeValue29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest7.timeout(timeValue29);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = bulkShardRequest31.consistencyLevel();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple36 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting34, builder35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = settingsSettingTuple36.v2();
        java.lang.String str38 = settingsSettingTuple36.toString();
        java.lang.String str39 = settingsSettingTuple36.toString();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long41 = bulkShardRequest40.seqNo();
        org.elasticsearch.index.shard.ShardId shardId42 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest40.setShardId(shardId42);
        org.elasticsearch.index.shard.ShardId shardId44 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest43.setShardId(shardId44);
        boolean boolean46 = settingsSettingTuple36.equals((java.lang.Object) bulkShardRequest43);
        java.lang.String str47 = bulkShardRequest43.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel48 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest49 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 2, (org.elasticsearch.action.ActionRequest) bulkShardRequest43);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.WriteConsistencyLevel, org.elasticsearch.action.bulk.BulkItemRequest> writeConsistencyLevelTuple50 = org.elasticsearch.common.collect.Tuple.tuple(writeConsistencyLevel32, bulkItemRequest49);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(taskId23);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNull(actionRequestValidationException27);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel32 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel32.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(settingsSettingTuple36);
        org.junit.Assert.assertNull(builder37);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str38, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str39, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNull(str47);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel48 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel48.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(writeConsistencyLevelTuple50);
    }

    @Test
    public void test08517() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08517");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap11 = indexMetaData7.getMappings();
        int int12 = indexMetaData7.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData7.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putCustom("index.blocks.read", custom17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.version(0L);
        boolean boolean22 = indexMetaData7.equals((java.lang.Object) builder19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.primaryTerm();
        bulkShardRequest24.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest24.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest29);
        org.elasticsearch.action.ActionRequest actionRequest31 = bulkItemRequest30.request();
        org.elasticsearch.tasks.TaskId taskId32 = actionRequest31.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions37 = bulkShardRequest35.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException38 = bulkShardRequest35.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure40 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting33, "primary_terms", (java.lang.Throwable) actionRequestValidationException38, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple41 = org.elasticsearch.common.collect.Tuple.tuple(taskId32, (java.lang.IllegalArgumentException) actionRequestValidationException38);
        boolean boolean42 = indexMetaData7.equals((java.lang.Object) taskId32);
        org.elasticsearch.Version version43 = indexMetaData7.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData7.mappingOrDefault("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap46 = indexMetaData7.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet51 = null; // flaky: indexMetaData47.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData47.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData7.diff(indexMetaData47);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff54 = indexMetaData0.diff(indexMetaData7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(actionRequest31);
        org.junit.Assert.assertNotNull(taskId32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions37);
        org.junit.Assert.assertNotNull(actionRequestValidationException38);
        org.junit.Assert.assertNotNull(taskIdTuple41);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + false + "'", boolean42 == false);
        org.junit.Assert.assertNotNull(version43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNull(strSet51);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertNotNull(indexMetaDataDiff54);
    }

    @Test
    public void test08518() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08518");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.common.settings.Settings settings5 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings6 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings5);
        org.elasticsearch.common.settings.Settings settings7 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings6);
        boolean boolean8 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(settings5);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
    }

    @Test
    public void test08519() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08519");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        bulkShardRequest5.seqNo(0L);
        org.elasticsearch.common.unit.TimeValue timeValue9 = bulkShardRequest5.timeout();
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest5.setShardId(shardId10);
        org.elasticsearch.common.unit.TimeValue timeValue12 = bulkShardRequest11.timeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNull(timeValue9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(timeValue12);
    }

    @Test
    public void test08520() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08520");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        boolean boolean5 = versionType0.isVersionConflictForReads(0L, 0L);
        org.elasticsearch.index.VersionType versionType6 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean10 = versionType6.isVersionConflictForWrites(2L, (long) (byte) -1, false);
        java.lang.String str13 = versionType6.explainConflictForReads(11L, 3L);
        org.elasticsearch.index.VersionType versionType14 = versionType6.versionTypeForReplicationAndRecovery();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData15.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData15);
        org.elasticsearch.Version version22 = indexMetaData15.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap23 = indexMetaData15.getCustoms();
        org.elasticsearch.index.Index index24 = indexMetaData15.getMergeSourceIndex();
        long long25 = indexMetaData15.getCreationDate();
        org.elasticsearch.index.Index index26 = indexMetaData15.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData15.mappingOrDefault("current version [11] is different than the one provided [97]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap33 = indexMetaData29.getMappings();
        int int34 = indexMetaData29.getNumberOfReplicas();
        org.apache.lucene.util.Version version35 = indexMetaData29.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters36 = indexMetaData29.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData29.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData29.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet40 = null; // flaky: indexMetaData29.activeAllocationIds((int) (short) 1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff41 = indexMetaData15.diff(indexMetaData29);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.VersionType, org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData>> versionTypeTuple42 = org.elasticsearch.common.collect.Tuple.tuple(versionType6, indexMetaDataDiff41);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [11] is different than the one provided [3]" + "'", str13, "current version [11] is different than the one provided [3]");
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(index24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNull(index26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 0 + "'", int34 == 0);
        org.junit.Assert.assertNull(version35);
        org.junit.Assert.assertNull(discoveryNodeFilters36);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertNull(strSet40);
        org.junit.Assert.assertNotNull(indexMetaDataDiff41);
        org.junit.Assert.assertNotNull(versionTypeTuple42);
    }

    @Test
    public void test08521() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08521");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("hi!", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder9.putCustom("current version [11] is different than the one provided [97]", custom14);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = builder9.primaryTerm((-1));
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08522() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08522");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("current version [-1] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder1.mapping("current version [101] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData12.getState();
        byte byte17 = state16.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        int int23 = indexMetaData19.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        long long25 = indexMetaData19.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData19.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder9.state(state27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str32 = builder31.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder31.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData40.mapping("hi!");
        int int45 = indexMetaData40.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData40.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom55 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder53.putCustom("index.blocks.read", custom55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder53.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder53.creationDate((long) ' ');
        java.lang.String[] strArray78 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet79 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean80 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet79, strArray78);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder53.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder50.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder38.putActiveAllocationIds((int) (byte) 0, (java.util.Set<java.lang.String>) strSet79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder84 = builder9.putActiveAllocationIds((int) (short) 100, (java.util.Set<java.lang.String>) strSet79);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData85 = builder9.build();
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: must specify numberOfReplicas for index [current version [-1] is different than the one provided [11]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "index.version.minimum_compatible" + "'", str32, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(strArray78);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + true + "'", boolean80 == true);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder84);
    }

    @Test
    public void test08523() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08523");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.blocks.read", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.creationDate((long) ' ');
        java.lang.String[] strArray38 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder10.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder42.removeAllAliases();
        long long44 = builder42.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder42.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff52 = indexMetaData47.diff(indexMetaData51);
        org.elasticsearch.index.Index index53 = indexMetaData51.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = indexMetaData51.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index56 = indexMetaData51.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings59 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder58.settings(settings59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData63 = indexMetaData61.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long64 = indexMetaData61.getVersion();
        org.elasticsearch.common.settings.Settings settings65 = indexMetaData61.getSettings();
        org.elasticsearch.common.settings.Settings settings66 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings65);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder60.settings(settings65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData68);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData74 = indexMetaData72.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state75 = indexMetaData72.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData76 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData78 = indexMetaData76.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state79 = indexMetaData76.getState();
        boolean boolean80 = indexMetaData72.equals((java.lang.Object) state79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder71.state(state79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder60.state(state79);
        boolean boolean83 = indexMetaData51.equals((java.lang.Object) builder60);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state84 = indexMetaData51.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder85 = builder46.state(state84);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 1L + "'", long44 == 1L);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNotNull(indexMetaDataDiff52);
        org.junit.Assert.assertNull(index53);
        org.junit.Assert.assertNull(mappingMetaData55);
        org.junit.Assert.assertNull(index56);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNull(mappingMetaData63);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 1L + "'", long64 == 1L);
        org.junit.Assert.assertNotNull(settings65);
        org.junit.Assert.assertNotNull(settings66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNull(mappingMetaData74);
        org.junit.Assert.assertTrue("'" + state75 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state75.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData76);
        org.junit.Assert.assertNull(mappingMetaData78);
        org.junit.Assert.assertTrue("'" + state79 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state79.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
        org.junit.Assert.assertTrue("'" + state84 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state84.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder85);
    }

    @Test
    public void test08524() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08524");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version13 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        java.lang.String str15 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        int int21 = indexMetaData18.getNumberOfReplicas();
        java.lang.String str22 = indexMetaData18.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData18);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData0.excludeFilters();
        int int25 = indexMetaData0.getNumberOfReplicas();
        int int26 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
    }

    @Test
    public void test08525() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08525");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        boolean boolean13 = versionType0.isVersionConflictForReads((long) (-1), 101L);
        org.elasticsearch.index.VersionType versionType14 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType15 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str19 = versionType15.explainConflictForWrites(12L, 2L, true);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertNotNull(versionType15);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "current version [12] is higher or equal to the one provided [2]" + "'", str19, "current version [12] is higher or equal to the one provided [2]");
    }

    @Test
    public void test08526() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08526");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate((long) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.removeAlias("hi!");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.index.Index index18 = indexMetaData16.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData16.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index21 = indexMetaData16.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.settings(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData26.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long29 = indexMetaData26.getVersion();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData26.getSettings();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder25.settings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData33.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData33);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state40 = indexMetaData37.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        boolean boolean45 = indexMetaData37.equals((java.lang.Object) state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder36.state(state44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder25.state(state44);
        boolean boolean48 = indexMetaData16.equals((java.lang.Object) builder25);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData16.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder11.state(state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.numberOfReplicas(0);
        int int53 = builder50.numberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = builder50.mapping("current version [97] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertNull(index18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNull(index21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertTrue("'" + state40 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state40.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + false + "'", boolean45 == false);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + false + "'", boolean48 == false);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 0 + "'", int53 == 0);
        org.junit.Assert.assertNull(mappingMetaData55);
    }

    @Test
    public void test08527() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08527");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest0.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest0.indicesOptions();
        long long8 = bulkShardRequest0.seqNo();
        boolean boolean9 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId11 = bulkShardRequest10.shardId();
        boolean boolean12 = bulkShardRequest10.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        bulkShardRequest13.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest13.timeout(timeValue17);
        org.elasticsearch.index.shard.ShardId shardId19 = bulkShardRequest18.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest18.remoteAddress(transportAddress20);
        long long22 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException23 = bulkShardRequest18.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest10.index("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = null;
        bulkShardRequest28.remoteAddress(transportAddress31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long35 = bulkShardRequest34.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest34.consistencyLevel(writeConsistencyLevel36);
        org.elasticsearch.index.VersionType versionType38 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType39 = versionType38.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple40 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest37, versionType38);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest41 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long43 = bulkShardRequest42.seqNo();
        long long44 = bulkShardRequest42.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId46 = bulkShardRequest45.getParentTask();
        bulkShardRequest42.setParentTask(taskId46);
        bulkShardRequest37.setParentTask(taskId46);
        bulkShardRequest28.setParentTask(taskId46);
        bulkShardRequest27.setParentTask(taskId46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest51.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest51.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long58 = bulkShardRequest57.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple59 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest56, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest57);
        long long60 = bulkShardRequest57.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue61 = bulkShardRequest57.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long63 = bulkShardRequest62.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions64 = bulkShardRequest62.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel65 = bulkShardRequest62.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest57.consistencyLevel(writeConsistencyLevel65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel65);
        java.lang.String str69 = bulkShardRequest68.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(shardId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(shardId19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException23);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(versionType38);
        org.junit.Assert.assertNotNull(versionType39);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(taskId46);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions64);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel65 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel65.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNull(str69);
    }

    @Test
    public void test08528() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08528");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) (byte) -1);
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData12.getMappings();
        int int17 = indexMetaData12.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData12.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap20 = indexMetaData12.getCustoms();
        long long21 = indexMetaData12.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder11.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder11.putCustom("index.version.upgraded_string", custom25);
        int int27 = builder26.numberOfReplicas();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 10 + "'", int27 == 10);
    }

    @Test
    public void test08529() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08529");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        long long13 = indexMetaData0.getCreationDate();
        java.util.Set<java.lang.String> strSet15 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) -1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + (-1L) + "'", long13 == (-1L));
        org.junit.Assert.assertNull(strSet15);
    }

    @Test
    public void test08530() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08530");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData10.getMappings();
        int int15 = indexMetaData10.getNumberOfReplicas();
        org.apache.lucene.util.Version version16 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData10.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData10.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData10.mappingOrDefault("index.shared_filesystem");
        int int22 = indexMetaData10.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder9.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder9.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = builder9.build();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
    }

    @Test
    public void test08531() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08531");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        long long6 = indexMetaData0.getCreationDate();
        boolean boolean8 = indexMetaData0.isSameUUID("index.uuid");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        boolean boolean11 = indexMetaData0.isSameUUID("current version [3] is different than the one provided [101]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        java.lang.String str16 = indexMetaData12.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData12);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData12.getInitialRecoveryFilters();
        org.apache.lucene.util.Version version19 = indexMetaData12.getMinimumCompatibleVersion();
        long long20 = indexMetaData12.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData12);
        org.elasticsearch.index.Index index22 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = indexMetaData12.readFrom(streamInput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNull(index22);
    }

    @Test
    public void test08532() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08532");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        java.lang.String[] strArray26 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.putCustom("index.auto_expand_replicas", custom31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder32.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.creationDate(35L);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
    }

    @Test
    public void test08533() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08533");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("current version [3] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder9.mapping("current version [52] is different than the one provided [2]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test08534() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08534");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest5.validate();
        long long10 = bulkShardRequest5.seqNo();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test08535() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08535");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        boolean boolean33 = indexMetaData25.equals((java.lang.Object) state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.state(state32);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData4.getState();
        java.lang.String str38 = indexMetaData4.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters39 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData40.mapping("hi!");
        int int45 = indexMetaData40.getTotalNumberOfShards();
        long long46 = indexMetaData40.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap47 = indexMetaData40.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff48 = indexMetaData4.diff(indexMetaData40);
        org.elasticsearch.Version version49 = indexMetaData40.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters50 = indexMetaData40.requireFilters();
        long long51 = indexMetaData40.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "_na_" + "'", str38, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters39);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertTrue("'" + int45 + "' != '" + 1 + "'", int45 == 1);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap47);
        org.junit.Assert.assertNotNull(indexMetaDataDiff48);
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertNull(discoveryNodeFilters50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 1L + "'", long51 == 1L);
    }

    @Test
    public void test08536() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08536");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom8 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.putCustom("index.blocks.write", custom8);
        long long11 = builder9.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.putCustom("current version [35] is different than the one provided [54]", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str18 = builder17.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.priority");
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom32 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder28.putCustom("current version [10] is different than the one provided [35]", custom32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData35.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData35.getMappings();
        int int40 = indexMetaData35.getNumberOfReplicas();
        org.apache.lucene.util.Version version41 = indexMetaData35.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap42 = indexMetaData35.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet44 = null; // flaky: indexMetaData35.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData35.mappingOrDefault("index.shared_filesystem");
        int int47 = indexMetaData35.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet49 = indexMetaData35.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder28.putActiveAllocationIds((int) (byte) 10, strSet49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder25.putActiveAllocationIds((-1), strSet49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder22.putActiveAllocationIds((int) '4', strSet49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder9.putActiveAllocationIds((int) ' ', strSet49);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.version.minimum_compatible" + "'", str18, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(version41);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap42);
        org.junit.Assert.assertNull(strSet44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertTrue("'" + int47 + "' != '" + 0 + "'", int47 == 0);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08537() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08537");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId2 = bulkShardRequest1.shardId();
        boolean boolean3 = bulkShardRequest1.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long5 = bulkShardRequest4.primaryTerm();
        bulkShardRequest4.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest4.timeout(timeValue8);
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest9.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest9.remoteAddress(transportAddress11);
        long long13 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException14 = bulkShardRequest9.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest9.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest1.index("");
        org.elasticsearch.tasks.TaskId taskId19 = bulkShardRequest1.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest1.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest21 = new org.elasticsearch.action.bulk.BulkItemRequest(100, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest1.indicesOptions();
        org.junit.Assert.assertNull(shardId2);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(shardId10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 10L + "'", long13 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException14);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(taskId19);
        org.junit.Assert.assertNull(actionRequestValidationException20);
        org.junit.Assert.assertNotNull(indicesOptions22);
    }

    @Test
    public void test08538() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08538");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.xcontent.XContentParser xContentParser6 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher7 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = indexMetaData0.fromXContent(xContentParser6, parseFieldMatcher7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(version5);
    }

    @Test
    public void test08539() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08539");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException5 = bulkShardRequest2.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure7 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [101] is different than the one provided [32]", (java.lang.Throwable) actionRequestValidationException5, "index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.index.Index index14 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index17 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData18.diff(indexMetaData22);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff24 = indexMetaData12.diff(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData18);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData18.getState();
        org.elasticsearch.Version version27 = indexMetaData18.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters28 = indexMetaData18.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData29.diff(indexMetaData33);
        org.elasticsearch.index.Index index35 = indexMetaData33.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData33.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index38 = indexMetaData33.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings41 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder40.settings(settings41);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long46 = indexMetaData43.getVersion();
        org.elasticsearch.common.settings.Settings settings47 = indexMetaData43.getSettings();
        org.elasticsearch.common.settings.Settings settings48 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder42.settings(settings47);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData52 = indexMetaData50.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData54.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = indexMetaData54.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData58 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData60 = indexMetaData58.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = indexMetaData58.getState();
        boolean boolean62 = indexMetaData54.equals((java.lang.Object) state61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder53.state(state61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder42.state(state61);
        boolean boolean65 = indexMetaData33.equals((java.lang.Object) builder42);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters66 = indexMetaData33.getInitialRecoveryFilters();
        java.lang.String str67 = indexMetaData33.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mappingOrDefault("");
        long long71 = indexMetaData68.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData68.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData68);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData68);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff75 = indexMetaData33.diff(indexMetaData68);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff76 = indexMetaData18.diff(indexMetaData33);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.ActionRequestValidationException, org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData>> actionRequestValidationExceptionTuple77 = org.elasticsearch.common.collect.Tuple.tuple(actionRequestValidationException5, indexMetaDataDiff76);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertNotNull(actionRequestValidationException5);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNotNull(indexMetaDataDiff24);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version27);
        org.junit.Assert.assertNull(discoveryNodeFilters28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNull(index35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertNull(index38);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNull(mappingMetaData52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData58);
        org.junit.Assert.assertNull(mappingMetaData60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + false + "'", boolean62 == false);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNull(discoveryNodeFilters66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "_na_" + "'", str67, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertTrue("'" + long71 + "' != '" + (-1L) + "'", long71 == (-1L));
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(indexMetaDataDiff75);
        org.junit.Assert.assertNotNull(indexMetaDataDiff76);
        org.junit.Assert.assertNotNull(actionRequestValidationExceptionTuple77);
    }

    @Test
    public void test08540() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08540");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        boolean boolean7 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData9.getMappings();
        int int14 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData9.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.putCustom("index.blocks.read", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version(0L);
        boolean boolean24 = indexMetaData9.equals((java.lang.Object) builder21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.primaryTerm();
        bulkShardRequest26.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest26.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest31);
        org.elasticsearch.action.ActionRequest actionRequest33 = bulkItemRequest32.request();
        org.elasticsearch.tasks.TaskId taskId34 = actionRequest33.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions39 = bulkShardRequest37.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException40 = bulkShardRequest37.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting35, "primary_terms", (java.lang.Throwable) actionRequestValidationException40, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple43 = org.elasticsearch.common.collect.Tuple.tuple(taskId34, (java.lang.IllegalArgumentException) actionRequestValidationException40);
        boolean boolean44 = indexMetaData9.equals((java.lang.Object) taskId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.index.shard.ShardId shardId47 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.setShardId(shardId47);
        boolean boolean49 = indexMetaData9.equals((java.lang.Object) bulkShardRequest48);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters51 = indexMetaData9.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData52 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData54 = indexMetaData52.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff57 = indexMetaData52.diff(indexMetaData56);
        org.elasticsearch.index.Index index58 = indexMetaData56.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData60 = indexMetaData56.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.apache.lucene.util.Version version61 = indexMetaData56.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData62 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long63 = indexMetaData62.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff64 = indexMetaData56.diff(indexMetaData62);
        java.lang.String str65 = indexMetaData62.getIndexUUID();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData62.mapping("current version [32] is different than the one provided [10]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff68 = indexMetaData9.diff(indexMetaData62);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(actionRequest33);
        org.junit.Assert.assertNotNull(taskId34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions39);
        org.junit.Assert.assertNotNull(actionRequestValidationException40);
        org.junit.Assert.assertNotNull(taskIdTuple43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff50);
        org.junit.Assert.assertNull(discoveryNodeFilters51);
        org.junit.Assert.assertNotNull(indexMetaData52);
        org.junit.Assert.assertNull(mappingMetaData54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNotNull(indexMetaDataDiff57);
        org.junit.Assert.assertNull(index58);
        org.junit.Assert.assertNull(mappingMetaData60);
        org.junit.Assert.assertNull(version61);
        org.junit.Assert.assertNotNull(indexMetaData62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff64);
        org.junit.Assert.assertEquals("'" + str65 + "' != '" + "_na_" + "'", str65, "_na_");
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertNotNull(indexMetaDataDiff68);
    }

    @Test
    public void test08541() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08541");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting1 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        bulkShardRequest3.primaryTerm((long) 10);
        java.lang.String str7 = bulkShardRequest3.index();
        org.elasticsearch.common.unit.TimeValue timeValue8 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest3.timeout(timeValue8);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest9.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest12.timeout(timeValue16);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest18 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        bulkShardRequest17.setParentTask("index.version.created_string", (long) (byte) -1);
        org.elasticsearch.action.support.IndicesOptions indicesOptions22 = bulkShardRequest17.indicesOptions();
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, org.elasticsearch.action.support.IndicesOptions> runtimeExceptionTuple23 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.RuntimeException) actionRequestValidationException10, indicesOptions22);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure25 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting1, "index.blocks.read", (java.lang.Throwable) actionRequestValidationException10, "index.number_of_shards");
        org.elasticsearch.common.collect.Tuple<java.lang.CharSequence, org.elasticsearch.common.ValidationException> charSequenceTuple26 = new org.elasticsearch.common.collect.Tuple<java.lang.CharSequence, org.elasticsearch.common.ValidationException>((java.lang.CharSequence) "current version [52] is different than the one provided [100]", (org.elasticsearch.common.ValidationException) actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(indicesOptions22);
        org.junit.Assert.assertNotNull(runtimeExceptionTuple23);
    }

    @Test
    public void test08542() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08542");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        org.elasticsearch.index.VersionType versionType4 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType5 = versionType4.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple6 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest3, versionType4);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.seqNo();
        long long12 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest13.getParentTask();
        bulkShardRequest10.setParentTask(taskId14);
        bulkShardRequest9.setParentTask(taskId14);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest9.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure19 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting7, "_na_", (java.lang.Throwable) actionRequestValidationException17, "current version [10] is different than the one provided [100]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.VersionType, java.lang.Throwable> versionTypeTuple20 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.VersionType, java.lang.Throwable>(versionType4, (java.lang.Throwable) actionRequestValidationException17);
        org.elasticsearch.index.VersionType versionType21 = versionType4.versionTypeForReplicationAndRecovery();
        boolean boolean23 = versionType4.validateVersionForReads((long) (short) 1);
        byte byte24 = versionType4.getValue();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType4.writeTo(streamOutput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple6);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(taskId14);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(versionType21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 3 + "'", byte24 == (byte) 3);
    }

    @Test
    public void test08543() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08543");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        org.elasticsearch.Version version18 = indexMetaData14.getUpgradedVersion();
        int int19 = indexMetaData14.getNumberOfReplicas();
        org.apache.lucene.util.Version version20 = indexMetaData14.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData23.diff(indexMetaData27);
        org.elasticsearch.index.Index index29 = indexMetaData27.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long32 = indexMetaData27.getCreationDate();
        int int33 = indexMetaData27.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap34 = indexMetaData27.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap35 = indexMetaData27.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData14.diff(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff42 = indexMetaData37.diff(indexMetaData41);
        org.elasticsearch.index.Index index43 = indexMetaData41.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData41.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap46 = indexMetaData41.getMappings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData27.diff(indexMetaData41);
        org.elasticsearch.common.settings.Settings settings48 = indexMetaData27.getSettings();
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings48);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNull(index29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexMetaDataDiff42);
        org.junit.Assert.assertNull(index43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
    }

    @Test
    public void test08544() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08544");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [101] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str5 = builder4.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("index.version.upgraded_string", custom9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.index("current version [-1] is different than the one provided [0]");
        long long16 = bulkShardRequest15.primaryTerm();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("index.blocks.read", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.creationDate((long) ' ');
        java.lang.String[] strArray43 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder18.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, java.util.AbstractSet<java.lang.String>> streamableTuple47 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest15, (java.util.AbstractSet<java.lang.String>) strSet44);
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, java.lang.String> strSetTuple49 = org.elasticsearch.common.collect.Tuple.tuple(strSet44, "index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder7.putActiveAllocationIds((int) (short) 0, (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder1.putActiveAllocationIds((int) (byte) 10, (java.util.Set<java.lang.String>) strSet44);
        int int52 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.version.minimum_compatible" + "'", str5, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(streamableTuple47);
        org.junit.Assert.assertNotNull(strSetTuple49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + (-1) + "'", int52 == (-1));
    }

    @Test
    public void test08545() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08545");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        long long8 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long12 = indexMetaData9.getVersion();
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData9.activeAllocationIds((-1));
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest15.validate();
        org.elasticsearch.common.unit.TimeValue timeValue19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest15.timeout(timeValue19);
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest20.getParentTask();
        boolean boolean22 = indexMetaData9.equals((java.lang.Object) bulkShardRequest20);
        long long23 = indexMetaData9.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData9.getCustoms();
        long long25 = indexMetaData9.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData4.diff(indexMetaData9);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 1L + "'", long12 == 1L);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 1L + "'", long23 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
    }

    @Test
    public void test08546() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08546");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [53] is different than the one provided [3]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08547() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08547");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean21 = versionType0.isVersionConflictForWrites((long) (short) 0, 101L, true);
        long long24 = versionType0.updateVersion(100L, 101L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean27 = versionType25.validateVersionForWrites((long) 97);
        boolean boolean29 = versionType25.validateVersionForWrites(0L);
        java.lang.String str33 = versionType25.explainConflictForWrites((long) (short) 1, (long) (short) 0, false);
        byte byte34 = versionType25.getValue();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput35 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType25.writeTo(streamOutput35);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 101L + "'", long24 == 101L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + true + "'", boolean29 == true);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "current version [1] is higher or equal to the one provided [0]" + "'", str33, "current version [1] is higher or equal to the one provided [0]");
        org.junit.Assert.assertTrue("'" + byte34 + "' != '" + (byte) 1 + "'", byte34 == (byte) 1);
    }

    @Test
    public void test08548() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08548");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        java.lang.String str4 = settingsSettingTuple2.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = settingsSettingTuple2.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting6 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData7.mapping("hi!");
        int int12 = indexMetaData7.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData7.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.putCustom("index.blocks.read", custom22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder20.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder20.creationDate((long) ' ');
        java.lang.String[] strArray45 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet46 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean47 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet46, strArray45);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder20.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder17.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData51 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData51.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder54.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData59.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData59);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData63 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData65 = indexMetaData63.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state66 = indexMetaData63.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData67 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData69 = indexMetaData67.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state70 = indexMetaData67.getState();
        boolean boolean71 = indexMetaData63.equals((java.lang.Object) state70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder62.state(state70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder54.state(state70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder50.state(state70);
        boolean boolean75 = settingsSettingTuple2.equals((java.lang.Object) builder50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder50.index("current version [2] is different than the one provided [3]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData78 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder50.putMapping(mappingMetaData78);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str4, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settingsSetting6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strArray45);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(indexMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(indexMetaData59);
        org.junit.Assert.assertNull(mappingMetaData61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(indexMetaData63);
        org.junit.Assert.assertNull(mappingMetaData65);
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state66.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData67);
        org.junit.Assert.assertNull(mappingMetaData69);
        org.junit.Assert.assertTrue("'" + state70 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state70.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean71 + "' != '" + false + "'", boolean71 == false);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertTrue("'" + boolean75 + "' != '" + false + "'", boolean75 == false);
        org.junit.Assert.assertNotNull(builder77);
    }

    @Test
    public void test08549() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08549");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest5.setShardId(shardId7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.support.IndicesOptions indicesOptions13 = bulkShardRequest9.indicesOptions();
        java.lang.String str14 = bulkShardRequest9.index();
        org.elasticsearch.index.shard.ShardId shardId15 = bulkShardRequest9.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest9.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest17.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest17.remoteAddress(transportAddress20);
        long long22 = bulkShardRequest17.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.setShardId(shardId25);
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.setShardId(shardId27);
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest17.timeout(timeValue29);
        long long31 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = bulkShardRequest17.remoteAddress();
        bulkShardRequest17.setParentTask("current version [-1] is different than the one provided [0]", (long) (short) 10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest36.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long43 = bulkShardRequest42.primaryTerm();
        bulkShardRequest42.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel46 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest41.consistencyLevel(writeConsistencyLevel46);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData48.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple52 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest47, state51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long54 = bulkShardRequest53.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions55 = bulkShardRequest53.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException56 = bulkShardRequest53.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long58 = bulkShardRequest57.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions59 = bulkShardRequest57.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress60 = null;
        bulkShardRequest57.remoteAddress(transportAddress60);
        long long62 = bulkShardRequest57.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue63 = bulkShardRequest57.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest53.timeout(timeValue63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest47.timeout(timeValue63);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel66 = bulkShardRequest65.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel66);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel66);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest69 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel66);
        java.lang.String str70 = bulkShardRequest8.index();
        org.elasticsearch.common.unit.TimeValue timeValue71 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = bulkShardRequest8.timeout(timeValue71);
        org.elasticsearch.tasks.TaskId taskId73 = bulkShardRequest8.getParentTask();
        bulkShardRequest8.setParentTask("current version [52] is different than the one provided [1]", (long) (short) -1);
        org.elasticsearch.index.shard.ShardId shardId77 = bulkShardRequest8.shardId();
        org.elasticsearch.index.shard.ShardId shardId78 = bulkShardRequest8.shardId();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(indicesOptions13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str14, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertNull(shardId15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(transportAddress32);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel46 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel46.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions55);
        org.junit.Assert.assertNotNull(actionRequestValidationException56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions59);
        org.junit.Assert.assertTrue("'" + long62 + "' != '" + 0L + "'", long62 == 0L);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel66 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel66.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(bulkShardRequest69);
        org.junit.Assert.assertNull(str70);
        org.junit.Assert.assertNotNull(bulkShardRequest72);
        org.junit.Assert.assertNotNull(taskId73);
        org.junit.Assert.assertNull(shardId77);
        org.junit.Assert.assertNull(shardId78);
    }

    @Test
    public void test08550() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08550");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.blocks.read", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.creationDate((long) ' ');
        java.lang.String[] strArray38 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder10.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder42.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.creationDate((long) '4');
        int int46 = builder45.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
    }

    @Test
    public void test08551() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08551");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        boolean boolean8 = bulkShardRequest0.getShouldPersistResult();
        long long9 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest10.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest10.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple18 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest15, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest16);
        long long19 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue20 = bulkShardRequest16.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest0.timeout(timeValue20);
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest21.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.index.shard.ShardId shardId26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest24.setShardId(shardId26);
        bulkShardRequest24.seqNo(0L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException30 = bulkShardRequest24.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long32 = bulkShardRequest31.primaryTerm();
        bulkShardRequest31.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest31.timeout(timeValue35);
        org.elasticsearch.index.shard.ShardId shardId37 = bulkShardRequest36.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = null;
        bulkShardRequest36.remoteAddress(transportAddress38);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long41 = bulkShardRequest40.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest40.index("current version [-1] is different than the one provided [0]");
        long long44 = bulkShardRequest43.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest43.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest36.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest24.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.index.shard.ShardId shardId48 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest24.setShardId(shardId48);
        org.elasticsearch.action.support.IndicesOptions indicesOptions50 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest51 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest24);
        org.elasticsearch.common.unit.TimeValue timeValue52 = bulkShardRequest24.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest21.timeout(timeValue52);
        org.elasticsearch.common.transport.TransportAddress transportAddress54 = bulkShardRequest53.remoteAddress();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(timeValue20);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(actionRequestValidationException30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNull(shardId37);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(indicesOptions50);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNull(transportAddress54);
    }

    @Test
    public void test08552() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08552");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder4.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.numberOfReplicas((int) (short) 100);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(builder10);
    }

    @Test
    public void test08553() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08553");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest5, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest9.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.shard.ShardId shardId13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest12.setShardId(shardId13);
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest12.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest12.setShardId(shardId16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.index("current version [35] is different than the one provided [54]");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
    }

    @Test
    public void test08554() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08554");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) 3, 11L);
        org.elasticsearch.index.VersionType versionType7 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str10 = versionType7.explainConflictForReads((long) (short) 0, 3L);
        org.elasticsearch.index.VersionType versionType11 = versionType7.versionTypeForReplicationAndRecovery();
        java.lang.String str14 = versionType11.explainConflictForReads(4L, (long) 'a');
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [3] is different than the one provided [11]" + "'", str6, "current version [3] is different than the one provided [11]");
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [0] is different than the one provided [3]" + "'", str10, "current version [0] is different than the one provided [3]");
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [4] is different than the one provided [97]" + "'", str14, "current version [4] is different than the one provided [97]");
    }

    @Test
    public void test08555() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08555");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        bulkShardRequest0.primaryTerm((long) '#');
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest0.remoteAddress();
        bulkShardRequest0.seqNo(10L);
        long long11 = bulkShardRequest0.seqNo();
        bulkShardRequest0.seqNo(11L);
        org.elasticsearch.index.shard.ShardId shardId14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest0.setShardId(shardId14);
        org.elasticsearch.tasks.TaskId taskId19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task20 = bulkShardRequest0.createTask((long) '#', "current version [3] is higher than the one provided [52]", "current version [32] is different than the one provided [3]", taskId19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
    }

    @Test
    public void test08556() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08556");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple14 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple2, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting13);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting15 = settingsSettingTuple2.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = settingsSettingTuple2.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple19 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting17, builder18);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting20 = settingsSettingTuple19.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str23 = builder22.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder22.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder22.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple28 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting20, builder27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = settingsSettingTuple28.v2();
        java.lang.String str30 = settingsSettingTuple28.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = settingsSettingTuple28.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = settingsSettingTuple28.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom36 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder34.putCustom("index.blocks.read", custom36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom41 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.putCustom("index.blocks.read", custom41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder39.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder39.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings48 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder47.settings(settings48);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData50 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData52 = indexMetaData50.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long53 = indexMetaData50.getVersion();
        org.elasticsearch.common.settings.Settings settings54 = indexMetaData50.getSettings();
        org.elasticsearch.common.settings.Settings settings55 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder49.settings(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder39.settings(settings54);
        org.elasticsearch.common.settings.Settings settings58 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder37.settings(settings54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder32.settings(settings54);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple61 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting16, builder60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder60.removeAllAliases();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanSetting13);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple14);
        org.junit.Assert.assertNotNull(settingsSetting15);
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertNotNull(settingsSettingTuple19);
        org.junit.Assert.assertNotNull(settingsSetting20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "index.version.minimum_compatible" + "'", str23, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(indexMetaData50);
        org.junit.Assert.assertNull(mappingMetaData52);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 1L + "'", long53 == 1L);
        org.junit.Assert.assertNotNull(settings54);
        org.junit.Assert.assertNotNull(settings55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08557() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08557");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(settings16);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        boolean boolean24 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings23);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
    }

    @Test
    public void test08558() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08558");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        java.lang.String str4 = bulkShardRequest0.index();
        bulkShardRequest0.setParentTask("current version [11] is different than the one provided [0]", (long) (short) 0);
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest0.shardId();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(shardId8);
    }

    @Test
    public void test08559() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08559");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("index.priority");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.primaryTerm();
        bulkShardRequest11.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.index("current version [10] is different than the one provided [32]");
        long long22 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest19.index("current version [53] is different than the one provided [54]");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel18 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel18.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
    }

    @Test
    public void test08560() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08560");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap8 = indexMetaData0.getAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test08561() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08561");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = settingsSettingTuple2.v1();
        org.elasticsearch.index.VersionType versionType14 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        boolean boolean15 = settingsSettingTuple2.equals((java.lang.Object) versionType14);
        java.lang.String str19 = versionType14.explainConflictForWrites((long) (byte) 3, 52L, false);
        long long22 = versionType14.updateVersion((long) (short) 10, 10L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType14.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "current version [3] is higher than the one provided [52]" + "'", str19, "current version [3] is higher than the one provided [52]");
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
    }

    @Test
    public void test08562() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08562");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap21 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData0.getState();
        int int23 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData0.mappingOrDefault("current version [32] is different than the one provided [3]");
        int int26 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertTrue("'" + int26 + "' != '" + 1 + "'", int26 == 1);
        org.junit.Assert.assertNotNull(settings27);
    }

    @Test
    public void test08563() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08563");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = bulkShardRequest3.consistencyLevel();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest3.getParentTask();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest3.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        long long9 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest10.getParentTask();
        bulkShardRequest7.setParentTask(taskId11);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel13 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest7.remoteAddress(transportAddress14);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.IndicesOptions, org.elasticsearch.transport.TransportMessage> indicesOptionsTuple17 = org.elasticsearch.common.collect.Tuple.tuple(indicesOptions6, (org.elasticsearch.transport.TransportMessage) bulkShardRequest7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.primaryTerm();
        bulkShardRequest19.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest19.timeout(timeValue23);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest25 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest24);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = bulkShardRequest24.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest7.consistencyLevel(writeConsistencyLevel26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long30 = bulkShardRequest29.primaryTerm();
        bulkShardRequest29.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest29.timeout(timeValue33);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest35 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest34.index("index.priority");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest34.index("current version [10] is different than the one provided [0]");
        bulkShardRequest34.setParentTask("index.priority", (long) 35);
        java.lang.String str43 = bulkShardRequest34.index();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long45 = bulkShardRequest44.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest44.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest44.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long51 = bulkShardRequest50.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple52 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest49, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest50);
        bulkShardRequest50.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long57 = bulkShardRequest56.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest56.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.index.VersionType versionType60 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType61 = versionType60.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple62 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest59, versionType60);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest63 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest59);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long65 = bulkShardRequest64.seqNo();
        long long66 = bulkShardRequest64.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId68 = bulkShardRequest67.getParentTask();
        bulkShardRequest64.setParentTask(taskId68);
        bulkShardRequest59.setParentTask(taskId68);
        bulkShardRequest50.setParentTask(taskId68);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long74 = bulkShardRequest73.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel75 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest76 = bulkShardRequest73.consistencyLevel(writeConsistencyLevel75);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest77 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest76);
        org.elasticsearch.action.support.IndicesOptions indicesOptions78 = bulkShardRequest76.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest80 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest81 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long82 = bulkShardRequest81.seqNo();
        long long83 = bulkShardRequest81.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId85 = bulkShardRequest84.getParentTask();
        bulkShardRequest81.setParentTask(taskId85);
        bulkShardRequest80.setParentTask(taskId85);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest88 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest80);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel89 = bulkShardRequest80.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest90 = bulkShardRequest76.consistencyLevel(writeConsistencyLevel89);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest91 = bulkShardRequest50.consistencyLevel(writeConsistencyLevel89);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest92 = bulkShardRequest34.consistencyLevel(writeConsistencyLevel89);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest93 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel89);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel4 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel4.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel13 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel13.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptionsTuple17);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel26 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel26.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "current version [10] is different than the one provided [0]" + "'", str43, "current version [10] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(versionType60);
        org.junit.Assert.assertNotNull(versionType61);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple62);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(taskId68);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest76);
        org.junit.Assert.assertNotNull(indicesOptions78);
        org.junit.Assert.assertTrue("'" + long82 + "' != '" + 0L + "'", long82 == 0L);
        org.junit.Assert.assertTrue("'" + long83 + "' != '" + 0L + "'", long83 == 0L);
        org.junit.Assert.assertNotNull(taskId85);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel89 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel89.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest90);
        org.junit.Assert.assertNotNull(bulkShardRequest91);
        org.junit.Assert.assertNotNull(bulkShardRequest92);
        org.junit.Assert.assertNotNull(bulkShardRequest93);
    }

    @Test
    public void test08564() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08564");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest5.validate();
        bulkShardRequest5.setParentTask("current version [52] is different than the one provided [1]", (long) (short) -1);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkShardRequest5.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
    }

    @Test
    public void test08565() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08565");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = bulkShardRequest0.consistencyLevel();
        long long5 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.setShardId(shardId6);
        bulkShardRequest0.seqNo((long) 100);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest0.setShardId(shardId10);
        java.lang.String str12 = bulkShardRequest0.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest0.timeout("current version [-1] is different than the one provided [11]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse setting [BulkShardRequest.timeout] with value [current version [-1] is different than the one provided [11]] as a time value: unit is missing or unrecognized");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel4 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel4.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(str12);
    }

    @Test
    public void test08566() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08566");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        byte byte6 = state5.id();
        byte byte7 = state5.id();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte6 + "' != '" + (byte) 0 + "'", byte6 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
    }

    @Test
    public void test08567() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08567");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        boolean boolean6 = indexMetaData0.isSameUUID("current version [-1] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test08568() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08568");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.primaryTerm((int) (byte) 2, (long) 97);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: you must set the number of shards before setting/reading primary terms");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test08569() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08569");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.blocks.write");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting2 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple4 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting2, builder3);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = settingsSettingTuple4.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str8 = builder7.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple13 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting5, builder12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = settingsSettingTuple13.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putCustom("index.blocks.read", custom18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.numberOfReplicas((int) ' ');
        boolean boolean26 = settingsSettingTuple13.equals((java.lang.Object) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.shared_filesystem.recover_on_any_node");
        boolean boolean29 = settingsSettingTuple13.equals((java.lang.Object) builder28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.removeAlias("current version [10] is different than the one provided [35]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = indexMetaData32.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff37 = indexMetaData32.diff(indexMetaData36);
        org.elasticsearch.index.Index index38 = indexMetaData36.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData36.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index41 = indexMetaData36.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.settings(settings44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData46.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long49 = indexMetaData46.getVersion();
        org.elasticsearch.common.settings.Settings settings50 = indexMetaData46.getSettings();
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder45.settings(settings50);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = indexMetaData53.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = indexMetaData57.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData63 = indexMetaData61.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData61.getState();
        boolean boolean65 = indexMetaData57.equals((java.lang.Object) state64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder56.state(state64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder45.state(state64);
        boolean boolean68 = indexMetaData36.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state69 = indexMetaData36.getState();
        byte byte70 = state69.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder28.state(state69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder1.state(state69);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom74 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder72.putCustom("current version [35] is different than the one provided [35]", custom74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder72.numberOfShards(97);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder80 = builder77.primaryTerm((int) (short) 1, (-1L));
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom82 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder80.putCustom("current version [35] is different than the one provided [54]", custom82);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder80.putMapping("current version [0] is higher or equal to the one provided [3]", "current version [54] is higher or equal to the one provided [32]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting2);
        org.junit.Assert.assertNotNull(settingsSettingTuple4);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.version.minimum_compatible" + "'", str8, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertTrue("'" + boolean29 + "' != '" + false + "'", boolean29 == false);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(mappingMetaData34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNotNull(indexMetaDataDiff37);
        org.junit.Assert.assertNull(index38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNull(index41);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertTrue("'" + long49 + "' != '" + 1L + "'", long49 == 1L);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(mappingMetaData55);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNull(mappingMetaData63);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean65 + "' != '" + false + "'", boolean65 == false);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertTrue("'" + state69 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state69.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte70 + "' != '" + (byte) 0 + "'", byte70 == (byte) 0);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder80);
        org.junit.Assert.assertNotNull(builder83);
    }

    @Test
    public void test08570() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08570");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        boolean boolean7 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData9.getMappings();
        int int14 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData9.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.putCustom("index.blocks.read", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version(0L);
        boolean boolean24 = indexMetaData9.equals((java.lang.Object) builder21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.primaryTerm();
        bulkShardRequest26.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest26.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest31);
        org.elasticsearch.action.ActionRequest actionRequest33 = bulkItemRequest32.request();
        org.elasticsearch.tasks.TaskId taskId34 = actionRequest33.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions39 = bulkShardRequest37.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException40 = bulkShardRequest37.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting35, "primary_terms", (java.lang.Throwable) actionRequestValidationException40, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple43 = org.elasticsearch.common.collect.Tuple.tuple(taskId34, (java.lang.IllegalArgumentException) actionRequestValidationException40);
        boolean boolean44 = indexMetaData9.equals((java.lang.Object) taskId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.index.shard.ShardId shardId47 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.setShardId(shardId47);
        boolean boolean49 = indexMetaData9.equals((java.lang.Object) bulkShardRequest48);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData0.diff(indexMetaData9);
        long long51 = indexMetaData9.getCreationDate();
        java.util.Set<java.lang.String> strSet53 = null; // flaky: indexMetaData9.activeAllocationIds((int) '#');
        long long54 = indexMetaData9.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData9.mappingOrDefault("current version [10] is different than the one provided [32]");
        org.elasticsearch.common.xcontent.XContentParser xContentParser57 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher58 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData59 = indexMetaData9.fromXContent(xContentParser57, parseFieldMatcher58);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(actionRequest33);
        org.junit.Assert.assertNotNull(taskId34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions39);
        org.junit.Assert.assertNotNull(actionRequestValidationException40);
        org.junit.Assert.assertNotNull(taskIdTuple43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff50);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + (-1L) + "'", long51 == (-1L));
        org.junit.Assert.assertNull(strSet53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNull(mappingMetaData56);
    }

    @Test
    public void test08571() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08571");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData4.diff(indexMetaData8);
        org.elasticsearch.index.Index index10 = indexMetaData8.getMergeSourceIndex();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData8.mappingOrDefault("index.version.minimum_compatible");
        org.elasticsearch.index.Index index15 = indexMetaData8.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNull(index15);
    }

    @Test
    public void test08572() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08572");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = builder3.index();
        int int5 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("_na_", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putCustom("index.version.upgraded", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str14 = builder13.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfShards((int) 'a');
        int int19 = builder13.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings22 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.settings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long27 = indexMetaData24.getVersion();
        org.elasticsearch.common.settings.Settings settings28 = indexMetaData24.getSettings();
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder23.settings(settings28);
        boolean boolean31 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder13.settings(settings28);
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings28);
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder11.settings(settings33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str38 = builder37.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder37.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom42 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.putCustom("index.version.upgraded_string", custom42);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state47 = indexMetaData44.getState();
        org.elasticsearch.common.settings.Settings settings48 = indexMetaData44.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder43.settings(settings48);
        org.elasticsearch.common.settings.Settings settings50 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings48);
        boolean boolean51 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder11.settings(settings48);
        boolean boolean53 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings48);
        boolean boolean54 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings48);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.version.minimum_compatible" + "'", str14, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 97 + "'", int19 == 97);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str38 + "' != '" + "index.version.minimum_compatible" + "'", str38, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertTrue("'" + state47 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state47.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(settings50);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + boolean54 + "' != '" + false + "'", boolean54 == false);
    }

    @Test
    public void test08573() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08573");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest0.remoteAddress();
        long long8 = bulkShardRequest0.seqNo();
        org.elasticsearch.tasks.TaskId taskId9 = bulkShardRequest0.getParentTask();
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest0.timeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(taskId9);
        org.junit.Assert.assertNull(timeValue10);
    }

    @Test
    public void test08574() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08574");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        long long4 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest5.getParentTask();
        bulkShardRequest2.setParentTask(taskId6);
        bulkShardRequest1.setParentTask(taskId6);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest1.shardId();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNull(shardId10);
    }

    @Test
    public void test08575() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08575");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        long long4 = bulkShardRequest3.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest3.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.setShardId(shardId8);
        bulkShardRequest6.seqNo(0L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest6.validate();
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest6.timeout();
        org.elasticsearch.index.shard.ShardId shardId14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest6.setShardId(shardId14);
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest6.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest18.index("index.version.created");
        bulkShardRequest18.primaryTerm((long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.seqNo();
        long long28 = bulkShardRequest26.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId30 = bulkShardRequest29.getParentTask();
        bulkShardRequest26.setParentTask(taskId30);
        bulkShardRequest18.setParentTask(taskId30);
        org.elasticsearch.index.shard.ShardId shardId33 = bulkShardRequest18.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest34 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel35 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel35);
        bulkShardRequest37.primaryTerm(33L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNull(transportAddress16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(taskId30);
        org.junit.Assert.assertNull(shardId33);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel35 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel35.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
    }

    @Test
    public void test08576() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08576");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest0.indicesOptions();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.timeout("index.shared_filesystem");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.shared_filesystem]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel2 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel2.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions5);
    }

    @Test
    public void test08577() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08577");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException3 = bulkShardRequest0.validate();
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.setShardId(shardId4);
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest0.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest8.shardId();
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.setShardId(shardId10);
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest8.remoteAddress();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest8.remoteAddress(transportAddress13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long16 = bulkShardRequest15.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions17 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest15.setShardId(shardId18);
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest19.getParentTask();
        long long21 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions26 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException27 = bulkShardRequest24.validate();
        org.elasticsearch.common.unit.TimeValue timeValue28 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest24.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest22.timeout(timeValue28);
        long long31 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest22.setShardId(shardId32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long35 = bulkShardRequest34.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest34.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest34.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long41 = bulkShardRequest40.primaryTerm();
        bulkShardRequest40.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest39.consistencyLevel(writeConsistencyLevel44);
        boolean boolean46 = bulkShardRequest39.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue47 = bulkShardRequest39.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest33.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest19.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest8.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest0.timeout(timeValue47);
        org.elasticsearch.tasks.TaskId taskId52 = bulkShardRequest51.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertNotNull(actionRequestValidationException3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertNull(shardId9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions26);
        org.junit.Assert.assertNotNull(actionRequestValidationException27);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertTrue("'" + boolean46 + "' != '" + false + "'", boolean46 == false);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(taskId52);
    }

    @Test
    public void test08578() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08578");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("current version [34] is different than the one provided [97]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNull(mappingMetaData13);
    }

    @Test
    public void test08579() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08579");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.blocks.read", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder13.creationDate((long) ' ');
        java.lang.String[] strArray38 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet39 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean40 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet39, strArray38);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder13.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder10.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder42.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.putMapping(mappingMetaData44);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(strArray38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder43);
    }

    @Test
    public void test08580() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08580");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = settingsSettingTuple11.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("index.blocks.read", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.numberOfReplicas((int) ' ');
        boolean boolean24 = settingsSettingTuple11.equals((java.lang.Object) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData25.mapping("current version [10] is different than the one provided [32]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData25.getCustoms();
        boolean boolean30 = settingsSettingTuple11.equals((java.lang.Object) indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData31);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData31.getMappings();
        int int36 = indexMetaData31.getNumberOfReplicas();
        org.apache.lucene.util.Version version37 = indexMetaData31.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData31.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting39 = null;
        java.lang.Throwable throwable41 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure43 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting39, "index.shared_filesystem", throwable41, "index.shared_filesystem");
        java.lang.String str44 = shardFailure43.reason;
        java.lang.String str45 = shardFailure43.indexUUID;
        java.lang.String str46 = shardFailure43.reason;
        java.lang.String str47 = shardFailure43.reason;
        java.lang.String str48 = shardFailure43.indexUUID;
        boolean boolean49 = indexMetaData31.equals((java.lang.Object) shardFailure43);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap50 = indexMetaData31.getActiveAllocationIds();
        org.elasticsearch.index.Index index51 = indexMetaData31.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = indexMetaData31.getActiveAllocationIds();
        boolean boolean53 = settingsSettingTuple11.equals((java.lang.Object) indexMetaData31);
        java.lang.String str54 = settingsSettingTuple11.toString();
        java.lang.String str55 = settingsSettingTuple11.toString();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index.shared_filesystem" + "'", str44, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.shared_filesystem" + "'", str45, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index.shared_filesystem" + "'", str46, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index.shared_filesystem" + "'", str47, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index.shared_filesystem" + "'", str48, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap50);
        org.junit.Assert.assertNull(index51);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08581() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08581");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.shared_filesystem", throwable2, "index.shared_filesystem");
        java.lang.String str5 = shardFailure4.reason;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.String str7 = shardFailure4.reason;
        java.lang.String str8 = shardFailure4.reason;
        java.lang.Throwable throwable9 = shardFailure4.cause;
        java.lang.String str10 = shardFailure4.indexUUID;
        java.lang.Throwable throwable11 = shardFailure4.cause;
        java.lang.Throwable throwable12 = shardFailure4.cause;
        java.lang.Throwable throwable13 = shardFailure4.cause;
        java.lang.String str14 = shardFailure4.reason;
        java.lang.String str15 = shardFailure4.indexUUID;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.shared_filesystem" + "'", str5, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.shared_filesystem" + "'", str6, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.shared_filesystem" + "'", str7, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.shared_filesystem" + "'", str8, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.shared_filesystem" + "'", str10, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable11);
        org.junit.Assert.assertNull(throwable12);
        org.junit.Assert.assertNull(throwable13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
    }

    @Test
    public void test08582() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08582");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData12.getState();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.settings(settings16);
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(settings18);
    }

    @Test
    public void test08583() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08583");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.version(0L);
        int int8 = builder5.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.creationDate((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder5.putCustom("index.number_of_shards", custom12);
        java.lang.String str14 = builder5.index();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.version.upgraded_string" + "'", str14, "index.version.upgraded_string");
    }

    @Test
    public void test08584() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08584");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean4 = versionType1.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str7 = versionType1.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str11 = versionType1.explainConflictForWrites((long) 10, (long) ' ', true);
        long long14 = versionType1.updateVersion(10L, (long) ' ');
        java.lang.String str18 = versionType1.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean22 = versionType1.isVersionConflictForWrites((long) (short) 0, 101L, true);
        byte byte23 = versionType1.getValue();
        boolean boolean26 = versionType1.isVersionConflictForReads(32L, (long) (short) 10);
        boolean boolean28 = versionType1.validateVersionForReads(0L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType29 = org.elasticsearch.index.VersionType.fromString("current version [5] is different than the one provided [97]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [5] is different than the one provided [97]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str7, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str11, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str18, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertTrue("'" + byte23 + "' != '" + (byte) 0 + "'", byte23 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + true + "'", boolean26 == true);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
    }

    @Test
    public void test08585() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08585");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.seqNo();
        long long10 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest11.getParentTask();
        bulkShardRequest8.setParentTask(taskId12);
        bulkShardRequest1.setParentTask(taskId12);
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest1.setShardId(shardId16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest17.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest23.index("index.version.created");
        bulkShardRequest23.primaryTerm((long) '#');
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = bulkShardRequest23.remoteAddress();
        bulkShardRequest23.seqNo(10L);
        long long34 = bulkShardRequest23.seqNo();
        boolean boolean35 = bulkShardRequest23.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long37 = bulkShardRequest36.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest36.index("current version [-1] is different than the one provided [0]");
        long long40 = bulkShardRequest39.seqNo();
        long long41 = bulkShardRequest39.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel42 = bulkShardRequest39.consistencyLevel();
        java.lang.String str43 = bulkShardRequest39.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel44 = bulkShardRequest39.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest23.consistencyLevel(writeConsistencyLevel44);
        org.elasticsearch.tasks.TaskId taskId46 = bulkShardRequest23.getParentTask();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task47 = bulkShardRequest17.createTask((long) 100, "index.", "current version [2] is higher than the one provided [101]", taskId46);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(taskId12);
        org.junit.Assert.assertNull(transportAddress15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNull(transportAddress31);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 10L + "'", long34 == 10L);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel42 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel42.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertEquals("'" + str43 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str43, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel44 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel44.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertNotNull(taskId46);
    }

    @Test
    public void test08586() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08586");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        int int8 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) '4');
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting12 = null;
        java.lang.Throwable throwable14 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure16 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting12, "index.shared_filesystem", throwable14, "index.shared_filesystem");
        java.lang.Throwable throwable17 = shardFailure16.cause;
        java.lang.Throwable throwable18 = shardFailure16.cause;
        java.lang.String str19 = shardFailure16.reason;
        java.lang.String str20 = shardFailure16.reason;
        java.util.AbstractCollection<java.lang.String> strCollection21 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params22 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple23 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection21, params22);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.shard.IndexShard.ShardFailure, org.elasticsearch.common.xcontent.ToXContent.Params> shardFailureTuple24 = org.elasticsearch.common.collect.Tuple.tuple(shardFailure16, params22);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder25 = indexMetaData0.toXContent(xContentBuilder11, params22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNull(throwable17);
        org.junit.Assert.assertNull(throwable18);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.shared_filesystem" + "'", str19, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.shared_filesystem" + "'", str20, "index.shared_filesystem");
        org.junit.Assert.assertNotNull(params22);
        org.junit.Assert.assertNotNull(shardFailureTuple24);
    }

    @Test
    public void test08587() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08587");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        boolean boolean9 = indexMetaData6.isSameUUID("index.version.created_string");
        int int10 = indexMetaData6.getNumberOfReplicas();
        boolean boolean12 = indexMetaData6.isSameUUID("");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData6.getSettings();
        org.elasticsearch.Version version15 = indexMetaData6.getCreationVersion();
        org.elasticsearch.Version version16 = indexMetaData6.getUpgradedVersion();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData6.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = indexMetaData6.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertNotNull(version16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
    }

    @Test
    public void test08588() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08588");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) state7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.includeFilters();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNull(version13);
    }

    @Test
    public void test08589() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08589");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        boolean boolean8 = bulkShardRequest0.getShouldPersistResult();
        bulkShardRequest0.seqNo((long) 1);
        long long11 = bulkShardRequest0.seqNo();
        long long12 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest0.remoteAddress(transportAddress13);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 10L + "'", long12 == 10L);
    }

    @Test
    public void test08590() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08590");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        boolean boolean33 = indexMetaData25.equals((java.lang.Object) state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.state(state32);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder13.index("current version [10] is different than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder13.removeAlias("index.version.created");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
    }

    @Test
    public void test08591() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08591");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long11 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test08592() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08592");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = settingsSettingTuple11.v2();
        java.lang.String str13 = settingsSettingTuple11.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting14 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple16 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting14, builder15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = settingsSettingTuple16.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData18.mapping("hi!");
        int int23 = indexMetaData18.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData18.mapping("index.number_of_shards");
        boolean boolean26 = settingsSettingTuple16.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting27 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple28 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple16, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting27);
        java.lang.String str29 = settingsSettingTuple16.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom33 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.putCustom("index.blocks.read", custom33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder31.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder31.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long45 = indexMetaData42.getVersion();
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData42.getSettings();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder41.settings(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder31.settings(settings46);
        boolean boolean50 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings46);
        boolean boolean51 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings46);
        boolean boolean52 = settingsSettingTuple16.equals((java.lang.Object) boolean51);
        boolean boolean53 = settingsSettingTuple11.equals((java.lang.Object) settingsSettingTuple16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long55 = bulkShardRequest54.seqNo();
        org.elasticsearch.index.shard.ShardId shardId56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest54.setShardId(shardId56);
        bulkShardRequest54.primaryTerm((long) (byte) 3);
        org.elasticsearch.common.unit.TimeValue timeValue60 = bulkShardRequest54.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long63 = bulkShardRequest62.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel64 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = bulkShardRequest62.consistencyLevel(writeConsistencyLevel64);
        org.elasticsearch.index.VersionType versionType66 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType67 = versionType66.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple68 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest65, versionType66);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest69 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest65);
        org.elasticsearch.common.transport.TransportAddress transportAddress70 = null;
        bulkShardRequest65.remoteAddress(transportAddress70);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long73 = bulkShardRequest72.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = bulkShardRequest72.index("current version [-1] is different than the one provided [0]");
        long long76 = bulkShardRequest75.seqNo();
        long long77 = bulkShardRequest75.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel78 = bulkShardRequest75.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest79 = bulkShardRequest65.consistencyLevel(writeConsistencyLevel78);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest80 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel78);
        boolean boolean81 = settingsSettingTuple11.equals((java.lang.Object) writeConsistencyLevel78);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settingsSetting14);
        org.junit.Assert.assertNotNull(settingsSettingTuple16);
        org.junit.Assert.assertNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(booleanSetting27);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple28);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str29, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + false + "'", boolean51 == false);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNotNull(timeValue60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest65);
        org.junit.Assert.assertNotNull(versionType66);
        org.junit.Assert.assertNotNull(versionType67);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple68);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest75);
        org.junit.Assert.assertTrue("'" + long76 + "' != '" + 0L + "'", long76 == 0L);
        org.junit.Assert.assertTrue("'" + long77 + "' != '" + 0L + "'", long77 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel78 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel78.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest79);
        org.junit.Assert.assertNotNull(bulkShardRequest80);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + false + "'", boolean81 == false);
    }

    @Test
    public void test08593() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08593");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("index.blocks.write");
        int int7 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putCustom("index.number_of_shards", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.creationDate(0L);
        int int14 = builder11.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08594() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08594");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple14 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple2, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting13);
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str19 = builder18.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.index("current version [11] is different than the one provided [0]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting16, builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.settings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long33 = indexMetaData30.getVersion();
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData30.getSettings();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder29.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData45.getState();
        boolean boolean49 = indexMetaData41.equals((java.lang.Object) state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder40.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder29.state(state48);
        byte byte52 = state48.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder24.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder53.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder53.numberOfReplicas((int) '#');
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanSetting13);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.version.minimum_compatible" + "'", str19, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + byte52 + "' != '" + (byte) 0 + "'", byte52 == (byte) 0);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
    }

    @Test
    public void test08595() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08595");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest5, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest6);
        bulkShardRequest6.primaryTerm((long) '4');
        bulkShardRequest6.seqNo((long) 100);
        boolean boolean13 = bulkShardRequest6.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = bulkShardRequest6.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest6.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        bulkShardRequest17.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest17.timeout(timeValue21);
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest17.remoteAddress(transportAddress23);
        boolean boolean25 = bulkShardRequest17.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest26.index("current version [-1] is different than the one provided [0]");
        long long30 = bulkShardRequest29.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = bulkShardRequest33.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.seqNo();
        org.elasticsearch.index.shard.ShardId shardId37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest35.setShardId(shardId37);
        bulkShardRequest35.seqNo(0L);
        boolean boolean41 = bulkShardRequest35.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException42 = bulkShardRequest35.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress43 = bulkShardRequest35.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue44 = bulkShardRequest35.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest33.timeout(timeValue44);
        bulkShardRequest33.setParentTask("current version [53] is different than the one provided [10]", (long) 'a');
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(transportAddress14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(transportAddress34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException42);
        org.junit.Assert.assertNull(transportAddress43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
    }

    @Test
    public void test08596() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08596");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean21 = versionType0.isVersionConflictForWrites((long) (short) 0, 101L, true);
        long long24 = versionType0.updateVersion(100L, 101L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str28 = versionType0.explainConflictForReads((long) (short) -1, (long) (byte) 0);
        java.lang.String str32 = versionType0.explainConflictForWrites((long) (byte) 3, (long) 0, false);
        long long35 = versionType0.updateVersion(101L, (long) (short) 100);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 101L + "'", long24 == 101L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str28, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "current version [3] is different than the one provided [0]" + "'", str32, "current version [3] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 102L + "'", long35 == 102L);
    }

    @Test
    public void test08597() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08597");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        int int4 = indexMetaData0.getNumberOfReplicas();
        int int5 = indexMetaData0.getNumberOfReplicas();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("current version [100] is different than the one provided [0]");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test08598() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08598");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [97] is different than the one provided [32]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08599() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08599");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.upgraded");
        long long9 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str12 = builder11.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("index.version.upgraded_string", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData18.getState();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData18.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder17.settings(settings22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder6.settings(settings24);
        int int28 = builder6.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder6.numberOfShards((int) (short) -1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.version.minimum_compatible" + "'", str12, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(builder30);
    }

    @Test
    public void test08600() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08600");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = builder3.index();
        int int5 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("_na_", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder3.removeAlias("hi!");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08601() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08601");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        bulkShardRequest0.primaryTerm((long) '#');
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest0.remoteAddress();
        bulkShardRequest0.seqNo(10L);
        long long11 = bulkShardRequest0.seqNo();
        boolean boolean12 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.index("current version [-1] is different than the one provided [0]");
        long long17 = bulkShardRequest16.seqNo();
        long long18 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest16.consistencyLevel();
        java.lang.String str20 = bulkShardRequest16.index();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel21 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel21);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest22.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 10L + "'", long11 == 10L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str20, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel21 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel21.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest22);
    }

    @Test
    public void test08602() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08602");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
    }

    @Test
    public void test08603() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08603");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData4.diff(indexMetaData10);
        long long17 = indexMetaData4.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params20 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.primaryTerm();
        bulkShardRequest24.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest24.timeout(timeValue28);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest29);
        org.elasticsearch.action.ActionRequest actionRequest31 = bulkItemRequest30.request();
        org.elasticsearch.tasks.TaskId taskId32 = actionRequest31.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions37 = bulkShardRequest35.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException38 = bulkShardRequest35.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure40 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting33, "primary_terms", (java.lang.Throwable) actionRequestValidationException38, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple41 = org.elasticsearch.common.collect.Tuple.tuple(taskId32, (java.lang.IllegalArgumentException) actionRequestValidationException38);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure43 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting21, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException38, "index.creation_date_string");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting44 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.collect.Tuple<java.lang.IllegalArgumentException, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>> illegalArgumentExceptionTuple45 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.IllegalArgumentException) actionRequestValidationException38, settingsSetting44);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.ValidationException> paramsTuple46 = org.elasticsearch.common.collect.Tuple.tuple(params20, (org.elasticsearch.common.ValidationException) actionRequestValidationException38);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder47 = indexMetaData4.toXContent(xContentBuilder19, params20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(params20);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(actionRequest31);
        org.junit.Assert.assertNotNull(taskId32);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions37);
        org.junit.Assert.assertNotNull(actionRequestValidationException38);
        org.junit.Assert.assertNotNull(taskIdTuple41);
        org.junit.Assert.assertNotNull(settingsSetting44);
        org.junit.Assert.assertNotNull(illegalArgumentExceptionTuple45);
        org.junit.Assert.assertNotNull(paramsTuple46);
    }

    @Test
    public void test08604() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08604");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData4.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData10.getState();
        java.lang.Class<?> wildcardClass19 = state18.getClass();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(wildcardClass19);
    }

    @Test
    public void test08605() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08605");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData9.getMappings();
        int int14 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData9.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.putCustom("index.blocks.read", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version(0L);
        boolean boolean24 = indexMetaData9.equals((java.lang.Object) builder21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.primaryTerm();
        bulkShardRequest26.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest26.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest31);
        org.elasticsearch.action.ActionRequest actionRequest33 = bulkItemRequest32.request();
        org.elasticsearch.tasks.TaskId taskId34 = actionRequest33.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions39 = bulkShardRequest37.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException40 = bulkShardRequest37.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting35, "primary_terms", (java.lang.Throwable) actionRequestValidationException40, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple43 = org.elasticsearch.common.collect.Tuple.tuple(taskId34, (java.lang.IllegalArgumentException) actionRequestValidationException40);
        boolean boolean44 = indexMetaData9.equals((java.lang.Object) taskId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.index.shard.ShardId shardId47 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.setShardId(shardId47);
        boolean boolean49 = indexMetaData9.equals((java.lang.Object) bulkShardRequest48);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting50 = null;
        java.lang.Throwable throwable52 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure54 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting50, "index.shared_filesystem", throwable52, "index.shared_filesystem");
        java.lang.Throwable throwable55 = shardFailure54.cause;
        java.lang.Throwable throwable56 = shardFailure54.cause;
        java.lang.String str57 = shardFailure54.reason;
        java.lang.String str58 = shardFailure54.reason;
        java.lang.String str59 = shardFailure54.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting60 = shardFailure54.routing;
        boolean boolean61 = indexMetaData9.equals((java.lang.Object) shardFailure54);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff62 = indexMetaData4.diff(indexMetaData9);
        org.elasticsearch.Version version63 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state64 = indexMetaData4.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(actionRequest33);
        org.junit.Assert.assertNotNull(taskId34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions39);
        org.junit.Assert.assertNotNull(actionRequestValidationException40);
        org.junit.Assert.assertNotNull(taskIdTuple43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNull(throwable55);
        org.junit.Assert.assertNull(throwable56);
        org.junit.Assert.assertEquals("'" + str57 + "' != '" + "index.shared_filesystem" + "'", str57, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str58 + "' != '" + "index.shared_filesystem" + "'", str58, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "index.shared_filesystem" + "'", str59, "index.shared_filesystem");
        org.junit.Assert.assertNull(shardRouting60);
        org.junit.Assert.assertTrue("'" + boolean61 + "' != '" + false + "'", boolean61 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff62);
        org.junit.Assert.assertNotNull(version63);
        org.junit.Assert.assertTrue("'" + state64 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state64.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test08606() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08606");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long9 = indexMetaData6.getVersion();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData6.getSettings();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder5.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = builder14.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.numberOfShards((int) (short) 0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNotNull(builder17);
    }

    @Test
    public void test08607() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08607");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData4.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str14 = builder13.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom18 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder16.putCustom("index.version.upgraded_string", custom18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.index("active_allocations");
        boolean boolean22 = indexMetaData4.equals((java.lang.Object) builder16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = builder16.mapping("current version [1] is different than the one provided [3]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.version.minimum_compatible" + "'", str14, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNull(mappingMetaData24);
    }

    @Test
    public void test08608() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08608");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder6.removeAlias("index.number_of_shards");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfReplicas((int) (short) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.removeAllAliases();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08609() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08609");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("current version [101] is higher than the one provided [100]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNull(mappingMetaData9);
    }

    @Test
    public void test08610() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08610");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException3 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest5.getParentTask();
        org.elasticsearch.common.unit.TimeValue timeValue7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest5.timeout(timeValue7);
        org.elasticsearch.common.unit.TimeValue timeValue9 = bulkShardRequest5.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = bulkShardRequest5.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue11 = bulkShardRequest5.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.seqNo();
        long long19 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest20.getParentTask();
        bulkShardRequest17.setParentTask(taskId21);
        bulkShardRequest16.setParentTask(taskId21);
        bulkShardRequest15.setParentTask(taskId21);
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = null;
        bulkShardRequest15.remoteAddress(transportAddress25);
        org.elasticsearch.index.shard.ShardId shardId27 = bulkShardRequest15.shardId();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest28.validate();
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest28.timeout(timeValue32);
        org.elasticsearch.tasks.TaskId taskId34 = bulkShardRequest28.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.seqNo();
        long long37 = bulkShardRequest35.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId39 = bulkShardRequest38.getParentTask();
        bulkShardRequest35.setParentTask(taskId39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest35.index("hi!");
        org.elasticsearch.tasks.TaskId taskId43 = null;
        bulkShardRequest42.setParentTask(taskId43);
        org.elasticsearch.common.unit.TimeValue timeValue45 = bulkShardRequest42.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest28.timeout(timeValue45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest47 = bulkShardRequest15.timeout(timeValue45);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest5.timeout(timeValue45);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertNotNull(actionRequestValidationException3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(timeValue9);
        org.junit.Assert.assertNull(transportAddress10);
        org.junit.Assert.assertNull(timeValue11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertNull(shardId27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(taskId34);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertTrue("'" + long37 + "' != '" + 0L + "'", long37 == 0L);
        org.junit.Assert.assertNotNull(taskId39);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(timeValue45);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(bulkShardRequest47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
    }

    @Test
    public void test08611() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08611");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) (byte) -1);
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (byte) 10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.putMapping(mappingMetaData12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08612() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08612");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
    }

    @Test
    public void test08613() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08613");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap7 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.putCustom("index.blocks.read", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder9.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData16.mapping("hi!");
        int int21 = indexMetaData16.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData16.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.putCustom("index.blocks.read", custom31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder29.creationDate((long) ' ');
        java.lang.String[] strArray54 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder29.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder26.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder9.putActiveAllocationIds(97, (java.util.Set<java.lang.String>) strSet55);
        boolean boolean60 = indexMetaData0.equals((java.lang.Object) 97);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = indexMetaData0.mapping("current version [0] is different than the one provided [0]");
        long long63 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertTrue("'" + boolean60 + "' != '" + false + "'", boolean60 == false);
        org.junit.Assert.assertNull(mappingMetaData62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
    }

    @Test
    public void test08614() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08614");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        java.lang.String str13 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = settingsSettingTuple2.v2();
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData16.diff(indexMetaData20);
        org.elasticsearch.index.Index index22 = indexMetaData20.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData20.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index25 = indexMetaData20.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.settings(settings28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData30 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData32 = indexMetaData30.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long33 = indexMetaData30.getVersion();
        org.elasticsearch.common.settings.Settings settings34 = indexMetaData30.getSettings();
        org.elasticsearch.common.settings.Settings settings35 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder29.settings(settings34);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData45.getState();
        boolean boolean49 = indexMetaData41.equals((java.lang.Object) state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder40.state(state48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder29.state(state48);
        boolean boolean52 = indexMetaData20.equals((java.lang.Object) builder29);
        org.elasticsearch.Version version53 = indexMetaData20.getUpgradedVersion();
        int int54 = indexMetaData20.getNumberOfShards();
        boolean boolean55 = settingsSettingTuple2.equals((java.lang.Object) int54);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting56 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = settingsSettingTuple2.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting59 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = indexMetaData60.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData60.getState();
        org.elasticsearch.Version version64 = indexMetaData60.getUpgradedVersion();
        int int65 = indexMetaData60.getNumberOfReplicas();
        org.apache.lucene.util.Version version66 = indexMetaData60.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData68 = indexMetaData60.mapping("hi!");
        org.elasticsearch.Version version69 = indexMetaData60.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder70.numberOfShards(100);
        boolean boolean73 = settingsSettingTuple2.equals((java.lang.Object) 100);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str13, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNull(index22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNull(index25);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(indexMetaData30);
        org.junit.Assert.assertNull(mappingMetaData32);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 1L + "'", long33 == 1L);
        org.junit.Assert.assertNotNull(settings34);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(version53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(settingsSetting56);
        org.junit.Assert.assertNull(builder57);
        org.junit.Assert.assertNull(builder58);
        org.junit.Assert.assertNotNull(settingsSetting59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNull(mappingMetaData62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version64);
        org.junit.Assert.assertTrue("'" + int65 + "' != '" + 0 + "'", int65 == 0);
        org.junit.Assert.assertNull(version66);
        org.junit.Assert.assertNull(mappingMetaData68);
        org.junit.Assert.assertNotNull(version69);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
    }

    @Test
    public void test08615() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08615");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate((long) '#');
        int int10 = builder9.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder9.removeAlias("index.blocks.read_only");
        int int13 = builder9.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData15.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet18 = null; // flaky: indexMetaData15.activeAllocationIds((-1));
        java.util.Set<java.lang.String> strSet20 = indexMetaData15.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder9.putActiveAllocationIds((int) (short) -1, strSet20);
        int int22 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.version(33L);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertNull(strSet18);
        org.junit.Assert.assertNotNull(strSet20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + (-1) + "'", int22 == (-1));
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08616() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08616");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        boolean boolean5 = versionType0.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str8 = versionType0.explainConflictForReads(0L, (long) (byte) 1);
        org.elasticsearch.index.VersionType versionType9 = versionType0.versionTypeForReplicationAndRecovery();
        long long12 = versionType9.updateVersion((long) (short) 100, 3L);
        java.lang.String str15 = versionType9.explainConflictForReads((long) 3, 52L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str8, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 3L + "'", long12 == 3L);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [3] is different than the one provided [52]" + "'", str15, "current version [3] is different than the one provided [52]");
    }

    @Test
    public void test08617() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08617");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        boolean boolean5 = versionType0.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str8 = versionType0.explainConflictForReads(0L, (long) (byte) 1);
        byte byte9 = versionType0.getValue();
        boolean boolean13 = versionType0.isVersionConflictForWrites((long) (short) 100, 0L, true);
        boolean boolean15 = versionType0.validateVersionForWrites(98L);
        long long18 = versionType0.updateVersion(100L, (long) ' ');
        long long21 = versionType0.updateVersion((long) (byte) 2, 11L);
        boolean boolean23 = versionType0.validateVersionForReads((long) 3);
        byte byte24 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str8, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertTrue("'" + byte9 + "' != '" + (byte) 0 + "'", byte9 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 101L + "'", long18 == 101L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + true + "'", boolean23 == true);
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
    }

    @Test
    public void test08618() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08618");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        int int10 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
    }

    @Test
    public void test08619() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08619");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest8.validate();
        org.elasticsearch.common.unit.TimeValue timeValue10 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.timeout(timeValue10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.index("current version [-1] is different than the one provided [0]");
        long long18 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId19 = bulkShardRequest17.shardId();
        boolean boolean20 = bulkShardRequest17.getShouldPersistResult();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel21 = bulkShardRequest17.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest8.consistencyLevel(writeConsistencyLevel21);
        bulkShardRequest8.setParentTask("current version [1] is different than the one provided [0]", 1L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput26 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest8.writeTo(streamOutput26);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(actionRequestValidationException9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel12 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel12.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNull(shardId19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel21 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel21.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest22);
    }

    @Test
    public void test08620() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08620");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        int int4 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple7 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting5, builder6);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting8 = settingsSettingTuple7.v1();
        java.lang.String str9 = settingsSettingTuple7.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting10 = settingsSettingTuple7.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting11 = settingsSettingTuple7.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("hi!");
        int int17 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData12.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.putCustom("index.blocks.read", custom27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder25.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder25.creationDate((long) ' ');
        java.lang.String[] strArray50 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet51 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean52 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet51, strArray50);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder25.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder22.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder54.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData58 = indexMetaData56.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder59.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder59.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData64);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = indexMetaData68.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData74 = indexMetaData72.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state75 = indexMetaData72.getState();
        boolean boolean76 = indexMetaData68.equals((java.lang.Object) state75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder67.state(state75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder59.state(state75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder55.state(state75);
        boolean boolean80 = settingsSettingTuple7.equals((java.lang.Object) builder55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder55.index("current version [2] is different than the one provided [3]");
        boolean boolean83 = indexMetaData0.equals((java.lang.Object) "current version [2] is different than the one provided [3]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settingsSettingTuple7);
        org.junit.Assert.assertNotNull(settingsSetting8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str9, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting10);
        org.junit.Assert.assertNotNull(settingsSetting11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(strArray50);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + true + "'", boolean52 == true);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNull(mappingMetaData58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNull(mappingMetaData74);
        org.junit.Assert.assertTrue("'" + state75 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state75.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertTrue("'" + boolean83 + "' != '" + false + "'", boolean83 == false);
    }

    @Test
    public void test08621() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08621");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        boolean boolean33 = indexMetaData25.equals((java.lang.Object) state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.state(state32);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData4.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData4.includeFilters();
        org.elasticsearch.common.settings.Settings settings39 = indexMetaData4.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.creationDate(101L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder45.removeAlias("index.version.created");
        boolean boolean50 = indexMetaData4.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData52 = indexMetaData4.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = indexMetaData53.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet57 = null; // flaky: indexMetaData53.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.Version version60 = indexMetaData53.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData53.getCustoms();
        org.elasticsearch.index.Index index62 = indexMetaData53.getMergeSourceIndex();
        long long63 = indexMetaData53.getCreationDate();
        org.elasticsearch.index.Index index64 = indexMetaData53.getMergeSourceIndex();
        org.apache.lucene.util.Version version65 = indexMetaData53.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData4.diff(indexMetaData53);
        // The following exception was thrown during execution in test generation
        try {
            long long68 = indexMetaData53.primaryTerm((int) (short) 100);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 100");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(mappingMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(mappingMetaData55);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNull(index62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNull(index64);
        org.junit.Assert.assertNull(version65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
    }

    @Test
    public void test08622() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08622");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings2 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(settings2);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long7 = indexMetaData4.getVersion();
        org.elasticsearch.common.settings.Settings settings8 = indexMetaData4.getSettings();
        org.elasticsearch.common.settings.Settings settings9 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings8);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.settings(settings8);
        boolean boolean11 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings8);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings8);
        org.elasticsearch.transport.TransportService transportService13 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService14 = null;
        org.elasticsearch.indices.IndicesService indicesService15 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool16 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction17 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction18 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper19 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters20 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver21 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction22 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings8, transportService13, clusterService14, indicesService15, threadPool16, shardStateAction17, mappingUpdatedAction18, updateHelper19, actionFilters20, indexNameExpressionResolver21);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
    }

    @Test
    public void test08623() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08623");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel5);
        org.elasticsearch.index.VersionType versionType7 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple9 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest6, versionType7);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.seqNo();
        long long13 = bulkShardRequest11.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId15 = bulkShardRequest14.getParentTask();
        bulkShardRequest11.setParentTask(taskId15);
        bulkShardRequest6.setParentTask(taskId15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest18.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple26 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest23, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest24);
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = bulkShardRequest23.remoteAddress();
        long long28 = bulkShardRequest23.seqNo();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest23.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel29);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest30.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure33 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [97] is different than the one provided [10]", (java.lang.Throwable) actionRequestValidationException31, "current version [10] is higher or equal to the one provided [0]");
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(taskId15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNull(transportAddress27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
    }

    @Test
    public void test08624() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08624");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test08625() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08625");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest8.validate();
        org.elasticsearch.common.unit.TimeValue timeValue10 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.timeout(timeValue10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        int int14 = bulkItemRequest13.id();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(actionRequestValidationException9);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel12 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel12.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 10 + "'", int14 == 10);
    }

    @Test
    public void test08626() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08626");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.index.shard.ShardId shardId3 = bulkShardRequest0.shardId();
        org.elasticsearch.common.unit.TimeValue timeValue4 = bulkShardRequest0.timeout();
        org.elasticsearch.index.shard.ShardId shardId5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.setShardId(shardId5);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNull(shardId3);
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
    }

    @Test
    public void test08627() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08627");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long5 = bulkShardRequest4.seqNo();
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest4.setShardId(shardId6);
        bulkShardRequest4.seqNo(0L);
        boolean boolean10 = bulkShardRequest4.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest4.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom15 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.putCustom("index.blocks.read", custom15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder13.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version(0L);
        int int20 = builder17.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("index.blocks.read", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder23.creationDate((long) ' ');
        java.lang.String[] strArray48 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet49 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean50 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet49, strArray48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder23.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder17.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long54 = bulkShardRequest53.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel55 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest53.consistencyLevel(writeConsistencyLevel55);
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.transport.TransportMessage> strSetTuple57 = org.elasticsearch.common.collect.Tuple.tuple(strSet49, (org.elasticsearch.transport.TransportMessage) bulkShardRequest56);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, java.util.HashSet<java.lang.String>> runtimeExceptionTuple58 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, java.util.HashSet<java.lang.String>>((java.lang.RuntimeException) actionRequestValidationException11, (java.util.HashSet<java.lang.String>) strSet49);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure60 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [1] is different than the one provided [53]", (java.lang.Throwable) actionRequestValidationException11, "index.version.created_string");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure62 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [-1] is different than the one provided [11]", (java.lang.Throwable) actionRequestValidationException11, "current version [0] is different than the one provided [33]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(strArray48);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + true + "'", boolean50 == true);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 0L + "'", long54 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(strSetTuple57);
    }

    @Test
    public void test08628() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08628");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("index.version.created");
        int int9 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData0.getCustoms();
        long long11 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test08629() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08629");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version7 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData0.mappingOrDefault("current version [0] is higher or equal to the one provided [3]");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        java.util.AbstractCollection<java.lang.String> strCollection12 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params13 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple14 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection12, params13);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData15.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData15.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap20 = indexMetaData15.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData15.mapping("current version [-1] is different than the one provided [0]");
        int int23 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.Version version24 = indexMetaData15.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long26 = indexMetaData25.getCreationDate();
        boolean boolean28 = indexMetaData25.isSameUUID("index.version.created_string");
        int int29 = indexMetaData25.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap30 = indexMetaData25.getActiveAllocationIds();
        boolean boolean31 = indexMetaData15.equals((java.lang.Object) indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData34 = indexMetaData32.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData32);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap36 = indexMetaData32.getMappings();
        int int37 = indexMetaData32.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData32.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom42 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.putCustom("index.blocks.read", custom42);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder40.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.version(0L);
        boolean boolean47 = indexMetaData32.equals((java.lang.Object) builder44);
        long long48 = indexMetaData32.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData32.mapping("index.priority");
        org.elasticsearch.Version version51 = indexMetaData32.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData32.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = indexMetaData53.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state56 = indexMetaData53.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state57 = indexMetaData53.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap58 = indexMetaData53.getAliases();
        long long59 = indexMetaData53.getVersion();
        int int60 = indexMetaData53.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters61 = indexMetaData53.requireFilters();
        java.util.Set<java.lang.String> strSet63 = null; // flaky: indexMetaData53.activeAllocationIds((-1));
        boolean boolean64 = indexMetaData32.equals((java.lang.Object) indexMetaData53);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff65 = indexMetaData15.diff(indexMetaData32);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>> paramsTuple66 = org.elasticsearch.common.collect.Tuple.tuple(params13, (org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>) indexMetaData32);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder67 = indexMetaData0.toXContent(xContentBuilder11, params13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(version7);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(params13);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(version24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + (-1L) + "'", long26 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap30);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNull(mappingMetaData34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long48 + "' != '" + 1L + "'", long48 == 1L);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(version51);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(mappingMetaData55);
        org.junit.Assert.assertTrue("'" + state56 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state56.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state57 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state57.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap58);
        org.junit.Assert.assertTrue("'" + long59 + "' != '" + 1L + "'", long59 == 1L);
        org.junit.Assert.assertTrue("'" + int60 + "' != '" + 0 + "'", int60 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters61);
        org.junit.Assert.assertNull(strSet63);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + true + "'", boolean64 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff65);
        org.junit.Assert.assertNotNull(paramsTuple66);
    }

    @Test
    public void test08630() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08630");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("index.priority");
        long long10 = bulkShardRequest9.seqNo();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
    }

    @Test
    public void test08631() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08631");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.index.shard.ShardId shardId7 = bulkShardRequest6.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest6.remoteAddress(transportAddress8);
        long long10 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest6.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.seqNo();
        long long14 = bulkShardRequest12.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId16 = bulkShardRequest15.getParentTask();
        bulkShardRequest12.setParentTask(taskId16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest12.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest19.validate();
        org.elasticsearch.common.unit.TimeValue timeValue21 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.index("current version [-1] is different than the one provided [0]");
        long long27 = bulkShardRequest26.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue28 = bulkShardRequest26.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest22.timeout(timeValue28);
        org.elasticsearch.common.unit.TimeValue timeValue30 = bulkShardRequest29.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long32 = bulkShardRequest31.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest31.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest31.remoteAddress(transportAddress34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel39 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.consistencyLevel(writeConsistencyLevel39);
        org.elasticsearch.index.VersionType versionType41 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType42 = versionType41.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple43 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest40, versionType41);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest44 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        long long47 = bulkShardRequest45.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId49 = bulkShardRequest48.getParentTask();
        bulkShardRequest45.setParentTask(taskId49);
        bulkShardRequest40.setParentTask(taskId49);
        bulkShardRequest31.setParentTask(taskId49);
        bulkShardRequest29.setParentTask(taskId49);
        bulkShardRequest6.setParentTask(taskId49);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest55 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.common.io.stream.StreamInput streamInput56 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest55.readFrom(streamInput56);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(shardId7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 10L + "'", long10 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(taskId16);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNull(actionRequestValidationException20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(timeValue28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNotNull(timeValue30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(versionType41);
        org.junit.Assert.assertNotNull(versionType42);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple43);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(taskId49);
    }

    @Test
    public void test08632() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08632");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [10] is different than the one provided [11]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08633() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08633");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) 0, 1L);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        long long7 = versionType0.updateVersion((long) '#', (long) (short) 10);
        long long10 = versionType0.updateVersion(0L, (long) (byte) 1);
        java.lang.String str13 = versionType0.explainConflictForReads((long) (byte) 3, 101L);
        java.lang.String str16 = versionType0.explainConflictForReads((long) (byte) 0, (long) (short) 10);
        java.lang.String str20 = versionType0.explainConflictForWrites((long) 35, (long) (byte) 100, true);
        boolean boolean24 = versionType0.isVersionConflictForWrites((long) 'a', (long) (byte) 10, false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 36L + "'", long7 == 36L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "current version [3] is different than the one provided [101]" + "'", str13, "current version [3] is different than the one provided [101]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "current version [0] is different than the one provided [10]" + "'", str16, "current version [0] is different than the one provided [10]");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "current version [35] is different than the one provided [100]" + "'", str20, "current version [35] is different than the one provided [100]");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + true + "'", boolean24 == true);
    }

    @Test
    public void test08634() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08634");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest3.getParentTask();
        bulkShardRequest0.setParentTask(taskId4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("current version [-1] is different than the one provided [0]");
        long long15 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue16 = bulkShardRequest14.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest10.timeout(timeValue16);
        java.lang.String str18 = bulkShardRequest10.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(taskId4);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(timeValue16);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "hi!" + "'", str18, "hi!");
    }

    @Test
    public void test08635() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08635");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.Version version11 = indexMetaData0.getUpgradedVersion();
        long long12 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test08636() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08636");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData10.getMappings();
        int int15 = indexMetaData10.getNumberOfReplicas();
        org.apache.lucene.util.Version version16 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData10.getActiveAllocationIds();
        long long18 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData10.getState();
        org.apache.lucene.util.Version version20 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("");
        long long27 = indexMetaData24.getCreationDate();
        org.apache.lucene.util.Version version28 = indexMetaData24.getMinimumCompatibleVersion();
        int int29 = indexMetaData24.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet31 = null; // flaky: indexMetaData24.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder33.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData38 = indexMetaData36.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state39 = indexMetaData36.getState();
        boolean boolean41 = indexMetaData36.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters42 = indexMetaData36.includeFilters();
        org.elasticsearch.common.settings.Settings settings43 = indexMetaData36.getSettings();
        org.elasticsearch.Version version44 = indexMetaData36.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("active_allocations");
        boolean boolean47 = indexMetaData36.equals((java.lang.Object) "active_allocations");
        java.util.Set<java.lang.String> strSet49 = indexMetaData36.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder34.putActiveAllocationIds((int) (byte) 3, strSet49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder22.putActiveAllocationIds(0, strSet49);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + (-1L) + "'", long27 == (-1L));
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNull(strSet31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNull(mappingMetaData38);
        org.junit.Assert.assertTrue("'" + state39 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state39.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters42);
        org.junit.Assert.assertNotNull(settings43);
        org.junit.Assert.assertNotNull(version44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strSet49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder51);
    }

    @Test
    public void test08637() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08637");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        long long9 = bulkShardRequest5.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest5.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest5.consistencyLevel();
        bulkShardRequest5.seqNo((long) (byte) 10);
        org.elasticsearch.common.unit.TimeValue timeValue14 = bulkShardRequest5.timeout();
        org.elasticsearch.tasks.TaskId taskId15 = bulkShardRequest5.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(timeValue14);
        org.junit.Assert.assertNotNull(taskId15);
    }

    @Test
    public void test08638() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08638");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.seqNo();
        long long10 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest11.getParentTask();
        bulkShardRequest8.setParentTask(taskId12);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress15 = null;
        bulkShardRequest8.remoteAddress(transportAddress15);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel17 = bulkShardRequest8.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.seqNo();
        long long21 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId23 = bulkShardRequest22.getParentTask();
        bulkShardRequest19.setParentTask(taskId23);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel25 = bulkShardRequest19.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = null;
        bulkShardRequest19.remoteAddress(transportAddress26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        bulkShardRequest28.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest28.timeout(timeValue32);
        org.elasticsearch.index.shard.ShardId shardId34 = bulkShardRequest33.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress35 = null;
        bulkShardRequest33.remoteAddress(transportAddress35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.index("current version [-1] is different than the one provided [0]");
        long long41 = bulkShardRequest40.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel42 = bulkShardRequest40.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest33.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest45.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress48 = null;
        bulkShardRequest45.remoteAddress(transportAddress48);
        long long50 = bulkShardRequest45.seqNo();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException51 = bulkShardRequest45.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions52 = bulkShardRequest45.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long55 = bulkShardRequest54.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest54.consistencyLevel(writeConsistencyLevel56);
        org.elasticsearch.index.VersionType versionType58 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType59 = versionType58.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple60 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest57, versionType58);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest61 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest57);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long63 = bulkShardRequest62.seqNo();
        long long64 = bulkShardRequest62.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId66 = bulkShardRequest65.getParentTask();
        bulkShardRequest62.setParentTask(taskId66);
        bulkShardRequest57.setParentTask(taskId66);
        bulkShardRequest45.setParentTask(taskId66);
        org.elasticsearch.common.unit.TimeValue timeValue70 = bulkShardRequest45.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long72 = bulkShardRequest71.seqNo();
        long long73 = bulkShardRequest71.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId75 = bulkShardRequest74.getParentTask();
        bulkShardRequest71.setParentTask(taskId75);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest78 = bulkShardRequest71.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException79 = bulkShardRequest78.validate();
        org.elasticsearch.common.unit.TimeValue timeValue80 = bulkShardRequest78.timeout();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.transport.TransportRequest> timeValueTuple81 = org.elasticsearch.common.collect.Tuple.tuple(timeValue70, (org.elasticsearch.transport.TransportRequest) bulkShardRequest78);
        org.elasticsearch.common.unit.TimeValue timeValue82 = bulkShardRequest78.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest83 = bulkShardRequest19.timeout(timeValue82);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = bulkShardRequest18.timeout(timeValue82);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel85 = bulkShardRequest18.consistencyLevel();
        long long86 = bulkShardRequest18.seqNo();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(taskId12);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel17 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel17.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(taskId23);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel25 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel25.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(shardId34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel42 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel42.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(actionRequestValidationException51);
        org.junit.Assert.assertNotNull(indicesOptions52);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNotNull(versionType58);
        org.junit.Assert.assertNotNull(versionType59);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple60);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(taskId66);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertTrue("'" + long72 + "' != '" + 0L + "'", long72 == 0L);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertNotNull(taskId75);
        org.junit.Assert.assertNotNull(bulkShardRequest78);
        org.junit.Assert.assertNull(actionRequestValidationException79);
        org.junit.Assert.assertNotNull(timeValue80);
        org.junit.Assert.assertNotNull(timeValueTuple81);
        org.junit.Assert.assertNotNull(timeValue82);
        org.junit.Assert.assertNotNull(bulkShardRequest83);
        org.junit.Assert.assertNotNull(bulkShardRequest84);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel85 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel85.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long86 + "' != '" + 0L + "'", long86 == 0L);
    }

    @Test
    public void test08639() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08639");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean4 = versionType1.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str7 = versionType1.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str11 = versionType1.explainConflictForWrites((long) 10, (long) ' ', true);
        byte byte12 = versionType1.getValue();
        org.elasticsearch.index.VersionType versionType13 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean17 = versionType1.isVersionConflictForWrites(12L, 10L, true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType18 = org.elasticsearch.index.VersionType.fromString("current version [-1] is different than the one provided [2]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [-1] is different than the one provided [2]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str7, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str11, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(versionType13);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08640() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08640");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        boolean boolean7 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData9.getMappings();
        int int14 = indexMetaData9.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData9.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom19 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder17.putCustom("index.blocks.read", custom19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.version(0L);
        boolean boolean24 = indexMetaData9.equals((java.lang.Object) builder21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.primaryTerm();
        bulkShardRequest26.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue30 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest26.timeout(timeValue30);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest31);
        org.elasticsearch.action.ActionRequest actionRequest33 = bulkItemRequest32.request();
        org.elasticsearch.tasks.TaskId taskId34 = actionRequest33.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions39 = bulkShardRequest37.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException40 = bulkShardRequest37.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting35, "primary_terms", (java.lang.Throwable) actionRequestValidationException40, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple43 = org.elasticsearch.common.collect.Tuple.tuple(taskId34, (java.lang.IllegalArgumentException) actionRequestValidationException40);
        boolean boolean44 = indexMetaData9.equals((java.lang.Object) taskId34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.index.shard.ShardId shardId47 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.setShardId(shardId47);
        boolean boolean49 = indexMetaData9.equals((java.lang.Object) bulkShardRequest48);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff50 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.Version version51 = indexMetaData9.getUpgradedVersion();
        // The following exception was thrown during execution in test generation
        try {
            long long53 = indexMetaData9.primaryTerm(1);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertNotNull(actionRequest33);
        org.junit.Assert.assertNotNull(taskId34);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions39);
        org.junit.Assert.assertNotNull(actionRequestValidationException40);
        org.junit.Assert.assertNotNull(taskIdTuple43);
        org.junit.Assert.assertTrue("'" + boolean44 + "' != '" + false + "'", boolean44 == false);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff50);
        org.junit.Assert.assertNotNull(version51);
    }

    @Test
    public void test08641() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08641");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.upgraded");
        long long9 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str12 = builder11.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("index.version.upgraded_string", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = indexMetaData18.getState();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData18.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder17.settings(settings22);
        org.elasticsearch.common.settings.Settings settings24 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.common.settings.Settings settings25 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        boolean boolean26 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder6.settings(settings24);
        boolean boolean28 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings24);
        org.elasticsearch.common.settings.Settings settings29 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings24);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.version.minimum_compatible" + "'", str12, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(settings24);
        org.junit.Assert.assertNotNull(settings25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(settings29);
    }

    @Test
    public void test08642() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08642");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) state7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        int int10 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        long long12 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test08643() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08643");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData4.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData4.mapping("index.blocks.read_only");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData4.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
    }

    @Test
    public void test08644() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08644");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean9 = indexMetaData0.isSameUUID("current version [101] is different than the one provided [32]");
        boolean boolean11 = indexMetaData0.isSameUUID("current version [52] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test08645() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08645");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.Version version13 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        java.lang.String str15 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap16 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long19 = indexMetaData18.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        int int21 = indexMetaData18.getNumberOfReplicas();
        java.lang.String str22 = indexMetaData18.getIndexUUID();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff23 = indexMetaData0.diff(indexMetaData18);
        org.elasticsearch.index.Index index24 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNotNull(version13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 0 + "'", int21 == 0);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
        org.junit.Assert.assertNotNull(indexMetaDataDiff23);
        org.junit.Assert.assertNull(index24);
    }

    @Test
    public void test08646() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08646");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = builder6.build();
        org.elasticsearch.common.io.stream.StreamInput streamInput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData7.readDiffFrom(streamInput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertNotNull(indexMetaData7);
    }

    @Test
    public void test08647() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08647");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForReads((long) 1);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str9 = versionType1.explainConflictForReads(0L, (long) (byte) 1);
        boolean boolean11 = versionType1.validateVersionForWrites((long) (byte) 1);
        java.lang.String str14 = versionType1.explainConflictForReads(13L, (long) (byte) -1);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType15 = org.elasticsearch.index.VersionType.fromString("current version [100] is different than the one provided [-1]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [100] is different than the one provided [-1]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str9, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [13] is different than the one provided [-1]" + "'", str14, "current version [13] is different than the one provided [-1]");
    }

    @Test
    public void test08648() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08648");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        int int11 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.index.Index index18 = indexMetaData16.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData16.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long21 = indexMetaData16.getCreationDate();
        int int22 = indexMetaData16.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long27 = indexMetaData24.getVersion();
        java.util.Set<java.lang.String> strSet29 = null; // flaky: indexMetaData24.activeAllocationIds((-1));
        org.elasticsearch.Version version30 = indexMetaData24.getUpgradedVersion();
        org.elasticsearch.Version version31 = indexMetaData24.getUpgradedVersion();
        boolean boolean33 = indexMetaData24.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData16.diff(indexMetaData24);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData5.diff(indexMetaData24);
        long long36 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData5.excludeFilters();
        boolean boolean40 = indexMetaData5.isSameUUID("current version [0] is different than the one provided [0]");
        int int41 = indexMetaData5.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertNull(index18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + true + "'", boolean40 == true);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 0 + "'", int41 == 0);
    }

    @Test
    public void test08649() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08649");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) 3, 11L);
        org.elasticsearch.index.VersionType versionType7 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput8 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType7.writeTo(streamOutput8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [3] is different than the one provided [11]" + "'", str6, "current version [3] is different than the one provided [11]");
        org.junit.Assert.assertNotNull(versionType7);
    }

    @Test
    public void test08650() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08650");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        bulkShardRequest0.primaryTerm((long) '#');
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest0.remoteAddress();
        long long9 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest0.shardId();
        long long11 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest0.indicesOptions();
        bulkShardRequest0.seqNo(100L);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest0.consistencyLevel();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNull(shardId10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 35L + "'", long11 == 35L);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test08651() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08651");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.index.Index index10 = indexMetaData4.getMergeSourceIndex();
        int int11 = indexMetaData4.getTotalNumberOfShards();
        int int12 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData4.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test08652() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08652");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest3.setShardId(shardId4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest5.setShardId(shardId8);
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.setShardId(shardId10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest9.setShardId(shardId12);
        bulkShardRequest13.seqNo((long) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
    }

    @Test
    public void test08653() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08653");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.setShardId(shardId4);
        bulkShardRequest2.seqNo(0L);
        boolean boolean8 = bulkShardRequest2.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest2.validate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.blocks.read", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version(0L);
        int int18 = builder15.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.putCustom("index.blocks.read", custom23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder21.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder21.creationDate((long) ' ');
        java.lang.String[] strArray46 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet47 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean48 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet47, strArray46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder21.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder15.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel53 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest51.consistencyLevel(writeConsistencyLevel53);
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.transport.TransportMessage> strSetTuple55 = org.elasticsearch.common.collect.Tuple.tuple(strSet47, (org.elasticsearch.transport.TransportMessage) bulkShardRequest54);
        org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, java.util.HashSet<java.lang.String>> runtimeExceptionTuple56 = new org.elasticsearch.common.collect.Tuple<java.lang.RuntimeException, java.util.HashSet<java.lang.String>>((java.lang.RuntimeException) actionRequestValidationException9, (java.util.HashSet<java.lang.String>) strSet47);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure58 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [1] is different than the one provided [53]", (java.lang.Throwable) actionRequestValidationException9, "index.version.created_string");
        java.lang.String str59 = shardFailure58.indexUUID;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting60 = shardFailure58.routing;
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + (-1) + "'", int18 == (-1));
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strArray46);
        org.junit.Assert.assertTrue("'" + boolean48 + "' != '" + true + "'", boolean48 == true);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(strSetTuple55);
        org.junit.Assert.assertEquals("'" + str59 + "' != '" + "index.version.created_string" + "'", str59, "index.version.created_string");
        org.junit.Assert.assertNull(shardRouting60);
    }

    @Test
    public void test08654() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08654");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest3.remoteAddress(transportAddress4);
        bulkShardRequest3.seqNo((long) 97);
        org.elasticsearch.common.unit.TimeValue timeValue8 = bulkShardRequest3.timeout();
        bulkShardRequest3.primaryTerm(0L);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest3.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest3.index("current version [36] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest19.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long26 = bulkShardRequest25.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple27 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest24, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest25);
        long long28 = bulkShardRequest25.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest25.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long31 = bulkShardRequest30.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions32 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.index.shard.ShardId shardId37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest15.setShardId(shardId37);
        org.elasticsearch.common.transport.TransportAddress transportAddress39 = bulkShardRequest15.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue40 = bulkShardRequest15.timeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(transportAddress11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions32);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNull(transportAddress39);
        org.junit.Assert.assertNotNull(timeValue40);
    }

    @Test
    public void test08655() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08655");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest3.setShardId(shardId4);
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest7.shardId();
        org.elasticsearch.common.unit.TimeValue timeValue9 = bulkShardRequest7.timeout();
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest7.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(shardId8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(taskId10);
    }

    @Test
    public void test08656() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08656");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [33] is different than the one provided [53]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [33] is different than the one provided [53]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08657() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08657");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple7 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest4, versionType5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = null;
        bulkShardRequest4.remoteAddress(transportAddress9);
        long long11 = bulkShardRequest4.seqNo();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray12 = bulkShardRequest4.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple7);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test08658() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08658");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("");
        boolean boolean8 = indexMetaData0.isSameUUID("index.auto_expand_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long10 = indexMetaData0.getVersion();
        boolean boolean12 = indexMetaData0.isSameUUID("current version [35] is higher or equal to the one provided [100]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
    }

    @Test
    public void test08659() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08659");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
    }

    @Test
    public void test08660() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08660");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        boolean boolean13 = versionType0.isVersionConflictForReads((long) (-1), 101L);
        org.elasticsearch.index.VersionType versionType14 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean16 = versionType14.validateVersionForReads((long) 2);
        boolean boolean18 = versionType14.validateVersionForWrites((long) (short) 10);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test08661() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08661");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.Version version7 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData4.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test08662() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08662");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        int int11 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.index.Index index18 = indexMetaData16.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData16.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long21 = indexMetaData16.getCreationDate();
        int int22 = indexMetaData16.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long27 = indexMetaData24.getVersion();
        java.util.Set<java.lang.String> strSet29 = null; // flaky: indexMetaData24.activeAllocationIds((-1));
        org.elasticsearch.Version version30 = indexMetaData24.getUpgradedVersion();
        org.elasticsearch.Version version31 = indexMetaData24.getUpgradedVersion();
        boolean boolean33 = indexMetaData24.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData16.diff(indexMetaData24);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData5.diff(indexMetaData24);
        long long36 = indexMetaData5.getVersion();
        java.util.Set<java.lang.String> strSet38 = null; // flaky: indexMetaData5.activeAllocationIds((int) (byte) -1);
        org.elasticsearch.common.io.stream.StreamInput streamInput39 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = indexMetaData5.readFrom(streamInput39);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertNull(index18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 1 + "'", int22 == 1);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 1L + "'", long27 == 1L);
        org.junit.Assert.assertNull(strSet29);
        org.junit.Assert.assertNotNull(version30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
        org.junit.Assert.assertNull(strSet38);
    }

    @Test
    public void test08663() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08663");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        long long4 = indexMetaData0.getVersion();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("");
        long long9 = indexMetaData6.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap10 = indexMetaData6.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData6.includeFilters();
        boolean boolean13 = indexMetaData6.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData15);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap19 = indexMetaData15.getMappings();
        int int20 = indexMetaData15.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData15.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("index.blocks.read", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version(0L);
        boolean boolean30 = indexMetaData15.equals((java.lang.Object) builder27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.primaryTerm();
        bulkShardRequest32.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest32.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest38 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.action.ActionRequest actionRequest39 = bulkItemRequest38.request();
        org.elasticsearch.tasks.TaskId taskId40 = actionRequest39.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long44 = bulkShardRequest43.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions45 = bulkShardRequest43.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException46 = bulkShardRequest43.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure48 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting41, "primary_terms", (java.lang.Throwable) actionRequestValidationException46, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple49 = org.elasticsearch.common.collect.Tuple.tuple(taskId40, (java.lang.IllegalArgumentException) actionRequestValidationException46);
        boolean boolean50 = indexMetaData15.equals((java.lang.Object) taskId40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.seqNo();
        org.elasticsearch.index.shard.ShardId shardId53 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest51.setShardId(shardId53);
        boolean boolean55 = indexMetaData15.equals((java.lang.Object) bulkShardRequest54);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff56 = indexMetaData6.diff(indexMetaData15);
        long long57 = indexMetaData15.getCreationDate();
        boolean boolean58 = indexMetaData0.equals((java.lang.Object) indexMetaData15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state59 = indexMetaData15.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData61 = indexMetaData15.mappingOrDefault("current version [32] is different than the one provided [2]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + 0 + "'", int20 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(actionRequest39);
        org.junit.Assert.assertNotNull(taskId40);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions45);
        org.junit.Assert.assertNotNull(actionRequestValidationException46);
        org.junit.Assert.assertNotNull(taskIdTuple49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + false + "'", boolean55 == false);
        org.junit.Assert.assertNotNull(indexMetaDataDiff56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + (-1L) + "'", long57 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + true + "'", boolean58 == true);
        org.junit.Assert.assertTrue("'" + state59 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state59.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData61);
    }

    @Test
    public void test08664() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08664");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [35] is different than the one provided [52]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("current version [4] is different than the one provided [2]");
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNull(mappingMetaData3);
    }

    @Test
    public void test08665() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08665");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
    }

    @Test
    public void test08666() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08666");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters11);
    }

    @Test
    public void test08667() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08667");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [10] is different than the one provided [32]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [10] is different than the one provided [32]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08668() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08668");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.index("indices:data/write/bulk[s]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = builder7.mapping("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("");
        long long16 = indexMetaData13.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap17 = indexMetaData13.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData13.includeFilters();
        int int19 = indexMetaData13.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData13.getState();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData13.mapping("current version [35] is different than the one provided [35]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap23 = indexMetaData13.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData13.includeFilters();
        java.util.Set<java.lang.String> strSet26 = indexMetaData13.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder7.putActiveAllocationIds((int) (byte) 1, strSet26);
        int int28 = builder7.numberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 1 + "'", int19 == 1);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(strSet26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 1 + "'", int28 == 1);
    }

    @Test
    public void test08669() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08669");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        bulkShardRequest3.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest3.timeout(timeValue7);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.action.ActionRequest actionRequest10 = bulkItemRequest9.request();
        org.elasticsearch.tasks.TaskId taskId11 = actionRequest10.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest14.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure19 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting12, "primary_terms", (java.lang.Throwable) actionRequestValidationException17, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple20 = org.elasticsearch.common.collect.Tuple.tuple(taskId11, (java.lang.IllegalArgumentException) actionRequestValidationException17);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure22 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException17, "index.creation_date_string");
        java.lang.String str23 = shardFailure22.reason;
        java.lang.String str24 = shardFailure22.reason;
        java.lang.Throwable throwable25 = shardFailure22.cause;
        java.lang.String str26 = shardFailure22.reason;
        java.lang.String str27 = shardFailure22.reason;
        java.lang.Throwable throwable28 = shardFailure22.cause;
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(actionRequest10);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(taskIdTuple20);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str23, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str24, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(throwable25);
        org.junit.Assert.assertEquals(throwable25.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable25.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable25.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str26, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str27, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(throwable28);
        org.junit.Assert.assertEquals(throwable28.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable28.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable28.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test08670() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08670");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        java.lang.String str4 = bulkShardRequest0.index();
        org.elasticsearch.common.unit.TimeValue timeValue5 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        long long7 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = null;
        bulkShardRequest6.remoteAddress(transportAddress8);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 10L + "'", long7 == 10L);
    }

    @Test
    public void test08671() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08671");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.numberOfShards((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.putCustom("current version [10] is different than the one provided [0]", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.numberOfReplicas((int) '4');
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08672() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08672");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test08673() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08673");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.creationDate(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder3.build();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData8.requireFilters();
        org.elasticsearch.index.Index index10 = indexMetaData8.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test08674() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08674");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long6 = bulkShardRequest5.primaryTerm();
        bulkShardRequest5.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest5.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest10);
        org.elasticsearch.action.ActionRequest actionRequest12 = bulkItemRequest11.request();
        org.elasticsearch.tasks.TaskId taskId13 = actionRequest12.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest16.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure21 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting14, "primary_terms", (java.lang.Throwable) actionRequestValidationException19, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple22 = org.elasticsearch.common.collect.Tuple.tuple(taskId13, (java.lang.IllegalArgumentException) actionRequestValidationException19);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure24 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException19, "index.creation_date_string");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting25 = shardFailure24.routing;
        java.lang.Throwable throwable26 = shardFailure24.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure28 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.minimum_compatible", throwable26, "current version [0] is different than the one provided [3]");
        java.lang.String str29 = shardFailure28.reason;
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(actionRequest12);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(taskIdTuple22);
        org.junit.Assert.assertNull(shardRouting25);
        org.junit.Assert.assertNotNull(throwable26);
        org.junit.Assert.assertEquals(throwable26.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable26.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable26.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "index.version.minimum_compatible" + "'", str29, "index.version.minimum_compatible");
    }

    @Test
    public void test08675() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08675");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest3.setShardId(shardId4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap10 = indexMetaData6.getMappings();
        int int11 = indexMetaData6.getNumberOfReplicas();
        org.apache.lucene.util.Version version12 = indexMetaData6.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap13 = indexMetaData6.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting14 = null;
        java.lang.Throwable throwable16 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure18 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting14, "index.shared_filesystem", throwable16, "index.shared_filesystem");
        java.lang.String str19 = shardFailure18.reason;
        java.lang.String str20 = shardFailure18.indexUUID;
        java.lang.String str21 = shardFailure18.reason;
        java.lang.String str22 = shardFailure18.reason;
        java.lang.String str23 = shardFailure18.indexUUID;
        boolean boolean24 = indexMetaData6.equals((java.lang.Object) shardFailure18);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.shard.IndexShard.ShardFailure> bulkShardRequestTuple25 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest3, shardFailure18);
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest3.index("current version [52] is higher or equal to the one provided [11]");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(strImmutableOpenMap10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap13);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.shared_filesystem" + "'", str19, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.shared_filesystem" + "'", str20, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index.shared_filesystem" + "'", str21, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "index.shared_filesystem" + "'", str22, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "index.shared_filesystem" + "'", str23, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple25);
        org.junit.Assert.assertNull(transportAddress26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
    }

    @Test
    public void test08676() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08676");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple7 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest4, versionType5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        bulkShardRequest9.primaryTerm((long) 10);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkItemRequest, org.elasticsearch.transport.TransportRequest> bulkItemRequestTuple13 = org.elasticsearch.common.collect.Tuple.tuple(bulkItemRequest8, (org.elasticsearch.transport.TransportRequest) bulkShardRequest9);
        int int14 = bulkItemRequest8.id();
        int int15 = bulkItemRequest8.id();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str16 = bulkItemRequest8.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkItemRequestTuple13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08677() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08677");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        org.elasticsearch.Version version18 = indexMetaData14.getUpgradedVersion();
        int int19 = indexMetaData14.getNumberOfReplicas();
        org.apache.lucene.util.Version version20 = indexMetaData14.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData23.diff(indexMetaData27);
        org.elasticsearch.index.Index index29 = indexMetaData27.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData27.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long32 = indexMetaData27.getCreationDate();
        int int33 = indexMetaData27.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap34 = indexMetaData27.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap35 = indexMetaData27.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff36 = indexMetaData14.diff(indexMetaData27);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData37 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData39 = indexMetaData37.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData37);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff42 = indexMetaData37.diff(indexMetaData41);
        org.elasticsearch.index.Index index43 = indexMetaData41.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData41.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap46 = indexMetaData41.getMappings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff47 = indexMetaData27.diff(indexMetaData41);
        org.elasticsearch.common.settings.Settings settings48 = indexMetaData27.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput49 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData27.writeTo(streamOutput49);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNull(index29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + (-1L) + "'", long32 == (-1L));
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertNotNull(indexMetaDataDiff36);
        org.junit.Assert.assertNotNull(indexMetaData37);
        org.junit.Assert.assertNull(mappingMetaData39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNotNull(indexMetaDataDiff42);
        org.junit.Assert.assertNull(index43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertNotNull(strImmutableOpenMap46);
        org.junit.Assert.assertNotNull(indexMetaDataDiff47);
        org.junit.Assert.assertNotNull(settings48);
    }

    @Test
    public void test08678() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08678");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        boolean boolean5 = versionType0.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str8 = versionType0.explainConflictForReads(0L, (long) (byte) 1);
        org.elasticsearch.index.VersionType versionType9 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean11 = versionType9.validateVersionForReads(0L);
        java.lang.String str14 = versionType9.explainConflictForReads((long) 10, (long) 'a');
        java.lang.String str17 = versionType9.explainConflictForReads((long) 1, (long) (byte) 0);
        byte byte18 = versionType9.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str8, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [10] is different than the one provided [97]" + "'", str14, "current version [10] is different than the one provided [97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [1] is different than the one provided [0]" + "'", str17, "current version [1] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + byte18 + "' != '" + (byte) 1 + "'", byte18 == (byte) 1);
    }

    @Test
    public void test08679() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08679");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_shards");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.primaryTerm();
        bulkShardRequest11.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        org.elasticsearch.action.ActionRequest actionRequest18 = bulkItemRequest17.request();
        org.elasticsearch.tasks.TaskId taskId19 = actionRequest18.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions24 = bulkShardRequest22.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException25 = bulkShardRequest22.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure27 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting20, "primary_terms", (java.lang.Throwable) actionRequestValidationException25, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple28 = org.elasticsearch.common.collect.Tuple.tuple(taskId19, (java.lang.IllegalArgumentException) actionRequestValidationException25);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure30 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException25, "index.creation_date_string");
        java.lang.String str31 = shardFailure30.reason;
        boolean boolean32 = indexMetaData0.equals((java.lang.Object) shardFailure30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData0.mappingOrDefault("current version [35] is different than the one provided [35]");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData0.getState();
        org.elasticsearch.common.io.stream.StreamInput streamInput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = indexMetaData0.readFrom(streamInput37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(actionRequest18);
        org.junit.Assert.assertNotNull(taskId19);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions24);
        org.junit.Assert.assertNotNull(actionRequestValidationException25);
        org.junit.Assert.assertNotNull(taskIdTuple28);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str31, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test08680() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08680");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [34] is different than the one provided [35]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08681() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08681");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        boolean boolean7 = indexMetaData0.isSameUUID("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        org.elasticsearch.Version version12 = indexMetaData8.getUpgradedVersion();
        int int13 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap14 = indexMetaData8.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData8.getInitialRecoveryFilters();
        boolean boolean16 = indexMetaData0.equals((java.lang.Object) discoveryNodeFilters15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = builder17.mapping("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder17.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom23 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder21.putCustom("index.number_of_replicas", custom23);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData25 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.putAlias(aliasMetaData25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder24);
    }

    @Test
    public void test08682() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08682");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest0.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.index.VersionType versionType13 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType14 = versionType13.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple15 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest12, versionType13);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest16 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.seqNo();
        long long19 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest20.getParentTask();
        bulkShardRequest17.setParentTask(taskId21);
        bulkShardRequest12.setParentTask(taskId21);
        bulkShardRequest0.setParentTask(taskId21);
        org.elasticsearch.common.io.stream.StreamInput streamInput25 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.readFrom(streamInput25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(versionType13);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple15);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(taskId21);
    }

    @Test
    public void test08683() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08683");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        long long5 = indexMetaData0.getCreationDate();
        // The following exception was thrown during execution in test generation
        try {
            long long7 = indexMetaData0.primaryTerm(2);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 2");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
    }

    @Test
    public void test08684() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08684");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        int int4 = indexMetaData0.getNumberOfReplicas();
        int int5 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings6 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int8 = builder7.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(settings6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
    }

    @Test
    public void test08685() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08685");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        byte byte11 = versionType0.getValue();
        long long14 = versionType0.updateVersion((long) '#', 100L);
        boolean boolean18 = versionType0.isVersionConflictForWrites((long) (-1), (long) '#', true);
        byte byte19 = versionType0.getValue();
        boolean boolean22 = versionType0.isVersionConflictForReads(0L, 11L);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput23 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput23);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 36L + "'", long14 == 36L);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + byte19 + "' != '" + (byte) 0 + "'", byte19 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
    }

    @Test
    public void test08686() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08686");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.index("current version [0] is different than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str15 = builder14.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version((long) (byte) -1);
        int int20 = builder19.numberOfShards();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest22.index("current version [-1] is different than the one provided [0]");
        long long26 = bulkShardRequest25.primaryTerm();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.putCustom("index.blocks.read", custom30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder28.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder28.creationDate((long) ' ');
        java.lang.String[] strArray53 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet54 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean55 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet54, strArray53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder28.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, java.util.AbstractSet<java.lang.String>> streamableTuple57 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest25, (java.util.AbstractSet<java.lang.String>) strSet54);
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, java.lang.String> strSetTuple59 = org.elasticsearch.common.collect.Tuple.tuple(strSet54, "index.priority");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder19.putActiveAllocationIds((int) (byte) 100, (java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder8.putActiveAllocationIds((int) '#', (java.util.Set<java.lang.String>) strSet54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder61.removeAllAliases();
        long long63 = builder62.version();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.version.minimum_compatible" + "'", str15, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + int20 + "' != '" + (-1) + "'", int20 == (-1));
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strArray53);
        org.junit.Assert.assertTrue("'" + boolean55 + "' != '" + true + "'", boolean55 == true);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(streamableTuple57);
        org.junit.Assert.assertNotNull(strSetTuple59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 1L + "'", long63 == 1L);
    }

    @Test
    public void test08687() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08687");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData4.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version11 = indexMetaData4.getCreationVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData4.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("");
        long long16 = indexMetaData13.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData13.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap18 = indexMetaData13.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        boolean boolean27 = indexMetaData19.equals((java.lang.Object) state26);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap28 = indexMetaData19.getCustoms();
        int int29 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff30 = indexMetaData13.diff(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData19);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap32 = indexMetaData19.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap33 = indexMetaData19.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap34 = indexMetaData19.getMappings();
        boolean boolean35 = indexMetaData4.equals((java.lang.Object) strImmutableOpenMap34);
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder36 = null;
        java.util.AbstractCollection<java.lang.String> strCollection37 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params38 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple39 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection37, params38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData40 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData42 = indexMetaData40.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff45 = indexMetaData40.diff(indexMetaData44);
        org.elasticsearch.index.Index index46 = indexMetaData44.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData44.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index49 = indexMetaData44.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings52 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.settings(settings52);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData54 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData54.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long57 = indexMetaData54.getVersion();
        org.elasticsearch.common.settings.Settings settings58 = indexMetaData54.getSettings();
        org.elasticsearch.common.settings.Settings settings59 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder53.settings(settings58);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData61 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData63 = indexMetaData61.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData61);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData65.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state68 = indexMetaData65.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData71 = indexMetaData69.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData69.getState();
        boolean boolean73 = indexMetaData65.equals((java.lang.Object) state72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder64.state(state72);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder53.state(state72);
        boolean boolean76 = indexMetaData44.equals((java.lang.Object) builder53);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state77 = indexMetaData44.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap78 = indexMetaData44.getMappings();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.Iterable<com.carrotsearch.hppc.cursors.ObjectObjectCursor<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>> paramsTuple79 = org.elasticsearch.common.collect.Tuple.tuple(params38, (java.lang.Iterable<com.carrotsearch.hppc.cursors.ObjectObjectCursor<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>) strImmutableOpenMap78);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder80 = indexMetaData4.toXContent(xContentBuilder36, params38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap18);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 1 + "'", int29 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff30);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(params38);
        org.junit.Assert.assertNotNull(indexMetaData40);
        org.junit.Assert.assertNull(mappingMetaData42);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNotNull(indexMetaDataDiff45);
        org.junit.Assert.assertNull(index46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNull(index49);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(indexMetaData54);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 1L + "'", long57 == 1L);
        org.junit.Assert.assertNotNull(settings58);
        org.junit.Assert.assertNotNull(settings59);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(indexMetaData61);
        org.junit.Assert.assertNull(mappingMetaData63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertTrue("'" + state68 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state68.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(mappingMetaData71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean73 + "' != '" + false + "'", boolean73 == false);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertTrue("'" + state77 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state77.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap78);
        org.junit.Assert.assertNotNull(paramsTuple79);
    }

    @Test
    public void test08688() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08688");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(settings16);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.transport.TransportService transportService23 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService24 = null;
        org.elasticsearch.indices.IndicesService indicesService25 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool26 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction27 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction28 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper29 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters30 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction32 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings21, transportService23, clusterService24, indicesService25, threadPool26, shardStateAction27, mappingUpdatedAction28, updateHelper29, actionFilters30, indexNameExpressionResolver31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test08689() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08689");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.version.upgraded", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08690() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08690");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        long long9 = bulkShardRequest5.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest5.validate();
        boolean boolean11 = bulkShardRequest5.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest5.validate();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest5.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
    }

    @Test
    public void test08691() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08691");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas((int) (short) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData12.getState();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder9.settings(settings16);
        java.lang.String str18 = builder17.index();
        long long19 = builder17.version();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "index.version.minimum_compatible" + "'", str18, "index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test08692() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08692");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean4 = versionType1.isVersionConflictForReads((long) 0, 1L);
        boolean boolean6 = versionType1.validateVersionForWrites(3L);
        byte byte7 = versionType1.getValue();
        byte byte8 = versionType1.getValue();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType9 = org.elasticsearch.index.VersionType.fromString("current version [-1] is different than the one provided [10]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [-1] is different than the one provided [10]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + byte7 + "' != '" + (byte) 0 + "'", byte7 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte8 + "' != '" + (byte) 0 + "'", byte8 == (byte) 0);
    }

    @Test
    public void test08693() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08693");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        java.lang.String str14 = indexMetaData10.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData10);
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData10.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder9.settings(settings17);
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings17);
        org.elasticsearch.common.settings.Settings settings21 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings21);
        org.elasticsearch.transport.TransportService transportService23 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService24 = null;
        org.elasticsearch.indices.IndicesService indicesService25 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool26 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction27 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction28 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper29 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters30 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction32 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings22, transportService23, clusterService24, indicesService25, threadPool26, shardStateAction27, mappingUpdatedAction28, updateHelper29, actionFilters30, indexNameExpressionResolver31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test08694() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08694");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean12 = indexMetaData4.equals((java.lang.Object) state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder3.creationDate((long) (byte) 2);
        int int16 = builder15.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 0 + "'", int16 == 0);
    }

    @Test
    public void test08695() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08695");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.Version version6 = indexMetaData0.getUpgradedVersion();
        int int7 = indexMetaData0.getTotalNumberOfShards();
        boolean boolean9 = indexMetaData0.isSameUUID("current version [101] is different than the one provided [32]");
        boolean boolean11 = indexMetaData0.isSameUUID("current version [52] is different than the one provided [0]");
        org.elasticsearch.common.xcontent.XContentParser xContentParser12 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = indexMetaData0.fromXContent(xContentParser12, parseFieldMatcher13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
    }

    @Test
    public void test08696() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08696");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.primaryTerm();
        bulkShardRequest6.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest6.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData12.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple16 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest11, state15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.primaryTerm();
        bulkShardRequest18.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest18.timeout(timeValue22);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest24 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest23);
        org.elasticsearch.action.ActionRequest actionRequest25 = bulkItemRequest24.request();
        org.elasticsearch.tasks.TaskId taskId26 = actionRequest25.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long30 = bulkShardRequest29.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest29.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest29.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure34 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting27, "primary_terms", (java.lang.Throwable) actionRequestValidationException32, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple35 = org.elasticsearch.common.collect.Tuple.tuple(taskId26, (java.lang.IllegalArgumentException) actionRequestValidationException32);
        bulkShardRequest11.setParentTask(taskId26);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException37 = bulkShardRequest11.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest11.index("current version [3] is different than the one provided [10]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long44 = bulkShardRequest43.primaryTerm();
        bulkShardRequest43.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue47 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest43.timeout(timeValue47);
        org.elasticsearch.index.shard.ShardId shardId49 = bulkShardRequest48.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress50 = null;
        bulkShardRequest48.remoteAddress(transportAddress50);
        long long52 = bulkShardRequest48.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException53 = bulkShardRequest48.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long55 = bulkShardRequest54.seqNo();
        long long56 = bulkShardRequest54.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId58 = bulkShardRequest57.getParentTask();
        bulkShardRequest54.setParentTask(taskId58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest54.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException62 = bulkShardRequest61.validate();
        org.elasticsearch.common.unit.TimeValue timeValue63 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest61.timeout(timeValue63);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest65 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long66 = bulkShardRequest65.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest65.index("current version [-1] is different than the one provided [0]");
        long long69 = bulkShardRequest68.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue70 = bulkShardRequest68.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest71 = bulkShardRequest64.timeout(timeValue70);
        org.elasticsearch.common.unit.TimeValue timeValue72 = bulkShardRequest71.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest73 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long74 = bulkShardRequest73.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel75 = bulkShardRequest73.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress76 = null;
        bulkShardRequest73.remoteAddress(transportAddress76);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest79 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long80 = bulkShardRequest79.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel81 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest82 = bulkShardRequest79.consistencyLevel(writeConsistencyLevel81);
        org.elasticsearch.index.VersionType versionType83 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType84 = versionType83.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple85 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest82, versionType83);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest86 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest82);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest87 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long88 = bulkShardRequest87.seqNo();
        long long89 = bulkShardRequest87.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest90 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId91 = bulkShardRequest90.getParentTask();
        bulkShardRequest87.setParentTask(taskId91);
        bulkShardRequest82.setParentTask(taskId91);
        bulkShardRequest73.setParentTask(taskId91);
        bulkShardRequest71.setParentTask(taskId91);
        bulkShardRequest48.setParentTask(taskId91);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.tasks.Task task97 = bulkShardRequest11.createTask((long) (byte) -1, "current version [4] is different than the one provided [97]", "index.version.created_string", taskId91);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertNotNull(actionRequest25);
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions31);
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertNotNull(taskIdTuple35);
        org.junit.Assert.assertNull(actionRequestValidationException37);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNull(shardId49);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 10L + "'", long52 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException53);
        org.junit.Assert.assertTrue("'" + long55 + "' != '" + 0L + "'", long55 == 0L);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(taskId58);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertNull(actionRequestValidationException62);
        org.junit.Assert.assertNotNull(timeValue63);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertTrue("'" + long66 + "' != '" + 0L + "'", long66 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertTrue("'" + long69 + "' != '" + 0L + "'", long69 == 0L);
        org.junit.Assert.assertNotNull(timeValue70);
        org.junit.Assert.assertNotNull(bulkShardRequest71);
        org.junit.Assert.assertNotNull(timeValue72);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel75 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel75.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long80 + "' != '" + 0L + "'", long80 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest82);
        org.junit.Assert.assertNotNull(versionType83);
        org.junit.Assert.assertNotNull(versionType84);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple85);
        org.junit.Assert.assertTrue("'" + long88 + "' != '" + 0L + "'", long88 == 0L);
        org.junit.Assert.assertTrue("'" + long89 + "' != '" + 0L + "'", long89 == 0L);
        org.junit.Assert.assertNotNull(taskId91);
    }

    @Test
    public void test08697() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08697");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(settings16);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        boolean boolean22 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
    }

    @Test
    public void test08698() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08698");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple9 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest6, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest7);
        boolean boolean10 = bulkShardRequest7.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest7.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        org.elasticsearch.action.ActionRequest actionRequest13 = bulkItemRequest12.request();
        int int14 = bulkItemRequest12.id();
        int int15 = bulkItemRequest12.id();
        org.elasticsearch.common.io.stream.StreamInput streamInput16 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest12.readFrom(streamInput16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + false + "'", boolean10 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException11);
        org.junit.Assert.assertNotNull(actionRequest13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
    }

    @Test
    public void test08699() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08699");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.creationDate(37L);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08700() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08700");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str3 = builder2.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder2.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder2.numberOfShards((int) 'a');
        int int8 = builder2.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.settings(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long16 = indexMetaData13.getVersion();
        org.elasticsearch.common.settings.Settings settings17 = indexMetaData13.getSettings();
        org.elasticsearch.common.settings.Settings settings18 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder12.settings(settings17);
        boolean boolean20 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder2.settings(settings17);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple22 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting0, builder2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom24 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder2.putCustom("current version [32] is different than the one provided [11]", custom24);
        java.lang.String str26 = builder25.index();
        org.junit.Assert.assertEquals("'" + str3 + "' != '" + "index.version.minimum_compatible" + "'", str3, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 97 + "'", int8 == 97);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 1L + "'", long16 == 1L);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index.version.minimum_compatible" + "'", str26, "index.version.minimum_compatible");
    }

    @Test
    public void test08701() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08701");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest3.getParentTask();
        bulkShardRequest0.setParentTask(taskId4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("hi!");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.index("index.version.minimum_compatible");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest10.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest10.validate();
        org.elasticsearch.common.unit.TimeValue timeValue14 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest10.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest16.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple24 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest21, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest22);
        org.elasticsearch.tasks.TaskId taskId25 = bulkShardRequest22.getParentTask();
        bulkShardRequest15.setParentTask(taskId25);
        bulkShardRequest0.setParentTask(taskId25);
        bulkShardRequest0.seqNo((long) (short) 1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long31 = bulkShardRequest30.seqNo();
        org.elasticsearch.index.shard.ShardId shardId32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest30.setShardId(shardId32);
        bulkShardRequest30.seqNo(0L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException36 = bulkShardRequest30.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.primaryTerm();
        bulkShardRequest37.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest37.timeout(timeValue41);
        org.elasticsearch.index.shard.ShardId shardId43 = bulkShardRequest42.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest42.remoteAddress(transportAddress44);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long47 = bulkShardRequest46.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest46.index("current version [-1] is different than the one provided [0]");
        long long50 = bulkShardRequest49.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel51 = bulkShardRequest49.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest42.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel51);
        org.elasticsearch.index.shard.ShardId shardId55 = bulkShardRequest54.shardId();
        long long56 = bulkShardRequest54.primaryTerm();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(taskId4);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertNotNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(timeValue14);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(taskId25);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(actionRequestValidationException36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNull(shardId43);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel51 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel51.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNull(shardId55);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
    }

    @Test
    public void test08702() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08702");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest3.getParentTask();
        bulkShardRequest0.setParentTask(taskId4);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest0.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.primaryTerm();
        bulkShardRequest9.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest9.timeout(timeValue13);
        org.elasticsearch.index.shard.ShardId shardId15 = bulkShardRequest14.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest14.remoteAddress(transportAddress16);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.index("current version [-1] is different than the one provided [0]");
        long long22 = bulkShardRequest21.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel23 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel23);
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest0.setShardId(shardId27);
        org.elasticsearch.index.shard.ShardId shardId29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest0.setShardId(shardId29);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest0.index("index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(taskId4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNull(shardId15);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel23 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel23.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(transportAddress26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest30);
        org.junit.Assert.assertNotNull(bulkShardRequest32);
    }

    @Test
    public void test08703() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08703");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest5, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest6);
        long long9 = bulkShardRequest6.primaryTerm();
        bulkShardRequest6.primaryTerm((long) ' ');
        long long12 = bulkShardRequest6.seqNo();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest6.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(taskId13);
    }

    @Test
    public void test08704() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08704");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = builder3.index();
        int int5 = builder3.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom7 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder3.putCustom("_na_", custom7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder3.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = builder10.mapping("current version [10] is different than the one provided [100]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.numberOfShards(1);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "" + "'", str4, "");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder14);
    }

    @Test
    public void test08705() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08705");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads(101L, 1L);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean7 = versionType0.isVersionConflictForReads((long) ' ', (long) '#');
        long long10 = versionType0.updateVersion((long) (byte) -1, 52L);
        byte byte11 = versionType0.getValue();
        java.lang.String str14 = versionType0.explainConflictForReads((long) 32, (long) (byte) 0);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 52L + "'", long10 == 52L);
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 1 + "'", byte11 == (byte) 1);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [32] is different than the one provided [0]" + "'", str14, "current version [32] is different than the one provided [0]");
    }

    @Test
    public void test08706() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08706");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData5.mapping("hi!");
        int int10 = indexMetaData5.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData5.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData5);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("index.blocks.read", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder18.creationDate((long) ' ');
        java.lang.String[] strArray43 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet44 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean45 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet44, strArray43);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder18.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder15.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData48);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder51.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder51.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData56 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData58 = indexMetaData56.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData56);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = indexMetaData60.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state63 = indexMetaData60.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData64.getState();
        boolean boolean68 = indexMetaData60.equals((java.lang.Object) state67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder69 = builder59.state(state67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder70 = builder51.state(state67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder71 = builder47.state(state67);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder72 = builder4.state(state67);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData73.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder76 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData73);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData77 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff78 = indexMetaData73.diff(indexMetaData77);
        org.elasticsearch.index.Index index79 = indexMetaData77.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData81 = indexMetaData77.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index82 = indexMetaData77.getMergeSourceIndex();
        org.elasticsearch.index.Index index83 = indexMetaData77.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap84 = indexMetaData77.getMappings();
        org.elasticsearch.common.settings.Settings settings85 = indexMetaData77.getSettings();
        boolean boolean86 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder4.settings(settings85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder87.creationDate(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData90 = builder87.build();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap91 = indexMetaData90.getAliases();
        int int92 = indexMetaData90.getNumberOfShards();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(strArray43);
        org.junit.Assert.assertTrue("'" + boolean45 + "' != '" + true + "'", boolean45 == true);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(indexMetaData56);
        org.junit.Assert.assertNull(mappingMetaData58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertNull(mappingMetaData62);
        org.junit.Assert.assertTrue("'" + state63 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state63.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + false + "'", boolean68 == false);
        org.junit.Assert.assertNotNull(builder69);
        org.junit.Assert.assertNotNull(builder70);
        org.junit.Assert.assertNotNull(builder71);
        org.junit.Assert.assertNotNull(builder72);
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertNotNull(builder76);
        org.junit.Assert.assertNotNull(indexMetaData77);
        org.junit.Assert.assertNotNull(indexMetaDataDiff78);
        org.junit.Assert.assertNull(index79);
        org.junit.Assert.assertNull(mappingMetaData81);
        org.junit.Assert.assertNull(index82);
        org.junit.Assert.assertNull(index83);
        org.junit.Assert.assertNotNull(strImmutableOpenMap84);
        org.junit.Assert.assertNotNull(settings85);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + false + "'", boolean86 == false);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(indexMetaData90);
        org.junit.Assert.assertNotNull(strImmutableOpenMap91);
        org.junit.Assert.assertTrue("'" + int92 + "' != '" + 1 + "'", int92 == 1);
    }

    @Test
    public void test08707() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08707");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest11.index("current version [-1] is different than the one provided [0]");
        long long15 = bulkShardRequest14.primaryTerm();
        java.lang.String str16 = bulkShardRequest14.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest14.remoteAddress();
        long long18 = bulkShardRequest14.primaryTerm();
        boolean boolean19 = indexMetaData0.equals((java.lang.Object) long18);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str16, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertNull(transportAddress17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08708() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08708");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean21 = versionType0.isVersionConflictForWrites((long) (short) 0, 101L, true);
        long long24 = versionType0.updateVersion(100L, 101L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean28 = versionType25.isVersionConflictForReads((long) (-1), 0L);
        org.elasticsearch.index.VersionType versionType29 = versionType25.versionTypeForReplicationAndRecovery();
        boolean boolean33 = versionType25.isVersionConflictForWrites((long) (byte) 3, (long) (byte) 3, true);
        org.elasticsearch.common.collect.Tuple<java.lang.Enum<org.elasticsearch.index.VersionType>, java.lang.Comparable<java.lang.String>> versionTypeEnumTuple35 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.Enum<org.elasticsearch.index.VersionType>) versionType25, (java.lang.Comparable<java.lang.String>) "current version [3] is different than the one provided [101]");
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 101L + "'", long24 == 101L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(versionType29);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + true + "'", boolean33 == true);
        org.junit.Assert.assertNotNull(versionTypeEnumTuple35);
    }

    @Test
    public void test08709() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08709");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [-1] is higher or equal to the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mappingOrDefault("");
        long long5 = indexMetaData2.getCreationDate();
        org.apache.lucene.util.Version version6 = indexMetaData2.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData2.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.state(state7);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + (-1L) + "'", long5 == (-1L));
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder8);
    }

    @Test
    public void test08710() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08710");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder3.numberOfReplicas((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfReplicas(1);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        long long15 = indexMetaData12.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap16 = indexMetaData12.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData12.includeFilters();
        int int18 = indexMetaData12.getTotalNumberOfShards();
        org.elasticsearch.common.settings.Settings settings19 = indexMetaData12.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder9.settings(settings19);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings19);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings19);
        org.elasticsearch.transport.TransportService transportService23 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService24 = null;
        org.elasticsearch.indices.IndicesService indicesService25 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool26 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction27 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction28 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper29 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters30 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver31 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction32 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings22, transportService23, clusterService24, indicesService25, threadPool26, shardStateAction27, mappingUpdatedAction28, updateHelper29, actionFilters30, indexNameExpressionResolver31);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 1 + "'", int18 == 1);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
    }

    @Test
    public void test08711() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08711");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest3.getParentTask();
        bulkShardRequest0.setParentTask(taskId4);
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.setShardId(shardId7);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(taskId4);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
    }

    @Test
    public void test08712() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08712");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        boolean boolean9 = indexMetaData0.isSameUUID("index.blocks.read_only");
        boolean boolean11 = indexMetaData0.isSameUUID("indices:data/write/bulk[s]");
        java.util.Set<java.lang.String> strSet13 = null; // flaky: indexMetaData0.activeAllocationIds(2);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNull(strSet13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
    }

    @Test
    public void test08713() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08713");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("");
        int int7 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        long long12 = indexMetaData9.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData9.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap14 = indexMetaData9.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state18 = indexMetaData15.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        boolean boolean23 = indexMetaData15.equals((java.lang.Object) state22);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap24 = indexMetaData15.getCustoms();
        int int25 = indexMetaData15.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData9.diff(indexMetaData15);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData15);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData15.mapping("current version [0] is different than the one provided [1]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff30 = indexMetaData0.diff(indexMetaData15);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData15.getState();
        int int32 = indexMetaData15.getNumberOfShards();
        boolean boolean34 = indexMetaData15.isSameUUID("current version [32] is different than the one provided [10]");
        boolean boolean36 = indexMetaData15.isSameUUID("current version [97] is higher or equal to the one provided [54]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 1 + "'", int7 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap14);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertTrue("'" + state18 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state18.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 1 + "'", int25 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(indexMetaDataDiff30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int32 + "' != '" + 1 + "'", int32 == 1);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
    }

    @Test
    public void test08714() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08714");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        java.lang.String str12 = settingsSettingTuple11.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData13.getMappings();
        int int18 = indexMetaData13.getNumberOfReplicas();
        org.apache.lucene.util.Version version19 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData13.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData13.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData13.mappingOrDefault("index.shared_filesystem");
        int int25 = indexMetaData13.getNumberOfReplicas();
        org.elasticsearch.index.Index index26 = indexMetaData13.getMergeSourceIndex();
        org.elasticsearch.index.Index index27 = indexMetaData13.getMergeSourceIndex();
        org.apache.lucene.util.Version version28 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData13.getMappings();
        boolean boolean30 = settingsSettingTuple11.equals((java.lang.Object) strImmutableOpenMap29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = settingsSettingTuple11.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = settingsSettingTuple11.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = settingsSettingTuple11.v1();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long35 = bulkShardRequest34.primaryTerm();
        bulkShardRequest34.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest34.timeout(timeValue38);
        org.elasticsearch.common.transport.TransportAddress transportAddress40 = null;
        bulkShardRequest34.remoteAddress(transportAddress40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long43 = bulkShardRequest42.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions44 = bulkShardRequest42.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest42.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest34.consistencyLevel(writeConsistencyLevel45);
        boolean boolean47 = settingsSettingTuple11.equals((java.lang.Object) bulkShardRequest34);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long50 = bulkShardRequest49.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = bulkShardRequest49.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest49.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long56 = bulkShardRequest55.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple57 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest54, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest55);
        long long58 = bulkShardRequest55.primaryTerm();
        boolean boolean59 = bulkShardRequest55.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest61 = bulkShardRequest55.index("index.creation_date_string");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest62 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest55);
        long long63 = bulkShardRequest55.seqNo();
        boolean boolean64 = settingsSettingTuple11.equals((java.lang.Object) bulkShardRequest55);
        long long65 = bulkShardRequest55.primaryTerm();
        org.elasticsearch.common.io.stream.StreamInput streamInput66 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest55.readFrom(streamInput66);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(index26);
        org.junit.Assert.assertNull(index27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions44);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest52);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + false + "'", boolean59 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertTrue("'" + boolean64 + "' != '" + false + "'", boolean64 == false);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
    }

    @Test
    public void test08715() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08715");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest6.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel16);
        boolean boolean18 = bulkShardRequest11.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest0.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest22.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest22.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple30 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest27, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest28);
        java.lang.String str31 = bulkShardRequest27.index();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest32 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long34 = bulkShardRequest33.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions37 = bulkShardRequest35.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException38 = bulkShardRequest35.validate();
        org.elasticsearch.common.unit.TimeValue timeValue39 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest35.timeout(timeValue39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest33.timeout(timeValue39);
        org.elasticsearch.common.unit.TimeValue timeValue42 = bulkShardRequest33.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest27.timeout(timeValue42);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest20.timeout(timeValue42);
        long long45 = bulkShardRequest20.seqNo();
        java.lang.String str46 = bulkShardRequest20.index();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str47 = bulkShardRequest20.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertEquals("'" + str31 + "' != '" + "index.version.created" + "'", str31, "index.version.created");
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions37);
        org.junit.Assert.assertNotNull(actionRequestValidationException38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 0L + "'", long45 == 0L);
        org.junit.Assert.assertNull(str46);
    }

    @Test
    public void test08716() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08716");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest0.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue6 = bulkShardRequest0.timeout();
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest0.indicesOptions();
        long long8 = bulkShardRequest0.seqNo();
        boolean boolean9 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId11 = bulkShardRequest10.shardId();
        boolean boolean12 = bulkShardRequest10.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        bulkShardRequest13.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest13.timeout(timeValue17);
        org.elasticsearch.index.shard.ShardId shardId19 = bulkShardRequest18.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress20 = null;
        bulkShardRequest18.remoteAddress(transportAddress20);
        long long22 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException23 = bulkShardRequest18.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest18.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest10.index("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest28.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress31 = null;
        bulkShardRequest28.remoteAddress(transportAddress31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long35 = bulkShardRequest34.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest34.consistencyLevel(writeConsistencyLevel36);
        org.elasticsearch.index.VersionType versionType38 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType39 = versionType38.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple40 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest37, versionType38);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest41 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long43 = bulkShardRequest42.seqNo();
        long long44 = bulkShardRequest42.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId46 = bulkShardRequest45.getParentTask();
        bulkShardRequest42.setParentTask(taskId46);
        bulkShardRequest37.setParentTask(taskId46);
        bulkShardRequest28.setParentTask(taskId46);
        bulkShardRequest27.setParentTask(taskId46);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest51.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest51.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long58 = bulkShardRequest57.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple59 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest56, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest57);
        long long60 = bulkShardRequest57.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue61 = bulkShardRequest57.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest62 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long63 = bulkShardRequest62.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions64 = bulkShardRequest62.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel65 = bulkShardRequest62.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest57.consistencyLevel(writeConsistencyLevel65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest27.consistencyLevel(writeConsistencyLevel65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel65);
        boolean boolean69 = bulkShardRequest0.getShouldPersistResult();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(timeValue6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNull(shardId11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(shardId19);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 10L + "'", long22 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException23);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(versionType38);
        org.junit.Assert.assertNotNull(versionType39);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple40);
        org.junit.Assert.assertTrue("'" + long43 + "' != '" + 0L + "'", long43 == 0L);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(taskId46);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertTrue("'" + long58 + "' != '" + 0L + "'", long58 == 0L);
        org.junit.Assert.assertTrue("'" + long60 + "' != '" + 0L + "'", long60 == 0L);
        org.junit.Assert.assertNotNull(timeValue61);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + 0L + "'", long63 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions64);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel65 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel65.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNotNull(bulkShardRequest67);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertTrue("'" + boolean69 + "' != '" + false + "'", boolean69 == false);
    }

    @Test
    public void test08717() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08717");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("");
        java.lang.String str10 = builder7.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder7.index("current version [52] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        boolean boolean19 = indexMetaData14.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData14.includeFilters();
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData14.getSettings();
        org.elasticsearch.Version version22 = indexMetaData14.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("active_allocations");
        boolean boolean25 = indexMetaData14.equals((java.lang.Object) "active_allocations");
        java.util.Set<java.lang.String> strSet27 = indexMetaData14.activeAllocationIds(0);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple30 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting28, builder29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = settingsSettingTuple30.v1();
        java.lang.String str32 = settingsSettingTuple30.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = settingsSettingTuple30.v1();
        org.elasticsearch.common.collect.Tuple<java.util.Set<java.lang.String>, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>> strSetTuple34 = org.elasticsearch.common.collect.Tuple.tuple(strSet27, settingsSetting33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder7.putActiveAllocationIds((int) '4', strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str39 = builder38.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder38.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder38.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder42.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters47 = indexMetaData46.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet49 = null; // flaky: indexMetaData46.activeAllocationIds((-1));
        java.util.Set<java.lang.String> strSet51 = indexMetaData46.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder44.putActiveAllocationIds((int) (byte) 1, strSet51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder35.putActiveAllocationIds(100, strSet51);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "" + "'", str10, "");
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(version22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(settingsSettingTuple30);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str32, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(strSetTuple34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "index.version.minimum_compatible" + "'", str39, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(discoveryNodeFilters47);
        org.junit.Assert.assertNull(strSet49);
        org.junit.Assert.assertNotNull(strSet51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
    }

    @Test
    public void test08718() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08718");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        byte byte11 = versionType0.getValue();
        org.elasticsearch.index.VersionType versionType12 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean14 = versionType12.validateVersionForReads(11L);
        byte byte15 = versionType12.getValue();
        boolean boolean19 = versionType12.isVersionConflictForWrites((long) 'a', (long) 3, false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 1 + "'", byte15 == (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08719() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08719");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        long long3 = builder1.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.index("current version [-1] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = builder1.mapping("current version [101] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder1.creationDate((long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.numberOfShards((int) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder9.creationDate((long) (byte) 1);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = builder13.mapping("current version [97] is different than the one provided [97]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNull(mappingMetaData15);
    }

    @Test
    public void test08720() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08720");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.index("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder4.creationDate(101L);
        int int12 = builder4.numberOfShards();
        int int13 = builder4.numberOfShards();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting14 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple16 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting14, builder15);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = settingsSettingTuple16.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str20 = builder19.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder19.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting17, builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = settingsSettingTuple25.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting27 = settingsSettingTuple25.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.putCustom("index.blocks.read", custom31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder29.creationDate((long) ' ');
        java.lang.String[] strArray54 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet55 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean56 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet55, strArray54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder29.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet55);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder29.numberOfShards((int) (byte) 10);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple60 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting27, builder59);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData62 = builder59.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder59.removeAlias("current version [-1] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData65 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData67 = indexMetaData65.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData65);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData69 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData71 = indexMetaData69.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state72 = indexMetaData69.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData73 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData75 = indexMetaData73.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state76 = indexMetaData73.getState();
        boolean boolean77 = indexMetaData69.equals((java.lang.Object) state76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder68.state(state76);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder64.state(state76);
        byte byte80 = state76.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder4.state(state76);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData82 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder81.putMapping(mappingMetaData82);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + (-1) + "'", int12 == (-1));
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + (-1) + "'", int13 == (-1));
        org.junit.Assert.assertNotNull(settingsSetting14);
        org.junit.Assert.assertNotNull(settingsSettingTuple16);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.version.minimum_compatible" + "'", str20, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(settingsSetting27);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(strArray54);
        org.junit.Assert.assertTrue("'" + boolean56 + "' != '" + true + "'", boolean56 == true);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNull(mappingMetaData62);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(indexMetaData65);
        org.junit.Assert.assertNull(mappingMetaData67);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(indexMetaData69);
        org.junit.Assert.assertNull(mappingMetaData71);
        org.junit.Assert.assertTrue("'" + state72 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state72.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData73);
        org.junit.Assert.assertNull(mappingMetaData75);
        org.junit.Assert.assertTrue("'" + state76 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state76.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean77 + "' != '" + false + "'", boolean77 == false);
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + byte80 + "' != '" + (byte) 0 + "'", byte80 == (byte) 0);
        org.junit.Assert.assertNotNull(builder81);
    }

    @Test
    public void test08721() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08721");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest0.remoteAddress(transportAddress6);
        boolean boolean8 = bulkShardRequest0.getShouldPersistResult();
        bulkShardRequest0.seqNo((long) 1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest12.timeout(timeValue16);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest18 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest17.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel19);
        org.elasticsearch.index.shard.ShardId shardId21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest20.setShardId(shardId21);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        org.elasticsearch.index.shard.ShardId shardId25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest23.setShardId(shardId25);
        org.elasticsearch.index.shard.ShardId shardId27 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest26.setShardId(shardId27);
        bulkShardRequest26.seqNo(36L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.primaryTerm();
        bulkShardRequest32.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue36 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest32.timeout(timeValue36);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest38 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.action.ActionRequest actionRequest39 = bulkItemRequest38.request();
        org.elasticsearch.tasks.TaskId taskId40 = actionRequest39.getParentTask();
        bulkShardRequest26.setParentTask(taskId40);
        bulkShardRequest22.setParentTask(taskId40);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertNotNull(actionRequest39);
        org.junit.Assert.assertNotNull(taskId40);
    }

    @Test
    public void test08722() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08722");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.apache.lucene.util.Version version9 = indexMetaData4.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData4.diff(indexMetaData10);
        int int13 = indexMetaData10.getNumberOfShards();
        long long14 = indexMetaData10.getVersion();
        int int15 = indexMetaData10.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData10.requireFilters();
        int int17 = indexMetaData10.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(version9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 1L + "'", long14 == 1L);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 1 + "'", int17 == 1);
    }

    @Test
    public void test08723() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08723");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap3 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
    }

    @Test
    public void test08724() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08724");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.priority", throwable2, "index.shared_filesystem");
        java.lang.String str5 = shardFailure4.indexUUID;
        java.lang.Throwable throwable6 = shardFailure4.cause;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.shared_filesystem" + "'", str5, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable6);
    }

    @Test
    public void test08725() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08725");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long9 = indexMetaData8.getCreationDate();
        boolean boolean11 = indexMetaData8.isSameUUID("index.version.created_string");
        int int12 = indexMetaData8.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData8.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData8.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData8.getState();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
    }

    @Test
    public void test08726() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08726");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.blocks.write", custom12);
        boolean boolean14 = settingsSettingTuple2.equals((java.lang.Object) "index.blocks.write");
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData16.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData16.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData16.mappingOrDefault("");
        boolean boolean23 = settingsSettingTuple2.equals((java.lang.Object) indexMetaData16);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting24 = settingsSettingTuple2.v1();
        java.lang.String str25 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = settingsSettingTuple2.v2();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertNotNull(settingsSetting24);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str25, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNull(builder26);
    }

    @Test
    public void test08727() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08727");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting7 = null;
        java.lang.Throwable throwable9 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure11 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting7, "index.shared_filesystem", throwable9, "index.shared_filesystem");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting12 = shardFailure11.routing;
        boolean boolean13 = indexMetaData0.equals((java.lang.Object) shardFailure11);
        java.lang.String str14 = shardFailure11.reason;
        java.lang.String str15 = shardFailure11.reason;
        java.lang.String str16 = shardFailure11.reason;
        java.lang.Throwable throwable17 = shardFailure11.cause;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNull(shardRouting12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable17);
    }

    @Test
    public void test08728() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08728");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple14 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple2, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting13);
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str19 = builder18.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.index("current version [11] is different than the one provided [0]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting16, builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData26.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData26.mapping("hi!");
        int int31 = indexMetaData26.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData26.mapping("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData26.mapping("index.creation_date");
        int int36 = indexMetaData26.getNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap37 = indexMetaData26.getAliases();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap38 = indexMetaData26.getMappings();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long40 = bulkShardRequest39.seqNo();
        long long41 = bulkShardRequest39.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId43 = bulkShardRequest42.getParentTask();
        bulkShardRequest39.setParentTask(taskId43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest39.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException47 = bulkShardRequest46.validate();
        org.elasticsearch.tasks.TaskId taskId48 = bulkShardRequest46.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long50 = bulkShardRequest49.seqNo();
        long long51 = bulkShardRequest49.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId53 = bulkShardRequest52.getParentTask();
        bulkShardRequest49.setParentTask(taskId53);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel55 = bulkShardRequest49.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress56 = null;
        bulkShardRequest49.remoteAddress(transportAddress56);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel58 = bulkShardRequest49.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest59 = bulkShardRequest46.consistencyLevel(writeConsistencyLevel58);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.action.bulk.BulkShardRequest> indexMetaDataDiffableTuple60 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>) indexMetaData26, bulkShardRequest46);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state61 = indexMetaData26.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder24.state(state61);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanSetting13);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.version.minimum_compatible" + "'", str19, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 1 + "'", int31 == 1);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 1 + "'", int36 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(taskId43);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNull(actionRequestValidationException47);
        org.junit.Assert.assertNotNull(taskId48);
        org.junit.Assert.assertTrue("'" + long50 + "' != '" + 0L + "'", long50 == 0L);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(taskId53);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel55 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel55.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel58 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel58.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest59);
        org.junit.Assert.assertNotNull(indexMetaDataDiffableTuple60);
        org.junit.Assert.assertTrue("'" + state61 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state61.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08729() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08729");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple14 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple2, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting13);
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str19 = builder18.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder18.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder22.index("current version [11] is different than the one provided [0]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting16, builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str29 = builder28.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom33 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.putCustom("index.version.upgraded_string", custom33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.creationDate((long) '#');
        int int37 = builder36.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str41 = builder40.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder40.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData49.mapping("hi!");
        int int54 = indexMetaData49.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData49.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom64 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder62.putCustom("index.blocks.read", custom64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder62.creationDate((long) ' ');
        java.lang.String[] strArray87 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder62.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder59.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder45.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder36.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder24.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet88);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanSetting13);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertEquals("'" + str19 + "' != '" + "index.version.minimum_compatible" + "'", str19, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "index.version.minimum_compatible" + "'", str29, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 0 + "'", int37 == 0);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "index.version.minimum_compatible" + "'", str41, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08730() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08730");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        bulkShardRequest0.setParentTask("current version [100] is different than the one provided [32]", 97L);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str9 = bulkShardRequest0.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
    }

    @Test
    public void test08731() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08731");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet3 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("");
        boolean boolean8 = indexMetaData0.isSameUUID("index.auto_expand_replicas");
        int int9 = indexMetaData0.getTotalNumberOfShards();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mapping("current version [0] is different than the one provided [33]");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData0.getState();
        int int14 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(strSet3);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
    }

    @Test
    public void test08732() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08732");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        long long10 = indexMetaData7.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData7.includeFilters();
        long long13 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData4.diff(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder16.putCustom("current version [1] is different than the one provided [53]", custom20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
    }

    @Test
    public void test08733() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08733");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException3 = bulkShardRequest0.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long5 = bulkShardRequest4.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest4.remoteAddress(transportAddress7);
        long long9 = bulkShardRequest4.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue10 = bulkShardRequest4.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest0.timeout(timeValue10);
        boolean boolean12 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest0.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertNotNull(actionRequestValidationException3);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(timeValue10);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(taskId13);
    }

    @Test
    public void test08734() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08734");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean5 = versionType0.isVersionConflictForWrites((long) 100, (long) (byte) 10, false);
        boolean boolean9 = versionType0.isVersionConflictForWrites((long) (byte) 10, 0L, false);
        boolean boolean13 = versionType0.isVersionConflictForWrites(12L, (long) '#', true);
        long long16 = versionType0.updateVersion(0L, 97L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 97L + "'", long16 == 97L);
    }

    @Test
    public void test08735() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08735");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long9 = indexMetaData4.getCreationDate();
        int int10 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long15 = indexMetaData12.getVersion();
        java.util.Set<java.lang.String> strSet17 = null; // flaky: indexMetaData12.activeAllocationIds((-1));
        org.elasticsearch.Version version18 = indexMetaData12.getUpgradedVersion();
        org.elasticsearch.Version version19 = indexMetaData12.getUpgradedVersion();
        boolean boolean21 = indexMetaData12.isSameUUID("index.creation_date");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData4.diff(indexMetaData12);
        org.elasticsearch.index.Index index23 = indexMetaData4.getMergeSourceIndex();
        long long24 = indexMetaData4.getVersion();
        long long25 = indexMetaData4.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNull(strSet17);
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertNotNull(version19);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L + "'", long24 == 1L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08736() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08736");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap12 = indexMetaData0.getMappings();
        int int13 = indexMetaData0.getNumberOfShards();
        long long14 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + (-1L) + "'", long14 == (-1L));
    }

    @Test
    public void test08737() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08737");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.index("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.putCustom("current version [52] is different than the one provided [2]", custom11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.numberOfReplicas(32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.numberOfShards(0);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
    }

    @Test
    public void test08738() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08738");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [-1] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder2.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder4.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder4.numberOfReplicas((int) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str12 = builder11.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.index("current version [11] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap23 = indexMetaData19.getMappings();
        int int24 = indexMetaData19.getNumberOfReplicas();
        org.apache.lucene.util.Version version25 = indexMetaData19.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap26 = indexMetaData19.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet28 = null; // flaky: indexMetaData19.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData19.mappingOrDefault("index.shared_filesystem");
        int int31 = indexMetaData19.getNumberOfReplicas();
        java.util.Set<java.lang.String> strSet33 = indexMetaData19.activeAllocationIds((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder17.putActiveAllocationIds((int) (byte) 0, strSet33);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder4.putActiveAllocationIds((int) 'a', strSet33);
        org.elasticsearch.common.collect.Tuple<java.lang.CharSequence, java.util.Set<java.lang.String>> charSequenceTuple36 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.CharSequence) "index.version.upgraded_string", strSet33);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "index.version.minimum_compatible" + "'", str12, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNull(version25);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap26);
        org.junit.Assert.assertNull(strSet28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
        org.junit.Assert.assertNotNull(strSet33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(charSequenceTuple36);
    }

    @Test
    public void test08739() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08739");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest1.consistencyLevel();
        long long6 = bulkShardRequest1.seqNo();
        org.elasticsearch.index.shard.ShardId shardId7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.setShardId(shardId7);
        bulkShardRequest1.seqNo((long) 100);
        org.elasticsearch.index.shard.ShardId shardId11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest1.setShardId(shardId11);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest13 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        int int14 = bulkItemRequest13.id();
        int int15 = bulkItemRequest13.id();
        int int16 = bulkItemRequest13.id();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 100 + "'", int14 == 100);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 100 + "'", int15 == 100);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 100 + "'", int16 == 100);
    }

    @Test
    public void test08740() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08740");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        int int9 = indexMetaData5.getNumberOfReplicas();
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mapping("index.version.upgraded_string");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData0.getCustoms();
        org.elasticsearch.common.settings.Settings settings15 = indexMetaData0.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData0.getState();
        long long18 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap19 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData20.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData20.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData24.getState();
        boolean boolean28 = indexMetaData20.equals((java.lang.Object) state27);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData20.getCustoms();
        int int30 = indexMetaData20.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData0.diff(indexMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 1 + "'", int30 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
    }

    @Test
    public void test08741() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08741");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData8.getState();
        boolean boolean12 = indexMetaData4.equals((java.lang.Object) state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder3.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        java.lang.String str18 = indexMetaData14.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state21 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromId((byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder13.state(state21);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder13.index("current version [0] is different than the one provided [-1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str29 = builder28.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder28.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder28.version((long) '4');
        java.lang.String str34 = builder28.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder28.removeAlias("state-");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom41 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.putCustom("index.blocks.read", custom41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder39.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData46.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData46.mapping("hi!");
        int int51 = indexMetaData46.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData46.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder54.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom61 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder59.putCustom("index.blocks.read", custom61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder59.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder59.creationDate((long) ' ');
        java.lang.String[] strArray84 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet85 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean86 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet85, strArray84);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder87 = builder59.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder88 = builder56.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder39.putActiveAllocationIds(97, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder36.putActiveAllocationIds(32, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder25.putActiveAllocationIds((int) (short) -1, (java.util.Set<java.lang.String>) strSet85);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder91.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom94 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder95 = builder92.putCustom("current version [3] is higher or equal to the one provided [2]", custom94);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertEquals("'" + str18 + "' != '" + "_na_" + "'", str18, "_na_");
        org.junit.Assert.assertTrue("'" + state21 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE + "'", state21.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.CLOSE));
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertEquals("'" + str29 + "' != '" + "index.version.minimum_compatible" + "'", str29, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertEquals("'" + str34 + "' != '" + "index.version.minimum_compatible" + "'", str34, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + 1 + "'", int51 == 1);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(strArray84);
        org.junit.Assert.assertTrue("'" + boolean86 + "' != '" + true + "'", boolean86 == true);
        org.junit.Assert.assertNotNull(builder87);
        org.junit.Assert.assertNotNull(builder88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder95);
    }

    @Test
    public void test08742() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08742");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        boolean boolean4 = bulkShardRequest0.getShouldPersistResult();
        long long5 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        long long8 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest9.getParentTask();
        bulkShardRequest6.setParentTask(taskId10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = bulkShardRequest6.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest6.remoteAddress(transportAddress13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest6.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel15);
        org.elasticsearch.tasks.TaskId taskId17 = bulkShardRequest0.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long21 = bulkShardRequest20.primaryTerm();
        bulkShardRequest20.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest20.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest26 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest25);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest27 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.primaryTerm();
        bulkShardRequest28.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest28.timeout(timeValue32);
        org.elasticsearch.action.support.IndicesOptions indicesOptions34 = bulkShardRequest33.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress35 = bulkShardRequest33.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        long long39 = bulkShardRequest37.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId41 = bulkShardRequest40.getParentTask();
        bulkShardRequest37.setParentTask(taskId41);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest37.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException45 = bulkShardRequest44.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest46 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest44);
        org.elasticsearch.common.unit.TimeValue timeValue47 = bulkShardRequest44.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest33.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest49 = bulkShardRequest25.timeout(timeValue47);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest0.timeout(timeValue47);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + false + "'", boolean4 == false);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(taskId10);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel12 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel12.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(taskId17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(indicesOptions34);
        org.junit.Assert.assertNull(transportAddress35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(taskId41);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNull(actionRequestValidationException45);
        org.junit.Assert.assertNotNull(timeValue47);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
    }

    @Test
    public void test08743() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08743");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long9 = indexMetaData4.getCreationDate();
        int int10 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.numberOfShards((int) (byte) 0);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.putAlias(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08744() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08744");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
    }

    @Test
    public void test08745() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08745");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.data_path");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData2 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData2.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData2);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData2.getMappings();
        int int7 = indexMetaData2.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData2.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.blocks.read", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder14.version(0L);
        boolean boolean17 = indexMetaData2.equals((java.lang.Object) builder14);
        long long18 = indexMetaData2.getVersion();
        org.elasticsearch.common.settings.Settings settings19 = indexMetaData2.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder1.settings(settings19);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = builder20.build();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder20.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.version(1L);
        long long26 = builder25.version();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(indexMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
    }

    @Test
    public void test08746() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08746");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData12.diff(indexMetaData16);
        org.elasticsearch.index.Index index18 = indexMetaData16.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData16.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index21 = indexMetaData16.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData26 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData22.diff(indexMetaData26);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData16.diff(indexMetaData22);
        org.apache.lucene.util.Version version29 = indexMetaData16.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData16.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData0.diff(indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.primaryTerm((int) (byte) 10, 97L);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 10");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertNull(index18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNull(index21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(indexMetaData26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNull(version29);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertNotNull(builder32);
    }

    @Test
    public void test08747() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08747");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = settingsSettingTuple11.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("index.blocks.read", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder14.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder19.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.numberOfReplicas((int) ' ');
        boolean boolean24 = settingsSettingTuple11.equals((java.lang.Object) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters26 = indexMetaData25.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData25.mapping("current version [10] is different than the one provided [32]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap29 = indexMetaData25.getCustoms();
        boolean boolean30 = settingsSettingTuple11.equals((java.lang.Object) indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData31);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap35 = indexMetaData31.getMappings();
        int int36 = indexMetaData31.getNumberOfReplicas();
        org.apache.lucene.util.Version version37 = indexMetaData31.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap38 = indexMetaData31.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting39 = null;
        java.lang.Throwable throwable41 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure43 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting39, "index.shared_filesystem", throwable41, "index.shared_filesystem");
        java.lang.String str44 = shardFailure43.reason;
        java.lang.String str45 = shardFailure43.indexUUID;
        java.lang.String str46 = shardFailure43.reason;
        java.lang.String str47 = shardFailure43.reason;
        java.lang.String str48 = shardFailure43.indexUUID;
        boolean boolean49 = indexMetaData31.equals((java.lang.Object) shardFailure43);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap50 = indexMetaData31.getActiveAllocationIds();
        org.elasticsearch.index.Index index51 = indexMetaData31.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap52 = indexMetaData31.getActiveAllocationIds();
        boolean boolean53 = settingsSettingTuple11.equals((java.lang.Object) indexMetaData31);
        org.elasticsearch.Version version54 = indexMetaData31.getUpgradedVersion();
        org.elasticsearch.Version version55 = indexMetaData31.getCreationVersion();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder56 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params57 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder58 = indexMetaData31.toXContent(xContentBuilder56, params57);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(discoveryNodeFilters26);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(strImmutableOpenMap35);
        org.junit.Assert.assertTrue("'" + int36 + "' != '" + 0 + "'", int36 == 0);
        org.junit.Assert.assertNull(version37);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap38);
        org.junit.Assert.assertEquals("'" + str44 + "' != '" + "index.shared_filesystem" + "'", str44, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.shared_filesystem" + "'", str45, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str46 + "' != '" + "index.shared_filesystem" + "'", str46, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str47 + "' != '" + "index.shared_filesystem" + "'", str47, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "index.shared_filesystem" + "'", str48, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap50);
        org.junit.Assert.assertNull(index51);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertNotNull(version54);
        org.junit.Assert.assertNotNull(version55);
        org.junit.Assert.assertNotNull(params57);
    }

    @Test
    public void test08748() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08748");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNull(index9);
    }

    @Test
    public void test08749() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08749");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        boolean boolean9 = indexMetaData0.isSameUUID("index.blocks.read_only");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("current version [101] is different than the one provided [32]");
        int int12 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
    }

    @Test
    public void test08750() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08750");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        int int9 = indexMetaData5.getNumberOfReplicas();
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        long long11 = indexMetaData0.getCreationDate();
        int int12 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.includeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test08751() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08751");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int6 = indexMetaData0.getTotalNumberOfShards();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
    }

    @Test
    public void test08752() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08752");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        long long9 = bulkShardRequest5.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest5.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest5.consistencyLevel();
        bulkShardRequest5.seqNo((long) (byte) 10);
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest5.getParentTask();
        java.lang.String str15 = bulkShardRequest5.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId14);
        org.junit.Assert.assertNull(str15);
    }

    @Test
    public void test08753() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08753");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = bulkShardRequest0.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel5 = bulkShardRequest0.consistencyLevel();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel3 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel3.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(transportAddress4);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel5 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel5.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test08754() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08754");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = settingsSettingTuple11.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = settingsSettingTuple11.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putCustom("index.blocks.read", custom17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.creationDate((long) ' ');
        java.lang.String[] strArray40 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder15.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder15.numberOfShards((int) (byte) 10);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple46 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting13, builder45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder50.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder50.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder50.numberOfReplicas((int) (byte) -1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder56.numberOfReplicas(1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple59 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting13, builder58);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting60 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple62 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting60, builder61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = settingsSettingTuple62.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData64 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData66 = indexMetaData64.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData68 = indexMetaData64.mapping("hi!");
        int int69 = indexMetaData64.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData71 = indexMetaData64.mapping("index.number_of_shards");
        boolean boolean72 = settingsSettingTuple62.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting73 = settingsSettingTuple62.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str76 = builder75.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder78 = builder75.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom80 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder81 = builder78.putCustom("index.version.upgraded_string", custom80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder78.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom85 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder86 = builder83.putCustom("hi!", custom85);
        boolean boolean87 = settingsSettingTuple62.equals((java.lang.Object) builder86);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder86.numberOfReplicas(97);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple90 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting13, builder89);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder89.creationDate(12L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder94 = builder89.numberOfReplicas((int) (byte) 1);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder56);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(settingsSetting60);
        org.junit.Assert.assertNotNull(settingsSettingTuple62);
        org.junit.Assert.assertNull(builder63);
        org.junit.Assert.assertNotNull(indexMetaData64);
        org.junit.Assert.assertNull(mappingMetaData66);
        org.junit.Assert.assertNull(mappingMetaData68);
        org.junit.Assert.assertTrue("'" + int69 + "' != '" + 1 + "'", int69 == 1);
        org.junit.Assert.assertNull(mappingMetaData71);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + false + "'", boolean72 == false);
        org.junit.Assert.assertNotNull(settingsSetting73);
        org.junit.Assert.assertEquals("'" + str76 + "' != '" + "index.version.minimum_compatible" + "'", str76, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder78);
        org.junit.Assert.assertNotNull(builder81);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertNotNull(builder86);
        org.junit.Assert.assertTrue("'" + boolean87 + "' != '" + false + "'", boolean87 == false);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder94);
    }

    @Test
    public void test08755() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08755");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.requireFilters();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 3);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        java.lang.String str10 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "_na_" + "'", str10, "_na_");
    }

    @Test
    public void test08756() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08756");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index13 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.index.Index index14 = indexMetaData0.getMergeSourceIndex();
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.getInitialRecoveryFilters();
        long long18 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData19.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData19.getAliases();
        long long25 = indexMetaData19.getVersion();
        java.lang.String str26 = indexMetaData19.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.diff(indexMetaData19);
        long long29 = indexMetaData19.getVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput30 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData19.writeTo(streamOutput30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_na_" + "'", str26, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
    }

    @Test
    public void test08757() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08757");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        java.lang.String[] strArray26 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet27);
        int int30 = builder29.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.version((long) ' ');
        java.lang.String str33 = builder29.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder29.version((long) (byte) 2);
        java.lang.String str36 = builder29.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder29.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str41 = builder40.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder40.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder40.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder40.creationDate((long) (byte) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData49 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData51 = indexMetaData49.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData49.mapping("hi!");
        int int54 = indexMetaData49.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData49.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder57.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom64 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder62.putCustom("index.blocks.read", custom64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder62.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder62.creationDate((long) ' ');
        java.lang.String[] strArray87 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet88 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean89 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet88, strArray87);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder90 = builder62.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder91 = builder59.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder92 = builder47.putActiveAllocationIds((int) (byte) 0, (java.util.Set<java.lang.String>) strSet88);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder93 = builder29.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet88);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index.version.upgraded_string" + "'", str33, "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index.version.upgraded_string" + "'", str36, "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "index.version.minimum_compatible" + "'", str41, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(indexMetaData49);
        org.junit.Assert.assertNull(mappingMetaData51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertTrue("'" + int54 + "' != '" + 1 + "'", int54 == 1);
        org.junit.Assert.assertNull(mappingMetaData56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNotNull(strArray87);
        org.junit.Assert.assertTrue("'" + boolean89 + "' != '" + true + "'", boolean89 == true);
        org.junit.Assert.assertNotNull(builder90);
        org.junit.Assert.assertNotNull(builder91);
        org.junit.Assert.assertNotNull(builder92);
        org.junit.Assert.assertNotNull(builder93);
    }

    @Test
    public void test08758() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08758");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int4 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long6 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData8.mapping("hi!");
        int int13 = indexMetaData8.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData8.mapping("index.number_of_shards");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.primaryTerm();
        bulkShardRequest19.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue23 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest19.timeout(timeValue23);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest25 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest24);
        org.elasticsearch.action.ActionRequest actionRequest26 = bulkItemRequest25.request();
        org.elasticsearch.tasks.TaskId taskId27 = actionRequest26.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting28 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long31 = bulkShardRequest30.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions32 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException33 = bulkShardRequest30.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure35 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting28, "primary_terms", (java.lang.Throwable) actionRequestValidationException33, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple36 = org.elasticsearch.common.collect.Tuple.tuple(taskId27, (java.lang.IllegalArgumentException) actionRequestValidationException33);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure38 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting16, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException33, "index.creation_date_string");
        java.lang.String str39 = shardFailure38.reason;
        boolean boolean40 = indexMetaData8.equals((java.lang.Object) shardFailure38);
        int int41 = indexMetaData8.getNumberOfShards();
        org.elasticsearch.common.settings.Settings settings42 = indexMetaData8.getSettings();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData0.diff(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData46 = indexMetaData44.mappingOrDefault("");
        long long47 = indexMetaData44.getCreationDate();
        org.apache.lucene.util.Version version48 = indexMetaData44.getMinimumCompatibleVersion();
        int int49 = indexMetaData44.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap50 = indexMetaData44.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters51 = indexMetaData44.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters52 = indexMetaData44.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff53 = indexMetaData0.diff(indexMetaData44);
        long long54 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData56 = indexMetaData0.mappingOrDefault("current version [10] is higher than the one provided [34]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertNotNull(actionRequest26);
        org.junit.Assert.assertNotNull(taskId27);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions32);
        org.junit.Assert.assertNotNull(actionRequestValidationException33);
        org.junit.Assert.assertNotNull(taskIdTuple36);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str39, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
        org.junit.Assert.assertNotNull(settings42);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertNull(mappingMetaData46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + (-1L) + "'", long47 == (-1L));
        org.junit.Assert.assertNull(version48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap50);
        org.junit.Assert.assertNull(discoveryNodeFilters51);
        org.junit.Assert.assertNull(discoveryNodeFilters52);
        org.junit.Assert.assertNotNull(indexMetaDataDiff53);
        org.junit.Assert.assertTrue("'" + long54 + "' != '" + 1L + "'", long54 == 1L);
        org.junit.Assert.assertNull(mappingMetaData56);
    }

    @Test
    public void test08759() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08759");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        boolean boolean10 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        org.elasticsearch.transport.TransportService transportService12 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService13 = null;
        org.elasticsearch.indices.IndicesService indicesService14 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool15 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction16 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction17 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper18 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters19 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver20 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction21 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings11, transportService12, clusterService13, indicesService14, threadPool15, shardStateAction16, mappingUpdatedAction17, updateHelper18, actionFilters19, indexNameExpressionResolver20);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
    }

    @Test
    public void test08760() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08760");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        int int9 = indexMetaData5.getNumberOfReplicas();
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        int int12 = indexMetaData0.getTotalNumberOfShards();
        int int13 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 0 + "'", int13 == 0);
    }

    @Test
    public void test08761() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08761");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("current version [52] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(mappingMetaData11);
    }

    @Test
    public void test08762() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08762");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel4 = bulkShardRequest0.consistencyLevel();
        long long5 = bulkShardRequest0.seqNo();
        long long6 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.io.stream.StreamInput streamInput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.readFrom(streamInput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel4 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel4.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 10L + "'", long6 == 10L);
    }

    @Test
    public void test08763() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08763");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId2 = bulkShardRequest1.shardId();
        org.elasticsearch.index.shard.ShardId shardId3 = bulkShardRequest1.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest4 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest5 = bulkItemRequest4.request();
        org.elasticsearch.action.ActionRequest actionRequest6 = bulkItemRequest4.request();
        boolean boolean7 = actionRequest6.getShouldPersistResult();
        org.junit.Assert.assertNull(shardId2);
        org.junit.Assert.assertNull(shardId3);
        org.junit.Assert.assertNotNull(actionRequest5);
        org.junit.Assert.assertNotNull(actionRequest6);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
    }

    @Test
    public void test08764() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08764");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap19 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData0.getState();
        org.elasticsearch.index.Index index21 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long26 = bulkShardRequest25.seqNo();
        long long27 = bulkShardRequest25.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId29 = bulkShardRequest28.getParentTask();
        bulkShardRequest25.setParentTask(taskId29);
        bulkShardRequest24.setParentTask(taskId29);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest24.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure34 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting22, "current version [52] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException32, "hi!");
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) shardRouting22);
        org.elasticsearch.Version version36 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData38 = indexMetaData0.mapping("current version [3] is higher than the one provided [5]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index21);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(taskId29);
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(version36);
        org.junit.Assert.assertNull(mappingMetaData38);
    }

    @Test
    public void test08765() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08765");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        boolean boolean7 = indexMetaData0.isSameUUID("");
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap13 = indexMetaData9.getMappings();
        int int14 = indexMetaData9.getNumberOfReplicas();
        org.apache.lucene.util.Version version15 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters16 = indexMetaData9.includeFilters();
        boolean boolean18 = indexMetaData9.isSameUUID("current version [10] is different than the one provided [-1]");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNull(discoveryNodeFilters16);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
    }

    @Test
    public void test08766() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08766");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap3 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.includeFilters();
        long long6 = indexMetaData0.primaryTerm((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff12 = indexMetaData7.diff(indexMetaData11);
        org.elasticsearch.index.Index index13 = indexMetaData11.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData11.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData11.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData11.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData11);
        org.elasticsearch.common.io.stream.StreamInput streamInput19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff20 = indexMetaData0.readDiffFrom(streamInput19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertNotNull(strImmutableOpenMap3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaDataDiff12);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
    }

    @Test
    public void test08767() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08767");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder21.version(35L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.index("current version [11] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder27);
    }

    @Test
    public void test08768() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08768");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.removeAlias("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.index("current version [33] is different than the one provided [32]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08769() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08769");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("index.shadow_replicas", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08770() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08770");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        long long13 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state17 = indexMetaData14.getState();
        org.elasticsearch.Version version18 = indexMetaData14.getUpgradedVersion();
        int int19 = indexMetaData14.getNumberOfReplicas();
        org.apache.lucene.util.Version version20 = indexMetaData14.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData14);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + state17 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state17.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
    }

    @Test
    public void test08771() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08771");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.Version version1 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.Version version2 = indexMetaData0.getUpgradedVersion();
        boolean boolean4 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple7 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting5, builder6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = settingsSettingTuple7.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData9.mapping("hi!");
        int int14 = indexMetaData9.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData9.mapping("index.number_of_shards");
        boolean boolean17 = settingsSettingTuple7.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting18 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple19 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple7, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting18);
        java.lang.String str20 = settingsSettingTuple7.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting21 = settingsSettingTuple7.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str24 = builder23.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder23.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.index("current version [11] is different than the one provided [0]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple30 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting21, builder29);
        boolean boolean31 = indexMetaData0.equals((java.lang.Object) settingsSettingTuple30);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting32 = settingsSettingTuple30.v1();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNotNull(version1);
        org.junit.Assert.assertNotNull(version2);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settingsSettingTuple7);
        org.junit.Assert.assertNull(builder8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 1 + "'", int14 == 1);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertNotNull(booleanSetting18);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple19);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str20, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting21);
        org.junit.Assert.assertEquals("'" + str24 + "' != '" + "index.version.minimum_compatible" + "'", str24, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(settingsSetting32);
    }

    @Test
    public void test08772() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08772");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        java.lang.String str4 = bulkShardRequest0.index();
        org.elasticsearch.common.unit.TimeValue timeValue5 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.timeout(timeValue5);
        org.elasticsearch.action.support.IndicesOptions indicesOptions7 = bulkShardRequest6.indicesOptions();
        org.elasticsearch.gateway.MetaDataStateFormat<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataMetaDataStateFormat8 = org.elasticsearch.cluster.metadata.IndexMetaData.FORMAT;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.support.IndicesOptions, org.elasticsearch.gateway.MetaDataStateFormat<org.elasticsearch.cluster.metadata.IndexMetaData>> indicesOptionsTuple9 = org.elasticsearch.common.collect.Tuple.tuple(indicesOptions7, indexMetaDataMetaDataStateFormat8);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNotNull(timeValue5);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(indicesOptions7);
        org.junit.Assert.assertNotNull(indexMetaDataMetaDataStateFormat8);
        org.junit.Assert.assertNotNull(indicesOptionsTuple9);
    }

    @Test
    public void test08773() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08773");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.Version version12 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertNotNull(version12);
    }

    @Test
    public void test08774() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08774");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData10.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData10.requireFilters();
        java.lang.String str16 = indexMetaData10.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData10.requireFilters();
        long long18 = indexMetaData10.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData0.diff(indexMetaData10);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "_na_" + "'", str16, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
    }

    @Test
    public void test08775() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08775");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType1.validateVersionForReads((long) 1);
        boolean boolean6 = versionType1.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str9 = versionType1.explainConflictForReads(0L, (long) (byte) 1);
        byte byte10 = versionType1.getValue();
        org.elasticsearch.index.VersionType versionType11 = versionType1.versionTypeForReplicationAndRecovery();
        long long14 = versionType11.updateVersion((long) 'a', 11L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType15 = org.elasticsearch.index.VersionType.fromString("current version [101] is different than the one provided [34]", versionType11);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [101] is different than the one provided [34]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str9, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertTrue("'" + byte10 + "' != '" + (byte) 0 + "'", byte10 == (byte) 0);
        org.junit.Assert.assertNotNull(versionType11);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 11L + "'", long14 == 11L);
    }

    @Test
    public void test08776() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08776");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        int int9 = indexMetaData5.getNumberOfReplicas();
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        boolean boolean14 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
    }

    @Test
    public void test08777() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08777");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId1 = bulkShardRequest0.shardId();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String[] strArray4 = bulkShardRequest3.indices();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNull(shardId1);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
    }

    @Test
    public void test08778() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08778");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters2 = indexMetaData0.excludeFilters();
        int int3 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int5 = builder4.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(discoveryNodeFilters2);
        org.junit.Assert.assertTrue("'" + int3 + "' != '" + 1 + "'", int3 == 1);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
    }

    @Test
    public void test08779() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08779");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str16 = builder15.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("index.version.upgraded_string", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("hi!", custom25);
        boolean boolean27 = settingsSettingTuple2.equals((java.lang.Object) builder26);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting28 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.priority");
        org.elasticsearch.common.settings.Settings settings31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.settings(settings31);
        java.lang.String str33 = builder32.index();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple34 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting28, builder32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData35.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap39 = indexMetaData35.getMappings();
        int int40 = indexMetaData35.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters41 = indexMetaData35.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = indexMetaData35.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap43 = indexMetaData35.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder44.index("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData47);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap51 = indexMetaData47.getMappings();
        int int52 = indexMetaData47.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters53 = indexMetaData47.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData47.getState();
        org.apache.lucene.util.Version version55 = indexMetaData47.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings56 = indexMetaData47.getSettings();
        org.elasticsearch.common.settings.Settings settings57 = indexMetaData47.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder46.settings(settings57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder46.removeAllAliases();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple60 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting28, builder46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder46.numberOfReplicas((int) (byte) 10);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.version.minimum_compatible" + "'", str16, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settingsSetting28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index.priority" + "'", str33, "index.priority");
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strImmutableOpenMap39);
        org.junit.Assert.assertTrue("'" + int40 + "' != '" + 0 + "'", int40 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters41);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(strImmutableOpenMap51);
        org.junit.Assert.assertTrue("'" + int52 + "' != '" + 0 + "'", int52 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters53);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(settings57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(settingsSettingTuple60);
        org.junit.Assert.assertNotNull(builder62);
    }

    @Test
    public void test08780() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08780");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest6.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest11.consistencyLevel(writeConsistencyLevel16);
        boolean boolean18 = bulkShardRequest11.getShouldPersistResult();
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest11.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest0.timeout(timeValue19);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long22 = bulkShardRequest21.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest21.remoteAddress(transportAddress24);
        long long26 = bulkShardRequest21.seqNo();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException27 = bulkShardRequest21.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions28 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long31 = bulkShardRequest30.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel32 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest30.consistencyLevel(writeConsistencyLevel32);
        org.elasticsearch.index.VersionType versionType34 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType35 = versionType34.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple36 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest33, versionType34);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest37 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long39 = bulkShardRequest38.seqNo();
        long long40 = bulkShardRequest38.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId42 = bulkShardRequest41.getParentTask();
        bulkShardRequest38.setParentTask(taskId42);
        bulkShardRequest33.setParentTask(taskId42);
        bulkShardRequest21.setParentTask(taskId42);
        bulkShardRequest20.setParentTask(taskId42);
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest20.indicesOptions();
        org.elasticsearch.action.support.IndicesOptions indicesOptions48 = bulkShardRequest20.indicesOptions();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel16 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel16.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(actionRequestValidationException27);
        org.junit.Assert.assertNotNull(indicesOptions28);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(versionType34);
        org.junit.Assert.assertNotNull(versionType35);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple36);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertTrue("'" + long40 + "' != '" + 0L + "'", long40 == 0L);
        org.junit.Assert.assertNotNull(taskId42);
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertNotNull(indicesOptions48);
    }

    @Test
    public void test08781() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08781");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        bulkShardRequest0.setParentTask(taskId5);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest0.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions11 = bulkShardRequest9.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest9.validate();
        org.elasticsearch.common.unit.TimeValue timeValue13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest9.timeout(timeValue13);
        org.elasticsearch.tasks.TaskId taskId15 = bulkShardRequest14.getParentTask();
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.timeout(timeValue16);
        org.elasticsearch.common.unit.TimeValue timeValue18 = bulkShardRequest14.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress19 = bulkShardRequest14.remoteAddress();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest14.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.common.transport.TransportAddress transportAddress22 = bulkShardRequest21.remoteAddress();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions11);
        org.junit.Assert.assertNotNull(actionRequestValidationException12);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(taskId15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNull(timeValue18);
        org.junit.Assert.assertNull(transportAddress19);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNull(transportAddress22);
    }

    @Test
    public void test08782() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08782");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue2 = bulkShardRequest0.timeout();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(timeValue2);
    }

    @Test
    public void test08783() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08783");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData12.getMappings();
        int int17 = indexMetaData12.getNumberOfReplicas();
        org.apache.lucene.util.Version version18 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData12.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet21 = null; // flaky: indexMetaData12.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData12.mappingOrDefault("index.shared_filesystem");
        int int24 = indexMetaData12.getNumberOfReplicas();
        org.elasticsearch.Version version25 = indexMetaData12.getCreationVersion();
        org.apache.lucene.util.Version version26 = indexMetaData12.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff27 = indexMetaData0.diff(indexMetaData12);
        int int28 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData0.getSettings();
        boolean boolean30 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings29);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertTrue("'" + int17 + "' != '" + 0 + "'", int17 == 0);
        org.junit.Assert.assertNull(version18);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNull(strSet21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(version25);
        org.junit.Assert.assertNull(version26);
        org.junit.Assert.assertNotNull(indexMetaDataDiff27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
    }

    @Test
    public void test08784() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08784");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        int int8 = builder4.numberOfShards();
        int int9 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom11 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder4.putCustom("current version [12] is higher or equal to the one provided [2]", custom11);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + (-1) + "'", int9 == (-1));
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08785() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08785");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest8.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest8.consistencyLevel();
        bulkShardRequest8.primaryTerm((long) (byte) 10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest14.validate();
        org.elasticsearch.common.unit.TimeValue timeValue18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest14.timeout(timeValue18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest14.index("");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        long long24 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest25.getParentTask();
        bulkShardRequest22.setParentTask(taskId26);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest22.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException30 = bulkShardRequest29.validate();
        bulkShardRequest29.setParentTask("current version [10] is different than the one provided [100]", (-1L));
        org.elasticsearch.index.shard.ShardId shardId34 = bulkShardRequest29.shardId();
        org.elasticsearch.common.unit.TimeValue timeValue35 = bulkShardRequest29.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest14.timeout(timeValue35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.primaryTerm();
        bulkShardRequest37.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest37.timeout(timeValue41);
        org.elasticsearch.index.shard.ShardId shardId43 = bulkShardRequest42.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress44 = null;
        bulkShardRequest42.remoteAddress(transportAddress44);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException46 = bulkShardRequest42.validate();
        org.elasticsearch.tasks.TaskId taskId47 = bulkShardRequest42.getParentTask();
        bulkShardRequest14.setParentTask(taskId47);
        bulkShardRequest8.setParentTask(taskId47);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(actionRequestValidationException9);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertNull(actionRequestValidationException30);
        org.junit.Assert.assertNull(shardId34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNull(shardId43);
        org.junit.Assert.assertNotNull(actionRequestValidationException46);
        org.junit.Assert.assertNotNull(taskId47);
    }

    @Test
    public void test08786() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08786");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting12 = settingsSettingTuple11.v1();
        java.lang.String str13 = settingsSettingTuple11.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = settingsSettingTuple11.v2();
        long long15 = builder14.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.numberOfShards(10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        java.lang.String str22 = builder21.index();
        int int23 = builder21.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder21.putCustom("_na_", custom25);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.putCustom("index.version.upgraded", custom28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str32 = builder31.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder31.numberOfShards((int) 'a');
        int int37 = builder31.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings40 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.settings(settings40);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long45 = indexMetaData42.getVersion();
        org.elasticsearch.common.settings.Settings settings46 = indexMetaData42.getSettings();
        org.elasticsearch.common.settings.Settings settings47 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder41.settings(settings46);
        boolean boolean49 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder31.settings(settings46);
        org.elasticsearch.common.settings.Settings settings51 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings46);
        boolean boolean52 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder29.settings(settings51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder14.settings(settings51);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData55 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder56 = builder14.putAlias(aliasMetaData55);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settingsSetting12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 52L + "'", long15 == 52L);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "" + "'", str22, "");
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "index.version.minimum_compatible" + "'", str32, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertTrue("'" + int37 + "' != '" + 97 + "'", int37 == 97);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + 1L + "'", long45 == 1L);
        org.junit.Assert.assertNotNull(settings46);
        org.junit.Assert.assertNotNull(settings47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertTrue("'" + boolean49 + "' != '" + false + "'", boolean49 == false);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(settings51);
        org.junit.Assert.assertTrue("'" + boolean52 + "' != '" + false + "'", boolean52 == false);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder54);
    }

    @Test
    public void test08787() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08787");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        boolean boolean13 = versionType0.isVersionConflictForReads((long) (short) 100, (long) (byte) 10);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
    }

    @Test
    public void test08788() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08788");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(settings16);
        org.elasticsearch.common.settings.Settings settings20 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        boolean boolean21 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings20);
        org.elasticsearch.common.settings.Settings settings22 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings20);
        boolean boolean23 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings20);
        org.elasticsearch.transport.TransportService transportService24 = null;
        org.elasticsearch.cluster.service.ClusterService clusterService25 = null;
        org.elasticsearch.indices.IndicesService indicesService26 = null;
        org.elasticsearch.threadpool.ThreadPool threadPool27 = null;
        org.elasticsearch.cluster.action.shard.ShardStateAction shardStateAction28 = null;
        org.elasticsearch.cluster.action.index.MappingUpdatedAction mappingUpdatedAction29 = null;
        org.elasticsearch.action.update.UpdateHelper updateHelper30 = null;
        org.elasticsearch.action.support.ActionFilters actionFilters31 = null;
        org.elasticsearch.cluster.metadata.IndexNameExpressionResolver indexNameExpressionResolver32 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.TransportShardBulkAction transportShardBulkAction33 = new org.elasticsearch.action.bulk.TransportShardBulkAction(settings20, transportService24, clusterService25, indicesService26, threadPool27, shardStateAction28, mappingUpdatedAction29, updateHelper30, actionFilters31, indexNameExpressionResolver32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08789() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08789");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest3.setShardId(shardId4);
        org.elasticsearch.common.transport.TransportAddress transportAddress6 = null;
        bulkShardRequest5.remoteAddress(transportAddress6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest5.index("index.number_of_shards");
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest5.shardId();
        org.elasticsearch.index.shard.ShardId shardId11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest5.setShardId(shardId11);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkShardRequest12.toString();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(shardId10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
    }

    @Test
    public void test08790() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08790");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder6.index("index.version.upgraded");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder8.numberOfShards((int) '#');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder8.primaryTerm(2, (long) ' ');
        org.elasticsearch.common.settings.Settings.Builder builder14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder8.settings(builder14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
    }

    @Test
    public void test08791() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08791");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index2 = indexMetaData0.getIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput3 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff4 = indexMetaData0.readDiffFrom(streamInput3);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNotNull(index2);
    }

    @Test
    public void test08792() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08792");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.State state1 = org.elasticsearch.cluster.metadata.IndexMetaData.State.fromString("current version [33] is different than the one provided [53]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalStateException; message: No state match for [current version [33] is different than the one provided [53]]");
        } catch (java.lang.IllegalStateException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08793() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08793");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest1.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest1.remoteAddress(transportAddress4);
        long long6 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.setShardId(shardId9);
        org.elasticsearch.index.shard.ShardId shardId11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.setShardId(shardId11);
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest10.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest1.timeout(timeValue13);
        long long15 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 10, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput18 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest17.writeTo(streamOutput18);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNull(transportAddress16);
    }

    @Test
    public void test08794() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08794");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple7 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest4, versionType5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.seqNo();
        long long11 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest12.getParentTask();
        bulkShardRequest9.setParentTask(taskId13);
        bulkShardRequest4.setParentTask(taskId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.setShardId(shardId18);
        bulkShardRequest16.seqNo(0L);
        boolean boolean22 = bulkShardRequest16.getShouldPersistResult();
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest16.remoteAddress(transportAddress24);
        bulkShardRequest16.seqNo((long) (short) 100);
        org.elasticsearch.tasks.TaskId taskId28 = bulkShardRequest16.getParentTask();
        bulkShardRequest16.primaryTerm((long) 32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest32.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = bulkShardRequest32.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long39 = bulkShardRequest38.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple40 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest37, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest38);
        java.lang.String str41 = bulkShardRequest37.index();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest42 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long44 = bulkShardRequest43.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions47 = bulkShardRequest45.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException48 = bulkShardRequest45.validate();
        org.elasticsearch.common.unit.TimeValue timeValue49 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest45.timeout(timeValue49);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = bulkShardRequest43.timeout(timeValue49);
        org.elasticsearch.common.unit.TimeValue timeValue52 = bulkShardRequest43.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest53 = bulkShardRequest37.timeout(timeValue52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest54 = bulkShardRequest16.timeout(timeValue52);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = bulkShardRequest4.timeout(timeValue52);
        org.elasticsearch.index.shard.ShardId shardId56 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest57 = bulkShardRequest4.setShardId(shardId56);
        org.elasticsearch.index.shard.ShardId shardId58 = bulkShardRequest4.shardId();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + false + "'", boolean22 == false);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(taskId28);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest37);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "index.version.created" + "'", str41, "index.version.created");
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions47);
        org.junit.Assert.assertNotNull(actionRequestValidationException48);
        org.junit.Assert.assertNotNull(timeValue49);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertNotNull(bulkShardRequest51);
        org.junit.Assert.assertNotNull(timeValue52);
        org.junit.Assert.assertNotNull(bulkShardRequest53);
        org.junit.Assert.assertNotNull(bulkShardRequest54);
        org.junit.Assert.assertNotNull(bulkShardRequest55);
        org.junit.Assert.assertNotNull(bulkShardRequest57);
        org.junit.Assert.assertNull(shardId58);
    }

    @Test
    public void test08795() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08795");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        byte byte3 = versionType0.getValue();
        java.lang.String str6 = versionType0.explainConflictForReads(11L, (long) 'a');
        boolean boolean8 = versionType0.validateVersionForWrites((long) (short) 0);
        java.lang.String str11 = versionType0.explainConflictForReads(2L, 52L);
        byte byte12 = versionType0.getValue();
        java.lang.String str15 = versionType0.explainConflictForReads(12L, 52L);
        org.elasticsearch.index.VersionType versionType16 = versionType0.versionTypeForReplicationAndRecovery();
        long long19 = versionType16.updateVersion(100L, (long) 100);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [11] is different than the one provided [97]" + "'", str6, "current version [11] is different than the one provided [97]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "current version [2] is different than the one provided [52]" + "'", str11, "current version [2] is different than the one provided [52]");
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "current version [12] is different than the one provided [52]" + "'", str15, "current version [12] is different than the one provided [52]");
        org.junit.Assert.assertNotNull(versionType16);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L + "'", long19 == 100L);
    }

    @Test
    public void test08796() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08796");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.shared_filesystem", throwable2, "index.shared_filesystem");
        java.lang.String str5 = shardFailure4.reason;
        java.lang.String str6 = shardFailure4.indexUUID;
        java.lang.String str7 = shardFailure4.reason;
        java.lang.String str8 = shardFailure4.reason;
        java.lang.Throwable throwable9 = shardFailure4.cause;
        java.lang.String str10 = shardFailure4.indexUUID;
        java.lang.Throwable throwable11 = shardFailure4.cause;
        java.lang.Throwable throwable12 = shardFailure4.cause;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting13 = shardFailure4.routing;
        java.lang.String str14 = shardFailure4.reason;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting15 = shardFailure4.routing;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.shared_filesystem" + "'", str5, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.shared_filesystem" + "'", str6, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.shared_filesystem" + "'", str7, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.shared_filesystem" + "'", str8, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable9);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.shared_filesystem" + "'", str10, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable11);
        org.junit.Assert.assertNull(throwable12);
        org.junit.Assert.assertNull(shardRouting13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertNull(shardRouting15);
    }

    @Test
    public void test08797() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08797");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        java.lang.String str12 = settingsSettingTuple11.toString();
        java.lang.String str13 = settingsSettingTuple11.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting14 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple16 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting14, builder15);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = settingsSettingTuple16.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str20 = builder19.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder19.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting17, builder24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = settingsSettingTuple25.v2();
        boolean boolean27 = settingsSettingTuple11.equals((java.lang.Object) builder26);
        java.lang.String str28 = settingsSettingTuple11.toString();
        java.lang.String str29 = settingsSettingTuple11.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting30 = settingsSettingTuple11.v1();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(settingsSetting14);
        org.junit.Assert.assertNotNull(settingsSettingTuple16);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "index.version.minimum_compatible" + "'", str20, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(settingsSetting30);
    }

    @Test
    public void test08798() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08798");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state6 = indexMetaData0.getState();
        long long7 = indexMetaData0.getVersion();
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData12);
        int int16 = builder15.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        java.lang.String str21 = indexMetaData17.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData17.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder15.state(state22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder23.removeAlias("current version [35] is different than the one provided [-1]");
        boolean boolean26 = indexMetaData0.equals((java.lang.Object) builder23);
        java.lang.String str27 = builder23.index();
        long long28 = builder23.version();
        int int29 = builder23.numberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertTrue("'" + state6 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state6.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "_na_" + "'", str21, "_na_");
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertTrue("'" + boolean26 + "' != '" + false + "'", boolean26 == false);
        org.junit.Assert.assertEquals("'" + str27 + "' != '" + "" + "'", str27, "");
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
    }

    @Test
    public void test08799() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08799");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData0.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test08800() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08800");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.Version version4 = indexMetaData0.getUpgradedVersion();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap6 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData11.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state14 = indexMetaData11.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters15 = indexMetaData11.includeFilters();
        org.elasticsearch.index.Index index16 = indexMetaData11.getMergeSourceIndex();
        long long17 = indexMetaData11.getVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData11);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(index8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(indexMetaData11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertTrue("'" + state14 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state14.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters15);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
    }

    @Test
    public void test08801() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08801");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        java.lang.String str4 = builder1.index();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "index.version.minimum_compatible" + "'", str4, "index.version.minimum_compatible");
    }

    @Test
    public void test08802() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08802");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.settings.Settings settings20 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData0.mappingOrDefault("current version [0] is different than the one provided [1]");
        org.elasticsearch.Version version23 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long25 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertNotNull(settings20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNotNull(version23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + (-1L) + "'", long25 == (-1L));
    }

    @Test
    public void test08803() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08803");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder9.settings(settings10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long15 = indexMetaData12.getVersion();
        org.elasticsearch.common.settings.Settings settings16 = indexMetaData12.getSettings();
        org.elasticsearch.common.settings.Settings settings17 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder11.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder1.settings(settings16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = builder19.mapping("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder19.numberOfShards(0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap28 = indexMetaData24.getMappings();
        int int29 = indexMetaData24.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData24.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData24.getState();
        byte byte32 = state31.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder23.state(state31);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder23.primaryTerm((-1), (long) '4');
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: -1");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 1L + "'", long15 == 1L);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertNotNull(settings17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(strImmutableOpenMap28);
        org.junit.Assert.assertTrue("'" + int29 + "' != '" + 0 + "'", int29 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte32 + "' != '" + (byte) 0 + "'", byte32 == (byte) 0);
        org.junit.Assert.assertNotNull(builder33);
    }

    @Test
    public void test08804() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08804");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        long long9 = indexMetaData4.getCreationDate();
        int int10 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData4.getState();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        java.util.AbstractCollection<java.lang.String> strCollection14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple16 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection14, params15);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData17);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff22 = indexMetaData17.diff(indexMetaData21);
        org.elasticsearch.index.Index index23 = indexMetaData21.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData21.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index26 = indexMetaData21.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings29 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder28.settings(settings29);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData31 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData33 = indexMetaData31.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long34 = indexMetaData31.getVersion();
        org.elasticsearch.common.settings.Settings settings35 = indexMetaData31.getSettings();
        org.elasticsearch.common.settings.Settings settings36 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder30.settings(settings35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData40 = indexMetaData38.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData38);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData42 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData44 = indexMetaData42.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state45 = indexMetaData42.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData46 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = indexMetaData46.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state49 = indexMetaData46.getState();
        boolean boolean50 = indexMetaData42.equals((java.lang.Object) state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder41.state(state49);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder30.state(state49);
        boolean boolean53 = indexMetaData21.equals((java.lang.Object) builder30);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData21.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap55 = indexMetaData21.getMappings();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.Iterable<com.carrotsearch.hppc.cursors.ObjectObjectCursor<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>> paramsTuple56 = org.elasticsearch.common.collect.Tuple.tuple(params15, (java.lang.Iterable<com.carrotsearch.hppc.cursors.ObjectObjectCursor<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>) strImmutableOpenMap55);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder57 = indexMetaData4.toXContent(xContentBuilder13, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 1 + "'", int10 == 1);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNotNull(indexMetaDataDiff22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNull(index26);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(indexMetaData31);
        org.junit.Assert.assertNull(mappingMetaData33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 1L + "'", long34 == 1L);
        org.junit.Assert.assertNotNull(settings35);
        org.junit.Assert.assertNotNull(settings36);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData38);
        org.junit.Assert.assertNull(mappingMetaData40);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(indexMetaData42);
        org.junit.Assert.assertNull(mappingMetaData44);
        org.junit.Assert.assertTrue("'" + state45 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state45.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData46);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertTrue("'" + state49 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state49.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap55);
        org.junit.Assert.assertNotNull(paramsTuple56);
    }

    @Test
    public void test08805() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08805");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        java.lang.String str6 = indexMetaData0.getIndexUUID();
        org.elasticsearch.Version version7 = indexMetaData0.getCreationVersion();
        org.elasticsearch.index.Index index8 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "_na_" + "'", str6, "_na_");
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNull(index8);
    }

    @Test
    public void test08806() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08806");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest3.getParentTask();
        bulkShardRequest0.setParentTask(taskId4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest7.validate();
        org.elasticsearch.common.unit.TimeValue timeValue9 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.timeout(timeValue9);
        java.lang.String str11 = bulkShardRequest7.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest7.remoteAddress();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(taskId4);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(actionRequestValidationException8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "hi!" + "'", str11, "hi!");
        org.junit.Assert.assertNull(transportAddress12);
    }

    @Test
    public void test08807() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08807");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId1 = bulkShardRequest0.shardId();
        org.elasticsearch.index.shard.ShardId shardId2 = bulkShardRequest0.shardId();
        bulkShardRequest0.primaryTerm((long) '#');
        org.elasticsearch.index.shard.ShardId shardId5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.setShardId(shardId5);
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest6.remoteAddress();
        bulkShardRequest6.primaryTerm(1L);
        long long10 = bulkShardRequest6.primaryTerm();
        org.junit.Assert.assertNull(shardId1);
        org.junit.Assert.assertNull(shardId2);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
    }

    @Test
    public void test08808() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08808");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [-1] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (-1));
        int int6 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder1.numberOfShards(35);
        int int9 = builder8.numberOfShards();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + (-1) + "'", int6 == (-1));
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 35 + "'", int9 == 35);
    }

    @Test
    public void test08809() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08809");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) '4', (long) (short) 1, false);
        org.elasticsearch.index.VersionType versionType18 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType19 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str23 = versionType19.explainConflictForWrites((long) '4', 32L, false);
        long long26 = versionType19.updateVersion(53L, 2L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [52] is different than the one provided [1]" + "'", str17, "current version [52] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(versionType18);
        org.junit.Assert.assertNotNull(versionType19);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "current version [52] is higher or equal to the one provided [32]" + "'", str23, "current version [52] is higher or equal to the one provided [32]");
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 2L + "'", long26 == 2L);
    }

    @Test
    public void test08810() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08810");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.io.stream.StreamInput streamInput11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.readFrom(streamInput11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test08811() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08811");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        long long8 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData0.getState();
        long long11 = indexMetaData0.getVersion();
        java.lang.String str12 = indexMetaData0.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap13 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamInput streamInput14 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.readDiffFrom(streamInput14);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "_na_" + "'", str12, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap13);
    }

    @Test
    public void test08812() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08812");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putCustom("index.blocks.read", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder12.version(0L);
        boolean boolean15 = indexMetaData0.equals((java.lang.Object) builder12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        bulkShardRequest17.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest17.timeout(timeValue21);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest23 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest22);
        org.elasticsearch.action.ActionRequest actionRequest24 = bulkItemRequest23.request();
        org.elasticsearch.tasks.TaskId taskId25 = actionRequest24.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting26 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest28.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure33 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting26, "primary_terms", (java.lang.Throwable) actionRequestValidationException31, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple34 = org.elasticsearch.common.collect.Tuple.tuple(taskId25, (java.lang.IllegalArgumentException) actionRequestValidationException31);
        boolean boolean35 = indexMetaData0.equals((java.lang.Object) taskId25);
        long long36 = indexMetaData0.getVersion();
        org.elasticsearch.common.io.stream.StreamInput streamInput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData38 = indexMetaData0.readFrom(streamInput37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(actionRequest24);
        org.junit.Assert.assertNotNull(taskId25);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
        org.junit.Assert.assertNotNull(taskIdTuple34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 1L + "'", long36 == 1L);
    }

    @Test
    public void test08813() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08813");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder10.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder10.creationDate((long) 97);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("current version [3] is different than the one provided [101]", custom16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        long long21 = indexMetaData18.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData18.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData18.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData24.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state31 = indexMetaData28.getState();
        boolean boolean32 = indexMetaData24.equals((java.lang.Object) state31);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData24.getCustoms();
        int int34 = indexMetaData24.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff35 = indexMetaData18.diff(indexMetaData24);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap37 = indexMetaData24.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap38 = indexMetaData24.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet43 = null; // flaky: indexMetaData39.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData39);
        org.elasticsearch.Version version46 = indexMetaData39.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData39);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData48 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = indexMetaData48.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData48);
        java.lang.String str52 = indexMetaData48.getIndexUUID();
        int int53 = indexMetaData48.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state54 = indexMetaData48.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder47.state(state54);
        byte byte56 = state54.id();
        byte byte57 = state54.id();
        boolean boolean58 = indexMetaData24.equals((java.lang.Object) state54);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = builder14.state(state54);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData60 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long61 = indexMetaData60.getCreationDate();
        boolean boolean63 = indexMetaData60.isSameUUID("index.version.created_string");
        int int64 = indexMetaData60.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state65 = indexMetaData60.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state66 = indexMetaData60.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state67 = indexMetaData60.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder59.state(state67);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = builder68.mapping("current version [97] is higher or equal to the one provided [0]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L) + "'", long21 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertTrue("'" + state31 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state31.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean32 + "' != '" + false + "'", boolean32 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertTrue("'" + int34 + "' != '" + 1 + "'", int34 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff35);
        org.junit.Assert.assertNotNull(strImmutableOpenMap37);
        org.junit.Assert.assertNotNull(strImmutableOpenMap38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertNull(strSet43);
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(version46);
        org.junit.Assert.assertNotNull(indexMetaData48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertEquals("'" + str52 + "' != '" + "_na_" + "'", str52, "_na_");
        org.junit.Assert.assertTrue("'" + int53 + "' != '" + 1 + "'", int53 == 1);
        org.junit.Assert.assertTrue("'" + state54 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state54.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertTrue("'" + byte56 + "' != '" + (byte) 0 + "'", byte56 == (byte) 0);
        org.junit.Assert.assertTrue("'" + byte57 + "' != '" + (byte) 0 + "'", byte57 == (byte) 0);
        org.junit.Assert.assertTrue("'" + boolean58 + "' != '" + false + "'", boolean58 == false);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(indexMetaData60);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + (-1L) + "'", long61 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean63 + "' != '" + true + "'", boolean63 == true);
        org.junit.Assert.assertTrue("'" + int64 + "' != '" + 0 + "'", int64 == 0);
        org.junit.Assert.assertTrue("'" + state65 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state65.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state66 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state66.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state67 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state67.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder68);
        org.junit.Assert.assertNull(mappingMetaData70);
    }

    @Test
    public void test08814() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08814");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        boolean boolean9 = indexMetaData6.isSameUUID("index.version.created_string");
        int int10 = indexMetaData6.getNumberOfReplicas();
        boolean boolean12 = indexMetaData6.isSameUUID("");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData6.getSettings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData6.getActiveAllocationIds();
        long long16 = indexMetaData6.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData6.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters18 = indexMetaData6.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + (-1L) + "'", long16 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNull(discoveryNodeFilters18);
    }

    @Test
    public void test08815() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08815");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        int int4 = indexMetaData0.getNumberOfReplicas();
        boolean boolean6 = indexMetaData0.isSameUUID("");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap7 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
    }

    @Test
    public void test08816() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08816");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        boolean boolean13 = versionType0.isVersionConflictForReads((long) (short) 100, (long) (byte) 10);
        org.elasticsearch.index.VersionType versionType14 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean16 = versionType0.validateVersionForWrites((long) ' ');
        org.elasticsearch.index.VersionType versionType17 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean19 = versionType0.validateVersionForWrites(0L);
        long long22 = versionType0.updateVersion(101L, 54L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNotNull(versionType17);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 102L + "'", long22 == 102L);
    }

    @Test
    public void test08817() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08817");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        boolean boolean6 = versionType0.isVersionConflictForReads(11L, 11L);
        boolean boolean9 = versionType0.isVersionConflictForReads((long) (short) -1, (long) (byte) 10);
        long long12 = versionType0.updateVersion((long) (short) 10, 35L);
        boolean boolean16 = versionType0.isVersionConflictForWrites(97L, 33L, false);
        boolean boolean18 = versionType0.validateVersionForWrites(33L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 11L + "'", long12 == 11L);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
    }

    @Test
    public void test08818() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08818");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        long long4 = bulkShardRequest3.seqNo();
        long long5 = bulkShardRequest3.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest3.consistencyLevel();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput7 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest3.writeTo(streamOutput7);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test08819() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08819");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [97] is different than the one provided [2]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test08820() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08820");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.index.Index index10 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData4.includeFilters();
        long long12 = indexMetaData4.getCreationDate();
        org.elasticsearch.index.Index index13 = indexMetaData4.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
        org.junit.Assert.assertNull(index13);
    }

    @Test
    public void test08821() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08821");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("current version [97] is higher or equal to the one provided [54]");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
    }

    @Test
    public void test08822() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08822");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("current version [0] is different than the one provided [1]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.common.xcontent.XContentParser xContentParser10 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher11 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = indexMetaData0.fromXContent(xContentParser10, parseFieldMatcher11);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test08823() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08823");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long9 = indexMetaData6.getVersion();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData6.getSettings();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder5.settings(settings11);
        int int15 = builder14.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = builder14.build();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
        org.junit.Assert.assertNotNull(indexMetaData16);
    }

    @Test
    public void test08824() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08824");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        boolean boolean10 = indexMetaData0.isSameUUID("current version [35] is different than the one provided [35]");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting13 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        bulkShardRequest16.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest16.timeout(timeValue20);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest22 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest21);
        org.elasticsearch.action.ActionRequest actionRequest23 = bulkItemRequest22.request();
        org.elasticsearch.tasks.TaskId taskId24 = actionRequest23.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions29 = bulkShardRequest27.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException30 = bulkShardRequest27.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure32 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting25, "primary_terms", (java.lang.Throwable) actionRequestValidationException30, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple33 = org.elasticsearch.common.collect.Tuple.tuple(taskId24, (java.lang.IllegalArgumentException) actionRequestValidationException30);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure35 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting13, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException30, "index.creation_date_string");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting36 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.collect.Tuple<java.lang.IllegalArgumentException, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>> illegalArgumentExceptionTuple37 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.IllegalArgumentException) actionRequestValidationException30, settingsSetting36);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.common.ValidationException> paramsTuple38 = org.elasticsearch.common.collect.Tuple.tuple(params12, (org.elasticsearch.common.ValidationException) actionRequestValidationException30);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder11, params12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(actionRequest23);
        org.junit.Assert.assertNotNull(taskId24);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions29);
        org.junit.Assert.assertNotNull(actionRequestValidationException30);
        org.junit.Assert.assertNotNull(taskIdTuple33);
        org.junit.Assert.assertNotNull(settingsSetting36);
        org.junit.Assert.assertNotNull(illegalArgumentExceptionTuple37);
        org.junit.Assert.assertNotNull(paramsTuple38);
    }

    @Test
    public void test08825() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08825");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [-1] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = builder3.mapping("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.numberOfReplicas(32);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08826() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08826");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.index.Index index16 = indexMetaData14.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData14.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index19 = indexMetaData14.getMergeSourceIndex();
        org.elasticsearch.index.Index index20 = indexMetaData14.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData14.getMappings();
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        int int24 = indexMetaData14.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap25 = indexMetaData14.getMappings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(index19);
        org.junit.Assert.assertNull(index20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 0 + "'", int24 == 0);
        org.junit.Assert.assertNotNull(strImmutableOpenMap25);
    }

    @Test
    public void test08827() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08827");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        bulkShardRequest0.seqNo((long) (short) 100);
        bulkShardRequest0.seqNo(100L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.primaryTerm();
        bulkShardRequest10.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest10.timeout(timeValue14);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest16 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest15);
        bulkShardRequest15.setParentTask("index.version.created_string", (long) (byte) -1);
        org.elasticsearch.index.shard.ShardId shardId20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.setShardId(shardId20);
        org.elasticsearch.tasks.TaskId taskId22 = bulkShardRequest21.getParentTask();
        bulkShardRequest0.setParentTask(taskId22);
        long long24 = bulkShardRequest0.primaryTerm();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(taskId22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
    }

    @Test
    public void test08828() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08828");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("index.priority");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.index("");
        long long12 = bulkShardRequest9.seqNo();
        org.elasticsearch.common.io.stream.StreamInput streamInput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest9.readFrom(streamInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08829() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08829");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        java.lang.String[] strArray26 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet27);
        int int30 = builder29.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.version((long) ' ');
        java.lang.String str33 = builder29.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder29.version((long) (byte) 2);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder29.index("current version [-1] is different than the one provided [3]");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + (-1) + "'", int30 == (-1));
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "index.version.upgraded_string" + "'", str33, "index.version.upgraded_string");
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test08830() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08830");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest1.remoteAddress(transportAddress5);
        bulkShardRequest1.setParentTask("current version [-1] is different than the one provided [11]", (long) (byte) 10);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        int int11 = bulkItemRequest10.id();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 32 + "'", int11 == 32);
    }

    @Test
    public void test08831() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08831");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) state7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.settings.Settings.Builder builder12 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(builder12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder11);
    }

    @Test
    public void test08832() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08832");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) state7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.Version version14 = indexMetaData0.getCreationVersion();
        long long15 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + (-1L) + "'", long15 == (-1L));
    }

    @Test
    public void test08833() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08833");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        long long4 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest5.getParentTask();
        bulkShardRequest2.setParentTask(taskId6);
        bulkShardRequest1.setParentTask(taskId6);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest1.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest1.remoteAddress(transportAddress11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions16 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest14.validate();
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest14.setShardId(shardId18);
        org.elasticsearch.action.support.IndicesOptions indicesOptions20 = bulkShardRequest14.indicesOptions();
        org.elasticsearch.index.shard.ShardId shardId21 = bulkShardRequest14.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest22 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest14);
        long long23 = bulkShardRequest14.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest24.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest24.index("index.version.created");
        bulkShardRequest24.primaryTerm((long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long33 = bulkShardRequest32.seqNo();
        long long34 = bulkShardRequest32.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId36 = bulkShardRequest35.getParentTask();
        bulkShardRequest32.setParentTask(taskId36);
        bulkShardRequest24.setParentTask(taskId36);
        bulkShardRequest14.setParentTask(taskId36);
        bulkShardRequest1.setParentTask(taskId36);
        org.elasticsearch.index.shard.ShardId shardId41 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest1.setShardId(shardId41);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput43 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest42.writeTo(streamOutput43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions16);
        org.junit.Assert.assertNotNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(indicesOptions20);
        org.junit.Assert.assertNull(shardId21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + long33 + "' != '" + 0L + "'", long33 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(taskId36);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
    }

    @Test
    public void test08834() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08834");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = builder1.mapping("index.blocks.metadata");
        long long4 = builder1.version();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = builder1.mapping("current version [52] is different than the one provided [97]");
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 1L + "'", long4 == 1L);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test08835() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08835");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder8.removeAllAliases();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(builder9);
    }

    @Test
    public void test08836() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08836");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest1.remoteAddress();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest1.remoteAddress();
        long long9 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest(35, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest11 = bulkItemRequest10.request();
        org.elasticsearch.common.io.stream.StreamInput streamInput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest10.readFrom(streamInput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(actionRequest11);
    }

    @Test
    public void test08837() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08837");
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromString("current version [100] is different than the one provided [0]");
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [100] is different than the one provided [0]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08838() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08838");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        long long6 = indexMetaData0.getVersion();
        java.lang.String str7 = indexMetaData0.getIndexUUID();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) (short) 100);
        long long10 = indexMetaData0.getVersion();
        org.apache.lucene.util.Version version11 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.includeFilters();
        boolean boolean14 = indexMetaData0.isSameUUID("current version [0] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "_na_" + "'", str7, "_na_");
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNull(version11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
    }

    @Test
    public void test08839() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08839");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom1 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.registerPrototype("current version [3] is different than the one provided [101]", custom1);
// flaky:             org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08840() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08840");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress3 = null;
        bulkShardRequest0.remoteAddress(transportAddress3);
        long long5 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest0.validate();
        bulkShardRequest0.seqNo((long) (byte) -1);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException9 = bulkShardRequest0.validate();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(actionRequestValidationException9);
    }

    @Test
    public void test08841() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08841");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters1 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData3 = indexMetaData0.mapping("current version [10] is different than the one provided [32]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mappingOrDefault("index.creation_date_string");
        org.elasticsearch.common.xcontent.XContentParser xContentParser7 = null;
        org.elasticsearch.common.ParseFieldMatcher parseFieldMatcher8 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = indexMetaData0.fromXContent(xContentParser7, parseFieldMatcher8);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(discoveryNodeFilters1);
        org.junit.Assert.assertNull(mappingMetaData3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
    }

    @Test
    public void test08842() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08842");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.seqNo();
        org.elasticsearch.index.shard.ShardId shardId14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.setShardId(shardId14);
        bulkShardRequest12.seqNo(0L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException18 = bulkShardRequest12.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure20 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting10, "index.shadow_replicas", (java.lang.Throwable) actionRequestValidationException18, "current version [3] is different than the one provided [11]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure22 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "current version [10] is different than the one provided [1]", (java.lang.Throwable) actionRequestValidationException18, "_na_");
        java.lang.String str23 = shardFailure22.indexUUID;
        boolean boolean24 = indexMetaData0.equals((java.lang.Object) shardFailure22);
        java.lang.String str25 = shardFailure22.reason;
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(actionRequestValidationException18);
        org.junit.Assert.assertEquals("'" + str23 + "' != '" + "_na_" + "'", str23, "_na_");
        org.junit.Assert.assertTrue("'" + boolean24 + "' != '" + false + "'", boolean24 == false);
        org.junit.Assert.assertEquals("'" + str25 + "' != '" + "current version [10] is different than the one provided [1]" + "'", str25, "current version [10] is different than the one provided [1]");
    }

    @Test
    public void test08843() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08843");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions3 = bulkShardRequest1.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest1.remoteAddress(transportAddress4);
        long long6 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        org.elasticsearch.index.shard.ShardId shardId9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest7.setShardId(shardId9);
        org.elasticsearch.index.shard.ShardId shardId11 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest10.setShardId(shardId11);
        org.elasticsearch.common.unit.TimeValue timeValue13 = bulkShardRequest10.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest1.timeout(timeValue13);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest15 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.seqNo();
        long long20 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId22 = bulkShardRequest21.getParentTask();
        bulkShardRequest18.setParentTask(taskId22);
        bulkShardRequest17.setParentTask(taskId22);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest25 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = bulkShardRequest17.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest17.remoteAddress(transportAddress27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long30 = bulkShardRequest29.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions31 = bulkShardRequest29.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException32 = bulkShardRequest29.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long34 = bulkShardRequest33.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions35 = bulkShardRequest33.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest33.remoteAddress(transportAddress36);
        long long38 = bulkShardRequest33.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue39 = bulkShardRequest33.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest29.timeout(timeValue39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest17.timeout(timeValue39);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest42 = bulkShardRequest1.timeout(timeValue39);
        org.elasticsearch.action.support.IndicesOptions indicesOptions43 = bulkShardRequest1.indicesOptions();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions3);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(timeValue13);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(taskId22);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel26 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel26.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions31);
        org.junit.Assert.assertNotNull(actionRequestValidationException32);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions35);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertNotNull(bulkShardRequest42);
        org.junit.Assert.assertNotNull(indicesOptions43);
    }

    @Test
    public void test08844() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08844");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap4 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("");
        long long8 = indexMetaData5.getCreationDate();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData5.mapping("hi!");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff11 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mapping("current version [52] is different than the one provided [1]");
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData0.getSettings();
        int int15 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + (-1L) + "'", long8 == (-1L));
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(indexMetaDataDiff11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 1 + "'", int15 == 1);
    }

    @Test
    public void test08845() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08845");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index13 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.index.Index index14 = indexMetaData0.getMergeSourceIndex();
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.getInitialRecoveryFilters();
        long long18 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData19.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData19.getAliases();
        long long25 = indexMetaData19.getVersion();
        java.lang.String str26 = indexMetaData19.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.diff(indexMetaData19);
        long long29 = indexMetaData19.getVersion();
        boolean boolean31 = indexMetaData19.isSameUUID("_na_");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_na_" + "'", str26, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 1L + "'", long29 == 1L);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + true + "'", boolean31 == true);
    }

    @Test
    public void test08846() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08846");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.primaryTerm();
        bulkShardRequest7.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest7.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel11);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple17 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest12, state16);
        long long18 = bulkShardRequest12.seqNo();
        bulkShardRequest12.setParentTask("current version [97] is different than the one provided [35]", 1L);
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest24 = new org.elasticsearch.action.bulk.BulkItemRequest(100, (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
    }

    @Test
    public void test08847() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08847");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        java.lang.String str12 = settingsSettingTuple11.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap17 = indexMetaData13.getMappings();
        int int18 = indexMetaData13.getNumberOfReplicas();
        org.apache.lucene.util.Version version19 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap20 = indexMetaData13.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet22 = null; // flaky: indexMetaData13.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData13.mappingOrDefault("index.shared_filesystem");
        int int25 = indexMetaData13.getNumberOfReplicas();
        org.elasticsearch.index.Index index26 = indexMetaData13.getMergeSourceIndex();
        org.elasticsearch.index.Index index27 = indexMetaData13.getMergeSourceIndex();
        org.apache.lucene.util.Version version28 = indexMetaData13.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap29 = indexMetaData13.getMappings();
        boolean boolean30 = settingsSettingTuple11.equals((java.lang.Object) strImmutableOpenMap29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = settingsSettingTuple11.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = settingsSettingTuple11.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = settingsSettingTuple11.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting34 = settingsSettingTuple11.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = settingsSettingTuple11.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData36 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData38 = indexMetaData36.mappingOrDefault("");
        long long39 = indexMetaData36.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData36);
        boolean boolean41 = settingsSettingTuple11.equals((java.lang.Object) builder40);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long44 = bulkShardRequest43.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest43.index("current version [-1] is different than the one provided [0]");
        long long47 = bulkShardRequest46.primaryTerm();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom51 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder49.putCustom("index.blocks.read", custom51);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder53 = builder49.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder49.creationDate((long) ' ');
        java.lang.String[] strArray74 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet75 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean76 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet75, strArray74);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder49.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet75);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, java.util.AbstractSet<java.lang.String>> streamableTuple78 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest46, (java.util.AbstractSet<java.lang.String>) strSet75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder40.putActiveAllocationIds(100, (java.util.Set<java.lang.String>) strSet75);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertTrue("'" + int18 + "' != '" + 0 + "'", int18 == 0);
        org.junit.Assert.assertNull(version19);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap20);
        org.junit.Assert.assertNull(strSet22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(index26);
        org.junit.Assert.assertNull(index27);
        org.junit.Assert.assertNull(version28);
        org.junit.Assert.assertNotNull(strImmutableOpenMap29);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNotNull(settingsSetting34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(indexMetaData36);
        org.junit.Assert.assertNull(mappingMetaData38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + false + "'", boolean41 == false);
        org.junit.Assert.assertTrue("'" + long44 + "' != '" + 0L + "'", long44 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertNotNull(builder53);
        org.junit.Assert.assertNotNull(builder55);
        org.junit.Assert.assertNotNull(strArray74);
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + true + "'", boolean76 == true);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertNotNull(streamableTuple78);
        org.junit.Assert.assertNotNull(builder79);
    }

    @Test
    public void test08848() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08848");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.version((long) (byte) -1);
        int int7 = builder6.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder6.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        org.elasticsearch.Version version14 = indexMetaData10.getUpgradedVersion();
        int int15 = indexMetaData10.getNumberOfReplicas();
        org.apache.lucene.util.Version version16 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData10.mapping("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData10.mapping("current version [35] is different than the one provided [-1]");
        org.elasticsearch.common.settings.Settings settings21 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder6.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData23);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap27 = indexMetaData23.getMappings();
        int int28 = indexMetaData23.getNumberOfReplicas();
        long long29 = indexMetaData23.getCreationDate();
        org.elasticsearch.common.settings.Settings settings30 = indexMetaData23.getSettings();
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder6.settings(settings32);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = builder33.mapping("");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + (-1) + "'", int7 == (-1));
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(settings21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(strImmutableOpenMap27);
        org.junit.Assert.assertTrue("'" + int28 + "' != '" + 0 + "'", int28 == 0);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + (-1L) + "'", long29 == (-1L));
        org.junit.Assert.assertNotNull(settings30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertNull(mappingMetaData35);
    }

    @Test
    public void test08849() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08849");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        long long7 = builder6.version();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData17.getState();
        boolean boolean21 = indexMetaData13.equals((java.lang.Object) state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder12.state(state20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder24.settings(settings25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long30 = indexMetaData27.getVersion();
        org.elasticsearch.common.settings.Settings settings31 = indexMetaData27.getSettings();
        org.elasticsearch.common.settings.Settings settings32 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder26.settings(settings31);
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder22.settings(settings31);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder22.creationDate(36L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.numberOfReplicas((int) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData41 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData43 = indexMetaData41.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state44 = indexMetaData41.getState();
        org.elasticsearch.Version version45 = indexMetaData41.getUpgradedVersion();
        int int46 = indexMetaData41.getNumberOfReplicas();
        org.apache.lucene.util.Version version47 = indexMetaData41.getMinimumCompatibleVersion();
        int int48 = indexMetaData41.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters49 = indexMetaData41.requireFilters();
        org.elasticsearch.index.Index index50 = indexMetaData41.getMergeSourceIndex();
        org.elasticsearch.index.Index index51 = indexMetaData41.getMergeSourceIndex();
        java.util.Set<java.lang.String> strSet53 = indexMetaData41.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = builder37.putActiveAllocationIds((int) (short) 10, strSet53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder55 = builder6.putActiveAllocationIds(100, strSet53);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + false + "'", boolean21 == false);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 1L + "'", long30 == 1L);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(indexMetaData41);
        org.junit.Assert.assertNull(mappingMetaData43);
        org.junit.Assert.assertTrue("'" + state44 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state44.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version45);
        org.junit.Assert.assertTrue("'" + int46 + "' != '" + 0 + "'", int46 == 0);
        org.junit.Assert.assertNull(version47);
        org.junit.Assert.assertTrue("'" + int48 + "' != '" + 1 + "'", int48 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters49);
        org.junit.Assert.assertNull(index50);
        org.junit.Assert.assertNull(index51);
        org.junit.Assert.assertNotNull(strSet53);
        org.junit.Assert.assertNotNull(builder54);
        org.junit.Assert.assertNotNull(builder55);
    }

    @Test
    public void test08850() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08850");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        int int12 = indexMetaData0.getNumberOfShards();
        org.apache.lucene.util.Version version13 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData0.getMappings();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap15 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNull(version13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap15);
    }

    @Test
    public void test08851() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08851");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean21 = versionType0.isVersionConflictForWrites((long) (short) 0, 101L, true);
        long long24 = versionType0.updateVersion(100L, 101L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean27 = versionType0.validateVersionForReads((long) 10);
        org.elasticsearch.index.VersionType versionType28 = versionType0.versionTypeForReplicationAndRecovery();
        java.lang.String str32 = versionType0.explainConflictForWrites(98L, 101L, false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 101L + "'", long24 == 101L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
        org.junit.Assert.assertNotNull(versionType28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "current version [98] is different than the one provided [101]" + "'", str32, "current version [98] is different than the one provided [101]");
    }

    @Test
    public void test08852() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08852");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) state7);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters11 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap12 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.version(10L);
        // The following exception was thrown during execution in test generation
        try {
            long long17 = builder13.primaryTerm(32);
            org.junit.Assert.fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException; message: 32");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(discoveryNodeFilters11);
        org.junit.Assert.assertNotNull(strImmutableOpenMap12);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08853() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08853");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        java.lang.Throwable throwable2 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure4 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.shared_filesystem", throwable2, "index.shared_filesystem");
        java.lang.String str5 = shardFailure4.reason;
        java.lang.Throwable throwable6 = shardFailure4.cause;
        java.lang.String str7 = shardFailure4.reason;
        java.lang.String str8 = shardFailure4.indexUUID;
        java.lang.String str9 = shardFailure4.indexUUID;
        java.lang.String str10 = shardFailure4.indexUUID;
        java.lang.String str11 = shardFailure4.reason;
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "index.shared_filesystem" + "'", str5, "index.shared_filesystem");
        org.junit.Assert.assertNull(throwable6);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "index.shared_filesystem" + "'", str7, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "index.shared_filesystem" + "'", str8, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "index.shared_filesystem" + "'", str9, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.shared_filesystem" + "'", str10, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "index.shared_filesystem" + "'", str11, "index.shared_filesystem");
    }

    @Test
    public void test08854() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08854");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [0] is higher or equal to the one provided [32]");
        org.junit.Assert.assertNotNull(builder1);
    }

    @Test
    public void test08855() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08855");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.index.Index index22 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder23 = null;
        java.util.AbstractCollection<java.lang.String> strCollection24 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params25 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple26 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection24, params25);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder27 = indexMetaData0.toXContent(xContentBuilder23, params25);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNull(index22);
        org.junit.Assert.assertNotNull(params25);
    }

    @Test
    public void test08856() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08856");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        long long6 = indexMetaData0.getVersion();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        java.util.Set<java.lang.String> strSet10 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        long long11 = indexMetaData0.getVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNull(strSet10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 1L + "'", long11 == 1L);
    }

    @Test
    public void test08857() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08857");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [2] is different than the one provided [3]");
    }

    @Test
    public void test08858() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08858");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        long long4 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest5.getParentTask();
        bulkShardRequest2.setParentTask(taskId6);
        bulkShardRequest1.setParentTask(taskId6);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest1.consistencyLevel();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest1.getParentTask();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput12 = null;
        // The following exception was thrown during execution in test generation
        try {
            taskId11.writeTo(streamOutput12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId11);
    }

    @Test
    public void test08859() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08859");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean21 = versionType0.isVersionConflictForWrites(0L, 11L, true);
        boolean boolean25 = versionType0.isVersionConflictForWrites((long) (byte) 100, (long) (short) 1, false);
        org.elasticsearch.index.VersionType versionType26 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput27 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType26.writeTo(streamOutput27);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertNotNull(versionType26);
    }

    @Test
    public void test08860() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08860");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException3 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue4 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        long long6 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest0.timeout(timeValue7);
        org.elasticsearch.common.transport.TransportAddress transportAddress9 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest10.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress13 = null;
        bulkShardRequest10.remoteAddress(transportAddress13);
        long long15 = bulkShardRequest10.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.index.shard.ShardId shardId18 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest16.setShardId(shardId18);
        org.elasticsearch.index.shard.ShardId shardId20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest19.setShardId(shardId20);
        org.elasticsearch.common.unit.TimeValue timeValue22 = bulkShardRequest19.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest10.timeout(timeValue22);
        long long24 = bulkShardRequest10.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress25 = bulkShardRequest10.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue26 = bulkShardRequest10.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest0.timeout(timeValue26);
        java.lang.String str28 = bulkShardRequest0.index();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertNotNull(actionRequestValidationException3);
        org.junit.Assert.assertNotNull(timeValue4);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNull(transportAddress9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(timeValue22);
        org.junit.Assert.assertNotNull(bulkShardRequest23);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNull(transportAddress25);
        org.junit.Assert.assertNotNull(timeValue26);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertNull(str28);
    }

    @Test
    public void test08861() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08861");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        bulkShardRequest0.seqNo(0L);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException6 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest0.timeout();
        org.elasticsearch.index.shard.ShardId shardId8 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest0.setShardId(shardId8);
        org.elasticsearch.common.transport.TransportAddress transportAddress10 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest12.index("index.version.created");
        bulkShardRequest12.primaryTerm((long) '#');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long21 = bulkShardRequest20.seqNo();
        long long22 = bulkShardRequest20.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId24 = bulkShardRequest23.getParentTask();
        bulkShardRequest20.setParentTask(taskId24);
        bulkShardRequest12.setParentTask(taskId24);
        org.elasticsearch.index.shard.ShardId shardId27 = bulkShardRequest12.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest28 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest12);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel29 = bulkShardRequest12.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel29);
        bulkShardRequest0.primaryTerm(0L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(actionRequestValidationException6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNull(transportAddress10);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(taskId24);
        org.junit.Assert.assertNull(shardId27);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel29 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel29.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest30);
    }

    @Test
    public void test08862() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08862");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.FORCE;
        boolean boolean5 = versionType1.isVersionConflictForWrites(0L, (long) 'a', false);
        boolean boolean7 = versionType1.validateVersionForReads((long) (-1));
        boolean boolean9 = versionType1.validateVersionForReads(101L);
        boolean boolean13 = versionType1.isVersionConflictForWrites(11L, (long) '#', true);
        boolean boolean15 = versionType1.validateVersionForReads((long) (short) 1);
        boolean boolean17 = versionType1.validateVersionForWrites(36L);
        boolean boolean19 = versionType1.validateVersionForReads((long) ' ');
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType20 = org.elasticsearch.index.VersionType.fromString("", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match []");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + false + "'", boolean5 == false);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + false + "'", boolean7 == false);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + true + "'", boolean15 == true);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + true + "'", boolean19 == true);
    }

    @Test
    public void test08863() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08863");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getNumberOfShards();
        java.util.Set<java.lang.String> strSet8 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.excludeFilters();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(strSet8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test08864() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08864");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("index.blocks.read");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("current version [11] is different than the one provided [97]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.version((long) (short) 100);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfShards((int) (byte) 100);
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
    }

    @Test
    public void test08865() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08865");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        boolean boolean21 = versionType0.isVersionConflictForWrites((long) (short) 0, 101L, true);
        long long24 = versionType0.updateVersion(100L, 101L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean28 = versionType0.isVersionConflictForReads(52L, (long) '4');
        byte byte29 = versionType0.getValue();
        java.lang.String str33 = versionType0.explainConflictForWrites((long) (byte) 2, (long) (byte) 10, true);
        boolean boolean35 = versionType0.validateVersionForReads(0L);
        boolean boolean39 = versionType0.isVersionConflictForWrites(33L, (long) ' ', false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean21 + "' != '" + true + "'", boolean21 == true);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 101L + "'", long24 == 101L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + byte29 + "' != '" + (byte) 0 + "'", byte29 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "current version [2] is different than the one provided [10]" + "'", str33, "current version [2] is different than the one provided [10]");
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test08866() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08866");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        org.elasticsearch.common.settings.Settings settings11 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertNotNull(builder12);
    }

    @Test
    public void test08867() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08867");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        boolean boolean13 = versionType0.isVersionConflictForReads(0L, (-1L));
        org.elasticsearch.index.VersionType versionType14 = versionType0.versionTypeForReplicationAndRecovery();
        long long17 = versionType14.updateVersion(5L, (long) 10);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertNotNull(versionType14);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 10L + "'", long17 == 10L);
    }

    @Test
    public void test08868() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08868");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_shards");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.blocks.read");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData0.mappingOrDefault("current version [4] is different than the one provided [2]");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
    }

    @Test
    public void test08869() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08869");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.removeAlias("index.blocks.metadata");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state12 = indexMetaData9.getState();
        boolean boolean13 = indexMetaData5.equals((java.lang.Object) state12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder4.state(state12);
        byte byte15 = state12.id();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + state12 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state12.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 0 + "'", byte15 == (byte) 0);
    }

    @Test
    public void test08870() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08870");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("index.priority");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest10.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest10.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.primaryTerm();
        bulkShardRequest16.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state25 = indexMetaData22.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple26 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest21, state25);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions29 = bulkShardRequest27.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException30 = bulkShardRequest27.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long32 = bulkShardRequest31.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions33 = bulkShardRequest31.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress34 = null;
        bulkShardRequest31.remoteAddress(transportAddress34);
        long long36 = bulkShardRequest31.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest31.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest27.timeout(timeValue37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest21.timeout(timeValue37);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel40 = bulkShardRequest21.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel40);
        bulkShardRequest41.primaryTerm((long) (byte) 10);
        bulkShardRequest41.setParentTask("current version [97] is different than the one provided [2]", (long) 35);
        org.elasticsearch.common.io.stream.StreamInput streamInput47 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest41.readFrom(streamInput47);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel20 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel20.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertTrue("'" + state25 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state25.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions29);
        org.junit.Assert.assertNotNull(actionRequestValidationException30);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions33);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel40 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel40.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest41);
    }

    @Test
    public void test08871() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08871");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest5.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = bulkShardRequest5.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.seqNo();
        long long11 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest12.getParentTask();
        bulkShardRequest9.setParentTask(taskId13);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest9.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException17 = bulkShardRequest16.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest18 = new org.elasticsearch.action.bulk.BulkItemRequest((int) ' ', (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        org.elasticsearch.common.unit.TimeValue timeValue19 = bulkShardRequest16.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest5.timeout(timeValue19);
        org.elasticsearch.common.unit.TimeValue timeValue21 = bulkShardRequest20.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest22.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = bulkShardRequest22.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple30 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest27, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest28);
        bulkShardRequest28.primaryTerm((long) '4');
        bulkShardRequest28.seqNo((long) 100);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long36 = bulkShardRequest35.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest35.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest35.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long42 = bulkShardRequest41.primaryTerm();
        bulkShardRequest41.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel45 = bulkShardRequest41.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = bulkShardRequest40.consistencyLevel(writeConsistencyLevel45);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData47 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData49 = indexMetaData47.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state50 = indexMetaData47.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple51 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest46, state50);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest52 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long53 = bulkShardRequest52.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions54 = bulkShardRequest52.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException55 = bulkShardRequest52.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long57 = bulkShardRequest56.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions58 = bulkShardRequest56.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress59 = null;
        bulkShardRequest56.remoteAddress(transportAddress59);
        long long61 = bulkShardRequest56.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue62 = bulkShardRequest56.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = bulkShardRequest52.timeout(timeValue62);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest64 = bulkShardRequest46.timeout(timeValue62);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel65 = bulkShardRequest64.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = bulkShardRequest28.consistencyLevel(writeConsistencyLevel65);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest67 = bulkShardRequest20.consistencyLevel(writeConsistencyLevel65);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertNull(transportAddress7);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNull(actionRequestValidationException17);
        org.junit.Assert.assertNotNull(timeValue19);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(bulkShardRequest27);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertTrue("'" + long36 + "' != '" + 0L + "'", long36 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel45 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel45.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest46);
        org.junit.Assert.assertNotNull(indexMetaData47);
        org.junit.Assert.assertNull(mappingMetaData49);
        org.junit.Assert.assertTrue("'" + state50 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state50.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple51);
        org.junit.Assert.assertTrue("'" + long53 + "' != '" + 0L + "'", long53 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions54);
        org.junit.Assert.assertNotNull(actionRequestValidationException55);
        org.junit.Assert.assertTrue("'" + long57 + "' != '" + 0L + "'", long57 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions58);
        org.junit.Assert.assertTrue("'" + long61 + "' != '" + 0L + "'", long61 == 0L);
        org.junit.Assert.assertNotNull(timeValue62);
        org.junit.Assert.assertNotNull(bulkShardRequest63);
        org.junit.Assert.assertNotNull(bulkShardRequest64);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel65 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel65.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest66);
        org.junit.Assert.assertNotNull(bulkShardRequest67);
    }

    @Test
    public void test08872() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08872");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        int int6 = indexMetaData0.getNumberOfShards();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting10 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple12 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting10, builder11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = settingsSettingTuple12.v2();
        java.lang.String str14 = settingsSettingTuple12.toString();
        java.lang.String str15 = settingsSettingTuple12.toString();
        org.elasticsearch.index.VersionType versionType16 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean19 = versionType16.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str22 = versionType16.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str26 = versionType16.explainConflictForWrites((long) 10, (long) ' ', true);
        byte byte27 = versionType16.getValue();
        long long30 = versionType16.updateVersion((long) '#', 100L);
        boolean boolean34 = versionType16.isVersionConflictForWrites((long) (-1), (long) '#', true);
        byte byte35 = versionType16.getValue();
        java.lang.String str39 = versionType16.explainConflictForWrites(101L, (long) ' ', true);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.index.VersionType> settingsSettingTupleTuple40 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.index.VersionType>(settingsSettingTuple12, versionType16);
        java.lang.String str41 = settingsSettingTuple12.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = settingsSettingTuple12.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str45 = builder44.index();
        long long46 = builder44.version();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder44.index("current version [-1] is different than the one provided [11]");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData50 = builder44.mapping("current version [101] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder44.creationDate((long) 0);
        boolean boolean53 = settingsSettingTuple12.equals((java.lang.Object) builder52);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>> indexMetaDataDiffableTuple54 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>>((org.elasticsearch.cluster.Diffable<org.elasticsearch.cluster.metadata.IndexMetaData>) indexMetaData0, settingsSettingTuple12);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(settingsSetting10);
        org.junit.Assert.assertNotNull(settingsSettingTuple12);
        org.junit.Assert.assertNull(builder13);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str14, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(versionType16);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str22, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str26, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + byte27 + "' != '" + (byte) 0 + "'", byte27 == (byte) 0);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 36L + "'", long30 == 36L);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + true + "'", boolean34 == true);
        org.junit.Assert.assertTrue("'" + byte35 + "' != '" + (byte) 0 + "'", byte35 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str39 + "' != '" + "current version [101] is different than the one provided [32]" + "'", str39, "current version [101] is different than the one provided [32]");
        org.junit.Assert.assertEquals("'" + str41 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str41, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNull(builder42);
        org.junit.Assert.assertEquals("'" + str45 + "' != '" + "index.version.minimum_compatible" + "'", str45, "index.version.minimum_compatible");
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 1L + "'", long46 == 1L);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNull(mappingMetaData50);
        org.junit.Assert.assertNotNull(builder52);
        org.junit.Assert.assertTrue("'" + boolean53 + "' != '" + false + "'", boolean53 == false);
    }

    @Test
    public void test08873() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08873");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        long long6 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
    }

    @Test
    public void test08874() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08874");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mapping("index.version.created_string");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder10 = null;
        java.util.AbstractCollection<java.lang.String> strCollection11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple13 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection11, params12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff19 = indexMetaData14.diff(indexMetaData18);
        org.elasticsearch.index.Index index20 = indexMetaData18.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData18.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index23 = indexMetaData18.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings26 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = builder25.settings(settings26);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long31 = indexMetaData28.getVersion();
        org.elasticsearch.common.settings.Settings settings32 = indexMetaData28.getSettings();
        org.elasticsearch.common.settings.Settings settings33 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder27.settings(settings32);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData35 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData37 = indexMetaData35.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData35);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData41 = indexMetaData39.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state42 = indexMetaData39.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData43 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData45 = indexMetaData43.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state46 = indexMetaData43.getState();
        boolean boolean47 = indexMetaData39.equals((java.lang.Object) state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder38.state(state46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder27.state(state46);
        boolean boolean50 = indexMetaData18.equals((java.lang.Object) builder27);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state51 = indexMetaData18.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap52 = indexMetaData18.getMappings();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.Iterable<com.carrotsearch.hppc.cursors.ObjectObjectCursor<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>> paramsTuple53 = org.elasticsearch.common.collect.Tuple.tuple(params12, (java.lang.Iterable<com.carrotsearch.hppc.cursors.ObjectObjectCursor<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>) strImmutableOpenMap52);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder10, params12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(params12);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNotNull(indexMetaDataDiff19);
        org.junit.Assert.assertNull(index20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertNull(index23);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 1L + "'", long31 == 1L);
        org.junit.Assert.assertNotNull(settings32);
        org.junit.Assert.assertNotNull(settings33);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(indexMetaData35);
        org.junit.Assert.assertNull(mappingMetaData37);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(mappingMetaData41);
        org.junit.Assert.assertTrue("'" + state42 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state42.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData43);
        org.junit.Assert.assertNull(mappingMetaData45);
        org.junit.Assert.assertTrue("'" + state46 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state46.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertTrue("'" + state51 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state51.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap52);
        org.junit.Assert.assertNotNull(paramsTuple53);
    }

    @Test
    public void test08875() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08875");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.version((long) '4');
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple11 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting3, builder10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = settingsSettingTuple11.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = settingsSettingTuple11.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putCustom("index.blocks.read", custom17);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder15.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder15.creationDate((long) ' ');
        java.lang.String[] strArray40 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet41 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean42 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet41, strArray40);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder15.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder15.numberOfShards((int) (byte) 10);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple46 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting13, builder45);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData48 = builder45.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder45.removeAlias("current version [-1] is different than the one provided [0]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder52 = builder45.creationDate(32L);
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strArray40);
        org.junit.Assert.assertTrue("'" + boolean42 + "' != '" + true + "'", boolean42 == true);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNull(mappingMetaData48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertNotNull(builder52);
    }

    @Test
    public void test08876() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08876");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [10] is different than the one provided [-1]");
        int int2 = builder1.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.version((long) (short) 100);
        org.elasticsearch.common.settings.Settings.Builder builder5 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.settings(builder5);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
        org.junit.Assert.assertNotNull(builder4);
    }

    @Test
    public void test08877() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08877");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("index.priority");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.primaryTerm();
        bulkShardRequest11.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest17 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest16);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = bulkShardRequest16.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest9.consistencyLevel(writeConsistencyLevel18);
        long long20 = bulkShardRequest9.seqNo();
        java.lang.String str21 = bulkShardRequest9.index();
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = bulkShardRequest9.timeout("index.blocks.read");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to parse [index.blocks.read]");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel18 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel18.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "index.priority" + "'", str21, "index.priority");
    }

    @Test
    public void test08878() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08878");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        long long6 = indexMetaData0.getVersion();
        int int7 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData0.requireFilters();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData0.excludeFilters();
        java.lang.String str11 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 1L + "'", long6 == 1L);
        org.junit.Assert.assertTrue("'" + int7 + "' != '" + 0 + "'", int7 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "_na_" + "'", str11, "_na_");
    }

    @Test
    public void test08879() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08879");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.index("current version [-1] is different than the one provided [0]");
        long long5 = bulkShardRequest4.primaryTerm();
        java.lang.String str6 = bulkShardRequest4.index();
        bulkShardRequest4.primaryTerm((long) 100);
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest4.shardId();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 2, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        org.elasticsearch.action.ActionRequest actionRequest11 = bulkItemRequest10.request();
        int int12 = bulkItemRequest10.id();
        int int13 = bulkItemRequest10.id();
        int int14 = bulkItemRequest10.id();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertNull(shardId9);
        org.junit.Assert.assertNotNull(actionRequest11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 2 + "'", int12 == 2);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 2 + "'", int13 == 2);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 2 + "'", int14 == 2);
    }

    @Test
    public void test08880() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08880");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.seqNo();
        long long10 = bulkShardRequest8.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId12 = bulkShardRequest11.getParentTask();
        bulkShardRequest8.setParentTask(taskId12);
        bulkShardRequest1.setParentTask(taskId12);
        org.elasticsearch.index.shard.ShardId shardId15 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest1.setShardId(shardId15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest17.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest17.validate();
        org.elasticsearch.common.unit.TimeValue timeValue21 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest17.timeout(timeValue21);
        long long23 = bulkShardRequest17.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest17.timeout(timeValue24);
        org.elasticsearch.common.transport.TransportAddress transportAddress26 = bulkShardRequest17.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest27 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long28 = bulkShardRequest27.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions29 = bulkShardRequest27.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress30 = null;
        bulkShardRequest27.remoteAddress(transportAddress30);
        long long32 = bulkShardRequest27.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long34 = bulkShardRequest33.seqNo();
        org.elasticsearch.index.shard.ShardId shardId35 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest33.setShardId(shardId35);
        org.elasticsearch.index.shard.ShardId shardId37 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = bulkShardRequest36.setShardId(shardId37);
        org.elasticsearch.common.unit.TimeValue timeValue39 = bulkShardRequest36.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest27.timeout(timeValue39);
        long long41 = bulkShardRequest27.primaryTerm();
        org.elasticsearch.common.transport.TransportAddress transportAddress42 = bulkShardRequest27.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue43 = bulkShardRequest27.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest17.timeout(timeValue43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest16.timeout(timeValue43);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertNotNull(taskId12);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(actionRequestValidationException20);
        org.junit.Assert.assertNotNull(timeValue21);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNull(transportAddress26);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions29);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 0L + "'", long34 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(bulkShardRequest38);
        org.junit.Assert.assertNotNull(timeValue39);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNull(transportAddress42);
        org.junit.Assert.assertNotNull(timeValue43);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
    }

    @Test
    public void test08881() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08881");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        int int8 = indexMetaData0.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData0.getState();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((-1));
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(strSet11);
    }

    @Test
    public void test08882() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08882");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData13 = indexMetaData0.mappingOrDefault("current version [11] is different than the one provided [97]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData14);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap18 = indexMetaData14.getMappings();
        int int19 = indexMetaData14.getNumberOfReplicas();
        org.apache.lucene.util.Version version20 = indexMetaData14.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData14.includeFilters();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData14.requireFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap23 = indexMetaData14.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData14.activeAllocationIds((int) (short) 1);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff26 = indexMetaData0.diff(indexMetaData14);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state27 = indexMetaData14.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData28 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData30 = indexMetaData28.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData28);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData32 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff33 = indexMetaData28.diff(indexMetaData32);
        org.elasticsearch.index.Index index34 = indexMetaData32.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData36 = indexMetaData32.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index37 = indexMetaData32.getMergeSourceIndex();
        org.elasticsearch.index.Index index38 = indexMetaData32.getMergeSourceIndex();
        int int39 = indexMetaData32.getTotalNumberOfShards();
        boolean boolean41 = indexMetaData32.isSameUUID("current version [1] is different than the one provided [35]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData32);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff43 = indexMetaData14.diff(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertNull(mappingMetaData13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strImmutableOpenMap18);
        org.junit.Assert.assertTrue("'" + int19 + "' != '" + 0 + "'", int19 == 0);
        org.junit.Assert.assertNull(version20);
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(indexMetaDataDiff26);
        org.junit.Assert.assertTrue("'" + state27 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state27.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData28);
        org.junit.Assert.assertNull(mappingMetaData30);
        org.junit.Assert.assertNotNull(builder31);
        org.junit.Assert.assertNotNull(indexMetaData32);
        org.junit.Assert.assertNotNull(indexMetaDataDiff33);
        org.junit.Assert.assertNull(index34);
        org.junit.Assert.assertNull(mappingMetaData36);
        org.junit.Assert.assertNull(index37);
        org.junit.Assert.assertNull(index38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
        org.junit.Assert.assertTrue("'" + boolean41 + "' != '" + true + "'", boolean41 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff43);
    }

    @Test
    public void test08883() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08883");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        org.elasticsearch.Version version9 = indexMetaData5.getUpgradedVersion();
        int int10 = indexMetaData5.getNumberOfReplicas();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap11 = indexMetaData5.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting12 = null;
        java.lang.Throwable throwable14 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure16 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting12, "index.shared_filesystem", throwable14, "index.shared_filesystem");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting17 = shardFailure16.routing;
        boolean boolean18 = indexMetaData5.equals((java.lang.Object) shardFailure16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData19.mapping("hi!");
        int int24 = indexMetaData19.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData19.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder27.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom34 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder32.putCustom("index.blocks.read", custom34);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = builder32.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder32.creationDate((long) ' ');
        java.lang.String[] strArray57 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet58 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean59 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet58, strArray57);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder32.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder61 = builder29.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet58);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.shard.IndexShard.ShardFailure, java.util.Collection<java.lang.String>> shardFailureTuple62 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.shard.IndexShard.ShardFailure, java.util.Collection<java.lang.String>>(shardFailure16, (java.util.Collection<java.lang.String>) strSet58);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder3.putActiveAllocationIds(100, (java.util.Set<java.lang.String>) strSet58);
        java.lang.String str64 = builder3.index();
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap11);
        org.junit.Assert.assertNull(shardRouting17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertTrue("'" + int24 + "' != '" + 1 + "'", int24 == 1);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder36);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(strArray57);
        org.junit.Assert.assertTrue("'" + boolean59 + "' != '" + true + "'", boolean59 == true);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(builder61);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertEquals("'" + str64 + "' != '" + "" + "'", str64, "");
    }

    @Test
    public void test08884() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08884");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder4.creationDate((long) '#');
        int int10 = builder9.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str14 = builder13.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder13.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.version(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData24 = indexMetaData22.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData22.mapping("hi!");
        int int27 = indexMetaData22.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData22.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version(1L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom37 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.putCustom("index.blocks.read", custom37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder35.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder35.creationDate((long) ' ');
        java.lang.String[] strArray60 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet61 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean62 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet61, strArray60);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder63 = builder35.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder64 = builder32.putActiveAllocationIds((-1), (java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder18.putActiveAllocationIds((int) (short) 10, (java.util.Set<java.lang.String>) strSet61);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder66 = builder9.putActiveAllocationIds((int) 'a', (java.util.Set<java.lang.String>) strSet61);
        java.lang.String str67 = builder66.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder68 = builder66.removeAllAliases();
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.version.minimum_compatible" + "'", str14, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(mappingMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertTrue("'" + int27 + "' != '" + 1 + "'", int27 == 1);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertNotNull(strArray60);
        org.junit.Assert.assertTrue("'" + boolean62 + "' != '" + true + "'", boolean62 == true);
        org.junit.Assert.assertNotNull(builder63);
        org.junit.Assert.assertNotNull(builder64);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder66);
        org.junit.Assert.assertEquals("'" + str67 + "' != '" + "index.version.minimum_compatible" + "'", str67, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder68);
    }

    @Test
    public void test08885() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08885");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.primaryTerm();
        bulkShardRequest2.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest2.consistencyLevel();
        java.lang.String str7 = bulkShardRequest2.index();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 3, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest2.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest(100, (org.elasticsearch.action.ActionRequest) bulkShardRequest2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNull(str7);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
    }

    @Test
    public void test08886() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08886");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest1.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long10 = bulkShardRequest9.seqNo();
        long long11 = bulkShardRequest9.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId13 = bulkShardRequest12.getParentTask();
        bulkShardRequest9.setParentTask(taskId13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest9.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = null;
        bulkShardRequest9.remoteAddress(transportAddress16);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel18 = bulkShardRequest9.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel18);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long21 = bulkShardRequest20.seqNo();
        long long22 = bulkShardRequest20.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId24 = bulkShardRequest23.getParentTask();
        bulkShardRequest20.setParentTask(taskId24);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel26 = bulkShardRequest20.consistencyLevel();
        org.elasticsearch.common.transport.TransportAddress transportAddress27 = null;
        bulkShardRequest20.remoteAddress(transportAddress27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long30 = bulkShardRequest29.primaryTerm();
        bulkShardRequest29.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue33 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest29.timeout(timeValue33);
        org.elasticsearch.index.shard.ShardId shardId35 = bulkShardRequest34.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress36 = null;
        bulkShardRequest34.remoteAddress(transportAddress36);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest38 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long39 = bulkShardRequest38.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = bulkShardRequest38.index("current version [-1] is different than the one provided [0]");
        long long42 = bulkShardRequest41.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = bulkShardRequest41.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest34.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = bulkShardRequest20.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest46 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long47 = bulkShardRequest46.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions48 = bulkShardRequest46.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress49 = null;
        bulkShardRequest46.remoteAddress(transportAddress49);
        long long51 = bulkShardRequest46.seqNo();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException52 = bulkShardRequest46.validate();
        org.elasticsearch.action.support.IndicesOptions indicesOptions53 = bulkShardRequest46.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest55 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long56 = bulkShardRequest55.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel57 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest58 = bulkShardRequest55.consistencyLevel(writeConsistencyLevel57);
        org.elasticsearch.index.VersionType versionType59 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType60 = versionType59.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple61 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest58, versionType59);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest62 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest58);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long64 = bulkShardRequest63.seqNo();
        long long65 = bulkShardRequest63.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest66 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId67 = bulkShardRequest66.getParentTask();
        bulkShardRequest63.setParentTask(taskId67);
        bulkShardRequest58.setParentTask(taskId67);
        bulkShardRequest46.setParentTask(taskId67);
        org.elasticsearch.common.unit.TimeValue timeValue71 = bulkShardRequest46.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest72 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long73 = bulkShardRequest72.seqNo();
        long long74 = bulkShardRequest72.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest75 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId76 = bulkShardRequest75.getParentTask();
        bulkShardRequest72.setParentTask(taskId76);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest79 = bulkShardRequest72.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException80 = bulkShardRequest79.validate();
        org.elasticsearch.common.unit.TimeValue timeValue81 = bulkShardRequest79.timeout();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.unit.TimeValue, org.elasticsearch.transport.TransportRequest> timeValueTuple82 = org.elasticsearch.common.collect.Tuple.tuple(timeValue71, (org.elasticsearch.transport.TransportRequest) bulkShardRequest79);
        org.elasticsearch.common.unit.TimeValue timeValue83 = bulkShardRequest79.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = bulkShardRequest20.timeout(timeValue83);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest85 = bulkShardRequest19.timeout(timeValue83);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest86 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest85);
        org.elasticsearch.action.ActionRequest actionRequest87 = bulkItemRequest86.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput88 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest86.writeTo(streamOutput88);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel18 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel18.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest19);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(taskId24);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel26 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel26.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNull(shardId35);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 0L + "'", long39 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest41);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel43 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel43.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(bulkShardRequest45);
        org.junit.Assert.assertTrue("'" + long47 + "' != '" + 0L + "'", long47 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions48);
        org.junit.Assert.assertTrue("'" + long51 + "' != '" + 0L + "'", long51 == 0L);
        org.junit.Assert.assertNotNull(actionRequestValidationException52);
        org.junit.Assert.assertNotNull(indicesOptions53);
        org.junit.Assert.assertTrue("'" + long56 + "' != '" + 0L + "'", long56 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest58);
        org.junit.Assert.assertNotNull(versionType59);
        org.junit.Assert.assertNotNull(versionType60);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertTrue("'" + long65 + "' != '" + 0L + "'", long65 == 0L);
        org.junit.Assert.assertNotNull(taskId67);
        org.junit.Assert.assertNotNull(timeValue71);
        org.junit.Assert.assertTrue("'" + long73 + "' != '" + 0L + "'", long73 == 0L);
        org.junit.Assert.assertTrue("'" + long74 + "' != '" + 0L + "'", long74 == 0L);
        org.junit.Assert.assertNotNull(taskId76);
        org.junit.Assert.assertNotNull(bulkShardRequest79);
        org.junit.Assert.assertNull(actionRequestValidationException80);
        org.junit.Assert.assertNotNull(timeValue81);
        org.junit.Assert.assertNotNull(timeValueTuple82);
        org.junit.Assert.assertNotNull(timeValue83);
        org.junit.Assert.assertNotNull(bulkShardRequest84);
        org.junit.Assert.assertNotNull(bulkShardRequest85);
        org.junit.Assert.assertNotNull(actionRequest87);
    }

    @Test
    public void test08887() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08887");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest5, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest6);
        bulkShardRequest6.primaryTerm((long) '4');
        bulkShardRequest6.seqNo((long) 100);
        boolean boolean13 = bulkShardRequest6.getShouldPersistResult();
        long long14 = bulkShardRequest6.seqNo();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel15 = bulkShardRequest6.consistencyLevel();
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest6.setShardId(shardId16);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L + "'", long14 == 100L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel15 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel15.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest17);
    }

    @Test
    public void test08888() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08888");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        boolean boolean33 = indexMetaData25.equals((java.lang.Object) state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.state(state32);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) builder13);
        org.elasticsearch.Version version37 = indexMetaData4.getUpgradedVersion();
        java.util.Set<java.lang.String> strSet39 = null; // flaky: indexMetaData4.activeAllocationIds((int) '#');
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap40 = indexMetaData4.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters41 = indexMetaData4.excludeFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder42 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params43 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData44 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long45 = indexMetaData44.getCreationDate();
        boolean boolean47 = indexMetaData44.isSameUUID("index.version.created_string");
        java.lang.String str48 = indexMetaData44.getIndexUUID();
        org.elasticsearch.Version version49 = indexMetaData44.getUpgradedVersion();
        boolean boolean51 = indexMetaData44.isSameUUID("current version [32] is different than the one provided [0]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.cluster.metadata.IndexMetaData> paramsTuple52 = org.elasticsearch.common.collect.Tuple.tuple(params43, indexMetaData44);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder53 = indexMetaData4.toXContent(xContentBuilder42, params43);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNotNull(strImmutableOpenMap40);
        org.junit.Assert.assertNull(discoveryNodeFilters41);
        org.junit.Assert.assertNotNull(params43);
        org.junit.Assert.assertNotNull(indexMetaData44);
        org.junit.Assert.assertTrue("'" + long45 + "' != '" + (-1L) + "'", long45 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + true + "'", boolean47 == true);
        org.junit.Assert.assertEquals("'" + str48 + "' != '" + "_na_" + "'", str48, "_na_");
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertTrue("'" + boolean51 + "' != '" + true + "'", boolean51 == true);
        org.junit.Assert.assertNotNull(paramsTuple52);
    }

    @Test
    public void test08889() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08889");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple9 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest6, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest7);
        java.lang.String str10 = bulkShardRequest6.index();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel12 = bulkShardRequest6.consistencyLevel();
        long long13 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest6.index("");
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "index.version.created" + "'", str10, "index.version.created");
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel12 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel12.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
    }

    @Test
    public void test08890() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08890");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.primaryTerm();
        bulkShardRequest6.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest6.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest5.consistencyLevel(writeConsistencyLevel10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData12.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple16 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest11, state15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest17.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest17.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long22 = bulkShardRequest21.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress24 = null;
        bulkShardRequest21.remoteAddress(transportAddress24);
        long long26 = bulkShardRequest21.seqNo();
        org.elasticsearch.common.unit.TimeValue timeValue27 = bulkShardRequest21.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest17.timeout(timeValue27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest11.timeout(timeValue27);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest11.consistencyLevel();
        long long31 = bulkShardRequest11.seqNo();
        org.elasticsearch.common.transport.TransportAddress transportAddress32 = bulkShardRequest11.remoteAddress();
        boolean boolean33 = bulkShardRequest11.getShouldPersistResult();
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str34 = bulkShardRequest11.getDescription();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(actionRequestValidationException20);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertNotNull(timeValue27);
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNull(transportAddress32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
    }

    @Test
    public void test08891() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08891");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest2.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest2.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple10 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest7, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest8);
        bulkShardRequest8.primaryTerm((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest14.consistencyLevel(writeConsistencyLevel16);
        org.elasticsearch.index.VersionType versionType18 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType19 = versionType18.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple20 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest17, versionType18);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest21 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long23 = bulkShardRequest22.seqNo();
        long long24 = bulkShardRequest22.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest25.getParentTask();
        bulkShardRequest22.setParentTask(taskId26);
        bulkShardRequest17.setParentTask(taskId26);
        bulkShardRequest8.setParentTask(taskId26);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest30 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest31 = new org.elasticsearch.action.bulk.BulkItemRequest(97, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.common.io.stream.StreamInput streamInput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest31.readFrom(streamInput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(versionType18);
        org.junit.Assert.assertNotNull(versionType19);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple20);
        org.junit.Assert.assertTrue("'" + long23 + "' != '" + 0L + "'", long23 == 0L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(taskId26);
    }

    @Test
    public void test08892() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08892");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        org.elasticsearch.common.settings.Settings.Builder builder2 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = builder1.settings(builder2);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
    }

    @Test
    public void test08893() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08893");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 0);
        java.lang.String str5 = versionType1.explainConflictForWrites((long) (short) -1, 52L, true);
        boolean boolean8 = versionType1.isVersionConflictForReads((long) (byte) 1, 0L);
        java.lang.String str12 = versionType1.explainConflictForWrites(98L, (long) '#', true);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [-1] is different than the one provided [52]" + "'", str5, "current version [-1] is different than the one provided [52]");
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertEquals("'" + str12 + "' != '" + "current version [98] is different than the one provided [35]" + "'", str12, "current version [98] is different than the one provided [35]");
    }

    @Test
    public void test08894() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08894");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.apache.lucene.util.Version version4 = indexMetaData0.getMinimumCompatibleVersion();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds(10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap9 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.index.Index index16 = indexMetaData14.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData14.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index19 = indexMetaData14.getMergeSourceIndex();
        org.elasticsearch.index.Index index20 = indexMetaData14.getMergeSourceIndex();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData14.getMappings();
        boolean boolean22 = indexMetaData0.equals((java.lang.Object) indexMetaData14);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap23 = indexMetaData14.getAliases();
        org.apache.lucene.util.Version version24 = indexMetaData14.getMinimumCompatibleVersion();
        int int25 = indexMetaData14.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData14);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData28 = indexMetaData14.mapping("");
        org.elasticsearch.Version version29 = indexMetaData14.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(version4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(index16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertNull(index19);
        org.junit.Assert.assertNull(index20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertTrue("'" + boolean22 + "' != '" + true + "'", boolean22 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap23);
        org.junit.Assert.assertNull(version24);
        org.junit.Assert.assertTrue("'" + int25 + "' != '" + 0 + "'", int25 == 0);
        org.junit.Assert.assertNull(mappingMetaData28);
        org.junit.Assert.assertNotNull(version29);
    }

    @Test
    public void test08895() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08895");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        org.apache.lucene.util.Version version5 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap8 = indexMetaData0.getMappings();
        org.elasticsearch.common.settings.Settings settings9 = indexMetaData0.getSettings();
        int int10 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder11 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params12 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder.toXContent(indexMetaData0, xContentBuilder11, params12);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(version5);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(settings9);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertNotNull(params12);
    }

    @Test
    public void test08896() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08896");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        byte byte3 = versionType0.getValue();
        java.lang.String str7 = versionType0.explainConflictForWrites((long) '#', (long) (short) -1, true);
        boolean boolean10 = versionType0.isVersionConflictForReads((long) (short) 10, 101L);
        boolean boolean13 = versionType0.isVersionConflictForReads((long) (byte) 1, (long) (byte) 100);
        boolean boolean16 = versionType0.isVersionConflictForReads((long) (short) 100, 35L);
        boolean boolean18 = versionType0.validateVersionForReads(98L);
        long long21 = versionType0.updateVersion((long) 2, (long) 0);
        long long24 = versionType0.updateVersion((long) 3, 98L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean27 = versionType25.validateVersionForWrites((long) 97);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "current version [35] is different than the one provided [-1]" + "'", str7, "current version [35] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4L + "'", long24 == 4L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + true + "'", boolean27 == true);
    }

    @Test
    public void test08897() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08897");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.fromValue((byte) 2);
        org.elasticsearch.index.VersionType versionType2 = versionType1.versionTypeForReplicationAndRecovery();
        boolean boolean6 = versionType1.isVersionConflictForWrites(97L, (long) ' ', true);
        boolean boolean10 = versionType1.isVersionConflictForWrites((long) ' ', 0L, false);
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + true + "'", boolean6 == true);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08898() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08898");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.putCustom("index.auto_expand_replicas", custom9);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = builder10.mapping("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData13 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData15 = indexMetaData13.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state16 = indexMetaData13.getState();
        byte byte17 = state16.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder10.state(state16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder10.numberOfShards(35);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(indexMetaData13);
        org.junit.Assert.assertNull(mappingMetaData15);
        org.junit.Assert.assertTrue("'" + state16 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state16.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte17 + "' != '" + (byte) 0 + "'", byte17 == (byte) 0);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08899() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08899");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap9 = indexMetaData4.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters10 = indexMetaData4.getInitialRecoveryFilters();
        org.elasticsearch.Version version11 = indexMetaData4.getCreationVersion();
        int int12 = indexMetaData4.getNumberOfReplicas();
        java.lang.String str13 = indexMetaData4.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData4.getCustoms();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(discoveryNodeFilters10);
        org.junit.Assert.assertNotNull(version11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "_na_" + "'", str13, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
    }

    @Test
    public void test08900() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08900");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder7.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder7.numberOfShards((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.uuid", custom12);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.numberOfShards(32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder13.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.removeAlias("current version [35] is different than the one provided [1]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("current version [1] is different than the one provided [32]");
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
    }

    @Test
    public void test08901() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08901");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions4 = bulkShardRequest2.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress5 = null;
        bulkShardRequest2.remoteAddress(transportAddress5);
        long long7 = bulkShardRequest2.seqNo();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest2.validate();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.primaryTerm();
        bulkShardRequest12.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest12.timeout(timeValue16);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest18 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest17);
        org.elasticsearch.action.ActionRequest actionRequest19 = bulkItemRequest18.request();
        org.elasticsearch.tasks.TaskId taskId20 = actionRequest19.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest23.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException26 = bulkShardRequest23.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure28 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting21, "primary_terms", (java.lang.Throwable) actionRequestValidationException26, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple29 = org.elasticsearch.common.collect.Tuple.tuple(taskId20, (java.lang.IllegalArgumentException) actionRequestValidationException26);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure31 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting9, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException26, "index.creation_date_string");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting32 = shardFailure31.routing;
        java.lang.String str33 = shardFailure31.reason;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str36 = builder35.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder35.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder38.creationDate((long) ' ');
        int int41 = builder40.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom46 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder44.putCustom("index.blocks.read", custom46);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder44.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder50 = builder48.version(0L);
        int int51 = builder48.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder54 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom56 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder54.putCustom("index.blocks.read", custom56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = builder54.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder60 = builder54.creationDate((long) ' ');
        java.lang.String[] strArray79 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet80 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean81 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet80, strArray79);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = builder54.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder83 = builder48.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest84 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long85 = bulkShardRequest84.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel86 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest87 = bulkShardRequest84.consistencyLevel(writeConsistencyLevel86);
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.transport.TransportMessage> strSetTuple88 = org.elasticsearch.common.collect.Tuple.tuple(strSet80, (org.elasticsearch.transport.TransportMessage) bulkShardRequest87);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder89 = builder40.putActiveAllocationIds((int) (byte) 1, (java.util.Set<java.lang.String>) strSet80);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.index.shard.IndexShard.ShardFailure, java.util.LinkedHashSet<java.lang.String>> shardFailureTuple90 = org.elasticsearch.common.collect.Tuple.tuple(shardFailure31, strSet80);
        org.elasticsearch.common.collect.Tuple<java.lang.IllegalArgumentException, java.util.HashSet<java.lang.String>> illegalArgumentExceptionTuple91 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.IllegalArgumentException) actionRequestValidationException8, (java.util.HashSet<java.lang.String>) strSet80);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure93 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [-1] is different than the one provided [102]", (java.lang.Throwable) actionRequestValidationException8, "current version [13] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions4);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(actionRequest19);
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertNotNull(actionRequestValidationException26);
        org.junit.Assert.assertNotNull(taskIdTuple29);
        org.junit.Assert.assertNull(shardRouting32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "current version [101] is different than the one provided [0]" + "'", str33, "current version [101] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "index.version.minimum_compatible" + "'", str36, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + (-1) + "'", int41 == (-1));
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder50);
        org.junit.Assert.assertTrue("'" + int51 + "' != '" + (-1) + "'", int51 == (-1));
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder60);
        org.junit.Assert.assertNotNull(strArray79);
        org.junit.Assert.assertTrue("'" + boolean81 + "' != '" + true + "'", boolean81 == true);
        org.junit.Assert.assertNotNull(builder82);
        org.junit.Assert.assertNotNull(builder83);
        org.junit.Assert.assertTrue("'" + long85 + "' != '" + 0L + "'", long85 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest87);
        org.junit.Assert.assertNotNull(strSetTuple88);
        org.junit.Assert.assertNotNull(builder89);
        org.junit.Assert.assertNotNull(shardFailureTuple90);
        org.junit.Assert.assertNotNull(illegalArgumentExceptionTuple91);
    }

    @Test
    public void test08902() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08902");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData10.diff(indexMetaData14);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData4.diff(indexMetaData10);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData17 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = indexMetaData17.mappingOrDefault("");
        long long20 = indexMetaData17.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters21 = indexMetaData17.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap22 = indexMetaData17.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state26 = indexMetaData23.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData27 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData29 = indexMetaData27.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state30 = indexMetaData27.getState();
        boolean boolean31 = indexMetaData23.equals((java.lang.Object) state30);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap32 = indexMetaData23.getCustoms();
        int int33 = indexMetaData23.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData17.diff(indexMetaData23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData23);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) indexMetaData23);
        java.util.Set<java.lang.String> strSet38 = null; // flaky: indexMetaData23.activeAllocationIds((int) (short) 1);
        int int39 = indexMetaData23.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNotNull(indexMetaData17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters21);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertTrue("'" + state26 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state26.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData27);
        org.junit.Assert.assertNull(mappingMetaData29);
        org.junit.Assert.assertTrue("'" + state30 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state30.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + 1 + "'", int33 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(strSet38);
        org.junit.Assert.assertTrue("'" + int39 + "' != '" + 1 + "'", int39 == 1);
    }

    @Test
    public void test08903() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08903");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting13 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str16 = builder15.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom20 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putCustom("index.version.upgraded_string", custom20);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder18.creationDate(0L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom25 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder23.putCustom("hi!", custom25);
        boolean boolean27 = settingsSettingTuple2.equals((java.lang.Object) builder26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = builder29.mapping("index.version.created_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder33 = builder29.version((long) (short) 100);
        boolean boolean34 = settingsSettingTuple2.equals((java.lang.Object) builder29);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder36 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str37 = builder36.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder36.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = builder39.version((long) (byte) -1);
        int int42 = builder41.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder44 = builder41.numberOfShards((int) (short) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData45 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData47 = indexMetaData45.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state48 = indexMetaData45.getState();
        org.elasticsearch.Version version49 = indexMetaData45.getUpgradedVersion();
        int int50 = indexMetaData45.getNumberOfReplicas();
        org.apache.lucene.util.Version version51 = indexMetaData45.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData53 = indexMetaData45.mapping("hi!");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = indexMetaData45.mapping("current version [35] is different than the one provided [-1]");
        org.elasticsearch.common.settings.Settings settings56 = indexMetaData45.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder57 = builder41.settings(settings56);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str60 = builder59.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder62 = builder59.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom64 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder65 = builder62.putCustom("index.version.upgraded_string", custom64);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder67 = builder62.index("active_allocations");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData68 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData70 = indexMetaData68.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state71 = indexMetaData68.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData72 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData74 = indexMetaData72.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state75 = indexMetaData72.getState();
        boolean boolean76 = indexMetaData68.equals((java.lang.Object) state75);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder77 = builder62.state(state75);
        byte byte78 = state75.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder79 = builder41.state(state75);
        boolean boolean80 = settingsSettingTuple2.equals((java.lang.Object) builder79);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting81 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder82 = settingsSettingTuple2.v2();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting83 = settingsSettingTuple2.v1();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(settingsSetting13);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.version.minimum_compatible" + "'", str16, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(builder33);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
        org.junit.Assert.assertEquals("'" + str37 + "' != '" + "index.version.minimum_compatible" + "'", str37, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder41);
        org.junit.Assert.assertTrue("'" + int42 + "' != '" + (-1) + "'", int42 == (-1));
        org.junit.Assert.assertNotNull(builder44);
        org.junit.Assert.assertNotNull(indexMetaData45);
        org.junit.Assert.assertNull(mappingMetaData47);
        org.junit.Assert.assertTrue("'" + state48 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state48.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version49);
        org.junit.Assert.assertTrue("'" + int50 + "' != '" + 0 + "'", int50 == 0);
        org.junit.Assert.assertNull(version51);
        org.junit.Assert.assertNull(mappingMetaData53);
        org.junit.Assert.assertNull(mappingMetaData55);
        org.junit.Assert.assertNotNull(settings56);
        org.junit.Assert.assertNotNull(builder57);
        org.junit.Assert.assertEquals("'" + str60 + "' != '" + "index.version.minimum_compatible" + "'", str60, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder62);
        org.junit.Assert.assertNotNull(builder65);
        org.junit.Assert.assertNotNull(builder67);
        org.junit.Assert.assertNotNull(indexMetaData68);
        org.junit.Assert.assertNull(mappingMetaData70);
        org.junit.Assert.assertTrue("'" + state71 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state71.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData72);
        org.junit.Assert.assertNull(mappingMetaData74);
        org.junit.Assert.assertTrue("'" + state75 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state75.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean76 + "' != '" + false + "'", boolean76 == false);
        org.junit.Assert.assertNotNull(builder77);
        org.junit.Assert.assertTrue("'" + byte78 + "' != '" + (byte) 0 + "'", byte78 == (byte) 0);
        org.junit.Assert.assertNotNull(builder79);
        org.junit.Assert.assertTrue("'" + boolean80 + "' != '" + false + "'", boolean80 == false);
        org.junit.Assert.assertNotNull(settingsSetting81);
        org.junit.Assert.assertNull(builder82);
        org.junit.Assert.assertNotNull(settingsSetting83);
    }

    @Test
    public void test08904() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08904");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel6 = bulkShardRequest5.consistencyLevel();
        bulkShardRequest5.setParentTask("current version [11] is different than the one provided [0]", (long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel6 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel6.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
    }

    @Test
    public void test08905() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08905");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        long long2 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId4 = bulkShardRequest3.getParentTask();
        bulkShardRequest0.setParentTask(taskId4);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest0.index("hi!");
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest0.remoteAddress();
        bulkShardRequest0.primaryTerm((long) (byte) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(taskId4);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(transportAddress8);
    }

    @Test
    public void test08906() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08906");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters8 = indexMetaData4.getInitialRecoveryFilters();
        int int9 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.Version version10 = indexMetaData4.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(discoveryNodeFilters8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNotNull(version10);
    }

    @Test
    public void test08907() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08907");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest6);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = bulkShardRequest6.index("index.priority");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest9.index("");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException12 = bulkShardRequest9.validate();
        long long13 = bulkShardRequest9.seqNo();
        org.elasticsearch.index.shard.ShardId shardId14 = bulkShardRequest9.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest9.indicesOptions();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest9);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNull(actionRequestValidationException12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNull(shardId14);
        org.junit.Assert.assertNotNull(indicesOptions15);
    }

    @Test
    public void test08908() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08908");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        long long9 = bulkShardRequest5.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest5.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest5.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest5.index("current version [3] is different than the one provided [101]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        long long18 = bulkShardRequest16.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId20 = bulkShardRequest19.getParentTask();
        bulkShardRequest16.setParentTask(taskId20);
        bulkShardRequest15.setParentTask(taskId20);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest23 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest15);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel24 = bulkShardRequest15.consistencyLevel();
        org.elasticsearch.action.support.IndicesOptions indicesOptions25 = bulkShardRequest15.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long29 = bulkShardRequest28.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions30 = bulkShardRequest28.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException31 = bulkShardRequest28.validate();
        org.elasticsearch.common.unit.TimeValue timeValue32 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest28.timeout(timeValue32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest26.timeout(timeValue32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest15.timeout(timeValue32);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest13.timeout(timeValue32);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput37 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest36.writeTo(streamOutput37);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(taskId20);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel24 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel24.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(indicesOptions25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long29 + "' != '" + 0L + "'", long29 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions30);
        org.junit.Assert.assertNotNull(actionRequestValidationException31);
        org.junit.Assert.assertNotNull(timeValue32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
    }

    @Test
    public void test08909() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08909");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.numberOfReplicas((int) (byte) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = builder7.removeAlias("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap14 = indexMetaData10.getMappings();
        int int15 = indexMetaData10.getNumberOfReplicas();
        org.apache.lucene.util.Version version16 = indexMetaData10.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap17 = indexMetaData10.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData10.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData10.mappingOrDefault("index.shared_filesystem");
        int int22 = indexMetaData10.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings23 = indexMetaData10.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder9.settings(settings23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder9.numberOfShards(1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.putCustom("current version [35] is different than the one provided [-1]", custom28);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertTrue("'" + int15 + "' != '" + 0 + "'", int15 == 0);
        org.junit.Assert.assertNull(version16);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + int22 + "' != '" + 0 + "'", int22 == 0);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08910() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08910");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData0.mapping("index.creation_date_string");
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.common.settings.Settings settings8 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings7);
        boolean boolean9 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings7);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(settings8);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
    }

    @Test
    public void test08911() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08911");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.common.settings.Settings settings4 = indexMetaData0.getSettings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap6 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long10 = indexMetaData7.getVersion();
        java.util.Set<java.lang.String> strSet12 = null; // flaky: indexMetaData7.activeAllocationIds((int) (byte) 10);
        java.util.Set<java.lang.String> strSet14 = null; // flaky: indexMetaData7.activeAllocationIds((int) (byte) 2);
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData0.diff(indexMetaData7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId17 = bulkShardRequest16.shardId();
        org.elasticsearch.index.shard.ShardId shardId18 = bulkShardRequest16.shardId();
        org.elasticsearch.action.support.IndicesOptions indicesOptions19 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData>, org.elasticsearch.action.support.IndicesOptions> indexMetaDataDiffTuple20 = org.elasticsearch.common.collect.Tuple.tuple(indexMetaDataDiff15, indicesOptions19);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(settings4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 1L + "'", long10 == 1L);
        org.junit.Assert.assertNull(strSet12);
        org.junit.Assert.assertNull(strSet14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNull(shardId17);
        org.junit.Assert.assertNull(shardId18);
        org.junit.Assert.assertNotNull(indicesOptions19);
        org.junit.Assert.assertNotNull(indexMetaDataDiffTuple20);
    }

    @Test
    public void test08912() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08912");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        java.util.Set<java.lang.String> strSet5 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        java.util.Set<java.lang.String> strSet7 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 2);
        int int8 = indexMetaData0.getTotalNumberOfShards();
        long long9 = indexMetaData0.getCreationDate();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(strSet5);
        org.junit.Assert.assertNull(strSet7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
    }

    @Test
    public void test08913() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08913");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest5, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest6);
        bulkShardRequest6.primaryTerm((long) '4');
        bulkShardRequest6.seqNo((long) 100);
        boolean boolean13 = bulkShardRequest6.getShouldPersistResult();
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = bulkShardRequest6.remoteAddress();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest6.index("index.");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.primaryTerm();
        bulkShardRequest17.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue21 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest17.timeout(timeValue21);
        org.elasticsearch.common.transport.TransportAddress transportAddress23 = null;
        bulkShardRequest17.remoteAddress(transportAddress23);
        boolean boolean25 = bulkShardRequest17.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest26.index("current version [-1] is different than the one provided [0]");
        long long30 = bulkShardRequest29.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel31 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest32 = bulkShardRequest17.consistencyLevel(writeConsistencyLevel31);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel31);
        long long34 = bulkShardRequest33.primaryTerm();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNull(transportAddress14);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + false + "'", boolean25 == false);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + long30 + "' != '" + 0L + "'", long30 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel31 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel31.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest32);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertTrue("'" + long34 + "' != '" + 52L + "'", long34 == 52L);
    }

    @Test
    public void test08914() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08914");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.consistencyLevel(writeConsistencyLevel3);
        org.elasticsearch.index.VersionType versionType5 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType6 = versionType5.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple7 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest4, versionType5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest8 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest4);
        bulkShardRequest4.seqNo((long) '4');
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long15 = bulkShardRequest14.seqNo();
        long long16 = bulkShardRequest14.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId18 = bulkShardRequest17.getParentTask();
        bulkShardRequest14.setParentTask(taskId18);
        bulkShardRequest13.setParentTask(taskId18);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest21 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest13);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest22 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest13);
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest13.indicesOptions();
        org.elasticsearch.common.unit.TimeValue timeValue24 = bulkShardRequest13.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest4.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long27 = bulkShardRequest26.seqNo();
        long long28 = bulkShardRequest26.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId30 = bulkShardRequest29.getParentTask();
        bulkShardRequest26.setParentTask(taskId30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest33 = bulkShardRequest26.index("hi!");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException34 = bulkShardRequest33.validate();
        org.elasticsearch.common.unit.TimeValue timeValue35 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest33.timeout(timeValue35);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest37 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long38 = bulkShardRequest37.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest40 = bulkShardRequest37.index("current version [-1] is different than the one provided [0]");
        long long41 = bulkShardRequest40.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue42 = bulkShardRequest40.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest43 = bulkShardRequest36.timeout(timeValue42);
        org.elasticsearch.common.unit.TimeValue timeValue44 = bulkShardRequest43.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest45 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long46 = bulkShardRequest45.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest48 = bulkShardRequest45.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest50 = bulkShardRequest45.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest51 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long52 = bulkShardRequest51.primaryTerm();
        bulkShardRequest51.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel55 = bulkShardRequest51.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest56 = bulkShardRequest50.consistencyLevel(writeConsistencyLevel55);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData57 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData59 = indexMetaData57.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state60 = indexMetaData57.getState();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.io.stream.Streamable, org.elasticsearch.cluster.metadata.IndexMetaData.State> streamableTuple61 = org.elasticsearch.common.collect.Tuple.tuple((org.elasticsearch.common.io.stream.Streamable) bulkShardRequest56, state60);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest63 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long64 = bulkShardRequest63.primaryTerm();
        bulkShardRequest63.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue67 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest68 = bulkShardRequest63.timeout(timeValue67);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest69 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest68);
        org.elasticsearch.action.ActionRequest actionRequest70 = bulkItemRequest69.request();
        org.elasticsearch.tasks.TaskId taskId71 = actionRequest70.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting72 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest74 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long75 = bulkShardRequest74.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions76 = bulkShardRequest74.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException77 = bulkShardRequest74.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure79 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting72, "primary_terms", (java.lang.Throwable) actionRequestValidationException77, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple80 = org.elasticsearch.common.collect.Tuple.tuple(taskId71, (java.lang.IllegalArgumentException) actionRequestValidationException77);
        bulkShardRequest56.setParentTask(taskId71);
        bulkShardRequest43.setParentTask(taskId71);
        bulkShardRequest4.setParentTask(taskId71);
        long long84 = bulkShardRequest4.primaryTerm();
        org.elasticsearch.action.support.IndicesOptions indicesOptions85 = bulkShardRequest4.indicesOptions();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(versionType5);
        org.junit.Assert.assertNotNull(versionType6);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple7);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(taskId18);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(timeValue24);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertTrue("'" + long27 + "' != '" + 0L + "'", long27 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(taskId30);
        org.junit.Assert.assertNotNull(bulkShardRequest33);
        org.junit.Assert.assertNull(actionRequestValidationException34);
        org.junit.Assert.assertNotNull(timeValue35);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertTrue("'" + long38 + "' != '" + 0L + "'", long38 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 0L + "'", long41 == 0L);
        org.junit.Assert.assertNotNull(timeValue42);
        org.junit.Assert.assertNotNull(bulkShardRequest43);
        org.junit.Assert.assertNotNull(timeValue44);
        org.junit.Assert.assertTrue("'" + long46 + "' != '" + 0L + "'", long46 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest48);
        org.junit.Assert.assertNotNull(bulkShardRequest50);
        org.junit.Assert.assertTrue("'" + long52 + "' != '" + 0L + "'", long52 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel55 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel55.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest56);
        org.junit.Assert.assertNotNull(indexMetaData57);
        org.junit.Assert.assertNull(mappingMetaData59);
        org.junit.Assert.assertTrue("'" + state60 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state60.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(streamableTuple61);
        org.junit.Assert.assertTrue("'" + long64 + "' != '" + 0L + "'", long64 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest68);
        org.junit.Assert.assertNotNull(actionRequest70);
        org.junit.Assert.assertNotNull(taskId71);
        org.junit.Assert.assertTrue("'" + long75 + "' != '" + 0L + "'", long75 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions76);
        org.junit.Assert.assertNotNull(actionRequestValidationException77);
        org.junit.Assert.assertNotNull(taskIdTuple80);
        org.junit.Assert.assertTrue("'" + long84 + "' != '" + 0L + "'", long84 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions85);
    }

    @Test
    public void test08915() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08915");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder2 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.creationDate((long) (byte) 1);
        org.elasticsearch.common.settings.Settings settings5 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder1.settings(settings5);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = builder1.mapping("index.shadow_replicas");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder1.putMapping(mappingMetaData9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(builder2);
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test08916() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08916");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        org.elasticsearch.index.shard.ShardId shardId4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest3.setShardId(shardId4);
        org.elasticsearch.index.shard.ShardId shardId6 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = bulkShardRequest5.setShardId(shardId6);
        org.elasticsearch.index.shard.ShardId shardId8 = bulkShardRequest7.shardId();
        org.elasticsearch.index.shard.ShardId shardId9 = bulkShardRequest7.shardId();
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest7.getParentTask();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(bulkShardRequest7);
        org.junit.Assert.assertNull(shardId8);
        org.junit.Assert.assertNull(shardId9);
        org.junit.Assert.assertNotNull(taskId10);
    }

    @Test
    public void test08917() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08917");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.index.shard.ShardId shardId1 = bulkShardRequest0.shardId();
        org.elasticsearch.index.shard.ShardId shardId2 = bulkShardRequest0.shardId();
        bulkShardRequest0.primaryTerm((long) '#');
        org.elasticsearch.index.shard.ShardId shardId5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest0.setShardId(shardId5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long9 = bulkShardRequest8.seqNo();
        org.elasticsearch.index.shard.ShardId shardId10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = bulkShardRequest8.setShardId(shardId10);
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest11.setShardId(shardId12);
        org.elasticsearch.common.transport.TransportAddress transportAddress14 = null;
        bulkShardRequest13.remoteAddress(transportAddress14);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest13.setShardId(shardId16);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest18 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) -1, (org.elasticsearch.action.ActionRequest) bulkShardRequest13);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel19 = bulkShardRequest13.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest6.consistencyLevel(writeConsistencyLevel19);
        bulkShardRequest6.setParentTask("current version [4] is different than the one provided [2]", (long) (short) -1);
        org.junit.Assert.assertNull(shardId1);
        org.junit.Assert.assertNull(shardId2);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel19 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel19.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest20);
    }

    @Test
    public void test08918() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08918");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest1.index("hi!");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest1.index("index.version.minimum_compatible");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest11 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long12 = bulkShardRequest11.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions13 = bulkShardRequest11.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException14 = bulkShardRequest11.validate();
        org.elasticsearch.common.unit.TimeValue timeValue15 = org.elasticsearch.action.support.replication.ReplicationRequest.DEFAULT_TIMEOUT;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest11.timeout(timeValue15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long18 = bulkShardRequest17.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = bulkShardRequest17.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest17.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest23 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long24 = bulkShardRequest23.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple25 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest22, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest23);
        org.elasticsearch.tasks.TaskId taskId26 = bulkShardRequest23.getParentTask();
        bulkShardRequest16.setParentTask(taskId26);
        bulkShardRequest1.setParentTask(taskId26);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest29 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        int int30 = bulkItemRequest29.id();
        int int31 = bulkItemRequest29.id();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput32 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest29.writeTo(streamOutput32);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions13);
        org.junit.Assert.assertNotNull(actionRequestValidationException14);
        org.junit.Assert.assertNotNull(timeValue15);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 0L + "'", long18 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest20);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 0L + "'", long24 == 0L);
        org.junit.Assert.assertNotNull(taskId26);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
        org.junit.Assert.assertTrue("'" + int31 + "' != '" + 0 + "'", int31 == 0);
    }

    @Test
    public void test08919() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08919");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        long long2 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData3 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData3.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData3);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap7 = indexMetaData3.getMappings();
        int int8 = indexMetaData3.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData3.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.blocks.read", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.version(0L);
        boolean boolean18 = indexMetaData3.equals((java.lang.Object) builder15);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest20 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long21 = bulkShardRequest20.primaryTerm();
        bulkShardRequest20.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue24 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = bulkShardRequest20.timeout(timeValue24);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest26 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest25);
        org.elasticsearch.action.ActionRequest actionRequest27 = bulkItemRequest26.request();
        org.elasticsearch.tasks.TaskId taskId28 = actionRequest27.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting29 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long32 = bulkShardRequest31.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions33 = bulkShardRequest31.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException34 = bulkShardRequest31.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting29, "primary_terms", (java.lang.Throwable) actionRequestValidationException34, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple37 = org.elasticsearch.common.collect.Tuple.tuple(taskId28, (java.lang.IllegalArgumentException) actionRequestValidationException34);
        boolean boolean38 = indexMetaData3.equals((java.lang.Object) taskId28);
        long long39 = indexMetaData3.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff40 = indexMetaData0.diff(indexMetaData3);
        long long41 = indexMetaData3.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData3);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 1L + "'", long2 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData3);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(strImmutableOpenMap7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 0 + "'", int8 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 0L + "'", long21 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest25);
        org.junit.Assert.assertNotNull(actionRequest27);
        org.junit.Assert.assertNotNull(taskId28);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 0L + "'", long32 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions33);
        org.junit.Assert.assertNotNull(actionRequestValidationException34);
        org.junit.Assert.assertNotNull(taskIdTuple37);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + false + "'", boolean38 == false);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + (-1L) + "'", long39 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff40);
        org.junit.Assert.assertTrue("'" + long41 + "' != '" + 1L + "'", long41 == 1L);
    }

    @Test
    public void test08920() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08920");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("current version [0] is higher or equal to the one provided [0]");
        org.elasticsearch.common.io.stream.StreamInput streamInput9 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = indexMetaData0.readFrom(streamInput9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
    }

    @Test
    public void test08921() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08921");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple9 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest6, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest7);
        long long10 = bulkShardRequest7.primaryTerm();
        boolean boolean11 = bulkShardRequest7.getShouldPersistResult();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest7.index("index.creation_date_string");
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest14 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest7);
        long long15 = bulkShardRequest7.seqNo();
        long long16 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.tasks.TaskId taskId17 = bulkShardRequest7.getParentTask();
        org.elasticsearch.common.transport.TransportAddress transportAddress18 = null;
        bulkShardRequest7.remoteAddress(transportAddress18);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException20 = bulkShardRequest7.validate();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + 0L + "'", long10 == 0L);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + false + "'", boolean11 == false);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertTrue("'" + long16 + "' != '" + 0L + "'", long16 == 0L);
        org.junit.Assert.assertNotNull(taskId17);
        org.junit.Assert.assertNull(actionRequestValidationException20);
    }

    @Test
    public void test08922() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08922");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest3.remoteAddress(transportAddress4);
        bulkShardRequest3.seqNo((long) 97);
        org.elasticsearch.common.unit.TimeValue timeValue8 = bulkShardRequest3.timeout();
        org.elasticsearch.tasks.TaskId taskId9 = bulkShardRequest3.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions12 = bulkShardRequest10.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = bulkShardRequest13.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest13.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple21 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest18, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest19);
        long long22 = bulkShardRequest19.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue23 = bulkShardRequest19.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions26 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel27 = bulkShardRequest24.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest28 = bulkShardRequest19.consistencyLevel(writeConsistencyLevel27);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest29 = bulkShardRequest10.consistencyLevel(writeConsistencyLevel27);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel30 = bulkShardRequest29.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest31 = bulkShardRequest3.consistencyLevel(writeConsistencyLevel30);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long35 = bulkShardRequest34.primaryTerm();
        bulkShardRequest34.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue38 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest39 = bulkShardRequest34.timeout(timeValue38);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest40 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest39);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest41 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest39);
        org.elasticsearch.tasks.TaskId taskId42 = bulkShardRequest39.getParentTask();
        bulkShardRequest31.setParentTask(taskId42);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNotNull(taskId9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions12);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest16);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(timeValue23);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions26);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel27 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel27.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest28);
        org.junit.Assert.assertNotNull(bulkShardRequest29);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel30 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel30.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest31);
        org.junit.Assert.assertTrue("'" + long35 + "' != '" + 0L + "'", long35 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest39);
        org.junit.Assert.assertNotNull(taskId42);
    }

    @Test
    public void test08923() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08923");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        bulkShardRequest0.seqNo(0L);
        boolean boolean6 = bulkShardRequest0.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException7 = bulkShardRequest0.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest0.remoteAddress();
        org.elasticsearch.common.unit.TimeValue timeValue9 = bulkShardRequest0.timeout();
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest0.getParentTask();
        long long11 = bulkShardRequest0.seqNo();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + boolean6 + "' != '" + false + "'", boolean6 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException7);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNotNull(timeValue9);
        org.junit.Assert.assertNotNull(taskId10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test08924() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08924");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long5 = bulkShardRequest4.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException7 = bulkShardRequest4.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure9 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [0] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException7, "current version [10] is different than the one provided [1]");
        java.lang.Throwable throwable10 = shardFailure9.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [35] is different than the one provided [32]", throwable10, "current version [98] is different than the one provided [35]");
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertNotNull(actionRequestValidationException7);
        org.junit.Assert.assertNotNull(throwable10);
        org.junit.Assert.assertEquals(throwable10.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable10.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable10.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test08925() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08925");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData4 = indexMetaData0.mapping("hi!");
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("index.number_of_replicas");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap9 = indexMetaData0.getAliases();
        org.elasticsearch.Version version10 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData0.requireFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(mappingMetaData4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
    }

    @Test
    public void test08926() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08926");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        org.elasticsearch.index.shard.ShardId shardId3 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = bulkShardRequest1.setShardId(shardId3);
        org.elasticsearch.index.shard.ShardId shardId5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest4.setShardId(shardId5);
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest6.remoteAddress(transportAddress7);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest6.index("index.number_of_shards");
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException11 = bulkShardRequest10.validate();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest10);
        // The following exception was thrown during execution in test generation
        try {
            java.lang.String str13 = bulkItemRequest12.index();
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest4);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNull(actionRequestValidationException11);
    }

    @Test
    public void test08927() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08927");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long9 = indexMetaData6.getVersion();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData6.getSettings();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder5.settings(settings11);
        org.elasticsearch.common.settings.Settings settings15 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings15);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(settings15);
        org.junit.Assert.assertNotNull(settings16);
    }

    @Test
    public void test08928() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08928");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        int int4 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long8 = indexMetaData5.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData5.requireFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff10 = indexMetaData0.diff(indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData0.getCustoms();
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        int int13 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 0 + "'", int4 == 0);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 1L + "'", long8 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(indexMetaDataDiff10);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertTrue("'" + int13 + "' != '" + 1 + "'", int13 == 1);
    }

    @Test
    public void test08929() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08929");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        org.elasticsearch.index.VersionType versionType1 = versionType0.versionTypeForReplicationAndRecovery();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertNotNull(versionType1);
    }

    @Test
    public void test08930() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08930");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        boolean boolean5 = versionType0.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str8 = versionType0.explainConflictForReads(0L, (long) (byte) 1);
        org.elasticsearch.index.VersionType versionType9 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean11 = versionType9.validateVersionForReads(0L);
        java.lang.String str14 = versionType9.explainConflictForReads((long) 10, (long) 'a');
        java.lang.String str17 = versionType9.explainConflictForReads((long) 1, (long) (byte) 0);
        org.elasticsearch.index.VersionType versionType18 = versionType9.versionTypeForReplicationAndRecovery();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str8, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "current version [10] is different than the one provided [97]" + "'", str14, "current version [10] is different than the one provided [97]");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [1] is different than the one provided [0]" + "'", str17, "current version [1] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(versionType18);
    }

    @Test
    public void test08931() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08931");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state10 = indexMetaData7.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state11 = indexMetaData7.getState();
        byte byte12 = state11.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder6.state(state11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder13.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom17 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder15.putCustom("", custom17);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder18.putMapping("current version [1] is higher or equal to the one provided [100]", "current version [37] is different than the one provided [10]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + state10 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state10.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state11 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state11.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte12 + "' != '" + (byte) 0 + "'", byte12 == (byte) 0);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder18);
    }

    @Test
    public void test08932() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08932");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder1.creationDate((long) ' ');
        java.lang.String[] strArray26 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet27 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean28 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet27, strArray26);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder1.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom31 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder29.putCustom("index.auto_expand_replicas", custom31);
        int int33 = builder29.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(strArray26);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + true + "'", boolean28 == true);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + int33 + "' != '" + (-1) + "'", int33 == (-1));
    }

    @Test
    public void test08933() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08933");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("index.version.created");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap10 = indexMetaData0.getActiveAllocationIds();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap10);
    }

    @Test
    public void test08934() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08934");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting4 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting6 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting10 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        bulkShardRequest13.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest13.timeout(timeValue17);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest19 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.action.ActionRequest actionRequest20 = bulkItemRequest19.request();
        org.elasticsearch.tasks.TaskId taskId21 = actionRequest20.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting22 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long25 = bulkShardRequest24.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions26 = bulkShardRequest24.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException27 = bulkShardRequest24.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure29 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting22, "primary_terms", (java.lang.Throwable) actionRequestValidationException27, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple30 = org.elasticsearch.common.collect.Tuple.tuple(taskId21, (java.lang.IllegalArgumentException) actionRequestValidationException27);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure32 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting10, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException27, "index.creation_date_string");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting33 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.collect.Tuple<java.lang.IllegalArgumentException, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>> illegalArgumentExceptionTuple34 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.IllegalArgumentException) actionRequestValidationException27, settingsSetting33);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure36 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.version.created_string", (java.lang.Throwable) actionRequestValidationException27, "current version [101] is different than the one provided [32]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure38 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting6, "current version [-1] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException27, "primary_terms");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure40 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting4, "current version [3] is different than the one provided [11]", (java.lang.Throwable) actionRequestValidationException27, "current version [0] is different than the one provided [35]");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure42 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [10] is different than the one provided [2]", (java.lang.Throwable) actionRequestValidationException27, "");
        java.lang.Throwable throwable43 = shardFailure42.cause;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure45 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "current version [2] is higher than the one provided [101]", throwable43, "current version [0] is higher or equal to the one provided [3]");
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(actionRequest20);
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 0L + "'", long25 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions26);
        org.junit.Assert.assertNotNull(actionRequestValidationException27);
        org.junit.Assert.assertNotNull(taskIdTuple30);
        org.junit.Assert.assertNotNull(settingsSetting33);
        org.junit.Assert.assertNotNull(illegalArgumentExceptionTuple34);
        org.junit.Assert.assertNotNull(throwable43);
        org.junit.Assert.assertEquals(throwable43.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable43.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable43.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
    }

    @Test
    public void test08935() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08935");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.consistencyLevel(writeConsistencyLevel2);
        java.lang.String str4 = bulkShardRequest0.index();
        bulkShardRequest0.setParentTask("current version [11] is different than the one provided [0]", (long) (short) 0);
        bulkShardRequest0.seqNo((long) 100);
        org.elasticsearch.index.shard.ShardId shardId10 = bulkShardRequest0.shardId();
        long long11 = bulkShardRequest0.seqNo();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNull(str4);
        org.junit.Assert.assertNull(shardId10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L + "'", long11 == 100L);
    }

    @Test
    public void test08936() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08936");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        boolean boolean12 = indexMetaData0.isSameUUID("current version [36] is different than the one provided [0]");
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder13 = null;
        java.util.AbstractCollection<java.lang.String> strCollection14 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params15 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params> strCollectionTuple16 = new org.elasticsearch.common.collect.Tuple<java.util.AbstractCollection<java.lang.String>, org.elasticsearch.common.xcontent.ToXContent.Params>(strCollection14, params15);
        org.elasticsearch.cluster.routing.ShardRouting shardRouting17 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting19 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long22 = bulkShardRequest21.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions23 = bulkShardRequest21.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest21.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure26 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting19, "primary_terms", (java.lang.Throwable) actionRequestValidationException24, "index.priority");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure28 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting17, "primary_terms", (java.lang.Throwable) actionRequestValidationException24, "index.version.created");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData29);
        java.lang.String str33 = indexMetaData29.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap34 = indexMetaData29.getMappings();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>> validationExceptionTuple35 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.ValidationException, org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData>>((org.elasticsearch.common.ValidationException) actionRequestValidationException24, strImmutableOpenMap34);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, java.lang.Throwable> paramsTuple36 = org.elasticsearch.common.collect.Tuple.tuple(params15, (java.lang.Throwable) actionRequestValidationException24);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder37 = indexMetaData0.toXContent(xContentBuilder13, params15);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(params15);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertEquals("'" + str33 + "' != '" + "_na_" + "'", str33, "_na_");
        org.junit.Assert.assertNotNull(strImmutableOpenMap34);
        org.junit.Assert.assertNotNull(paramsTuple36);
    }

    @Test
    public void test08937() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08937");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting3 = settingsSettingTuple2.v1();
        java.lang.String str4 = settingsSettingTuple2.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting5 = settingsSettingTuple2.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting6 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        java.lang.String str11 = builder10.index();
        int int12 = builder10.numberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder10.putCustom("_na_", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder10.removeAlias("index.version.minimum_compatible");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder19 = builder17.version(52L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder19.primaryTerm((int) (byte) 0, 10L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder19.creationDate(10L);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long28 = indexMetaData25.getVersion();
        java.util.Set<java.lang.String> strSet30 = null; // flaky: indexMetaData25.activeAllocationIds((-1));
        org.elasticsearch.Version version31 = indexMetaData25.getUpgradedVersion();
        org.elasticsearch.Version version32 = indexMetaData25.getUpgradedVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters33 = indexMetaData25.excludeFilters();
        boolean boolean35 = indexMetaData25.isSameUUID("index.uuid");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder24.state(state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.numberOfReplicas(3);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple40 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting6, builder37);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder37.putMapping("current version [1] is different than the one provided [4]", "current version [53] is different than the one provided [101]");
            org.junit.Assert.fail("Expected exception of type org.elasticsearch.ElasticsearchParseException; message: Failed to derive xcontent");
        } catch (org.elasticsearch.ElasticsearchParseException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNotNull(settingsSetting3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str4, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting5);
        org.junit.Assert.assertNotNull(settingsSetting6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertEquals("'" + str11 + "' != '" + "" + "'", str11, "");
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 1 + "'", int12 == 1);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder19);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 1L + "'", long28 == 1L);
        org.junit.Assert.assertNull(strSet30);
        org.junit.Assert.assertNotNull(version31);
        org.junit.Assert.assertNotNull(version32);
        org.junit.Assert.assertNull(discoveryNodeFilters33);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + true + "'", boolean35 == true);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08938() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08938");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters13 = indexMetaData0.includeFilters();
        int int14 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData15 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData17 = indexMetaData15.mappingOrDefault("");
        long long18 = indexMetaData15.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap19 = indexMetaData15.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters20 = indexMetaData15.includeFilters();
        int int21 = indexMetaData15.getNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters22 = indexMetaData15.getInitialRecoveryFilters();
        int int23 = indexMetaData15.getNumberOfShards();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData24 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData26 = indexMetaData24.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder27 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData24);
        java.lang.String str28 = indexMetaData24.getIndexUUID();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData24);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters30 = indexMetaData24.getInitialRecoveryFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff31 = indexMetaData15.diff(indexMetaData24);
        long long32 = indexMetaData24.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap33 = indexMetaData24.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff34 = indexMetaData0.diff(indexMetaData24);
        boolean boolean36 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters37 = indexMetaData0.excludeFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters13);
        org.junit.Assert.assertTrue("'" + int14 + "' != '" + 0 + "'", int14 == 0);
        org.junit.Assert.assertNotNull(indexMetaData15);
        org.junit.Assert.assertNull(mappingMetaData17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L) + "'", long18 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap19);
        org.junit.Assert.assertNull(discoveryNodeFilters20);
        org.junit.Assert.assertTrue("'" + int21 + "' != '" + 1 + "'", int21 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 1 + "'", int23 == 1);
        org.junit.Assert.assertNotNull(indexMetaData24);
        org.junit.Assert.assertNull(mappingMetaData26);
        org.junit.Assert.assertNotNull(builder27);
        org.junit.Assert.assertEquals("'" + str28 + "' != '" + "_na_" + "'", str28, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters30);
        org.junit.Assert.assertNotNull(indexMetaDataDiff31);
        org.junit.Assert.assertTrue("'" + long32 + "' != '" + 1L + "'", long32 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap33);
        org.junit.Assert.assertNotNull(indexMetaDataDiff34);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + true + "'", boolean36 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters37);
    }

    @Test
    public void test08939() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08939");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.primaryTerm();
        bulkShardRequest0.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.index.shard.ShardId shardId6 = bulkShardRequest5.shardId();
        org.elasticsearch.common.transport.TransportAddress transportAddress7 = null;
        bulkShardRequest5.remoteAddress(transportAddress7);
        long long9 = bulkShardRequest5.primaryTerm();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest5.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel11 = bulkShardRequest5.consistencyLevel();
        bulkShardRequest5.seqNo((long) (byte) 10);
        org.elasticsearch.tasks.TaskId taskId14 = bulkShardRequest5.getParentTask();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException15 = bulkShardRequest5.validate();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(shardId6);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 10L + "'", long9 == 10L);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel11 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel11.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId14);
        org.junit.Assert.assertNotNull(actionRequestValidationException15);
    }

    @Test
    public void test08940() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08940");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        boolean boolean5 = indexMetaData0.isSameUUID("index.shadow_replicas");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.includeFilters();
        org.elasticsearch.common.settings.Settings settings7 = indexMetaData0.getSettings();
        org.elasticsearch.Version version8 = indexMetaData0.getCreationVersion();
        java.lang.String str9 = indexMetaData0.getIndexUUID();
        boolean boolean11 = indexMetaData0.isSameUUID("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long21 = indexMetaData18.getVersion();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData18.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder17.settings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData33.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData33.getState();
        boolean boolean37 = indexMetaData29.equals((java.lang.Object) state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder28.state(state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder17.state(state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder39.primaryTerm((int) (byte) 0, (long) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom47 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder48 = builder45.putCustom("index.blocks.read", custom47);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder45.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder51 = builder45.creationDate((long) ' ');
        java.lang.String[] strArray70 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet71 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean72 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet71, strArray70);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder73 = builder45.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder74 = builder39.putActiveAllocationIds((int) (short) 100, (java.util.Set<java.lang.String>) strSet71);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder75 = builder12.putActiveAllocationIds(10, (java.util.Set<java.lang.String>) strSet71);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertNotNull(settings7);
        org.junit.Assert.assertNotNull(version8);
        org.junit.Assert.assertEquals("'" + str9 + "' != '" + "_na_" + "'", str9, "_na_");
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder48);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertNotNull(builder51);
        org.junit.Assert.assertNotNull(strArray70);
        org.junit.Assert.assertTrue("'" + boolean72 + "' != '" + true + "'", boolean72 == true);
        org.junit.Assert.assertNotNull(builder73);
        org.junit.Assert.assertNotNull(builder74);
        org.junit.Assert.assertNotNull(builder75);
    }

    @Test
    public void test08941() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08941");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long1 = indexMetaData0.getCreationDate();
        boolean boolean3 = indexMetaData0.isSameUUID("index.version.created_string");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData5 = indexMetaData0.mapping("current version [-1] is different than the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long7 = indexMetaData6.getCreationDate();
        boolean boolean9 = indexMetaData6.isSameUUID("index.version.created_string");
        int int10 = indexMetaData6.getNumberOfReplicas();
        boolean boolean12 = indexMetaData6.isSameUUID("");
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters14 = indexMetaData6.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.elasticsearch.common.settings.Settings.Builder builder16 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.settings(builder16);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + (-1L) + "'", long1 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNull(mappingMetaData5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
        org.junit.Assert.assertTrue("'" + int10 + "' != '" + 0 + "'", int10 == 0);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + true + "'", boolean12 == true);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(discoveryNodeFilters14);
        org.junit.Assert.assertNotNull(builder15);
    }

    @Test
    public void test08942() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08942");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.index.Index index5 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        long long8 = bulkShardRequest6.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest9 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest9.getParentTask();
        bulkShardRequest6.setParentTask(taskId10);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest6.index("hi!");
        org.elasticsearch.tasks.TaskId taskId14 = null;
        bulkShardRequest13.setParentTask(taskId14);
        boolean boolean16 = indexMetaData0.equals((java.lang.Object) taskId14);
        java.lang.String str17 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(index5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertNotNull(taskId10);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + false + "'", boolean16 == false);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "_na_" + "'", str17, "_na_");
    }

    @Test
    public void test08943() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08943");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        byte byte11 = versionType0.getValue();
        org.elasticsearch.index.VersionType versionType12 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean14 = versionType12.validateVersionForReads(11L);
        byte byte15 = versionType12.getValue();
        boolean boolean17 = versionType12.validateVersionForReads((long) (byte) 2);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + byte11 + "' != '" + (byte) 0 + "'", byte11 == (byte) 0);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + true + "'", boolean14 == true);
        org.junit.Assert.assertTrue("'" + byte15 + "' != '" + (byte) 1 + "'", byte15 == (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
    }

    @Test
    public void test08944() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08944");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state4 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap5 = indexMetaData0.getAliases();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData0.mapping("current version [-1] is different than the one provided [0]");
        int int8 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state4 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state4.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + 1 + "'", int8 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
    }

    @Test
    public void test08945() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08945");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.common.transport.TransportAddress transportAddress4 = null;
        bulkShardRequest3.remoteAddress(transportAddress4);
        bulkShardRequest3.seqNo((long) 97);
        org.elasticsearch.common.unit.TimeValue timeValue8 = bulkShardRequest3.timeout();
        bulkShardRequest3.primaryTerm(0L);
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = bulkShardRequest3.remoteAddress();
        org.elasticsearch.index.shard.ShardId shardId12 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = bulkShardRequest3.setShardId(shardId12);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest3.index("current version [36] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest19 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long20 = bulkShardRequest19.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest22 = bulkShardRequest19.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest24 = bulkShardRequest19.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest25 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long26 = bulkShardRequest25.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple27 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest24, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest25);
        long long28 = bulkShardRequest25.primaryTerm();
        org.elasticsearch.common.unit.TimeValue timeValue29 = bulkShardRequest25.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest30 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long31 = bulkShardRequest30.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions32 = bulkShardRequest30.indicesOptions();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel33 = bulkShardRequest30.consistencyLevel();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest34 = bulkShardRequest25.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest35 = bulkShardRequest16.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest36 = bulkShardRequest15.consistencyLevel(writeConsistencyLevel33);
        org.elasticsearch.common.unit.TimeValue timeValue37 = bulkShardRequest36.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress38 = bulkShardRequest36.remoteAddress();
        long long39 = bulkShardRequest36.seqNo();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(timeValue8);
        org.junit.Assert.assertNull(transportAddress11);
        org.junit.Assert.assertNotNull(bulkShardRequest13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + 0L + "'", long20 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest22);
        org.junit.Assert.assertNotNull(bulkShardRequest24);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 0L + "'", long26 == 0L);
        org.junit.Assert.assertTrue("'" + long28 + "' != '" + 0L + "'", long28 == 0L);
        org.junit.Assert.assertNotNull(timeValue29);
        org.junit.Assert.assertTrue("'" + long31 + "' != '" + 0L + "'", long31 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions32);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel33 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel33.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(bulkShardRequest34);
        org.junit.Assert.assertNotNull(bulkShardRequest35);
        org.junit.Assert.assertNotNull(bulkShardRequest36);
        org.junit.Assert.assertNotNull(timeValue37);
        org.junit.Assert.assertNull(transportAddress38);
        org.junit.Assert.assertTrue("'" + long39 + "' != '" + 97L + "'", long39 == 97L);
    }

    @Test
    public void test08946() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08946");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.blocks.write", custom12);
        boolean boolean14 = settingsSettingTuple2.equals((java.lang.Object) "index.blocks.write");
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData16.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet19 = null; // flaky: indexMetaData16.activeAllocationIds((-1));
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData16.mappingOrDefault("");
        boolean boolean23 = settingsSettingTuple2.equals((java.lang.Object) indexMetaData16);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str26 = builder25.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder25.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder25.version((long) '4');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.numberOfReplicas((int) (short) 1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder32.index("current version [32] is different than the one provided [10]");
        boolean boolean35 = settingsSettingTuple2.equals((java.lang.Object) builder32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder32.version((long) (byte) 100);
        org.elasticsearch.cluster.metadata.AliasMetaData.Builder builder38 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder37.putAlias(builder38);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertNull(strSet19);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "index.version.minimum_compatible" + "'", str26, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertTrue("'" + boolean35 + "' != '" + false + "'", boolean35 == false);
        org.junit.Assert.assertNotNull(builder37);
    }

    @Test
    public void test08947() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08947");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData0.mappingOrDefault("index.shared_filesystem");
        int int12 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.index.Index index13 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.index.Index index14 = indexMetaData0.getMergeSourceIndex();
        org.apache.lucene.util.Version version15 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap16 = indexMetaData0.getMappings();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.getInitialRecoveryFilters();
        long long18 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData19 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData21 = indexMetaData19.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state22 = indexMetaData19.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData19.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap24 = indexMetaData19.getAliases();
        long long25 = indexMetaData19.getVersion();
        java.lang.String str26 = indexMetaData19.getIndexUUID();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters27 = indexMetaData19.includeFilters();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff28 = indexMetaData0.diff(indexMetaData19);
        org.elasticsearch.common.settings.Settings settings29 = indexMetaData0.getSettings();
        int int30 = indexMetaData0.getNumberOfReplicas();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertNull(strSet9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + int12 + "' != '" + 0 + "'", int12 == 0);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNotNull(strImmutableOpenMap16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
        org.junit.Assert.assertTrue("'" + long18 + "' != '" + 1L + "'", long18 == 1L);
        org.junit.Assert.assertNotNull(indexMetaData19);
        org.junit.Assert.assertNull(mappingMetaData21);
        org.junit.Assert.assertTrue("'" + state22 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state22.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap24);
        org.junit.Assert.assertTrue("'" + long25 + "' != '" + 1L + "'", long25 == 1L);
        org.junit.Assert.assertEquals("'" + str26 + "' != '" + "_na_" + "'", str26, "_na_");
        org.junit.Assert.assertNull(discoveryNodeFilters27);
        org.junit.Assert.assertNotNull(indexMetaDataDiff28);
        org.junit.Assert.assertNotNull(settings29);
        org.junit.Assert.assertTrue("'" + int30 + "' != '" + 0 + "'", int30 == 0);
    }

    @Test
    public void test08948() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08948");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        byte byte3 = versionType0.getValue();
        java.lang.String str7 = versionType0.explainConflictForWrites((long) '#', (long) (short) -1, true);
        boolean boolean10 = versionType0.isVersionConflictForReads((long) (short) 10, 101L);
        boolean boolean13 = versionType0.isVersionConflictForReads((long) (byte) 1, (long) (byte) 100);
        boolean boolean16 = versionType0.isVersionConflictForReads((long) (short) 100, 35L);
        boolean boolean18 = versionType0.validateVersionForReads(98L);
        long long21 = versionType0.updateVersion((long) 2, (long) 0);
        long long24 = versionType0.updateVersion((long) 3, 98L);
        org.elasticsearch.index.VersionType versionType25 = versionType0.versionTypeForReplicationAndRecovery();
        byte byte26 = versionType0.getValue();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + byte3 + "' != '" + (byte) 0 + "'", byte3 == (byte) 0);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "current version [35] is different than the one provided [-1]" + "'", str7, "current version [35] is different than the one provided [-1]");
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + true + "'", boolean18 == true);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 3L + "'", long21 == 3L);
        org.junit.Assert.assertTrue("'" + long24 + "' != '" + 4L + "'", long24 == 4L);
        org.junit.Assert.assertNotNull(versionType25);
        org.junit.Assert.assertTrue("'" + byte26 + "' != '" + (byte) 0 + "'", byte26 == (byte) 0);
    }

    @Test
    public void test08949() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08949");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = builder7.build();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long11 = bulkShardRequest10.primaryTerm();
        bulkShardRequest10.primaryTerm((long) 10);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel14 = bulkShardRequest10.consistencyLevel();
        long long15 = bulkShardRequest10.seqNo();
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest10.setShardId(shardId16);
        bulkShardRequest10.seqNo((long) 100);
        org.elasticsearch.index.shard.ShardId shardId20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest10.setShardId(shardId20);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest22 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 100, (org.elasticsearch.action.ActionRequest) bulkShardRequest21);
        boolean boolean23 = indexMetaData8.equals((java.lang.Object) (short) 100);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel14 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel14.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 0L + "'", long15 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertTrue("'" + boolean23 + "' != '" + false + "'", boolean23 == false);
    }

    @Test
    public void test08950() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08950");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest2 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long3 = bulkShardRequest2.seqNo();
        long long4 = bulkShardRequest2.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest5.getParentTask();
        bulkShardRequest2.setParentTask(taskId6);
        bulkShardRequest1.setParentTask(taskId6);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (short) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel10 = bulkShardRequest1.consistencyLevel();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest1.getParentTask();
        long long12 = bulkShardRequest1.primaryTerm();
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel10 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel10.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + 0L + "'", long12 == 0L);
    }

    @Test
    public void test08951() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08951");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads(101L, 1L);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean7 = versionType4.isVersionConflictForReads((long) (short) 1, (long) (byte) 0);
        boolean boolean11 = versionType4.isVersionConflictForWrites(98L, (long) (byte) 0, true);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest12 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long13 = bulkShardRequest12.seqNo();
        org.elasticsearch.index.shard.ShardId shardId14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest12.setShardId(shardId14);
        org.elasticsearch.index.shard.ShardId shardId16 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest17 = bulkShardRequest15.setShardId(shardId16);
        bulkShardRequest15.seqNo(36L);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long22 = bulkShardRequest21.primaryTerm();
        bulkShardRequest21.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue25 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest26 = bulkShardRequest21.timeout(timeValue25);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest27 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest26);
        org.elasticsearch.action.ActionRequest actionRequest28 = bulkItemRequest27.request();
        org.elasticsearch.tasks.TaskId taskId29 = actionRequest28.getParentTask();
        bulkShardRequest15.setParentTask(taskId29);
        boolean boolean31 = bulkShardRequest15.getShouldPersistResult();
        org.elasticsearch.common.collect.Tuple<java.lang.Enum<org.elasticsearch.index.VersionType>, org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>> versionTypeEnumTuple32 = new org.elasticsearch.common.collect.Tuple<java.lang.Enum<org.elasticsearch.index.VersionType>, org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>>((java.lang.Enum<org.elasticsearch.index.VersionType>) versionType4, (org.elasticsearch.action.ActionRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest15);
        java.lang.String str36 = versionType4.explainConflictForWrites(54L, (long) 32, false);
        boolean boolean39 = versionType4.isVersionConflictForReads((long) 10, 54L);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + true + "'", boolean3 == true);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L + "'", long13 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertNotNull(bulkShardRequest17);
        org.junit.Assert.assertTrue("'" + long22 + "' != '" + 0L + "'", long22 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest26);
        org.junit.Assert.assertNotNull(actionRequest28);
        org.junit.Assert.assertNotNull(taskId29);
        org.junit.Assert.assertTrue("'" + boolean31 + "' != '" + false + "'", boolean31 == false);
        org.junit.Assert.assertEquals("'" + str36 + "' != '" + "current version [54] is higher or equal to the one provided [32]" + "'", str36, "current version [54] is higher or equal to the one provided [32]");
        org.junit.Assert.assertTrue("'" + boolean39 + "' != '" + true + "'", boolean39 == true);
    }

    @Test
    public void test08952() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08952");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        java.lang.String str5 = versionType0.explainConflictForReads((long) (byte) 10, (long) (short) 100);
        boolean boolean9 = versionType0.isVersionConflictForWrites(52L, (long) ' ', true);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertEquals("'" + str5 + "' != '" + "current version [10] is different than the one provided [100]" + "'", str5, "current version [10] is different than the one provided [100]");
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + true + "'", boolean9 == true);
    }

    @Test
    public void test08953() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08953");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap7 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting8 = null;
        java.lang.Throwable throwable10 = null;
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure12 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting8, "index.shared_filesystem", throwable10, "index.shared_filesystem");
        java.lang.String str13 = shardFailure12.reason;
        java.lang.String str14 = shardFailure12.indexUUID;
        java.lang.String str15 = shardFailure12.reason;
        java.lang.String str16 = shardFailure12.reason;
        java.lang.String str17 = shardFailure12.indexUUID;
        boolean boolean18 = indexMetaData0.equals((java.lang.Object) shardFailure12);
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap19 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state20 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = builder21.index("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder21.version(35L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom27 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder21.putCustom("", custom27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom30 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder21.putCustom("index.creation_date_string", custom30);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap7);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.shared_filesystem" + "'", str13, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.shared_filesystem" + "'", str14, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.shared_filesystem" + "'", str15, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "index.shared_filesystem" + "'", str16, "index.shared_filesystem");
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "index.shared_filesystem" + "'", str17, "index.shared_filesystem");
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap19);
        org.junit.Assert.assertTrue("'" + state20 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state20.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder23);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(builder31);
    }

    @Test
    public void test08954() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08954");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        java.lang.String str13 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = settingsSettingTuple2.v2();
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = settingsSettingTuple2.v2();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str13, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNull(builder14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNull(builder16);
    }

    @Test
    public void test08955() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08955");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) -1, (long) 0);
        java.lang.String str10 = versionType0.explainConflictForWrites((long) 10, (long) ' ', true);
        long long13 = versionType0.updateVersion(10L, (long) ' ');
        java.lang.String str17 = versionType0.explainConflictForWrites((long) 10, (long) (-1), true);
        java.lang.String str21 = versionType0.explainConflictForWrites((long) (short) -1, (long) (byte) 3, false);
        boolean boolean25 = versionType0.isVersionConflictForWrites(100L, 3L, false);
        boolean boolean27 = versionType0.validateVersionForWrites((long) 0);
        org.elasticsearch.index.VersionType versionType28 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType29 = versionType28.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput30 = null;
        // The following exception was thrown during execution in test generation
        try {
            versionType29.writeTo(streamOutput30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [-1] is different than the one provided [0]" + "'", str6, "current version [-1] is different than the one provided [0]");
        org.junit.Assert.assertEquals("'" + str10 + "' != '" + "current version [10] is different than the one provided [32]" + "'", str10, "current version [10] is different than the one provided [32]");
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 11L + "'", long13 == 11L);
        org.junit.Assert.assertEquals("'" + str17 + "' != '" + "current version [10] is different than the one provided [-1]" + "'", str17, "current version [10] is different than the one provided [-1]");
        org.junit.Assert.assertEquals("'" + str21 + "' != '" + "current version [-1] is different than the one provided [3]" + "'", str21, "current version [-1] is different than the one provided [3]");
        org.junit.Assert.assertTrue("'" + boolean25 + "' != '" + true + "'", boolean25 == true);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertNotNull(versionType28);
        org.junit.Assert.assertNotNull(versionType29);
    }

    @Test
    public void test08956() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08956");
        org.elasticsearch.index.VersionType versionType2 = org.elasticsearch.index.VersionType.fromValue((byte) 2);
        org.elasticsearch.index.VersionType versionType3 = versionType2.versionTypeForReplicationAndRecovery();
        java.lang.String str7 = versionType2.explainConflictForWrites((long) (byte) 100, (long) ' ', true);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType8 = org.elasticsearch.index.VersionType.fromString("current version [53] is different than the one provided [97]", versionType2);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [53] is different than the one provided [97]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType2);
        org.junit.Assert.assertNotNull(versionType3);
        org.junit.Assert.assertEquals("'" + str7 + "' != '" + "current version [100] is higher than the one provided [32]" + "'", str7, "current version [100] is higher than the one provided [32]");
    }

    @Test
    public void test08957() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08957");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        int int6 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData0.mappingOrDefault("current version [53] is different than the one provided [0]");
        org.elasticsearch.index.Index index10 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertNull(index10);
    }

    @Test
    public void test08958() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08958");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.Version version3 = indexMetaData0.getCreationVersion();
        int int4 = indexMetaData0.getNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(version3);
        org.junit.Assert.assertTrue("'" + int4 + "' != '" + 1 + "'", int4 == 1);
    }

    @Test
    public void test08959() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08959");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.index.Index index9 = indexMetaData0.getMergeSourceIndex();
        long long10 = indexMetaData0.getCreationDate();
        org.elasticsearch.index.Index index11 = indexMetaData0.getMergeSourceIndex();
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData0.mappingOrDefault("active_allocations");
        boolean boolean16 = indexMetaData0.isSameUUID("index.creation_date_string");
        org.elasticsearch.index.Index index17 = indexMetaData0.getMergeSourceIndex();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNull(index11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + boolean16 + "' != '" + true + "'", boolean16 == true);
        org.junit.Assert.assertNull(index17);
    }

    @Test
    public void test08960() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08960");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        long long6 = indexMetaData0.getCreationDate();
        boolean boolean8 = indexMetaData0.isSameUUID("index.uuid");
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters9 = indexMetaData0.includeFilters();
        org.elasticsearch.Version version10 = indexMetaData0.getCreationVersion();
        int int11 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + (-1L) + "'", long6 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + true + "'", boolean8 == true);
        org.junit.Assert.assertNull(discoveryNodeFilters9);
        org.junit.Assert.assertNotNull(version10);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 1 + "'", int11 == 1);
    }

    @Test
    public void test08961() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08961");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        boolean boolean33 = indexMetaData25.equals((java.lang.Object) state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.state(state32);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) builder13);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state37 = indexMetaData4.getState();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters38 = indexMetaData4.includeFilters();
        org.elasticsearch.common.settings.Settings settings39 = indexMetaData4.getSettings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder41 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder43 = builder41.index("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder43.creationDate((long) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder45.creationDate(101L);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder49 = builder45.removeAlias("index.version.created");
        boolean boolean50 = indexMetaData4.equals((java.lang.Object) builder45);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData52 = indexMetaData4.mapping("");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData53 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData55 = indexMetaData53.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet57 = null; // flaky: indexMetaData53.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder58 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder59 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData53);
        org.elasticsearch.Version version60 = indexMetaData53.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap61 = indexMetaData53.getCustoms();
        org.elasticsearch.index.Index index62 = indexMetaData53.getMergeSourceIndex();
        long long63 = indexMetaData53.getCreationDate();
        org.elasticsearch.index.Index index64 = indexMetaData53.getMergeSourceIndex();
        org.apache.lucene.util.Version version65 = indexMetaData53.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff66 = indexMetaData4.diff(indexMetaData53);
        boolean boolean68 = indexMetaData4.isSameUUID("current version [4] is different than the one provided [0]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertTrue("'" + state37 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state37.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(discoveryNodeFilters38);
        org.junit.Assert.assertNotNull(settings39);
        org.junit.Assert.assertNotNull(builder43);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
        org.junit.Assert.assertNotNull(builder49);
        org.junit.Assert.assertTrue("'" + boolean50 + "' != '" + false + "'", boolean50 == false);
        org.junit.Assert.assertNull(mappingMetaData52);
        org.junit.Assert.assertNotNull(indexMetaData53);
        org.junit.Assert.assertNull(mappingMetaData55);
        org.junit.Assert.assertNull(strSet57);
        org.junit.Assert.assertNotNull(builder58);
        org.junit.Assert.assertNotNull(builder59);
        org.junit.Assert.assertNotNull(version60);
        org.junit.Assert.assertNotNull(strImmutableOpenMap61);
        org.junit.Assert.assertNull(index62);
        org.junit.Assert.assertTrue("'" + long63 + "' != '" + (-1L) + "'", long63 == (-1L));
        org.junit.Assert.assertNull(index64);
        org.junit.Assert.assertNull(version65);
        org.junit.Assert.assertNotNull(indexMetaDataDiff66);
        org.junit.Assert.assertTrue("'" + boolean68 + "' != '" + true + "'", boolean68 == true);
    }

    @Test
    public void test08962() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08962");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str6 = builder5.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = builder5.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder5.numberOfShards((int) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder10.putCustom("index.blocks.write", custom12);
        boolean boolean14 = settingsSettingTuple2.equals((java.lang.Object) "index.blocks.write");
        java.lang.String str15 = settingsSettingTuple2.toString();
        java.lang.String str16 = settingsSettingTuple2.toString();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = settingsSettingTuple2.v2();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long19 = bulkShardRequest18.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest18.consistencyLevel(writeConsistencyLevel20);
        org.elasticsearch.index.VersionType versionType22 = org.elasticsearch.index.VersionType.FORCE;
        org.elasticsearch.index.VersionType versionType23 = versionType22.versionTypeForReplicationAndRecovery();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.index.VersionType> bulkShardRequestTuple24 = org.elasticsearch.common.collect.Tuple.tuple(bulkShardRequest21, versionType22);
        boolean boolean27 = versionType22.isVersionConflictForReads((long) (short) 100, (long) (byte) 10);
        boolean boolean28 = settingsSettingTuple2.equals((java.lang.Object) versionType22);
        java.lang.Object obj29 = null;
        boolean boolean30 = settingsSettingTuple2.equals(obj29);
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting31 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = settingsSettingTuple2.v2();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "index.version.minimum_compatible" + "'", str6, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder8);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str16, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNull(builder17);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + 0L + "'", long19 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
        org.junit.Assert.assertNotNull(versionType22);
        org.junit.Assert.assertNotNull(versionType23);
        org.junit.Assert.assertNotNull(bulkShardRequestTuple24);
        org.junit.Assert.assertTrue("'" + boolean27 + "' != '" + false + "'", boolean27 == false);
        org.junit.Assert.assertTrue("'" + boolean28 + "' != '" + false + "'", boolean28 == false);
        org.junit.Assert.assertTrue("'" + boolean30 + "' != '" + false + "'", boolean30 == false);
        org.junit.Assert.assertNotNull(settingsSetting31);
        org.junit.Assert.assertNull(builder32);
    }

    @Test
    public void test08963() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08963");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.apache.lucene.util.Version version8 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap9 = indexMetaData0.getCustoms();
        java.util.Set<java.lang.String> strSet11 = null; // flaky: indexMetaData0.activeAllocationIds((int) ' ');
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNull(version8);
        org.junit.Assert.assertNotNull(strImmutableOpenMap9);
        org.junit.Assert.assertNull(strSet11);
        org.junit.Assert.assertNotNull(settings12);
    }

    @Test
    public void test08964() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08964");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.Version version7 = indexMetaData0.getUpgradedVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        boolean boolean10 = indexMetaData0.isSameUUID("current version [35] is different than the one provided [35]");
        int int11 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.common.settings.Settings settings12 = indexMetaData0.getSettings();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData0.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(version7);
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertTrue("'" + int11 + "' != '" + 0 + "'", int11 == 0);
        org.junit.Assert.assertNotNull(settings12);
    }

    @Test
    public void test08965() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08965");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap4 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters5 = indexMetaData0.includeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData0.mapping("current version [0] is higher or equal to the one provided [0]");
        org.elasticsearch.Version version9 = indexMetaData0.getUpgradedVersion();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertNull(discoveryNodeFilters5);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNotNull(version9);
    }

    @Test
    public void test08966() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08966");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long9 = indexMetaData6.getVersion();
        org.elasticsearch.common.settings.Settings settings10 = indexMetaData6.getSettings();
        org.elasticsearch.common.settings.Settings settings11 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings10);
        boolean boolean12 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings11);
        boolean boolean13 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder5.settings(settings11);
        boolean boolean15 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings11);
        org.elasticsearch.common.settings.Settings settings16 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings11);
        boolean boolean17 = org.elasticsearch.cluster.metadata.IndexMetaData.isIndexUsingShadowReplicas(settings16);
        boolean boolean18 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings16);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 1L + "'", long9 == 1L);
        org.junit.Assert.assertNotNull(settings10);
        org.junit.Assert.assertNotNull(settings11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertTrue("'" + boolean15 + "' != '" + false + "'", boolean15 == false);
        org.junit.Assert.assertNotNull(settings16);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + false + "'", boolean17 == false);
        org.junit.Assert.assertTrue("'" + boolean18 + "' != '" + false + "'", boolean18 == false);
    }

    @Test
    public void test08967() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08967");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean3 = versionType0.isVersionConflictForReads((long) (-1), (-1L));
        java.lang.String str6 = versionType0.explainConflictForReads((long) (byte) 3, 11L);
        org.elasticsearch.index.VersionType versionType7 = versionType0.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType8 = versionType7.versionTypeForReplicationAndRecovery();
        org.elasticsearch.index.VersionType versionType9 = versionType7.versionTypeForReplicationAndRecovery();
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean3 + "' != '" + false + "'", boolean3 == false);
        org.junit.Assert.assertEquals("'" + str6 + "' != '" + "current version [3] is different than the one provided [11]" + "'", str6, "current version [3] is different than the one provided [11]");
        org.junit.Assert.assertNotNull(versionType7);
        org.junit.Assert.assertNotNull(versionType8);
        org.junit.Assert.assertNotNull(versionType9);
    }

    @Test
    public void test08968() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08968");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state3 = indexMetaData0.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData4.getState();
        boolean boolean8 = indexMetaData0.equals((java.lang.Object) state7);
        long long9 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long13 = indexMetaData10.getVersion();
        org.elasticsearch.common.settings.Settings settings14 = indexMetaData10.getSettings();
        java.lang.String str15 = indexMetaData10.getIndexUUID();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap16 = indexMetaData10.getActiveAllocationIds();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap17 = indexMetaData10.getAliases();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff18 = indexMetaData0.diff(indexMetaData10);
        long long19 = indexMetaData0.getCreationDate();
        java.lang.String str20 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + state3 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state3.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean8 + "' != '" + false + "'", boolean8 == false);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L) + "'", long9 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(settings14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "_na_" + "'", str15, "_na_");
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap16);
        org.junit.Assert.assertNotNull(strImmutableOpenMap17);
        org.junit.Assert.assertNotNull(indexMetaDataDiff18);
        org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L) + "'", long19 == (-1L));
        org.junit.Assert.assertEquals("'" + str20 + "' != '" + "_na_" + "'", str20, "_na_");
    }

    @Test
    public void test08969() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08969");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder3.removeAlias("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder3.version((long) (byte) 0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData12.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state15 = indexMetaData12.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData16 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData18 = indexMetaData16.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state19 = indexMetaData16.getState();
        boolean boolean20 = indexMetaData12.equals((java.lang.Object) state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = builder11.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder3.state(state19);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder3.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder3.creationDate((long) '#');
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertTrue("'" + state15 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state15.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData16);
        org.junit.Assert.assertNull(mappingMetaData18);
        org.junit.Assert.assertTrue("'" + state19 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state19.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean20 + "' != '" + false + "'", boolean20 == false);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(builder26);
    }

    @Test
    public void test08970() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08970");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions2 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException3 = bulkShardRequest0.validate();
        org.elasticsearch.common.unit.TimeValue timeValue4 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.timeout(timeValue4);
        org.elasticsearch.tasks.TaskId taskId6 = bulkShardRequest0.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest7 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long8 = bulkShardRequest7.seqNo();
        long long9 = bulkShardRequest7.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId11 = bulkShardRequest10.getParentTask();
        bulkShardRequest7.setParentTask(taskId11);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest14 = bulkShardRequest7.index("hi!");
        org.elasticsearch.tasks.TaskId taskId15 = null;
        bulkShardRequest14.setParentTask(taskId15);
        org.elasticsearch.common.unit.TimeValue timeValue17 = bulkShardRequest14.timeout();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest0.timeout(timeValue17);
        java.lang.String str19 = bulkShardRequest0.index();
        org.elasticsearch.index.shard.ShardId shardId20 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest21 = bulkShardRequest0.setShardId(shardId20);
        org.elasticsearch.common.io.stream.StreamInput streamInput22 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest21.readFrom(streamInput22);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions2);
        org.junit.Assert.assertNotNull(actionRequestValidationException3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNotNull(taskId6);
        org.junit.Assert.assertTrue("'" + long8 + "' != '" + 0L + "'", long8 == 0L);
        org.junit.Assert.assertTrue("'" + long9 + "' != '" + 0L + "'", long9 == 0L);
        org.junit.Assert.assertNotNull(taskId11);
        org.junit.Assert.assertNotNull(bulkShardRequest14);
        org.junit.Assert.assertNotNull(timeValue17);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNull(str19);
        org.junit.Assert.assertNotNull(bulkShardRequest21);
    }

    @Test
    public void test08971() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08971");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        java.util.Set<java.lang.String> strSet4 = null; // flaky: indexMetaData0.activeAllocationIds((int) (byte) 10);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap5 = indexMetaData0.getMappings();
        int int6 = indexMetaData0.getNumberOfShards();
        long long7 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap8 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData9 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData9.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData9);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData14 = indexMetaData9.mapping("index.creation_date");
        org.apache.lucene.util.Version version15 = indexMetaData9.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff16 = indexMetaData0.diff(indexMetaData9);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters17 = indexMetaData0.getInitialRecoveryFilters();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder18 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params19 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder20 = indexMetaData0.toXContent(xContentBuilder18, params19);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNull(strSet4);
        org.junit.Assert.assertNotNull(strImmutableOpenMap5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 1 + "'", int6 == 1);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + (-1L) + "'", long7 == (-1L));
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap8);
        org.junit.Assert.assertNotNull(indexMetaData9);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNull(mappingMetaData14);
        org.junit.Assert.assertNull(version15);
        org.junit.Assert.assertNotNull(indexMetaDataDiff16);
        org.junit.Assert.assertNull(discoveryNodeFilters17);
    }

    @Test
    public void test08972() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08972");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        bulkShardRequest0.setParentTask(taskId5);
        bulkShardRequest0.primaryTerm((long) 100);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkShardRequest0.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
    }

    @Test
    public void test08973() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08973");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.seqNo();
        long long3 = bulkShardRequest1.primaryTerm();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        org.elasticsearch.tasks.TaskId taskId5 = bulkShardRequest4.getParentTask();
        bulkShardRequest1.setParentTask(taskId5);
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest1.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest1.validate();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel9 = bulkShardRequest1.consistencyLevel();
        org.elasticsearch.tasks.TaskId taskId10 = bulkShardRequest1.getParentTask();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest13 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long14 = bulkShardRequest13.primaryTerm();
        bulkShardRequest13.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue17 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest18 = bulkShardRequest13.timeout(timeValue17);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest19 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest20 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest18);
        org.elasticsearch.tasks.TaskId taskId21 = bulkShardRequest18.getParentTask();
        bulkShardRequest1.setParentTask(taskId21);
        org.elasticsearch.index.shard.ShardId shardId23 = bulkShardRequest1.shardId();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException24 = bulkShardRequest1.validate();
        bulkShardRequest1.primaryTerm(10L);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest27 = new org.elasticsearch.action.bulk.BulkItemRequest(0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest28 = bulkItemRequest27.request();
        org.elasticsearch.action.ActionRequest actionRequest29 = bulkItemRequest27.request();
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 0L + "'", long3 == 0L);
        org.junit.Assert.assertNotNull(taskId5);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
        org.junit.Assert.assertTrue("'" + writeConsistencyLevel9 + "' != '" + org.elasticsearch.action.WriteConsistencyLevel.DEFAULT + "'", writeConsistencyLevel9.equals(org.elasticsearch.action.WriteConsistencyLevel.DEFAULT));
        org.junit.Assert.assertNotNull(taskId10);
        org.junit.Assert.assertTrue("'" + long14 + "' != '" + 0L + "'", long14 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest18);
        org.junit.Assert.assertNotNull(taskId21);
        org.junit.Assert.assertNull(shardId23);
        org.junit.Assert.assertNotNull(actionRequestValidationException24);
        org.junit.Assert.assertNotNull(actionRequest28);
        org.junit.Assert.assertNotNull(actionRequest29);
    }

    @Test
    public void test08974() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08974");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        bulkShardRequest0.primaryTerm((long) '#');
        org.elasticsearch.common.transport.TransportAddress transportAddress8 = bulkShardRequest0.remoteAddress();
        bulkShardRequest0.seqNo(10L);
        org.elasticsearch.common.unit.TimeValue timeValue11 = bulkShardRequest0.timeout();
        org.elasticsearch.common.transport.TransportAddress transportAddress12 = bulkShardRequest0.remoteAddress();
        boolean boolean13 = bulkShardRequest0.getShouldPersistResult();
        java.lang.String str14 = bulkShardRequest0.index();
        org.elasticsearch.action.support.IndicesOptions indicesOptions15 = bulkShardRequest0.indicesOptions();
        org.elasticsearch.common.transport.TransportAddress transportAddress16 = bulkShardRequest0.remoteAddress();
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertNull(transportAddress8);
        org.junit.Assert.assertNotNull(timeValue11);
        org.junit.Assert.assertNull(transportAddress12);
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + false + "'", boolean13 == false);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "index.version.created" + "'", str14, "index.version.created");
        org.junit.Assert.assertNotNull(indicesOptions15);
        org.junit.Assert.assertNull(transportAddress16);
    }

    @Test
    public void test08975() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08975");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData7 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData9 = indexMetaData7.mappingOrDefault("");
        long long10 = indexMetaData7.getCreationDate();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap11 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters12 = indexMetaData7.includeFilters();
        long long13 = indexMetaData7.getVersion();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap14 = indexMetaData7.getCustoms();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff15 = indexMetaData4.diff(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData7);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder16.version(0L);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = builder18.mapping("current version [0] is higher or equal to the one provided [10]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = builder18.build();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNotNull(indexMetaData7);
        org.junit.Assert.assertNull(mappingMetaData9);
        org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L) + "'", long10 == (-1L));
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(discoveryNodeFilters12);
        org.junit.Assert.assertTrue("'" + long13 + "' != '" + 1L + "'", long13 == 1L);
        org.junit.Assert.assertNotNull(strImmutableOpenMap14);
        org.junit.Assert.assertNotNull(indexMetaDataDiff15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(indexMetaData21);
    }

    @Test
    public void test08976() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08976");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.index("current version [-1] is different than the one provided [0]");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = bulkShardRequest0.index("index.version.created");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long7 = bulkShardRequest6.seqNo();
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>> bulkShardRequestTuple8 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.action.bulk.BulkShardRequest, org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>>(bulkShardRequest5, (org.elasticsearch.action.support.replication.ReplicationRequest<org.elasticsearch.action.bulk.BulkShardRequest>) bulkShardRequest6);
        boolean boolean9 = bulkShardRequest6.getShouldPersistResult();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException10 = bulkShardRequest6.validate();
        org.elasticsearch.common.transport.TransportAddress transportAddress11 = null;
        bulkShardRequest6.remoteAddress(transportAddress11);
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException13 = bulkShardRequest6.validate();
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest15 = bulkShardRequest6.index("current version [10] is different than the one provided [0]");
        java.lang.String str16 = bulkShardRequest6.index();
        org.elasticsearch.common.transport.TransportAddress transportAddress17 = bulkShardRequest6.remoteAddress();
        bulkShardRequest6.setParentTask("current version [4] is different than the one provided [2]", (long) 10);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertNotNull(bulkShardRequest5);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 0L + "'", long7 == 0L);
        org.junit.Assert.assertTrue("'" + boolean9 + "' != '" + false + "'", boolean9 == false);
        org.junit.Assert.assertNotNull(actionRequestValidationException10);
        org.junit.Assert.assertNotNull(actionRequestValidationException13);
        org.junit.Assert.assertNotNull(bulkShardRequest15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "current version [10] is different than the one provided [0]" + "'", str16, "current version [10] is different than the one provided [0]");
        org.junit.Assert.assertNull(transportAddress17);
    }

    @Test
    public void test08977() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08977");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom3 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.putCustom("index.blocks.read", custom3);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder5 = builder1.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder5.version(0L);
        int int8 = builder5.numberOfReplicas();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom13 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder11.putCustom("index.blocks.read", custom13);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder11.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder11.creationDate((long) ' ');
        java.lang.String[] strArray36 = new java.lang.String[] { "index.blocks.write", "index.priority", "current version [0] is different than the one provided [1]", "index.blocks.read", "index.priority", "index.blocks.read_only", "", "index.blocks.read_only", "index.version.minimum_compatible", "index.version.minimum_compatible", "index.data_path", "indices:data/write/bulk[s]", "primary_terms", "index.version.created_string", "index.blocks.read", "index.version.minimum_compatible", "index.blocks.read" };
        java.util.LinkedHashSet<java.lang.String> strSet37 = new java.util.LinkedHashSet<java.lang.String>();
        boolean boolean38 = java.util.Collections.addAll((java.util.Collection<java.lang.String>) strSet37, strArray36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder11.putActiveAllocationIds((int) (byte) -1, (java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder40 = builder5.putActiveAllocationIds(35, (java.util.Set<java.lang.String>) strSet37);
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest41 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long42 = bulkShardRequest41.primaryTerm();
        org.elasticsearch.action.WriteConsistencyLevel writeConsistencyLevel43 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest44 = bulkShardRequest41.consistencyLevel(writeConsistencyLevel43);
        org.elasticsearch.common.collect.Tuple<java.util.LinkedHashSet<java.lang.String>, org.elasticsearch.transport.TransportMessage> strSetTuple45 = org.elasticsearch.common.collect.Tuple.tuple(strSet37, (org.elasticsearch.transport.TransportMessage) bulkShardRequest44);
        org.elasticsearch.action.support.IndicesOptions indicesOptions46 = bulkShardRequest44.indicesOptions();
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder5);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertTrue("'" + int8 + "' != '" + (-1) + "'", int8 == (-1));
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(strArray36);
        org.junit.Assert.assertTrue("'" + boolean38 + "' != '" + true + "'", boolean38 == true);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertNotNull(builder40);
        org.junit.Assert.assertTrue("'" + long42 + "' != '" + 0L + "'", long42 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest44);
        org.junit.Assert.assertNotNull(strSetTuple45);
        org.junit.Assert.assertNotNull(indicesOptions46);
    }

    @Test
    public void test08978() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08978");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state5 = indexMetaData0.getState();
        org.elasticsearch.Version version6 = indexMetaData0.getCreationVersion();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder8 = null;
        org.elasticsearch.common.xcontent.ToXContent.Params params9 = org.elasticsearch.common.xcontent.ToXContent.EMPTY_PARAMS;
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        long long11 = indexMetaData10.getCreationDate();
        boolean boolean13 = indexMetaData10.isSameUUID("index.version.created_string");
        java.lang.String str14 = indexMetaData10.getIndexUUID();
        org.elasticsearch.Version version15 = indexMetaData10.getUpgradedVersion();
        boolean boolean17 = indexMetaData10.isSameUUID("current version [32] is different than the one provided [0]");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.xcontent.ToXContent.Params, org.elasticsearch.cluster.metadata.IndexMetaData> paramsTuple18 = org.elasticsearch.common.collect.Tuple.tuple(params9, indexMetaData10);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.common.xcontent.XContentBuilder xContentBuilder19 = indexMetaData0.toXContent(xContentBuilder8, params9);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertTrue("'" + state5 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state5.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(version6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(params9);
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + (-1L) + "'", long11 == (-1L));
        org.junit.Assert.assertTrue("'" + boolean13 + "' != '" + true + "'", boolean13 == true);
        org.junit.Assert.assertEquals("'" + str14 + "' != '" + "_na_" + "'", str14, "_na_");
        org.junit.Assert.assertNotNull(version15);
        org.junit.Assert.assertTrue("'" + boolean17 + "' != '" + true + "'", boolean17 == true);
        org.junit.Assert.assertNotNull(paramsTuple18);
    }

    @Test
    public void test08979() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08979");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.EXTERNAL;
        long long3 = versionType0.updateVersion(1L, (long) (short) 10);
        org.elasticsearch.index.VersionType versionType4 = versionType0.versionTypeForReplicationAndRecovery();
        byte byte5 = versionType0.getValue();
        boolean boolean7 = versionType0.validateVersionForWrites((long) 3);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 10L + "'", long3 == 10L);
        org.junit.Assert.assertNotNull(versionType4);
        org.junit.Assert.assertTrue("'" + byte5 + "' != '" + (byte) 1 + "'", byte5 == (byte) 1);
        org.junit.Assert.assertTrue("'" + boolean7 + "' != '" + true + "'", boolean7 == true);
    }

    @Test
    public void test08980() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08980");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting0 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INITIAL_RECOVERY_GROUP_SETTING;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = null;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple2 = org.elasticsearch.common.collect.Tuple.tuple(settingsSetting0, builder1);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = settingsSettingTuple2.v2();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("hi!");
        int int9 = indexMetaData4.getTotalNumberOfShards();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData11 = indexMetaData4.mapping("index.number_of_shards");
        boolean boolean12 = settingsSettingTuple2.equals((java.lang.Object) "index.number_of_shards");
        org.elasticsearch.common.settings.Setting<java.lang.Boolean> booleanSetting13 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_BLOCKS_WRITE_SETTING;
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>, org.elasticsearch.action.support.ToXContentToBytes> settingsSettingTupleTuple14 = org.elasticsearch.common.collect.Tuple.tuple(settingsSettingTuple2, (org.elasticsearch.action.support.ToXContentToBytes) booleanSetting13);
        java.lang.String str15 = settingsSettingTuple2.toString();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting16 = settingsSettingTuple2.v1();
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting17 = settingsSettingTuple2.v1();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder21 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData18);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap22 = indexMetaData18.getMappings();
        int int23 = indexMetaData18.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters24 = indexMetaData18.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.putCustom("index.blocks.read", custom28);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder26.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder30.version(0L);
        boolean boolean33 = indexMetaData18.equals((java.lang.Object) builder30);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder30.version((long) 'a');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.creationDate((long) 1);
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder> settingsSettingTuple38 = new org.elasticsearch.common.collect.Tuple<org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>, org.elasticsearch.cluster.metadata.IndexMetaData.Builder>(settingsSetting17, builder37);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = settingsSettingTuple38.v2();
        org.junit.Assert.assertNotNull(settingsSetting0);
        org.junit.Assert.assertNotNull(settingsSettingTuple2);
        org.junit.Assert.assertNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 1 + "'", int9 == 1);
        org.junit.Assert.assertNull(mappingMetaData11);
        org.junit.Assert.assertTrue("'" + boolean12 + "' != '" + false + "'", boolean12 == false);
        org.junit.Assert.assertNotNull(booleanSetting13);
        org.junit.Assert.assertNotNull(settingsSettingTupleTuple14);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]" + "'", str15, "Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.junit.Assert.assertNotNull(settingsSetting16);
        org.junit.Assert.assertNotNull(settingsSetting17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(builder21);
        org.junit.Assert.assertNotNull(strImmutableOpenMap22);
        org.junit.Assert.assertTrue("'" + int23 + "' != '" + 0 + "'", int23 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters24);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(builder39);
    }

    @Test
    public void test08981() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08981");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData5 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData7 = indexMetaData5.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state8 = indexMetaData5.getState();
        int int9 = indexMetaData5.getNumberOfReplicas();
        boolean boolean10 = indexMetaData0.equals((java.lang.Object) indexMetaData5);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap11 = indexMetaData0.getAliases();
        org.apache.lucene.util.Version version12 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str15 = builder14.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder14.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder18.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData22 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters23 = indexMetaData22.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet25 = null; // flaky: indexMetaData22.activeAllocationIds((-1));
        java.util.Set<java.lang.String> strSet27 = indexMetaData22.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = builder20.putActiveAllocationIds((int) (byte) 1, strSet27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str32 = builder31.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder31.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder31.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder37 = builder35.removeAlias("primary_terms");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData39 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData39.getInitialRecoveryFilters();
        java.util.Set<java.lang.String> strSet42 = null; // flaky: indexMetaData39.activeAllocationIds((-1));
        java.util.Set<java.lang.String> strSet44 = indexMetaData39.activeAllocationIds(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder37.putActiveAllocationIds((int) (byte) 1, strSet44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder46 = builder20.putActiveAllocationIds((int) (byte) 10, strSet44);
        boolean boolean47 = indexMetaData0.equals((java.lang.Object) strSet44);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.AliasMetaData> strImmutableOpenMap48 = indexMetaData0.getAliases();
        int int49 = indexMetaData0.getTotalNumberOfShards();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(indexMetaData5);
        org.junit.Assert.assertNull(mappingMetaData7);
        org.junit.Assert.assertTrue("'" + state8 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state8.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + int9 + "' != '" + 0 + "'", int9 == 0);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
        org.junit.Assert.assertNotNull(strImmutableOpenMap11);
        org.junit.Assert.assertNull(version12);
        org.junit.Assert.assertEquals("'" + str15 + "' != '" + "index.version.minimum_compatible" + "'", str15, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData22);
        org.junit.Assert.assertNull(discoveryNodeFilters23);
        org.junit.Assert.assertNull(strSet25);
        org.junit.Assert.assertNotNull(strSet27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertEquals("'" + str32 + "' != '" + "index.version.minimum_compatible" + "'", str32, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertNotNull(builder37);
        org.junit.Assert.assertNotNull(indexMetaData39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertNull(strSet42);
        org.junit.Assert.assertNotNull(strSet44);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder46);
        org.junit.Assert.assertTrue("'" + boolean47 + "' != '" + false + "'", boolean47 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap48);
        org.junit.Assert.assertTrue("'" + int49 + "' != '" + 1 + "'", int49 == 1);
    }

    @Test
    public void test08982() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08982");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("current version [12] is higher or equal to the one provided [2]");
    }

    @Test
    public void test08983() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08983");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData6 = indexMetaData4.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData4);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff9 = indexMetaData4.diff(indexMetaData8);
        org.elasticsearch.index.Index index10 = indexMetaData8.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData8.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index13 = indexMetaData8.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder15.settings(settings16);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData18 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData18.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long21 = indexMetaData18.getVersion();
        org.elasticsearch.common.settings.Settings settings22 = indexMetaData18.getSettings();
        org.elasticsearch.common.settings.Settings settings23 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = builder17.settings(settings22);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder28 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData25);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData33 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData35 = indexMetaData33.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state36 = indexMetaData33.getState();
        boolean boolean37 = indexMetaData29.equals((java.lang.Object) state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder38 = builder28.state(state36);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder39 = builder17.state(state36);
        boolean boolean40 = indexMetaData8.equals((java.lang.Object) builder17);
        org.elasticsearch.cluster.metadata.IndexMetaData.State state41 = indexMetaData8.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder42 = builder3.state(state41);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom44 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder45 = builder3.putCustom("index.number_of_shards", custom44);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder47 = builder3.index("current version [101] is different than the one provided [32]");
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNull(mappingMetaData6);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNotNull(indexMetaDataDiff9);
        org.junit.Assert.assertNull(index10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertNull(index13);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNotNull(indexMetaData18);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertTrue("'" + long21 + "' != '" + 1L + "'", long21 == 1L);
        org.junit.Assert.assertNotNull(settings22);
        org.junit.Assert.assertNotNull(settings23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertNotNull(builder28);
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData33);
        org.junit.Assert.assertNull(mappingMetaData35);
        org.junit.Assert.assertTrue("'" + state36 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state36.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean37 + "' != '" + false + "'", boolean37 == false);
        org.junit.Assert.assertNotNull(builder38);
        org.junit.Assert.assertNotNull(builder39);
        org.junit.Assert.assertTrue("'" + boolean40 + "' != '" + false + "'", boolean40 == false);
        org.junit.Assert.assertTrue("'" + state41 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state41.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(builder42);
        org.junit.Assert.assertNotNull(builder45);
        org.junit.Assert.assertNotNull(builder47);
    }

    @Test
    public void test08984() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08984");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData4 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff5 = indexMetaData0.diff(indexMetaData4);
        org.elasticsearch.index.Index index6 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData4.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index9 = indexMetaData4.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings12 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder13 = builder11.settings(settings12);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData14 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData14.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long17 = indexMetaData14.getVersion();
        org.elasticsearch.common.settings.Settings settings18 = indexMetaData14.getSettings();
        org.elasticsearch.common.settings.Settings settings19 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = builder13.settings(settings18);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData21 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData23 = indexMetaData21.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder24 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData25 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData27 = indexMetaData25.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state28 = indexMetaData25.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData29 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData31 = indexMetaData29.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state32 = indexMetaData29.getState();
        boolean boolean33 = indexMetaData25.equals((java.lang.Object) state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder34 = builder24.state(state32);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder35 = builder13.state(state32);
        boolean boolean36 = indexMetaData4.equals((java.lang.Object) builder13);
        org.elasticsearch.Version version37 = indexMetaData4.getUpgradedVersion();
        java.util.Set<java.lang.String> strSet39 = null; // flaky: indexMetaData4.activeAllocationIds((int) '#');
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters40 = indexMetaData4.requireFilters();
        int int41 = indexMetaData4.getNumberOfShards();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput42 = null;
        // The following exception was thrown during execution in test generation
        try {
            indexMetaData4.writeTo(streamOutput42);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(indexMetaData4);
        org.junit.Assert.assertNotNull(indexMetaDataDiff5);
        org.junit.Assert.assertNull(index6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertNull(index9);
        org.junit.Assert.assertNotNull(builder13);
        org.junit.Assert.assertNotNull(indexMetaData14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 1L + "'", long17 == 1L);
        org.junit.Assert.assertNotNull(settings18);
        org.junit.Assert.assertNotNull(settings19);
        org.junit.Assert.assertNotNull(builder20);
        org.junit.Assert.assertNotNull(indexMetaData21);
        org.junit.Assert.assertNull(mappingMetaData23);
        org.junit.Assert.assertNotNull(builder24);
        org.junit.Assert.assertNotNull(indexMetaData25);
        org.junit.Assert.assertNull(mappingMetaData27);
        org.junit.Assert.assertTrue("'" + state28 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state28.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData29);
        org.junit.Assert.assertNull(mappingMetaData31);
        org.junit.Assert.assertTrue("'" + state32 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state32.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertNotNull(builder34);
        org.junit.Assert.assertNotNull(builder35);
        org.junit.Assert.assertTrue("'" + boolean36 + "' != '" + false + "'", boolean36 == false);
        org.junit.Assert.assertNotNull(version37);
        org.junit.Assert.assertNull(strSet39);
        org.junit.Assert.assertNull(discoveryNodeFilters40);
        org.junit.Assert.assertTrue("'" + int41 + "' != '" + 1 + "'", int41 == 1);
    }

    @Test
    public void test08985() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08985");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long4 = bulkShardRequest3.primaryTerm();
        bulkShardRequest3.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue7 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest8 = bulkShardRequest3.timeout(timeValue7);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest9 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest10 = new org.elasticsearch.action.bulk.BulkItemRequest((int) '#', (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        long long11 = bulkShardRequest8.seqNo();
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest12 = new org.elasticsearch.action.bulk.BulkItemRequest(10, (org.elasticsearch.action.ActionRequest) bulkShardRequest8);
        org.elasticsearch.common.io.stream.StreamOutput streamOutput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest12.writeTo(streamOutput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest8);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
    }

    @Test
    public void test08986() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08986");
        org.elasticsearch.index.VersionType versionType0 = org.elasticsearch.index.VersionType.INTERNAL;
        boolean boolean2 = versionType0.validateVersionForReads((long) 1);
        boolean boolean5 = versionType0.isVersionConflictForReads((long) (byte) 0, (long) '#');
        java.lang.String str8 = versionType0.explainConflictForReads(0L, (long) (byte) 1);
        org.elasticsearch.index.VersionType versionType9 = versionType0.versionTypeForReplicationAndRecovery();
        boolean boolean11 = versionType0.validateVersionForReads((long) '#');
        org.elasticsearch.index.VersionType versionType12 = versionType0.versionTypeForReplicationAndRecovery();
        long long15 = versionType12.updateVersion(2L, 101L);
        boolean boolean19 = versionType12.isVersionConflictForWrites((long) 2, 34L, false);
        org.junit.Assert.assertNotNull(versionType0);
        org.junit.Assert.assertTrue("'" + boolean2 + "' != '" + true + "'", boolean2 == true);
        org.junit.Assert.assertTrue("'" + boolean5 + "' != '" + true + "'", boolean5 == true);
        org.junit.Assert.assertEquals("'" + str8 + "' != '" + "current version [0] is different than the one provided [1]" + "'", str8, "current version [0] is different than the one provided [1]");
        org.junit.Assert.assertNotNull(versionType9);
        org.junit.Assert.assertTrue("'" + boolean11 + "' != '" + true + "'", boolean11 == true);
        org.junit.Assert.assertNotNull(versionType12);
        org.junit.Assert.assertTrue("'" + long15 + "' != '" + 101L + "'", long15 == 101L);
        org.junit.Assert.assertTrue("'" + boolean19 + "' != '" + false + "'", boolean19 == false);
    }

    @Test
    public void test08987() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08987");
        org.elasticsearch.index.VersionType versionType1 = org.elasticsearch.index.VersionType.EXTERNAL_GTE;
        boolean boolean4 = versionType1.isVersionConflictForReads((long) 35, (-1L));
        long long7 = versionType1.updateVersion((long) 97, (long) 1);
        boolean boolean10 = versionType1.isVersionConflictForReads((long) 'a', 35L);
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.index.VersionType versionType11 = org.elasticsearch.index.VersionType.fromString("current version [35] is different than the one provided [101]", versionType1);
            org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException; message: No version type match [current version [35] is different than the one provided [101]]");
        } catch (java.lang.IllegalArgumentException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(versionType1);
        org.junit.Assert.assertTrue("'" + boolean4 + "' != '" + true + "'", boolean4 == true);
        org.junit.Assert.assertTrue("'" + long7 + "' != '" + 1L + "'", long7 == 1L);
        org.junit.Assert.assertTrue("'" + boolean10 + "' != '" + true + "'", boolean10 == true);
    }

    @Test
    public void test08988() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08988");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest1 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long2 = bulkShardRequest1.primaryTerm();
        bulkShardRequest1.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue5 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest6 = bulkShardRequest1.timeout(timeValue5);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest7 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 0, (org.elasticsearch.action.ActionRequest) bulkShardRequest1);
        org.elasticsearch.action.ActionRequest actionRequest8 = bulkItemRequest7.request();
        org.elasticsearch.action.ActionRequest actionRequest9 = bulkItemRequest7.request();
        org.elasticsearch.common.io.stream.StreamOutput streamOutput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            bulkItemRequest7.writeTo(streamOutput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertTrue("'" + long2 + "' != '" + 0L + "'", long2 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest6);
        org.junit.Assert.assertNotNull(actionRequest8);
        org.junit.Assert.assertNotNull(actionRequest9);
    }

    @Test
    public void test08989() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08989");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest4 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long5 = bulkShardRequest4.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions6 = bulkShardRequest4.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException7 = bulkShardRequest4.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure9 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "primary_terms", (java.lang.Throwable) actionRequestValidationException7, "index.priority");
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure11 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "primary_terms", (java.lang.Throwable) actionRequestValidationException7, "index.version.created");
        java.lang.Throwable throwable12 = shardFailure11.cause;
        java.lang.String str13 = shardFailure11.indexUUID;
        java.lang.Throwable throwable14 = shardFailure11.cause;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting15 = shardFailure11.routing;
        java.lang.String str16 = shardFailure11.reason;
        org.junit.Assert.assertTrue("'" + long5 + "' != '" + 0L + "'", long5 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions6);
        org.junit.Assert.assertNotNull(actionRequestValidationException7);
        org.junit.Assert.assertNotNull(throwable12);
        org.junit.Assert.assertEquals(throwable12.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable12.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable12.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str13 + "' != '" + "index.version.created" + "'", str13, "index.version.created");
        org.junit.Assert.assertNotNull(throwable14);
        org.junit.Assert.assertEquals(throwable14.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable14.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable14.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertNull(shardRouting15);
        org.junit.Assert.assertEquals("'" + str16 + "' != '" + "primary_terms" + "'", str16, "primary_terms");
    }

    @Test
    public void test08990() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08990");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters6 = indexMetaData0.requireFilters();
        org.elasticsearch.cluster.metadata.IndexMetaData.State state7 = indexMetaData0.getState();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap8 = indexMetaData0.getCustoms();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder9 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        long long11 = indexMetaData0.primaryTerm(0);
        long long12 = indexMetaData0.getCreationDate();
        org.elasticsearch.common.io.stream.StreamInput streamInput13 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff14 = indexMetaData0.readDiffFrom(streamInput13);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters6);
        org.junit.Assert.assertTrue("'" + state7 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state7.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(strImmutableOpenMap8);
        org.junit.Assert.assertNotNull(builder9);
        org.junit.Assert.assertTrue("'" + long11 + "' != '" + 0L + "'", long11 == 0L);
        org.junit.Assert.assertTrue("'" + long12 + "' != '" + (-1L) + "'", long12 == (-1L));
    }

    @Test
    public void test08991() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08991");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom6 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putCustom("index.version.upgraded_string", custom6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom9 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder10 = builder4.putCustom("current version [1] is higher than the one provided [-1]", custom9);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom14 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder15 = builder12.putCustom("index.blocks.read", custom14);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder16 = builder12.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = builder12.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder20 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("");
        org.elasticsearch.common.settings.Settings settings21 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = builder20.settings(settings21);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData23 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData25 = indexMetaData23.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long26 = indexMetaData23.getVersion();
        org.elasticsearch.common.settings.Settings settings27 = indexMetaData23.getSettings();
        org.elasticsearch.common.settings.Settings settings28 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder22.settings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder30 = builder12.settings(settings27);
        org.elasticsearch.common.settings.Settings settings31 = org.elasticsearch.cluster.metadata.IndexMetaData.addHumanReadableSettings(settings27);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder32 = builder10.settings(settings31);
        boolean boolean33 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        boolean boolean34 = org.elasticsearch.cluster.metadata.IndexMetaData.isOnSharedFilesystem(settings31);
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder7);
        org.junit.Assert.assertNotNull(builder10);
        org.junit.Assert.assertNotNull(builder15);
        org.junit.Assert.assertNotNull(builder16);
        org.junit.Assert.assertNotNull(builder18);
        org.junit.Assert.assertNotNull(builder22);
        org.junit.Assert.assertNotNull(indexMetaData23);
        org.junit.Assert.assertNull(mappingMetaData25);
        org.junit.Assert.assertTrue("'" + long26 + "' != '" + 1L + "'", long26 == 1L);
        org.junit.Assert.assertNotNull(settings27);
        org.junit.Assert.assertNotNull(settings28);
        org.junit.Assert.assertNotNull(builder29);
        org.junit.Assert.assertNotNull(builder30);
        org.junit.Assert.assertNotNull(settings31);
        org.junit.Assert.assertNotNull(builder32);
        org.junit.Assert.assertTrue("'" + boolean33 + "' != '" + false + "'", boolean33 == false);
        org.junit.Assert.assertTrue("'" + boolean34 + "' != '" + false + "'", boolean34 == false);
    }

    @Test
    public void test08992() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08992");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = org.elasticsearch.cluster.metadata.IndexMetaData.builder("current version [35] is different than the one provided [32]");
        int int2 = builder1.numberOfReplicas();
        org.junit.Assert.assertNotNull(builder1);
        org.junit.Assert.assertTrue("'" + int2 + "' != '" + (-1) + "'", int2 == (-1));
    }

    @Test
    public void test08993() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08993");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.excludeFilters();
        org.elasticsearch.common.collect.ImmutableOpenIntMap<java.util.Set<java.lang.String>> strSetImmutableOpenIntMap5 = indexMetaData0.getActiveAllocationIds();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData6 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData8 = indexMetaData6.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state9 = indexMetaData6.getState();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData10 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData12 = indexMetaData10.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state13 = indexMetaData10.getState();
        boolean boolean14 = indexMetaData6.equals((java.lang.Object) state13);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.IndexMetaData.Custom> strImmutableOpenMap15 = indexMetaData6.getCustoms();
        int int16 = indexMetaData6.getTotalNumberOfShards();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff17 = indexMetaData0.diff(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder18 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData20 = indexMetaData6.mapping("current version [0] is different than the one provided [1]");
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap21 = indexMetaData6.getMappings();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder22 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder(indexMetaData6);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder23 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData6);
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(strSetImmutableOpenIntMap5);
        org.junit.Assert.assertNotNull(indexMetaData6);
        org.junit.Assert.assertNull(mappingMetaData8);
        org.junit.Assert.assertTrue("'" + state9 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state9.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertNotNull(indexMetaData10);
        org.junit.Assert.assertNull(mappingMetaData12);
        org.junit.Assert.assertTrue("'" + state13 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state13.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + boolean14 + "' != '" + false + "'", boolean14 == false);
        org.junit.Assert.assertNotNull(strImmutableOpenMap15);
        org.junit.Assert.assertTrue("'" + int16 + "' != '" + 1 + "'", int16 == 1);
        org.junit.Assert.assertNotNull(indexMetaDataDiff17);
        org.junit.Assert.assertNull(mappingMetaData20);
        org.junit.Assert.assertNotNull(strImmutableOpenMap21);
        org.junit.Assert.assertNotNull(builder23);
    }

    @Test
    public void test08994() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08994");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        java.lang.String str4 = indexMetaData0.getIndexUUID();
        int int5 = indexMetaData0.getTotalNumberOfShards();
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap6 = indexMetaData0.getMappings();
        org.elasticsearch.index.Index index7 = indexMetaData0.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData8 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData10 = indexMetaData8.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData8);
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData12 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff13 = indexMetaData8.diff(indexMetaData12);
        org.elasticsearch.index.Index index14 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData16 = indexMetaData12.mapping("Tuple [v1={\n  \"key\" : \"index.routing.allocation.initial_recovery.\",\n  \"properties\" : [ ],\n  \"is_group_setting\" : true,\n  \"default\" : \"\"\n}, v2=null]");
        org.elasticsearch.index.Index index17 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.index.Index index18 = indexMetaData12.getMergeSourceIndex();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters19 = indexMetaData12.includeFilters();
        long long20 = indexMetaData12.getCreationDate();
        org.elasticsearch.cluster.Diff<org.elasticsearch.cluster.metadata.IndexMetaData> indexMetaDataDiff21 = indexMetaData0.diff(indexMetaData12);
        java.lang.String str22 = indexMetaData0.getIndexUUID();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertEquals("'" + str4 + "' != '" + "_na_" + "'", str4, "_na_");
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
        org.junit.Assert.assertNotNull(strImmutableOpenMap6);
        org.junit.Assert.assertNull(index7);
        org.junit.Assert.assertNotNull(indexMetaData8);
        org.junit.Assert.assertNull(mappingMetaData10);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(indexMetaData12);
        org.junit.Assert.assertNotNull(indexMetaDataDiff13);
        org.junit.Assert.assertNull(index14);
        org.junit.Assert.assertNull(mappingMetaData16);
        org.junit.Assert.assertNull(index17);
        org.junit.Assert.assertNull(index18);
        org.junit.Assert.assertNull(discoveryNodeFilters19);
        org.junit.Assert.assertTrue("'" + long20 + "' != '" + (-1L) + "'", long20 == (-1L));
        org.junit.Assert.assertNotNull(indexMetaDataDiff21);
        org.junit.Assert.assertEquals("'" + str22 + "' != '" + "_na_" + "'", str22, "_na_");
    }

    @Test
    public void test08995() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08995");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder3 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        org.elasticsearch.common.collect.ImmutableOpenMap<java.lang.String, org.elasticsearch.cluster.metadata.MappingMetaData> strImmutableOpenMap4 = indexMetaData0.getMappings();
        int int5 = indexMetaData0.getNumberOfReplicas();
        org.apache.lucene.util.Version version6 = indexMetaData0.getMinimumCompatibleVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.getInitialRecoveryFilters();
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertNotNull(builder3);
        org.junit.Assert.assertNotNull(strImmutableOpenMap4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 0 + "'", int5 == 0);
        org.junit.Assert.assertNull(version6);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
    }

    @Test
    public void test08996() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08996");
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder1 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.minimum_compatible");
        java.lang.String str2 = builder1.index();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = builder1.numberOfReplicas(0);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder6 = builder4.numberOfShards((int) (byte) 10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder8 = new org.elasticsearch.cluster.metadata.IndexMetaData.Builder("index.version.upgraded_string");
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom10 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder11 = builder8.putCustom("index.blocks.read", custom10);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder12 = builder8.removeAllAliases();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder14 = builder8.creationDate((long) ' ');
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom16 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder17 = builder14.putCustom("index.auto_expand_replicas", custom16);
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData19 = builder17.mapping("current version [10] is different than the one provided [32]");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData20 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData22 = indexMetaData20.mappingOrDefault("");
        org.elasticsearch.cluster.metadata.IndexMetaData.State state23 = indexMetaData20.getState();
        byte byte24 = state23.id();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder25 = builder17.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder26 = builder6.state(state23);
        org.elasticsearch.cluster.metadata.IndexMetaData.Custom custom28 = null;
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder29 = builder26.putCustom("index.number_of_replicas", custom28);
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData30 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder31 = builder29.putAlias(aliasMetaData30);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertEquals("'" + str2 + "' != '" + "index.version.minimum_compatible" + "'", str2, "index.version.minimum_compatible");
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertNotNull(builder6);
        org.junit.Assert.assertNotNull(builder11);
        org.junit.Assert.assertNotNull(builder12);
        org.junit.Assert.assertNotNull(builder14);
        org.junit.Assert.assertNotNull(builder17);
        org.junit.Assert.assertNull(mappingMetaData19);
        org.junit.Assert.assertNotNull(indexMetaData20);
        org.junit.Assert.assertNull(mappingMetaData22);
        org.junit.Assert.assertTrue("'" + state23 + "' != '" + org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN + "'", state23.equals(org.elasticsearch.cluster.metadata.IndexMetaData.State.OPEN));
        org.junit.Assert.assertTrue("'" + byte24 + "' != '" + (byte) 0 + "'", byte24 == (byte) 0);
        org.junit.Assert.assertNotNull(builder25);
        org.junit.Assert.assertNotNull(builder26);
        org.junit.Assert.assertNotNull(builder29);
    }

    @Test
    public void test08997() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08997");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("");
        long long3 = indexMetaData0.getCreationDate();
        org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder4 = org.elasticsearch.cluster.metadata.IndexMetaData.builder(indexMetaData0);
        int int5 = builder4.numberOfShards();
        org.elasticsearch.cluster.metadata.AliasMetaData aliasMetaData6 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData.Builder builder7 = builder4.putAlias(aliasMetaData6);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + (-1L) + "'", long3 == (-1L));
        org.junit.Assert.assertNotNull(builder4);
        org.junit.Assert.assertTrue("'" + int5 + "' != '" + 1 + "'", int5 == 1);
    }

    @Test
    public void test08998() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08998");
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest0 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long1 = bulkShardRequest0.seqNo();
        org.elasticsearch.index.shard.ShardId shardId2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest3 = bulkShardRequest0.setShardId(shardId2);
        long long4 = bulkShardRequest3.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions5 = bulkShardRequest3.indicesOptions();
        java.lang.String str6 = bulkShardRequest3.index();
        org.elasticsearch.common.unit.TimeValue timeValue7 = bulkShardRequest3.timeout();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException8 = bulkShardRequest3.validate();
        bulkShardRequest3.seqNo(101L);
        org.junit.Assert.assertTrue("'" + long1 + "' != '" + 0L + "'", long1 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest3);
        org.junit.Assert.assertTrue("'" + long4 + "' != '" + 0L + "'", long4 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions5);
        org.junit.Assert.assertNull(str6);
        org.junit.Assert.assertNotNull(timeValue7);
        org.junit.Assert.assertNotNull(actionRequestValidationException8);
    }

    @Test
    public void test08999() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test08999");
        org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData0 = org.elasticsearch.cluster.metadata.IndexMetaData.PROTO;
        org.elasticsearch.cluster.metadata.MappingMetaData mappingMetaData2 = indexMetaData0.mappingOrDefault("index.shared_filesystem.recover_on_any_node");
        long long3 = indexMetaData0.getVersion();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters4 = indexMetaData0.requireFilters();
        org.elasticsearch.Version version5 = indexMetaData0.getCreationVersion();
        int int6 = indexMetaData0.getNumberOfReplicas();
        org.elasticsearch.cluster.node.DiscoveryNodeFilters discoveryNodeFilters7 = indexMetaData0.excludeFilters();
        java.util.Set<java.lang.String> strSet9 = null; // flaky: indexMetaData0.activeAllocationIds((int) 'a');
        org.elasticsearch.common.io.stream.StreamInput streamInput10 = null;
        // The following exception was thrown during execution in test generation
        try {
            org.elasticsearch.cluster.metadata.IndexMetaData indexMetaData11 = indexMetaData0.readFrom(streamInput10);
            org.junit.Assert.fail("Expected exception of type java.lang.NullPointerException; message: null");
        } catch (java.lang.NullPointerException e) {
        // Expected exception.
        }
        org.junit.Assert.assertNotNull(indexMetaData0);
        org.junit.Assert.assertNull(mappingMetaData2);
        org.junit.Assert.assertTrue("'" + long3 + "' != '" + 1L + "'", long3 == 1L);
        org.junit.Assert.assertNull(discoveryNodeFilters4);
        org.junit.Assert.assertNotNull(version5);
        org.junit.Assert.assertTrue("'" + int6 + "' != '" + 0 + "'", int6 == 0);
        org.junit.Assert.assertNull(discoveryNodeFilters7);
        org.junit.Assert.assertNull(strSet9);
    }

    @Test
    public void test09000() throws Throwable {
        if (debug)
            System.out.format("%n%s%n", "RegressionTest17.test09000");
        org.elasticsearch.cluster.routing.ShardRouting shardRouting0 = null;
        org.elasticsearch.cluster.routing.ShardRouting shardRouting2 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest5 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long6 = bulkShardRequest5.primaryTerm();
        bulkShardRequest5.primaryTerm((long) 10);
        org.elasticsearch.common.unit.TimeValue timeValue9 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest10 = bulkShardRequest5.timeout(timeValue9);
        org.elasticsearch.action.bulk.BulkItemRequest bulkItemRequest11 = new org.elasticsearch.action.bulk.BulkItemRequest((int) (byte) 1, (org.elasticsearch.action.ActionRequest) bulkShardRequest10);
        org.elasticsearch.action.ActionRequest actionRequest12 = bulkItemRequest11.request();
        org.elasticsearch.tasks.TaskId taskId13 = actionRequest12.getParentTask();
        org.elasticsearch.cluster.routing.ShardRouting shardRouting14 = null;
        org.elasticsearch.action.bulk.BulkShardRequest bulkShardRequest16 = new org.elasticsearch.action.bulk.BulkShardRequest();
        long long17 = bulkShardRequest16.seqNo();
        org.elasticsearch.action.support.IndicesOptions indicesOptions18 = bulkShardRequest16.indicesOptions();
        org.elasticsearch.action.ActionRequestValidationException actionRequestValidationException19 = bulkShardRequest16.validate();
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure21 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting14, "primary_terms", (java.lang.Throwable) actionRequestValidationException19, "index.priority");
        org.elasticsearch.common.collect.Tuple<org.elasticsearch.tasks.TaskId, java.lang.IllegalArgumentException> taskIdTuple22 = org.elasticsearch.common.collect.Tuple.tuple(taskId13, (java.lang.IllegalArgumentException) actionRequestValidationException19);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure24 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting2, "current version [101] is different than the one provided [0]", (java.lang.Throwable) actionRequestValidationException19, "index.creation_date_string");
        org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings> settingsSetting25 = org.elasticsearch.cluster.metadata.IndexMetaData.INDEX_ROUTING_INCLUDE_GROUP_SETTING;
        org.elasticsearch.common.collect.Tuple<java.lang.IllegalArgumentException, org.elasticsearch.common.settings.Setting<org.elasticsearch.common.settings.Settings>> illegalArgumentExceptionTuple26 = org.elasticsearch.common.collect.Tuple.tuple((java.lang.IllegalArgumentException) actionRequestValidationException19, settingsSetting25);
        org.elasticsearch.index.shard.IndexShard.ShardFailure shardFailure28 = new org.elasticsearch.index.shard.IndexShard.ShardFailure(shardRouting0, "index.version.created_string", (java.lang.Throwable) actionRequestValidationException19, "current version [101] is different than the one provided [32]");
        java.lang.Throwable throwable29 = shardFailure28.cause;
        java.lang.String str30 = shardFailure28.reason;
        org.junit.Assert.assertTrue("'" + long6 + "' != '" + 0L + "'", long6 == 0L);
        org.junit.Assert.assertNotNull(bulkShardRequest10);
        org.junit.Assert.assertNotNull(actionRequest12);
        org.junit.Assert.assertNotNull(taskId13);
        org.junit.Assert.assertTrue("'" + long17 + "' != '" + 0L + "'", long17 == 0L);
        org.junit.Assert.assertNotNull(indicesOptions18);
        org.junit.Assert.assertNotNull(actionRequestValidationException19);
        org.junit.Assert.assertNotNull(taskIdTuple22);
        org.junit.Assert.assertNotNull(settingsSetting25);
        org.junit.Assert.assertNotNull(illegalArgumentExceptionTuple26);
        org.junit.Assert.assertNotNull(throwable29);
        org.junit.Assert.assertEquals(throwable29.getLocalizedMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable29.getMessage(), "Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals(throwable29.toString(), "org.elasticsearch.action.ActionRequestValidationException: Validation Failed: 1: index is missing;");
        org.junit.Assert.assertEquals("'" + str30 + "' != '" + "index.version.created_string" + "'", str30, "index.version.created_string");
    }
}
