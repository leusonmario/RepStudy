/*
 * This file was automatically generated by EvoSuite
 * Fri Nov 05 14:26:23 GMT 2021
 */

package org.elasticsearch.action.bulk;

import org.junit.Test;
import static org.junit.Assert.*;
import java.util.HashMap;
import org.elasticsearch.action.bulk.TransportShardBulkAction;
import org.elasticsearch.action.delete.DeleteRequest;
import org.elasticsearch.action.fieldstats.FieldStatsRequest;
import org.elasticsearch.action.index.IndexRequest;
import org.elasticsearch.action.update.UpdateHelper;
import org.elasticsearch.action.update.UpdateResponse;
import org.elasticsearch.common.xcontent.XContentType;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TransportShardBulkAction_ESTest extends TransportShardBulkAction_ESTest_scaffolding {

  @Test(timeout = 11000)
  public void test0()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.success();
      assertTrue(boolean0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      boolean boolean1 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
  }

  @Test(timeout = 11000)
  public void test1()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = null;
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.success();
      assertFalse(boolean0);
      
      IndexRequest indexRequest0 = transportShardBulkAction_UpdateResult0.request();
      assertNull(indexRequest0);
      
      boolean boolean1 = transportShardBulkAction_UpdateResult0.success();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
  }

  @Test(timeout = 11000)
  public void test2()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean0);
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
  }

  @Test(timeout = 11000)
  public void test3()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
      
      DeleteRequest deleteRequest0 = transportShardBulkAction_UpdateResult0.request();
      assertNull(deleteRequest0);
      assertNull(updateResponse0.getType());
      assertEquals(0L, updateResponse0.getVersion());
      assertFalse(updateResponse0.isCreated());
      assertNull(updateResponse0.getId());
      assertEquals(0L, updateResponse0.getSeqNo());
  }

  @Test(timeout = 11000)
  public void test4()  throws Throwable  {
      UpdateHelper.Result updateHelper_Result0 = null;
      UpdateResponse updateResponse0 = null;
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      
      boolean boolean0 = transportShardBulkAction_UpdateResult0.failure();
      assertFalse(boolean0);
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult1 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult1);
      assertFalse(transportShardBulkAction_UpdateResult1.equals((Object)transportShardBulkAction_UpdateResult0));
      
      boolean boolean1 = transportShardBulkAction_UpdateResult0.failure();
      assertNotSame(transportShardBulkAction_UpdateResult0, transportShardBulkAction_UpdateResult1);
      assertFalse(boolean1);
      assertFalse(transportShardBulkAction_UpdateResult0.equals((Object)transportShardBulkAction_UpdateResult1));
      assertTrue(boolean1 == boolean0);
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult2 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult2);
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult1));
      
      boolean boolean2 = transportShardBulkAction_UpdateResult2.success();
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult0);
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult1);
      assertFalse(boolean2);
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult1));
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean boolean3 = transportShardBulkAction_UpdateResult1.success();
      assertNotSame(transportShardBulkAction_UpdateResult1, transportShardBulkAction_UpdateResult0);
      assertNotSame(transportShardBulkAction_UpdateResult1, transportShardBulkAction_UpdateResult2);
      assertFalse(boolean3);
      assertFalse(transportShardBulkAction_UpdateResult1.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult1.equals((Object)transportShardBulkAction_UpdateResult2));
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      
      boolean boolean4 = transportShardBulkAction_UpdateResult2.failure();
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult0);
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult1);
      assertFalse(boolean4);
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult1));
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult3 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult3);
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult1));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult0));
      
      boolean boolean5 = transportShardBulkAction_UpdateResult2.failure();
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult3);
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult0);
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult1);
      assertFalse(boolean5);
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult3));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult1));
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean4);
      
      boolean boolean6 = transportShardBulkAction_UpdateResult3.success();
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult2);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult1);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult0);
      assertFalse(boolean6);
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult1));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult0));
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean5);
      
      DeleteRequest deleteRequest0 = transportShardBulkAction_UpdateResult3.request();
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult2);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult1);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult0);
      assertNull(deleteRequest0);
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult1));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult0));
      
      boolean boolean7 = transportShardBulkAction_UpdateResult2.failure();
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult3);
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult0);
      assertNotSame(transportShardBulkAction_UpdateResult2, transportShardBulkAction_UpdateResult1);
      assertFalse(boolean7);
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult3));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult0));
      assertFalse(transportShardBulkAction_UpdateResult2.equals((Object)transportShardBulkAction_UpdateResult1));
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean3);
      
      boolean boolean8 = transportShardBulkAction_UpdateResult3.failure();
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult2);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult1);
      assertNotSame(transportShardBulkAction_UpdateResult3, transportShardBulkAction_UpdateResult0);
      assertFalse(boolean8);
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult2));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult1));
      assertFalse(transportShardBulkAction_UpdateResult3.equals((Object)transportShardBulkAction_UpdateResult0));
      assertTrue(boolean8 == boolean6);
      assertTrue(boolean8 == boolean0);
      assertTrue(boolean8 == boolean1);
      assertTrue(boolean8 == boolean7);
      assertTrue(boolean8 == boolean5);
      assertTrue(boolean8 == boolean2);
      assertTrue(boolean8 == boolean3);
      assertTrue(boolean8 == boolean4);
  }

  @Test(timeout = 11000)
  public void test5()  throws Throwable  {
      FieldStatsRequest fieldStatsRequest0 = new FieldStatsRequest();
      assertNotNull(fieldStatsRequest0);
      assertEquals("cluster", fieldStatsRequest0.level());
      assertFalse(fieldStatsRequest0.getShouldPersistResult());
      
      UpdateHelper.Operation updateHelper_Operation0 = UpdateHelper.Operation.DELETE;
      HashMap<String, Object> hashMap0 = new HashMap<String, Object>();
      assertNotNull(hashMap0);
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      
      XContentType xContentType0 = XContentType.CBOR;
      UpdateHelper.Result updateHelper_Result0 = new UpdateHelper.Result(fieldStatsRequest0, updateHelper_Operation0, hashMap0, xContentType0);
      assertNotNull(updateHelper_Result0);
      assertEquals("cluster", fieldStatsRequest0.level());
      assertFalse(fieldStatsRequest0.getShouldPersistResult());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(UpdateHelper.Operation.DELETE, updateHelper_Result0.operation());
      assertEquals(XContentType.CBOR, updateHelper_Result0.updateSourceContentType());
      
      UpdateResponse updateResponse0 = new UpdateResponse();
      assertNotNull(updateResponse0);
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
      
      TransportShardBulkAction.UpdateResult transportShardBulkAction_UpdateResult0 = new TransportShardBulkAction.UpdateResult(updateHelper_Result0, updateResponse0);
      assertNotNull(transportShardBulkAction_UpdateResult0);
      assertEquals("cluster", fieldStatsRequest0.level());
      assertFalse(fieldStatsRequest0.getShouldPersistResult());
      assertTrue(hashMap0.isEmpty());
      assertEquals(0, hashMap0.size());
      assertEquals(UpdateHelper.Operation.DELETE, updateHelper_Result0.operation());
      assertEquals(XContentType.CBOR, updateHelper_Result0.updateSourceContentType());
      assertEquals(0L, updateResponse0.getSeqNo());
      assertNull(updateResponse0.getType());
      assertNull(updateResponse0.getId());
      assertFalse(updateResponse0.isCreated());
      assertEquals(0L, updateResponse0.getVersion());
  }
}
